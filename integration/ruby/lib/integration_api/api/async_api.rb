=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.2.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.18

=end

require 'uri'

module IntegrationApi
  class AsyncApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create async transaction for GET endpoints for bulk data
    # Create async transaction for GET endpoints for bulk data
    # @param id UUID id
    # @param integration_type String integration_type
    # @param service String service
    # @param [Hash] opts the optional parameters
    # @return [AsyncTransaction]
    def get_async_data(id, integration_type, service, opts = {})
      data, _status_code, _headers = get_async_data_with_http_info(id, integration_type, service, opts)
      data
    end

    # Create async transaction for GET endpoints for bulk data
    # Create async transaction for GET endpoints for bulk data
    # @param id UUID id
    # @param integration_type String integration_type
    # @param service String service
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncTransaction, Fixnum, Hash)>] AsyncTransaction data, response status code and response headers
    def get_async_data_with_http_info(id, integration_type, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AsyncApi.get_async_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AsyncApi.get_async_data"
      end
      # verify the required parameter 'integration_type' is set
      if @api_client.config.client_side_validation && integration_type.nil?
        fail ArgumentError, "Missing the required parameter 'integration_type' when calling AsyncApi.get_async_data"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling AsyncApi.get_async_data"
      end
      # resource path
      local_var_path = '/async/{integration_type}/{service}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'integration_type' + '}', integration_type.to_s).sub('{' + 'service' + '}', service.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsyncApi#get_async_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create async transaction for GET endpoints for bulk data
    # Create async transaction for GET endpoints for bulk data
    # @param id UUID id
    # @param integration_type String integration_type
    # @param service String service
    # @param [Hash] opts the optional parameters
    # @return [AsyncTransaction]
    def get_async_data1(id, integration_type, service, opts = {})
      data, _status_code, _headers = get_async_data1_with_http_info(id, integration_type, service, opts)
      data
    end

    # Create async transaction for GET endpoints for bulk data
    # Create async transaction for GET endpoints for bulk data
    # @param id UUID id
    # @param integration_type String integration_type
    # @param service String service
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncTransaction, Fixnum, Hash)>] AsyncTransaction data, response status code and response headers
    def get_async_data1_with_http_info(id, integration_type, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AsyncApi.get_async_data1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AsyncApi.get_async_data1"
      end
      # verify the required parameter 'integration_type' is set
      if @api_client.config.client_side_validation && integration_type.nil?
        fail ArgumentError, "Missing the required parameter 'integration_type' when calling AsyncApi.get_async_data1"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling AsyncApi.get_async_data1"
      end
      # resource path
      local_var_path = '/async/{integration_type}/{service}/{id}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'integration_type' + '}', integration_type.to_s).sub('{' + 'service' + '}', service.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsyncApi#get_async_data1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create async transaction for POST endpoints for bulk data
    # Create async transaction for POST endpoints for bulk data
    # @param data data
    # @param integration_type String integration_type
    # @param service String service
    # @param [Hash] opts the optional parameters
    # @return [AsyncTransaction]
    def get_async_data2(data, integration_type, service, opts = {})
      data, _status_code, _headers = get_async_data2_with_http_info(data, integration_type, service, opts)
      data
    end

    # Create async transaction for POST endpoints for bulk data
    # Create async transaction for POST endpoints for bulk data
    # @param data data
    # @param integration_type String integration_type
    # @param service String service
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncTransaction, Fixnum, Hash)>] AsyncTransaction data, response status code and response headers
    def get_async_data2_with_http_info(data, integration_type, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AsyncApi.get_async_data2 ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling AsyncApi.get_async_data2"
      end
      # verify the required parameter 'integration_type' is set
      if @api_client.config.client_side_validation && integration_type.nil?
        fail ArgumentError, "Missing the required parameter 'integration_type' when calling AsyncApi.get_async_data2"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling AsyncApi.get_async_data2"
      end
      # resource path
      local_var_path = '/async/{integration_type}/{service}'.sub('{' + 'integration_type' + '}', integration_type.to_s).sub('{' + 'service' + '}', service.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsyncApi#get_async_data2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Status of async transaction created through GET/POST endpoints
    # Get Status of async transaction created through GET/POST endpoints
    # @param id UUID Async Transaction Id
    # @param [Hash] opts the optional parameters
    # @return [AsyncTransactionVO]
    def get_async_status(id, opts = {})
      data, _status_code, _headers = get_async_status_with_http_info(id, opts)
      data
    end

    # Get Status of async transaction created through GET/POST endpoints
    # Get Status of async transaction created through GET/POST endpoints
    # @param id UUID Async Transaction Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncTransactionVO, Fixnum, Hash)>] AsyncTransactionVO data, response status code and response headers
    def get_async_status_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AsyncApi.get_async_status ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AsyncApi.get_async_status"
      end
      # resource path
      local_var_path = '/async/status/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncTransactionVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsyncApi#get_async_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
