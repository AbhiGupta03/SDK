=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.3.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module IntegrationApi
  class AggregationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create mapping between client,vendor,tenant
    # Create mapping between client,vendor,tenant
    # @param aggregation_request_object aggregationRequestObject
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountsResponseVO]
    def create_aggregation_account_using_post(aggregation_request_object, opts = {})
      data, _status_code, _headers = create_aggregation_account_using_post_with_http_info(aggregation_request_object, opts)
      data
    end

    # Create mapping between client,vendor,tenant
    # Create mapping between client,vendor,tenant
    # @param aggregation_request_object aggregationRequestObject
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountsResponseVO, Fixnum, Hash)>] AggregationAccountsResponseVO data, response status code and response headers
    def create_aggregation_account_using_post_with_http_info(aggregation_request_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.create_aggregation_account_using_post ...'
      end
      # verify the required parameter 'aggregation_request_object' is set
      if @api_client.config.client_side_validation && aggregation_request_object.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_request_object' when calling AggregationApi.create_aggregation_account_using_post"
      end
      # resource path
      local_var_path = '/aggregation/account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_request_object)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountsResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#create_aggregation_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create mapping between client,vendor,tenant for the property
    # Create mapping between client,vendor,tenant for property
    # @param aggregation_request_object aggregationRequestObject
    # @param [Hash] opts the optional parameters
    # @return [PropertyValueResponseVO]
    def create_property_value_using_post(aggregation_request_object, opts = {})
      data, _status_code, _headers = create_property_value_using_post_with_http_info(aggregation_request_object, opts)
      data
    end

    # Create mapping between client,vendor,tenant for the property
    # Create mapping between client,vendor,tenant for property
    # @param aggregation_request_object aggregationRequestObject
    # @param [Hash] opts the optional parameters
    # @return [Array<(PropertyValueResponseVO, Fixnum, Hash)>] PropertyValueResponseVO data, response status code and response headers
    def create_property_value_using_post_with_http_info(aggregation_request_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.create_property_value_using_post ...'
      end
      # verify the required parameter 'aggregation_request_object' is set
      if @api_client.config.client_side_validation && aggregation_request_object.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_request_object' when calling AggregationApi.create_property_value_using_post"
      end
      # resource path
      local_var_path = '/property_value'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_request_object)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PropertyValueResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#create_property_value_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # De-Link mapping between client,vendor,tenant
    # De-Link mapping between client,vendor,tenant
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delete_type delete_type (default to delink)
    # @option opts [String] :nucleus_data nucleus_data
    # @return [nil]
    def delete_aggregation_account_using_delete(nucleus_aggregation_account_id, opts = {})
      delete_aggregation_account_using_delete_with_http_info(nucleus_aggregation_account_id, opts)
      nil
    end

    # De-Link mapping between client,vendor,tenant
    # De-Link mapping between client,vendor,tenant
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delete_type delete_type
    # @option opts [String] :nucleus_data nucleus_data
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_using_delete_with_http_info(nucleus_aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.delete_aggregation_account_using_delete ...'
      end
      # verify the required parameter 'nucleus_aggregation_account_id' is set
      if @api_client.config.client_side_validation && nucleus_aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_aggregation_account_id' when calling AggregationApi.delete_aggregation_account_using_delete"
      end
      # resource path
      local_var_path = '/aggregation/account/{nucleus_aggregation_account_id}'.sub('{' + 'nucleus_aggregation_account_id' + '}', nucleus_aggregation_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'delete_type'] = opts[:'delete_type'] if !opts[:'delete_type'].nil?
      query_params[:'nucleus_data'] = opts[:'nucleus_data'] if !opts[:'nucleus_data'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#delete_aggregation_account_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
    # Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
    # @param aggregation_account_id_list aggregation_account_id_list
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccountResponseVO>]
    def get_aggregation_account_all_using_get(aggregation_account_id_list, opts = {})
      data, _status_code, _headers = get_aggregation_account_all_using_get_with_http_info(aggregation_account_id_list, opts)
      data
    end

    # Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
    # Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
    # @param aggregation_account_id_list aggregation_account_id_list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccountResponseVO>, Fixnum, Hash)>] Array<AggregationAccountResponseVO> data, response status code and response headers
    def get_aggregation_account_all_using_get_with_http_info(aggregation_account_id_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_aggregation_account_all_using_get ...'
      end
      # verify the required parameter 'aggregation_account_id_list' is set
      if @api_client.config.client_side_validation && aggregation_account_id_list.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id_list' when calling AggregationApi.get_aggregation_account_all_using_get"
      end
      # resource path
      local_var_path = '/aggregation/account'

      # query parameters
      query_params = {}
      query_params[:'aggregation_account_id_list'] = @api_client.build_collection_param(aggregation_account_id_list, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccountResponseVO>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_aggregation_account_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all aggregation account balance details with for the given aggregation accounts 
    # Fetch all aggregation account balance details with for the given aggregation accounts
    # @param aggregation_account_id_list aggregation_account_id_list
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccountBalanceResponseVO>]
    def get_aggregation_account_balance_all_using_get(aggregation_account_id_list, opts = {})
      data, _status_code, _headers = get_aggregation_account_balance_all_using_get_with_http_info(aggregation_account_id_list, opts)
      data
    end

    # Fetch all aggregation account balance details with for the given aggregation accounts 
    # Fetch all aggregation account balance details with for the given aggregation accounts
    # @param aggregation_account_id_list aggregation_account_id_list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccountBalanceResponseVO>, Fixnum, Hash)>] Array<AggregationAccountBalanceResponseVO> data, response status code and response headers
    def get_aggregation_account_balance_all_using_get_with_http_info(aggregation_account_id_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_aggregation_account_balance_all_using_get ...'
      end
      # verify the required parameter 'aggregation_account_id_list' is set
      if @api_client.config.client_side_validation && aggregation_account_id_list.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id_list' when calling AggregationApi.get_aggregation_account_balance_all_using_get"
      end
      # resource path
      local_var_path = '/aggregation/balance'

      # query parameters
      query_params = {}
      query_params[:'aggregation_account_id_list'] = @api_client.build_collection_param(aggregation_account_id_list, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccountBalanceResponseVO>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_aggregation_account_balance_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch aggregation account balance details with the mapping created in POST endpoint
    # Fetch aggregation account balance details with the mapping created in POST endpoint
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountBalanceResponseVO]
    def get_aggregation_account_balance_using_get(nucleus_aggregation_account_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_balance_using_get_with_http_info(nucleus_aggregation_account_id, opts)
      data
    end

    # Fetch aggregation account balance details with the mapping created in POST endpoint
    # Fetch aggregation account balance details with the mapping created in POST endpoint
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountBalanceResponseVO, Fixnum, Hash)>] AggregationAccountBalanceResponseVO data, response status code and response headers
    def get_aggregation_account_balance_using_get_with_http_info(nucleus_aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_aggregation_account_balance_using_get ...'
      end
      # verify the required parameter 'nucleus_aggregation_account_id' is set
      if @api_client.config.client_side_validation && nucleus_aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_aggregation_account_id' when calling AggregationApi.get_aggregation_account_balance_using_get"
      end
      # resource path
      local_var_path = '/aggregation/balance/{nucleus_aggregation_account_id}'.sub('{' + 'nucleus_aggregation_account_id' + '}', nucleus_aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountBalanceResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_aggregation_account_balance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
    # Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
    # @param aggregation_account_id_list aggregation_account_id_list
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccountHoldingResponseVO>]
    def get_aggregation_account_holding_all_using_get(aggregation_account_id_list, opts = {})
      data, _status_code, _headers = get_aggregation_account_holding_all_using_get_with_http_info(aggregation_account_id_list, opts)
      data
    end

    # Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
    # Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
    # @param aggregation_account_id_list aggregation_account_id_list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccountHoldingResponseVO>, Fixnum, Hash)>] Array<AggregationAccountHoldingResponseVO> data, response status code and response headers
    def get_aggregation_account_holding_all_using_get_with_http_info(aggregation_account_id_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_aggregation_account_holding_all_using_get ...'
      end
      # verify the required parameter 'aggregation_account_id_list' is set
      if @api_client.config.client_side_validation && aggregation_account_id_list.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id_list' when calling AggregationApi.get_aggregation_account_holding_all_using_get"
      end
      # resource path
      local_var_path = '/aggregation/holding'

      # query parameters
      query_params = {}
      query_params[:'aggregation_account_id_list'] = @api_client.build_collection_param(aggregation_account_id_list, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccountHoldingResponseVO>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_aggregation_account_holding_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch aggregation account holding details with the mapping created in POST endpoint
    # Fetch aggregation account holding details with the mapping created in POST endpoint
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountHoldingResponseVO]
    def get_aggregation_account_holding_using_get(nucleus_aggregation_account_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_holding_using_get_with_http_info(nucleus_aggregation_account_id, opts)
      data
    end

    # Fetch aggregation account holding details with the mapping created in POST endpoint
    # Fetch aggregation account holding details with the mapping created in POST endpoint
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountHoldingResponseVO, Fixnum, Hash)>] AggregationAccountHoldingResponseVO data, response status code and response headers
    def get_aggregation_account_holding_using_get_with_http_info(nucleus_aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_aggregation_account_holding_using_get ...'
      end
      # verify the required parameter 'nucleus_aggregation_account_id' is set
      if @api_client.config.client_side_validation && nucleus_aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_aggregation_account_id' when calling AggregationApi.get_aggregation_account_holding_using_get"
      end
      # resource path
      local_var_path = '/aggregation/holding/{nucleus_aggregation_account_id}'.sub('{' + 'nucleus_aggregation_account_id' + '}', nucleus_aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountHoldingResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_aggregation_account_holding_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all aggregation account balance details with for the given aggregation accounts 
    # Fetch all aggregation account balance details with for the given aggregation accounts
    # @param aggregation_account_id_list aggregation_account_id_list
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccountTransactionResponseVO>]
    def get_aggregation_account_transaction_all_using_get(aggregation_account_id_list, opts = {})
      data, _status_code, _headers = get_aggregation_account_transaction_all_using_get_with_http_info(aggregation_account_id_list, opts)
      data
    end

    # Fetch all aggregation account balance details with for the given aggregation accounts 
    # Fetch all aggregation account balance details with for the given aggregation accounts
    # @param aggregation_account_id_list aggregation_account_id_list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccountTransactionResponseVO>, Fixnum, Hash)>] Array<AggregationAccountTransactionResponseVO> data, response status code and response headers
    def get_aggregation_account_transaction_all_using_get_with_http_info(aggregation_account_id_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_aggregation_account_transaction_all_using_get ...'
      end
      # verify the required parameter 'aggregation_account_id_list' is set
      if @api_client.config.client_side_validation && aggregation_account_id_list.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id_list' when calling AggregationApi.get_aggregation_account_transaction_all_using_get"
      end
      # resource path
      local_var_path = '/aggregation/transaction'

      # query parameters
      query_params = {}
      query_params[:'aggregation_account_id_list'] = @api_client.build_collection_param(aggregation_account_id_list, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccountTransactionResponseVO>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_aggregation_account_transaction_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch aggregation account transaction details with the mapping created in POST endpoint
    # Fetch aggregation account transaction details with the mapping created in POST endpoint
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountTransactionResponseVO]
    def get_aggregation_account_transaction_using_get(nucleus_aggregation_account_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_transaction_using_get_with_http_info(nucleus_aggregation_account_id, opts)
      data
    end

    # Fetch aggregation account transaction details with the mapping created in POST endpoint
    # Fetch aggregation account transaction details with the mapping created in POST endpoint
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountTransactionResponseVO, Fixnum, Hash)>] AggregationAccountTransactionResponseVO data, response status code and response headers
    def get_aggregation_account_transaction_using_get_with_http_info(nucleus_aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_aggregation_account_transaction_using_get ...'
      end
      # verify the required parameter 'nucleus_aggregation_account_id' is set
      if @api_client.config.client_side_validation && nucleus_aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_aggregation_account_id' when calling AggregationApi.get_aggregation_account_transaction_using_get"
      end
      # resource path
      local_var_path = '/aggregation/transaction/{nucleus_aggregation_account_id}'.sub('{' + 'nucleus_aggregation_account_id' + '}', nucleus_aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountTransactionResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_aggregation_account_transaction_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch aggregation account details with the mapping created in POST endpoint
    # Fetch aggregation account details with the mapping created in POST endpoint
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountResponseVO]
    def get_aggregation_account_using_get(nucleus_aggregation_account_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_using_get_with_http_info(nucleus_aggregation_account_id, opts)
      data
    end

    # Fetch aggregation account details with the mapping created in POST endpoint
    # Fetch aggregation account details with the mapping created in POST endpoint
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountResponseVO, Fixnum, Hash)>] AggregationAccountResponseVO data, response status code and response headers
    def get_aggregation_account_using_get_with_http_info(nucleus_aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_aggregation_account_using_get ...'
      end
      # verify the required parameter 'nucleus_aggregation_account_id' is set
      if @api_client.config.client_side_validation && nucleus_aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_aggregation_account_id' when calling AggregationApi.get_aggregation_account_using_get"
      end
      # resource path
      local_var_path = '/aggregation/account/{nucleus_aggregation_account_id}'.sub('{' + 'nucleus_aggregation_account_id' + '}', nucleus_aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_aggregation_account_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Value of the given property
    # Get Value of the given property
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @option opts [String] :product product (default to atom)
    # @return [PropertyValueResponseVO]
    def get_property_value(nucleus_aggregation_account_id, opts = {})
      data, _status_code, _headers = get_property_value_with_http_info(nucleus_aggregation_account_id, opts)
      data
    end

    # Get Value of the given property
    # Get Value of the given property
    # @param nucleus_aggregation_account_id nucleus_aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @option opts [String] :product product
    # @return [Array<(PropertyValueResponseVO, Fixnum, Hash)>] PropertyValueResponseVO data, response status code and response headers
    def get_property_value_with_http_info(nucleus_aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationApi.get_property_value ...'
      end
      # verify the required parameter 'nucleus_aggregation_account_id' is set
      if @api_client.config.client_side_validation && nucleus_aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_aggregation_account_id' when calling AggregationApi.get_property_value"
      end
      # resource path
      local_var_path = '/property_value'

      # query parameters
      query_params = {}
      query_params[:'nucleus_aggregation_account_id'] = nucleus_aggregation_account_id
      query_params[:'nucleus_business_id'] = opts[:'nucleus_business_id'] if !opts[:'nucleus_business_id'].nil?
      query_params[:'nucleus_client_id'] = opts[:'nucleus_client_id'] if !opts[:'nucleus_client_id'].nil?
      query_params[:'product'] = opts[:'product'] if !opts[:'product'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PropertyValueResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationApi#get_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
