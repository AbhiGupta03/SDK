=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.2.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module IntegrationApi
  class BrokerageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create a Bank Link
    # @param brokerage_bank_link_co brokerageBankLinkCO
    # @param [Hash] opts the optional parameters
    # @return [BrokerageBankLinkVO]
    def create_bank_link_using_post(brokerage_bank_link_co, opts = {})
      data, _status_code, _headers = create_bank_link_using_post_with_http_info(brokerage_bank_link_co, opts)
      data
    end

    # create a Bank Link
    # @param brokerage_bank_link_co brokerageBankLinkCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrokerageBankLinkVO, Fixnum, Hash)>] BrokerageBankLinkVO data, response status code and response headers
    def create_bank_link_using_post_with_http_info(brokerage_bank_link_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.create_bank_link_using_post ...'
      end
      # verify the required parameter 'brokerage_bank_link_co' is set
      if @api_client.config.client_side_validation && brokerage_bank_link_co.nil?
        fail ArgumentError, "Missing the required parameter 'brokerage_bank_link_co' when calling BrokerageApi.create_bank_link_using_post"
      end
      # resource path
      local_var_path = '/brokerage/bank_link'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(brokerage_bank_link_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BrokerageBankLinkVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#create_bank_link_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create a Brokerage account
    # @param brokerage_account_co brokerageAccountCO
    # @param [Hash] opts the optional parameters
    # @return [BrokerageAccountVO]
    def create_brokerage_account_using_post(brokerage_account_co, opts = {})
      data, _status_code, _headers = create_brokerage_account_using_post_with_http_info(brokerage_account_co, opts)
      data
    end

    # create a Brokerage account
    # @param brokerage_account_co brokerageAccountCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrokerageAccountVO, Fixnum, Hash)>] BrokerageAccountVO data, response status code and response headers
    def create_brokerage_account_using_post_with_http_info(brokerage_account_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.create_brokerage_account_using_post ...'
      end
      # verify the required parameter 'brokerage_account_co' is set
      if @api_client.config.client_side_validation && brokerage_account_co.nil?
        fail ArgumentError, "Missing the required parameter 'brokerage_account_co' when calling BrokerageApi.create_brokerage_account_using_post"
      end
      # resource path
      local_var_path = '/brokerage/account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(brokerage_account_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BrokerageAccountVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#create_brokerage_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Brokerage Client
    # @param client_co clientCO
    # @param [Hash] opts the optional parameters
    # @return [BrokerageCreateClientVO]
    def create_brokerage_client_using_post(client_co, opts = {})
      data, _status_code, _headers = create_brokerage_client_using_post_with_http_info(client_co, opts)
      data
    end

    # Create a Brokerage Client
    # @param client_co clientCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrokerageCreateClientVO, Fixnum, Hash)>] BrokerageCreateClientVO data, response status code and response headers
    def create_brokerage_client_using_post_with_http_info(client_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.create_brokerage_client_using_post ...'
      end
      # verify the required parameter 'client_co' is set
      if @api_client.config.client_side_validation && client_co.nil?
        fail ArgumentError, "Missing the required parameter 'client_co' when calling BrokerageApi.create_brokerage_client_using_post"
      end
      # resource path
      local_var_path = '/brokerage/client'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BrokerageCreateClientVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#create_brokerage_client_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Order
    # @param nucleus_order_id nucleus_order_id
    # @param [Hash] opts the optional parameters
    # @return [CreateOrderResponse]
    def create_order_using_post(nucleus_order_id, opts = {})
      data, _status_code, _headers = create_order_using_post_with_http_info(nucleus_order_id, opts)
      data
    end

    # Create an Order
    # @param nucleus_order_id nucleus_order_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOrderResponse, Fixnum, Hash)>] CreateOrderResponse data, response status code and response headers
    def create_order_using_post_with_http_info(nucleus_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.create_order_using_post ...'
      end
      # verify the required parameter 'nucleus_order_id' is set
      if @api_client.config.client_side_validation && nucleus_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_order_id' when calling BrokerageApi.create_order_using_post"
      end
      # resource path
      local_var_path = '/brokerage/order'

      # query parameters
      query_params = {}
      query_params[:'nucleus_order_id'] = nucleus_order_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#create_order_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Bank Link
    # @param nucleus_bank_link_id nucleus_bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_bank_link_using_delete(nucleus_bank_link_id, opts = {})
      data, _status_code, _headers = delete_bank_link_using_delete_with_http_info(nucleus_bank_link_id, opts)
      data
    end

    # Delete a Bank Link
    # @param nucleus_bank_link_id nucleus_bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Fixnum, Hash)>] ResponseEntity data, response status code and response headers
    def delete_bank_link_using_delete_with_http_info(nucleus_bank_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.delete_bank_link_using_delete ...'
      end
      # verify the required parameter 'nucleus_bank_link_id' is set
      if @api_client.config.client_side_validation && nucleus_bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_bank_link_id' when calling BrokerageApi.delete_bank_link_using_delete"
      end
      # resource path
      local_var_path = '/brokerage/bank_link/{nucleus_bank_link_id}'.sub('{' + 'nucleus_bank_link_id' + '}', nucleus_bank_link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#delete_bank_link_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Order
    # @param nucleus_order_id nucleus_order_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_order_using_delete(nucleus_order_id, opts = {})
      delete_order_using_delete_with_http_info(nucleus_order_id, opts)
      nil
    end

    # Delete an Order
    # @param nucleus_order_id nucleus_order_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_order_using_delete_with_http_info(nucleus_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.delete_order_using_delete ...'
      end
      # verify the required parameter 'nucleus_order_id' is set
      if @api_client.config.client_side_validation && nucleus_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_order_id' when calling BrokerageApi.delete_order_using_delete"
      end
      # resource path
      local_var_path = '/brokerage/order'

      # query parameters
      query_params = {}
      query_params[:'nucleus_order_id'] = nucleus_order_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#delete_order_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Bank Link
    # @param nucleus_bank_link_id nucleus_bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [BrokerageBankLinkVO]
    def get_bank_link_using_get(nucleus_bank_link_id, opts = {})
      data, _status_code, _headers = get_bank_link_using_get_with_http_info(nucleus_bank_link_id, opts)
      data
    end

    # Get a Bank Link
    # @param nucleus_bank_link_id nucleus_bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrokerageBankLinkVO, Fixnum, Hash)>] BrokerageBankLinkVO data, response status code and response headers
    def get_bank_link_using_get_with_http_info(nucleus_bank_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.get_bank_link_using_get ...'
      end
      # verify the required parameter 'nucleus_bank_link_id' is set
      if @api_client.config.client_side_validation && nucleus_bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_bank_link_id' when calling BrokerageApi.get_bank_link_using_get"
      end
      # resource path
      local_var_path = '/brokerage/bank_link/{nucleus_bank_link_id}'.sub('{' + 'nucleus_bank_link_id' + '}', nucleus_bank_link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BrokerageBankLinkVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#get_bank_link_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Brokerage account statement
    # @param end_date end_date
    # @param nucleus_account_id nucleus_account_id
    # @param start_date start_date
    # @param statement_type statement_type
    # @param [Hash] opts the optional parameters
    # @return [BrokerageStatementVO]
    def get_brokerage_account_statement_using_get(end_date, nucleus_account_id, start_date, statement_type, opts = {})
      data, _status_code, _headers = get_brokerage_account_statement_using_get_with_http_info(end_date, nucleus_account_id, start_date, statement_type, opts)
      data
    end

    # Get a Brokerage account statement
    # @param end_date end_date
    # @param nucleus_account_id nucleus_account_id
    # @param start_date start_date
    # @param statement_type statement_type
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrokerageStatementVO, Fixnum, Hash)>] BrokerageStatementVO data, response status code and response headers
    def get_brokerage_account_statement_using_get_with_http_info(end_date, nucleus_account_id, start_date, statement_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.get_brokerage_account_statement_using_get ...'
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling BrokerageApi.get_brokerage_account_statement_using_get"
      end
      # verify the required parameter 'nucleus_account_id' is set
      if @api_client.config.client_side_validation && nucleus_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_account_id' when calling BrokerageApi.get_brokerage_account_statement_using_get"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling BrokerageApi.get_brokerage_account_statement_using_get"
      end
      # verify the required parameter 'statement_type' is set
      if @api_client.config.client_side_validation && statement_type.nil?
        fail ArgumentError, "Missing the required parameter 'statement_type' when calling BrokerageApi.get_brokerage_account_statement_using_get"
      end
      # resource path
      local_var_path = '/brokerage/{nucleus_account_id}/statement'.sub('{' + 'nucleus_account_id' + '}', nucleus_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'end_date'] = end_date
      query_params[:'start_date'] = start_date
      query_params[:'statement_type'] = statement_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BrokerageStatementVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#get_brokerage_account_statement_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Order
    # @param nucleus_order_id nucleus_order_id
    # @param [Hash] opts the optional parameters
    # @return [GetOrderResponse]
    def get_order_using_get(nucleus_order_id, opts = {})
      data, _status_code, _headers = get_order_using_get_with_http_info(nucleus_order_id, opts)
      data
    end

    # Get an Order
    # @param nucleus_order_id nucleus_order_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrderResponse, Fixnum, Hash)>] GetOrderResponse data, response status code and response headers
    def get_order_using_get_with_http_info(nucleus_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.get_order_using_get ...'
      end
      # verify the required parameter 'nucleus_order_id' is set
      if @api_client.config.client_side_validation && nucleus_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_order_id' when calling BrokerageApi.get_order_using_get"
      end
      # resource path
      local_var_path = '/brokerage/order'

      # query parameters
      query_params = {}
      query_params[:'nucleus_order_id'] = nucleus_order_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#get_order_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Bank Link
    # @param nucleus_bank_link_id nucleus_bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [BrokerageBankLinkVO]
    def update_bank_link_using_put(nucleus_bank_link_id, opts = {})
      data, _status_code, _headers = update_bank_link_using_put_with_http_info(nucleus_bank_link_id, opts)
      data
    end

    # Update a Bank Link
    # @param nucleus_bank_link_id nucleus_bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrokerageBankLinkVO, Fixnum, Hash)>] BrokerageBankLinkVO data, response status code and response headers
    def update_bank_link_using_put_with_http_info(nucleus_bank_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.update_bank_link_using_put ...'
      end
      # verify the required parameter 'nucleus_bank_link_id' is set
      if @api_client.config.client_side_validation && nucleus_bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_bank_link_id' when calling BrokerageApi.update_bank_link_using_put"
      end
      # resource path
      local_var_path = '/brokerage/bank_link/{nucleus_bank_link_id}'.sub('{' + 'nucleus_bank_link_id' + '}', nucleus_bank_link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BrokerageBankLinkVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#update_bank_link_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Brokerage client
    # @param client_co clientCO
    # @param [Hash] opts the optional parameters
    # @return [BrokerageUpdateClientVO]
    def update_brokerage_client_using_put(client_co, opts = {})
      data, _status_code, _headers = update_brokerage_client_using_put_with_http_info(client_co, opts)
      data
    end

    # Update a Brokerage client
    # @param client_co clientCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrokerageUpdateClientVO, Fixnum, Hash)>] BrokerageUpdateClientVO data, response status code and response headers
    def update_brokerage_client_using_put_with_http_info(client_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrokerageApi.update_brokerage_client_using_put ...'
      end
      # verify the required parameter 'client_co' is set
      if @api_client.config.client_side_validation && client_co.nil?
        fail ArgumentError, "Missing the required parameter 'client_co' when calling BrokerageApi.update_brokerage_client_using_put"
      end
      # resource path
      local_var_path = '/brokerage/client'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BrokerageUpdateClientVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrokerageApi#update_brokerage_client_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
