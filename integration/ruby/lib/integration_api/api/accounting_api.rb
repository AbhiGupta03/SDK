=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.3.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.21

=end

require 'uri'

module IntegrationApi
  class AccountingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create/Update bill payment in Nucleus for a given nucleus_invoice_id
    # Create/Update bill payment in Nucleus for a given nucleus_invoice_id
    # @param nucleus_invoice_id nucleus_invoice_id
    # @param [Hash] opts the optional parameters
    # @return [AccountingFinalResponseVO]
    def create_or_update_accounting_bill_payment(nucleus_invoice_id, opts = {})
      data, _status_code, _headers = create_or_update_accounting_bill_payment_with_http_info(nucleus_invoice_id, opts)
      data
    end

    # Create/Update bill payment in Nucleus for a given nucleus_invoice_id
    # Create/Update bill payment in Nucleus for a given nucleus_invoice_id
    # @param nucleus_invoice_id nucleus_invoice_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def create_or_update_accounting_bill_payment_with_http_info(nucleus_invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_or_update_accounting_bill_payment ...'
      end
      # verify the required parameter 'nucleus_invoice_id' is set
      if @api_client.config.client_side_validation && nucleus_invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_invoice_id' when calling AccountingApi.create_or_update_accounting_bill_payment"
      end
      # resource path
      local_var_path = '/accounting/bill_payment/{nucleus_invoice_id}'.sub('{' + 'nucleus_invoice_id' + '}', nucleus_invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_or_update_accounting_bill_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update/Create all bills in Nucleus for a given nucleus_client_id
    # Update/Create all bills in Nucleus for a given nucleus_client_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param start_date start_date
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date (default to null)
    # @return [AccountingFinalResponseVO]
    def create_or_update_accounting_bills(nucleus_contact_id, start_date, opts = {})
      data, _status_code, _headers = create_or_update_accounting_bills_with_http_info(nucleus_contact_id, start_date, opts)
      data
    end

    # Update/Create all bills in Nucleus for a given nucleus_client_id
    # Update/Create all bills in Nucleus for a given nucleus_client_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param start_date start_date
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def create_or_update_accounting_bills_with_http_info(nucleus_contact_id, start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_or_update_accounting_bills ...'
      end
      # verify the required parameter 'nucleus_contact_id' is set
      if @api_client.config.client_side_validation && nucleus_contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_contact_id' when calling AccountingApi.create_or_update_accounting_bills"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling AccountingApi.create_or_update_accounting_bills"
      end
      # resource path
      local_var_path = '/accounting/bill'

      # query parameters
      query_params = {}
      query_params[:'nucleus_contact_id'] = nucleus_contact_id
      query_params[:'start_date'] = start_date
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_or_update_accounting_bills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update/Create all customers in Nucleus for a given nucleus_client_id
    # Update/Create all customers in Nucleus for a given nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @return [AccountingFinalResponseVO]
    def create_or_update_accounting_customer(opts = {})
      data, _status_code, _headers = create_or_update_accounting_customer_with_http_info(opts)
      data
    end

    # Update/Create all customers in Nucleus for a given nucleus_client_id
    # Update/Create all customers in Nucleus for a given nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def create_or_update_accounting_customer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_or_update_accounting_customer ...'
      end
      # resource path
      local_var_path = '/accounting/customer'

      # query parameters
      query_params = {}
      query_params[:'nucleus_business_id'] = opts[:'nucleus_business_id'] if !opts[:'nucleus_business_id'].nil?
      query_params[:'nucleus_client_id'] = opts[:'nucleus_client_id'] if !opts[:'nucleus_client_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_or_update_accounting_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
    # Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param start_date start_date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accounting_method accounting_method (default to accrual)
    # @option opts [Date] :end_date end_date (default to null)
    # @return [AccountingFinalResponseVO]
    def create_or_update_accounting_customer_revenue(nucleus_contact_id, start_date, opts = {})
      data, _status_code, _headers = create_or_update_accounting_customer_revenue_with_http_info(nucleus_contact_id, start_date, opts)
      data
    end

    # Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
    # Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param start_date start_date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accounting_method accounting_method
    # @option opts [Date] :end_date end_date
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def create_or_update_accounting_customer_revenue_with_http_info(nucleus_contact_id, start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_or_update_accounting_customer_revenue ...'
      end
      # verify the required parameter 'nucleus_contact_id' is set
      if @api_client.config.client_side_validation && nucleus_contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_contact_id' when calling AccountingApi.create_or_update_accounting_customer_revenue"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling AccountingApi.create_or_update_accounting_customer_revenue"
      end
      # resource path
      local_var_path = '/accounting/customer_revenue/{nucleus_contact_id}'.sub('{' + 'nucleus_contact_id' + '}', nucleus_contact_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start_date'] = start_date
      query_params[:'accounting_method'] = opts[:'accounting_method'] if !opts[:'accounting_method'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_or_update_accounting_customer_revenue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update/Create all invoices in Nucleus for a given nucleus_client_id
    # Update/Create all invoices in Nucleus for a given nucleus_client_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param start_date start_date
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date (default to null)
    # @return [AccountingFinalResponseVO]
    def create_or_update_accounting_invoice(nucleus_contact_id, start_date, opts = {})
      data, _status_code, _headers = create_or_update_accounting_invoice_with_http_info(nucleus_contact_id, start_date, opts)
      data
    end

    # Update/Create all invoices in Nucleus for a given nucleus_client_id
    # Update/Create all invoices in Nucleus for a given nucleus_client_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param start_date start_date
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def create_or_update_accounting_invoice_with_http_info(nucleus_contact_id, start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_or_update_accounting_invoice ...'
      end
      # verify the required parameter 'nucleus_contact_id' is set
      if @api_client.config.client_side_validation && nucleus_contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_contact_id' when calling AccountingApi.create_or_update_accounting_invoice"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling AccountingApi.create_or_update_accounting_invoice"
      end
      # resource path
      local_var_path = '/accounting/invoice'

      # query parameters
      query_params = {}
      query_params[:'nucleus_contact_id'] = nucleus_contact_id
      query_params[:'start_date'] = start_date
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_or_update_accounting_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
    # Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
    # @param nucleus_invoice_id nucleus_invoice_id
    # @param [Hash] opts the optional parameters
    # @return [AccountingFinalResponseVO]
    def create_or_update_accounting_invoice_payment(nucleus_invoice_id, opts = {})
      data, _status_code, _headers = create_or_update_accounting_invoice_payment_with_http_info(nucleus_invoice_id, opts)
      data
    end

    # Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
    # Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
    # @param nucleus_invoice_id nucleus_invoice_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def create_or_update_accounting_invoice_payment_with_http_info(nucleus_invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_or_update_accounting_invoice_payment ...'
      end
      # verify the required parameter 'nucleus_invoice_id' is set
      if @api_client.config.client_side_validation && nucleus_invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_invoice_id' when calling AccountingApi.create_or_update_accounting_invoice_payment"
      end
      # resource path
      local_var_path = '/accounting/invoice_payment/{nucleus_invoice_id}'.sub('{' + 'nucleus_invoice_id' + '}', nucleus_invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_or_update_accounting_invoice_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update/Create all suppliers in Nucleus for a given nucleus_client_id
    # Update/Create all suppliers in Nucleus for a given nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @return [AccountingFinalResponseVO]
    def create_or_update_accounting_supplier(opts = {})
      data, _status_code, _headers = create_or_update_accounting_supplier_with_http_info(opts)
      data
    end

    # Update/Create all suppliers in Nucleus for a given nucleus_client_id
    # Update/Create all suppliers in Nucleus for a given nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def create_or_update_accounting_supplier_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_or_update_accounting_supplier ...'
      end
      # resource path
      local_var_path = '/accounting/supplier'

      # query parameters
      query_params = {}
      query_params[:'nucleus_business_id'] = opts[:'nucleus_business_id'] if !opts[:'nucleus_business_id'].nil?
      query_params[:'nucleus_client_id'] = opts[:'nucleus_client_id'] if !opts[:'nucleus_client_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_or_update_accounting_supplier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Permanently delete relation with particular accounting vendor.
    # Permanently delete relation with particular accounting vendor.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_accounting_vendor_access_config_is_active_by_id(id, opts = {})
      delete_accounting_vendor_access_config_is_active_by_id_with_http_info(id, opts)
      nil
    end

    # Permanently delete relation with particular accounting vendor.
    # Permanently delete relation with particular accounting vendor.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_accounting_vendor_access_config_is_active_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.delete_accounting_vendor_access_config_is_active_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AccountingApi.delete_accounting_vendor_access_config_is_active_by_id"
      end
      # resource path
      local_var_path = '/accounting/vendor/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#delete_accounting_vendor_access_config_is_active_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get accounting stats from financial statements at the vendor for the business provided
    # Get accounting stats from financial statements at the vendor for the business provided
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accounting_method accounting_method (default to accrual)
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @option opts [String] :period_length period_length
    # @option opts [Integer] :period_month period_month
    # @option opts [Integer] :period_quarter period_quarter
    # @option opts [String] :period_type period_type
    # @option opts [Integer] :period_year period_year
    # @option opts [String] :report report
    # @option opts [Date] :statement_date statement_date
    # @return [AccountingFinalResponseVO]
    def get_accounting_stats(opts = {})
      data, _status_code, _headers = get_accounting_stats_with_http_info(opts)
      data
    end

    # Get accounting stats from financial statements at the vendor for the business provided
    # Get accounting stats from financial statements at the vendor for the business provided
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accounting_method accounting_method
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @option opts [String] :period_length period_length
    # @option opts [Integer] :period_month period_month
    # @option opts [Integer] :period_quarter period_quarter
    # @option opts [String] :period_type period_type
    # @option opts [Integer] :period_year period_year
    # @option opts [String] :report report
    # @option opts [Date] :statement_date statement_date
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def get_accounting_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_accounting_stats ...'
      end
      # resource path
      local_var_path = '/accounting/report'

      # query parameters
      query_params = {}
      query_params[:'accounting_method'] = opts[:'accounting_method'] if !opts[:'accounting_method'].nil?
      query_params[:'nucleus_business_id'] = opts[:'nucleus_business_id'] if !opts[:'nucleus_business_id'].nil?
      query_params[:'nucleus_client_id'] = opts[:'nucleus_client_id'] if !opts[:'nucleus_client_id'].nil?
      query_params[:'period_length'] = opts[:'period_length'] if !opts[:'period_length'].nil?
      query_params[:'period_month'] = opts[:'period_month'] if !opts[:'period_month'].nil?
      query_params[:'period_quarter'] = opts[:'period_quarter'] if !opts[:'period_quarter'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'period_year'] = opts[:'period_year'] if !opts[:'period_year'].nil?
      query_params[:'report'] = opts[:'report'] if !opts[:'report'].nil?
      query_params[:'statement_date'] = opts[:'statement_date'] if !opts[:'statement_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_accounting_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Accounting Vendor Config
    # Get Accounting vendor config information with its status.
    # @param nucleus_client_id nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @return [Array<VendorAccessConfigVO>]
    def get_accounting_vendor_info_using_client_id(nucleus_client_id, opts = {})
      data, _status_code, _headers = get_accounting_vendor_info_using_client_id_with_http_info(nucleus_client_id, opts)
      data
    end

    # Get Accounting Vendor Config
    # Get Accounting vendor config information with its status.
    # @param nucleus_client_id nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<VendorAccessConfigVO>, Fixnum, Hash)>] Array<VendorAccessConfigVO> data, response status code and response headers
    def get_accounting_vendor_info_using_client_id_with_http_info(nucleus_client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_accounting_vendor_info_using_client_id ...'
      end
      # verify the required parameter 'nucleus_client_id' is set
      if @api_client.config.client_side_validation && nucleus_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_client_id' when calling AccountingApi.get_accounting_vendor_info_using_client_id"
      end
      # resource path
      local_var_path = '/accounting/vendor/{nucleus_client_id}'.sub('{' + 'nucleus_client_id' + '}', nucleus_client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<VendorAccessConfigVO>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_accounting_vendor_info_using_client_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update bill in Nucleus for a given nucleus_invoice_id
    # Update bill in Nucleus for a given nucleus_invoice_id
    # @param nucleus_invoice_id nucleus_invoice_id
    # @param [Hash] opts the optional parameters
    # @return [AccountingFinalResponseVO]
    def update_accounting_bill(nucleus_invoice_id, opts = {})
      data, _status_code, _headers = update_accounting_bill_with_http_info(nucleus_invoice_id, opts)
      data
    end

    # Update bill in Nucleus for a given nucleus_invoice_id
    # Update bill in Nucleus for a given nucleus_invoice_id
    # @param nucleus_invoice_id nucleus_invoice_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def update_accounting_bill_with_http_info(nucleus_invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_accounting_bill ...'
      end
      # verify the required parameter 'nucleus_invoice_id' is set
      if @api_client.config.client_side_validation && nucleus_invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_invoice_id' when calling AccountingApi.update_accounting_bill"
      end
      # resource path
      local_var_path = '/accounting/bill/{nucleus_invoice_id}'.sub('{' + 'nucleus_invoice_id' + '}', nucleus_invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_accounting_bill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update customer in Nucleus for a given nucleus_contact_id
    # Update customer in Nucleus for a given nucleus_contact_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param [Hash] opts the optional parameters
    # @return [AccountingFinalResponseVO]
    def update_accounting_customer(nucleus_contact_id, opts = {})
      data, _status_code, _headers = update_accounting_customer_with_http_info(nucleus_contact_id, opts)
      data
    end

    # Update customer in Nucleus for a given nucleus_contact_id
    # Update customer in Nucleus for a given nucleus_contact_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def update_accounting_customer_with_http_info(nucleus_contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_accounting_customer ...'
      end
      # verify the required parameter 'nucleus_contact_id' is set
      if @api_client.config.client_side_validation && nucleus_contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_contact_id' when calling AccountingApi.update_accounting_customer"
      end
      # resource path
      local_var_path = '/accounting/customer/{nucleus_contact_id}'.sub('{' + 'nucleus_contact_id' + '}', nucleus_contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_accounting_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update invoice in Nucleus for a given nucleus_invoice_id
    # Update invoice in Nucleus for a given nucleus_invoice_id
    # @param nucleus_invoice_id nucleus_invoice_id
    # @param [Hash] opts the optional parameters
    # @return [AccountingFinalResponseVO]
    def update_accounting_invoice(nucleus_invoice_id, opts = {})
      data, _status_code, _headers = update_accounting_invoice_with_http_info(nucleus_invoice_id, opts)
      data
    end

    # Update invoice in Nucleus for a given nucleus_invoice_id
    # Update invoice in Nucleus for a given nucleus_invoice_id
    # @param nucleus_invoice_id nucleus_invoice_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def update_accounting_invoice_with_http_info(nucleus_invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_accounting_invoice ...'
      end
      # verify the required parameter 'nucleus_invoice_id' is set
      if @api_client.config.client_side_validation && nucleus_invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_invoice_id' when calling AccountingApi.update_accounting_invoice"
      end
      # resource path
      local_var_path = '/accounting/invoice/{nucleus_invoice_id}'.sub('{' + 'nucleus_invoice_id' + '}', nucleus_invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_accounting_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update supplier in Nucleus for a given nucleus_contact_id
    # Update supplier in Nucleus for a given nucleus_contact_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param [Hash] opts the optional parameters
    # @return [AccountingFinalResponseVO]
    def update_accounting_supplier(nucleus_contact_id, opts = {})
      data, _status_code, _headers = update_accounting_supplier_with_http_info(nucleus_contact_id, opts)
      data
    end

    # Update supplier in Nucleus for a given nucleus_contact_id
    # Update supplier in Nucleus for a given nucleus_contact_id
    # @param nucleus_contact_id nucleus_contact_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountingFinalResponseVO, Fixnum, Hash)>] AccountingFinalResponseVO data, response status code and response headers
    def update_accounting_supplier_with_http_info(nucleus_contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_accounting_supplier ...'
      end
      # verify the required parameter 'nucleus_contact_id' is set
      if @api_client.config.client_side_validation && nucleus_contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_contact_id' when calling AccountingApi.update_accounting_supplier"
      end
      # resource path
      local_var_path = '/accounting/supplier/{nucleus_contact_id}'.sub('{' + 'nucleus_contact_id' + '}', nucleus_contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountingFinalResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_accounting_supplier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable/Disable relation with particular accounting vendor.
    # Enable/Disable link with particular accounting vendor.
    # @param id id
    # @param is_active is_active
    # @param [Hash] opts the optional parameters
    # @return [VendorAccessConfigVO]
    def update_accounting_vendor_access_config_is_active_by_id(id, is_active, opts = {})
      data, _status_code, _headers = update_accounting_vendor_access_config_is_active_by_id_with_http_info(id, is_active, opts)
      data
    end

    # Enable/Disable relation with particular accounting vendor.
    # Enable/Disable link with particular accounting vendor.
    # @param id id
    # @param is_active is_active
    # @param [Hash] opts the optional parameters
    # @return [Array<(VendorAccessConfigVO, Fixnum, Hash)>] VendorAccessConfigVO data, response status code and response headers
    def update_accounting_vendor_access_config_is_active_by_id_with_http_info(id, is_active, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_accounting_vendor_access_config_is_active_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AccountingApi.update_accounting_vendor_access_config_is_active_by_id"
      end
      # verify the required parameter 'is_active' is set
      if @api_client.config.client_side_validation && is_active.nil?
        fail ArgumentError, "Missing the required parameter 'is_active' when calling AccountingApi.update_accounting_vendor_access_config_is_active_by_id"
      end
      # resource path
      local_var_path = '/accounting/vendor/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'is_active'] = is_active

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VendorAccessConfigVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_accounting_vendor_access_config_is_active_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
