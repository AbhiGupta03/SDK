=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.2.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module IntegrationApi
  class CardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate card
    # @param activate_request activateRequest
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def create_card_activate_using_post(activate_request, opts = {})
      data, _status_code, _headers = create_card_activate_using_post_with_http_info(activate_request, opts)
      data
    end

    # Activate card
    # @param activate_request activateRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def create_card_activate_using_post_with_http_info(activate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_activate_using_post ...'
      end
      # verify the required parameter 'activate_request' is set
      if @api_client.config.client_side_validation && activate_request.nil?
        fail ArgumentError, "Missing the required parameter 'activate_request' when calling CardApi.create_card_activate_using_post"
      end
      # resource path
      local_var_path = '/card/activate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(activate_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_activate_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # close a card
    # @param close_request closeRequest
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def create_card_close_using_post(close_request, opts = {})
      data, _status_code, _headers = create_card_close_using_post_with_http_info(close_request, opts)
      data
    end

    # close a card
    # @param close_request closeRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def create_card_close_using_post_with_http_info(close_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_close_using_post ...'
      end
      # verify the required parameter 'close_request' is set
      if @api_client.config.client_side_validation && close_request.nil?
        fail ArgumentError, "Missing the required parameter 'close_request' when calling CardApi.create_card_close_using_post"
      end
      # resource path
      local_var_path = '/card/close'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(close_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_close_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # issue a card
    # @param issue_request issueRequest
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def create_card_issue_using_post(issue_request, opts = {})
      data, _status_code, _headers = create_card_issue_using_post_with_http_info(issue_request, opts)
      data
    end

    # issue a card
    # @param issue_request issueRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def create_card_issue_using_post_with_http_info(issue_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_issue_using_post ...'
      end
      # verify the required parameter 'issue_request' is set
      if @api_client.config.client_side_validation && issue_request.nil?
        fail ArgumentError, "Missing the required parameter 'issue_request' when calling CardApi.create_card_issue_using_post"
      end
      # resource path
      local_var_path = '/card/issue'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(issue_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_issue_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # pin card
    # @param card_pin_request_co cardPinRequestCO
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def create_card_pin_using_post(card_pin_request_co, opts = {})
      data, _status_code, _headers = create_card_pin_using_post_with_http_info(card_pin_request_co, opts)
      data
    end

    # pin card
    # @param card_pin_request_co cardPinRequestCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def create_card_pin_using_post_with_http_info(card_pin_request_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_pin_using_post ...'
      end
      # verify the required parameter 'card_pin_request_co' is set
      if @api_client.config.client_side_validation && card_pin_request_co.nil?
        fail ArgumentError, "Missing the required parameter 'card_pin_request_co' when calling CardApi.create_card_pin_using_post"
      end
      # resource path
      local_var_path = '/card/pin'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(card_pin_request_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_pin_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # reactivate card
    # @param reactivate_request reactivateRequest
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def create_card_reactivate_using_post(reactivate_request, opts = {})
      data, _status_code, _headers = create_card_reactivate_using_post_with_http_info(reactivate_request, opts)
      data
    end

    # reactivate card
    # @param reactivate_request reactivateRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def create_card_reactivate_using_post_with_http_info(reactivate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_reactivate_using_post ...'
      end
      # verify the required parameter 'reactivate_request' is set
      if @api_client.config.client_side_validation && reactivate_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactivate_request' when calling CardApi.create_card_reactivate_using_post"
      end
      # resource path
      local_var_path = '/card/reactivate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reactivate_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_reactivate_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reissue a card
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def create_card_reissue_using_post(request, opts = {})
      data, _status_code, _headers = create_card_reissue_using_post_with_http_info(request, opts)
      data
    end

    # Reissue a card
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def create_card_reissue_using_post_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_reissue_using_post ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CardApi.create_card_reissue_using_post"
      end
      # resource path
      local_var_path = '/card/reissue'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_reissue_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a card reload
    # @param reload_request reloadRequest
    # @param [Hash] opts the optional parameters
    # @return [CardReloadUnloadResponseVO]
    def create_card_reload_using_post(reload_request, opts = {})
      data, _status_code, _headers = create_card_reload_using_post_with_http_info(reload_request, opts)
      data
    end

    # Create a card reload
    # @param reload_request reloadRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardReloadUnloadResponseVO, Fixnum, Hash)>] CardReloadUnloadResponseVO data, response status code and response headers
    def create_card_reload_using_post_with_http_info(reload_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_reload_using_post ...'
      end
      # verify the required parameter 'reload_request' is set
      if @api_client.config.client_side_validation && reload_request.nil?
        fail ArgumentError, "Missing the required parameter 'reload_request' when calling CardApi.create_card_reload_using_post"
      end
      # resource path
      local_var_path = '/card/reload'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reload_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardReloadUnloadResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_reload_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # suspend card
    # @param suspend_request suspendRequest
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def create_card_suspend_using_post(suspend_request, opts = {})
      data, _status_code, _headers = create_card_suspend_using_post_with_http_info(suspend_request, opts)
      data
    end

    # suspend card
    # @param suspend_request suspendRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def create_card_suspend_using_post_with_http_info(suspend_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_suspend_using_post ...'
      end
      # verify the required parameter 'suspend_request' is set
      if @api_client.config.client_side_validation && suspend_request.nil?
        fail ArgumentError, "Missing the required parameter 'suspend_request' when calling CardApi.create_card_suspend_using_post"
      end
      # resource path
      local_var_path = '/card/suspend'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(suspend_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_suspend_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # token card
    # @param tokenize_request tokenizeRequest
    # @param [Hash] opts the optional parameters
    # @return [CardTokenResponseVO]
    def create_card_token_using_post(tokenize_request, opts = {})
      data, _status_code, _headers = create_card_token_using_post_with_http_info(tokenize_request, opts)
      data
    end

    # token card
    # @param tokenize_request tokenizeRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardTokenResponseVO, Fixnum, Hash)>] CardTokenResponseVO data, response status code and response headers
    def create_card_token_using_post_with_http_info(tokenize_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_token_using_post ...'
      end
      # verify the required parameter 'tokenize_request' is set
      if @api_client.config.client_side_validation && tokenize_request.nil?
        fail ArgumentError, "Missing the required parameter 'tokenize_request' when calling CardApi.create_card_token_using_post"
      end
      # resource path
      local_var_path = '/card/token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tokenize_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardTokenResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_token_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Card transfer
    # @param transfer_request transferRequest
    # @param [Hash] opts the optional parameters
    # @return [CardTransferResponseVO]
    def create_card_transfer_using_post(transfer_request, opts = {})
      data, _status_code, _headers = create_card_transfer_using_post_with_http_info(transfer_request, opts)
      data
    end

    # Create Card transfer
    # @param transfer_request transferRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardTransferResponseVO, Fixnum, Hash)>] CardTransferResponseVO data, response status code and response headers
    def create_card_transfer_using_post_with_http_info(transfer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_transfer_using_post ...'
      end
      # verify the required parameter 'transfer_request' is set
      if @api_client.config.client_side_validation && transfer_request.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_request' when calling CardApi.create_card_transfer_using_post"
      end
      # resource path
      local_var_path = '/card/transfer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transfer_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardTransferResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_transfer_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a card upload
    # @param reload_request reloadRequest
    # @param [Hash] opts the optional parameters
    # @return [CardReloadUnloadResponseVO]
    def create_card_unload_using_post(reload_request, opts = {})
      data, _status_code, _headers = create_card_unload_using_post_with_http_info(reload_request, opts)
      data
    end

    # Create a card upload
    # @param reload_request reloadRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardReloadUnloadResponseVO, Fixnum, Hash)>] CardReloadUnloadResponseVO data, response status code and response headers
    def create_card_unload_using_post_with_http_info(reload_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_unload_using_post ...'
      end
      # verify the required parameter 'reload_request' is set
      if @api_client.config.client_side_validation && reload_request.nil?
        fail ArgumentError, "Missing the required parameter 'reload_request' when calling CardApi.create_card_unload_using_post"
      end
      # resource path
      local_var_path = '/card/unload'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reload_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardReloadUnloadResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_unload_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a card client
    # @param card_client_request_co cardClientRequestCO
    # @param [Hash] opts the optional parameters
    # @return [CardClientResponseVO]
    def create_client_card_using_post(card_client_request_co, opts = {})
      data, _status_code, _headers = create_client_card_using_post_with_http_info(card_client_request_co, opts)
      data
    end

    # Create a card client
    # @param card_client_request_co cardClientRequestCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardClientResponseVO, Fixnum, Hash)>] CardClientResponseVO data, response status code and response headers
    def create_client_card_using_post_with_http_info(card_client_request_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_client_card_using_post ...'
      end
      # verify the required parameter 'card_client_request_co' is set
      if @api_client.config.client_side_validation && card_client_request_co.nil?
        fail ArgumentError, "Missing the required parameter 'card_client_request_co' when calling CardApi.create_client_card_using_post"
      end
      # resource path
      local_var_path = '/card/client'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(card_client_request_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardClientResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_client_card_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Card Balance
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @option opts [Date] :start_date start_date
    # @return [CardBalanceResponseVO]
    def get_card_balance_using_get(id, opts = {})
      data, _status_code, _headers = get_card_balance_using_get_with_http_info(id, opts)
      data
    end

    # Get a Card Balance
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @option opts [Date] :start_date start_date
    # @return [Array<(CardBalanceResponseVO, Fixnum, Hash)>] CardBalanceResponseVO data, response status code and response headers
    def get_card_balance_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_balance_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.get_card_balance_using_get"
      end
      # resource path
      local_var_path = '/card/balance/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardBalanceResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_balance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a card token
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [GetCardTokenResponseVO]
    def get_card_token_using_token(id, opts = {})
      data, _status_code, _headers = get_card_token_using_token_with_http_info(id, opts)
      data
    end

    # Get a card token
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCardTokenResponseVO, Fixnum, Hash)>] GetCardTokenResponseVO data, response status code and response headers
    def get_card_token_using_token_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_token_using_token ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.get_card_token_using_token"
      end
      # resource path
      local_var_path = '/card/token/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCardTokenResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_token_using_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a card transaction
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @option opts [Date] :start_date start_date
    # @return [CardTransactionResponseVO]
    def get_card_transaction_using_get(id, opts = {})
      data, _status_code, _headers = get_card_transaction_using_get_with_http_info(id, opts)
      data
    end

    # Get a card transaction
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @option opts [Date] :start_date start_date
    # @return [Array<(CardTransactionResponseVO, Fixnum, Hash)>] CardTransactionResponseVO data, response status code and response headers
    def get_card_transaction_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_transaction_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.get_card_transaction_using_get"
      end
      # resource path
      local_var_path = '/card/transaction/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardTransactionResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_transaction_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a card information
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def get_card_using_get(id, opts = {})
      data, _status_code, _headers = get_card_using_get_with_http_info(id, opts)
      data
    end

    # Get a card information
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def get_card_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.get_card_using_get"
      end
      # resource path
      local_var_path = '/card/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update a pin card
    # @param card_pin_request_co cardPinRequestCO
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def update_card_pin_using_post(card_pin_request_co, id, opts = {})
      data, _status_code, _headers = update_card_pin_using_post_with_http_info(card_pin_request_co, id, opts)
      data
    end

    # update a pin card
    # @param card_pin_request_co cardPinRequestCO
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def update_card_pin_using_post_with_http_info(card_pin_request_co, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.update_card_pin_using_post ...'
      end
      # verify the required parameter 'card_pin_request_co' is set
      if @api_client.config.client_side_validation && card_pin_request_co.nil?
        fail ArgumentError, "Missing the required parameter 'card_pin_request_co' when calling CardApi.update_card_pin_using_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.update_card_pin_using_post"
      end
      # resource path
      local_var_path = '/card/pin/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(card_pin_request_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#update_card_pin_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a card information
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [BaseResponseVO]
    def update_card_using_put(id, opts = {})
      data, _status_code, _headers = update_card_using_put_with_http_info(id, opts)
      data
    end

    # Update a card information
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponseVO, Fixnum, Hash)>] BaseResponseVO data, response status code and response headers
    def update_card_using_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.update_card_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.update_card_using_put"
      end
      # resource path
      local_var_path = '/card/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponseVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#update_card_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
