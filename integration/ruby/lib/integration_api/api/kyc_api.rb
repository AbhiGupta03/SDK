=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.3.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module IntegrationApi
  class KYCApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Do kyc for the client.
    # Do kyc for the client.
    # @param kyc_request_co kycRequestCO
    # @param [Hash] opts the optional parameters
    # @return [KycResponseVo]
    def create_kyc_using_post(kyc_request_co, opts = {})
      data, _status_code, _headers = create_kyc_using_post_with_http_info(kyc_request_co, opts)
      data
    end

    # Do kyc for the client.
    # Do kyc for the client.
    # @param kyc_request_co kycRequestCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(KycResponseVo, Fixnum, Hash)>] KycResponseVo data, response status code and response headers
    def create_kyc_using_post_with_http_info(kyc_request_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KYCApi.create_kyc_using_post ...'
      end
      # verify the required parameter 'kyc_request_co' is set
      if @api_client.config.client_side_validation && kyc_request_co.nil?
        fail ArgumentError, "Missing the required parameter 'kyc_request_co' when calling KYCApi.create_kyc_using_post"
      end
      # resource path
      local_var_path = '/kyc'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(kyc_request_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KycResponseVo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KYCApi#create_kyc_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch kyc_status for the given nucleus_client_id
    # Fetch kyc_status for the given nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :get_latest get_latest (default to false)
    # @option opts [String] :kyc_type kyc_type (default to all)
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @option opts [String] :product product (default to atom)
    # @return [Array<KycResponseVo>]
    def get_kyc_status_using_get(opts = {})
      data, _status_code, _headers = get_kyc_status_using_get_with_http_info(opts)
      data
    end

    # Fetch kyc_status for the given nucleus_client_id
    # Fetch kyc_status for the given nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :get_latest get_latest
    # @option opts [String] :kyc_type kyc_type
    # @option opts [String] :nucleus_business_id nucleus_business_id
    # @option opts [String] :nucleus_client_id nucleus_client_id
    # @option opts [String] :product product
    # @return [Array<(Array<KycResponseVo>, Fixnum, Hash)>] Array<KycResponseVo> data, response status code and response headers
    def get_kyc_status_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KYCApi.get_kyc_status_using_get ...'
      end
      # resource path
      local_var_path = '/kyc_status'

      # query parameters
      query_params = {}
      query_params[:'get_latest'] = opts[:'get_latest'] if !opts[:'get_latest'].nil?
      query_params[:'kyc_type'] = opts[:'kyc_type'] if !opts[:'kyc_type'].nil?
      query_params[:'nucleus_business_id'] = opts[:'nucleus_business_id'] if !opts[:'nucleus_business_id'].nil?
      query_params[:'nucleus_client_id'] = opts[:'nucleus_client_id'] if !opts[:'nucleus_client_id'].nil?
      query_params[:'product'] = opts[:'product'] if !opts[:'product'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<KycResponseVo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KYCApi#get_kyc_status_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
