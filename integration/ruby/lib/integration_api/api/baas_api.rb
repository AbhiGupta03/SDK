=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.3.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module IntegrationApi
  class BaasApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create a Baas account
    # @param baas_account_co baasAccountCO
    # @param [Hash] opts the optional parameters
    # @return [BaasAccountVO]
    def create_baas_account_using_post(baas_account_co, opts = {})
      data, _status_code, _headers = create_baas_account_using_post_with_http_info(baas_account_co, opts)
      data
    end

    # create a Baas account
    # @param baas_account_co baasAccountCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaasAccountVO, Fixnum, Hash)>] BaasAccountVO data, response status code and response headers
    def create_baas_account_using_post_with_http_info(baas_account_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.create_baas_account_using_post ...'
      end
      # verify the required parameter 'baas_account_co' is set
      if @api_client.config.client_side_validation && baas_account_co.nil?
        fail ArgumentError, "Missing the required parameter 'baas_account_co' when calling BaasApi.create_baas_account_using_post"
      end
      # resource path
      local_var_path = '/baas/account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(baas_account_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasAccountVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#create_baas_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Baas Business
    # @param baas_business_co baasBusinessCO
    # @param [Hash] opts the optional parameters
    # @return [BaasBusinessVO]
    def create_baas_business_using_post(baas_business_co, opts = {})
      data, _status_code, _headers = create_baas_business_using_post_with_http_info(baas_business_co, opts)
      data
    end

    # Create a Baas Business
    # @param baas_business_co baasBusinessCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaasBusinessVO, Fixnum, Hash)>] BaasBusinessVO data, response status code and response headers
    def create_baas_business_using_post_with_http_info(baas_business_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.create_baas_business_using_post ...'
      end
      # verify the required parameter 'baas_business_co' is set
      if @api_client.config.client_side_validation && baas_business_co.nil?
        fail ArgumentError, "Missing the required parameter 'baas_business_co' when calling BaasApi.create_baas_business_using_post"
      end
      # resource path
      local_var_path = '/baas/business'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(baas_business_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasBusinessVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#create_baas_business_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Baas Client
    # @param baas_client_co baasClientCO
    # @param [Hash] opts the optional parameters
    # @return [BaasClientVO]
    def create_baas_client_using_post(baas_client_co, opts = {})
      data, _status_code, _headers = create_baas_client_using_post_with_http_info(baas_client_co, opts)
      data
    end

    # Create a Baas Client
    # @param baas_client_co baasClientCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaasClientVO, Fixnum, Hash)>] BaasClientVO data, response status code and response headers
    def create_baas_client_using_post_with_http_info(baas_client_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.create_baas_client_using_post ...'
      end
      # verify the required parameter 'baas_client_co' is set
      if @api_client.config.client_side_validation && baas_client_co.nil?
        fail ArgumentError, "Missing the required parameter 'baas_client_co' when calling BaasApi.create_baas_client_using_post"
      end
      # resource path
      local_var_path = '/baas/client'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(baas_client_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasClientVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#create_baas_client_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create a Baas subaccount
    # @param baas_sub_account_co baasSubAccountCO
    # @param [Hash] opts the optional parameters
    # @return [BaasSubAccountVO]
    def create_baas_sub_account_using_post(baas_sub_account_co, opts = {})
      data, _status_code, _headers = create_baas_sub_account_using_post_with_http_info(baas_sub_account_co, opts)
      data
    end

    # create a Baas subaccount
    # @param baas_sub_account_co baasSubAccountCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaasSubAccountVO, Fixnum, Hash)>] BaasSubAccountVO data, response status code and response headers
    def create_baas_sub_account_using_post_with_http_info(baas_sub_account_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.create_baas_sub_account_using_post ...'
      end
      # verify the required parameter 'baas_sub_account_co' is set
      if @api_client.config.client_side_validation && baas_sub_account_co.nil?
        fail ArgumentError, "Missing the required parameter 'baas_sub_account_co' when calling BaasApi.create_baas_sub_account_using_post"
      end
      # resource path
      local_var_path = '/baas/subaccount'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(baas_sub_account_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasSubAccountVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#create_baas_sub_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Baas account statement
    # @param end_date end_date
    # @param nucleus_account_id nucleus_account_id
    # @param start_date start_date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :statement_type statement_type
    # @return [BaasStatementsVO]
    def get_baas_account_statement_using_get(end_date, nucleus_account_id, start_date, opts = {})
      data, _status_code, _headers = get_baas_account_statement_using_get_with_http_info(end_date, nucleus_account_id, start_date, opts)
      data
    end

    # Get a Baas account statement
    # @param end_date end_date
    # @param nucleus_account_id nucleus_account_id
    # @param start_date start_date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :statement_type statement_type
    # @return [Array<(BaasStatementsVO, Fixnum, Hash)>] BaasStatementsVO data, response status code and response headers
    def get_baas_account_statement_using_get_with_http_info(end_date, nucleus_account_id, start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.get_baas_account_statement_using_get ...'
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling BaasApi.get_baas_account_statement_using_get"
      end
      # verify the required parameter 'nucleus_account_id' is set
      if @api_client.config.client_side_validation && nucleus_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_account_id' when calling BaasApi.get_baas_account_statement_using_get"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling BaasApi.get_baas_account_statement_using_get"
      end
      # resource path
      local_var_path = '/baas/statement/{nucleus_account_id}'.sub('{' + 'nucleus_account_id' + '}', nucleus_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'end_date'] = end_date
      query_params[:'start_date'] = start_date
      query_params[:'statement_type'] = opts[:'statement_type'] if !opts[:'statement_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasStatementsVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#get_baas_account_statement_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Baas portfolio balance
    # @param nucleus_portfolio_id nucleus_portfolio_id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @option opts [Date] :start_date start_date
    # @return [BaasBalanceVO]
    def get_baas_portfolio_balance_using_get(nucleus_portfolio_id, opts = {})
      data, _status_code, _headers = get_baas_portfolio_balance_using_get_with_http_info(nucleus_portfolio_id, opts)
      data
    end

    # Get a Baas portfolio balance
    # @param nucleus_portfolio_id nucleus_portfolio_id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @option opts [Date] :start_date start_date
    # @return [Array<(BaasBalanceVO, Fixnum, Hash)>] BaasBalanceVO data, response status code and response headers
    def get_baas_portfolio_balance_using_get_with_http_info(nucleus_portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.get_baas_portfolio_balance_using_get ...'
      end
      # verify the required parameter 'nucleus_portfolio_id' is set
      if @api_client.config.client_side_validation && nucleus_portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_portfolio_id' when calling BaasApi.get_baas_portfolio_balance_using_get"
      end
      # resource path
      local_var_path = '/baas/balance/{nucleus_portfolio_id}'.sub('{' + 'nucleus_portfolio_id' + '}', nucleus_portfolio_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasBalanceVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#get_baas_portfolio_balance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Baas portfolio transaction
    # @param nucleus_portfolio_id nucleus_portfolio_id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @option opts [Date] :start_date start_date
    # @return [BaasTransactionsVO]
    def get_baas_portfolio_transaction_using_get(nucleus_portfolio_id, opts = {})
      data, _status_code, _headers = get_baas_portfolio_transaction_using_get_with_http_info(nucleus_portfolio_id, opts)
      data
    end

    # Get a Baas portfolio transaction
    # @param nucleus_portfolio_id nucleus_portfolio_id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date end_date
    # @option opts [Date] :start_date start_date
    # @return [Array<(BaasTransactionsVO, Fixnum, Hash)>] BaasTransactionsVO data, response status code and response headers
    def get_baas_portfolio_transaction_using_get_with_http_info(nucleus_portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.get_baas_portfolio_transaction_using_get ...'
      end
      # verify the required parameter 'nucleus_portfolio_id' is set
      if @api_client.config.client_side_validation && nucleus_portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_portfolio_id' when calling BaasApi.get_baas_portfolio_transaction_using_get"
      end
      # resource path
      local_var_path = '/baas/transaction/{nucleus_portfolio_id}'.sub('{' + 'nucleus_portfolio_id' + '}', nucleus_portfolio_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasTransactionsVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#get_baas_portfolio_transaction_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Baas business
    # @param nucleus_business_id nucleus_business_id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateBaasBusinessCO] :baas_business_co baasBusinessCO
    # @return [BaasBusinessVO]
    def update_baas_business_using_put(nucleus_business_id, opts = {})
      data, _status_code, _headers = update_baas_business_using_put_with_http_info(nucleus_business_id, opts)
      data
    end

    # Update a Baas business
    # @param nucleus_business_id nucleus_business_id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateBaasBusinessCO] :baas_business_co baasBusinessCO
    # @return [Array<(BaasBusinessVO, Fixnum, Hash)>] BaasBusinessVO data, response status code and response headers
    def update_baas_business_using_put_with_http_info(nucleus_business_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.update_baas_business_using_put ...'
      end
      # verify the required parameter 'nucleus_business_id' is set
      if @api_client.config.client_side_validation && nucleus_business_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_business_id' when calling BaasApi.update_baas_business_using_put"
      end
      # resource path
      local_var_path = '/baas/business/{nucleus_business_id}'.sub('{' + 'nucleus_business_id' + '}', nucleus_business_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'baas_business_co'])
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasBusinessVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#update_baas_business_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Baas client
    # @param nucleus_client_id nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateBaasClientCO] :baas_client_co baasClientCO
    # @return [BaasClientVO]
    def update_baas_client_using_put(nucleus_client_id, opts = {})
      data, _status_code, _headers = update_baas_client_using_put_with_http_info(nucleus_client_id, opts)
      data
    end

    # Update a Baas client
    # @param nucleus_client_id nucleus_client_id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateBaasClientCO] :baas_client_co baasClientCO
    # @return [Array<(BaasClientVO, Fixnum, Hash)>] BaasClientVO data, response status code and response headers
    def update_baas_client_using_put_with_http_info(nucleus_client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaasApi.update_baas_client_using_put ...'
      end
      # verify the required parameter 'nucleus_client_id' is set
      if @api_client.config.client_side_validation && nucleus_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'nucleus_client_id' when calling BaasApi.update_baas_client_using_put"
      end
      # resource path
      local_var_path = '/baas/client/{nucleus_client_id}'.sub('{' + 'nucleus_client_id' + '}', nucleus_client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'baas_client_co'])
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaasClientVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaasApi#update_baas_client_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
