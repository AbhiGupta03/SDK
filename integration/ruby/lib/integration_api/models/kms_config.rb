=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.2.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module IntegrationApi
  # Kms Config details
  class KmsConfig
    attr_accessor :aws_key_id

    attr_accessor :create_date

    attr_accessor :id

    # keyName
    attr_accessor :key_name

    # keyValue
    attr_accessor :key_value

    # nucleusClientId
    attr_accessor :nucleus_client_id

    # product
    attr_accessor :product

    attr_accessor :secondary_id

    attr_accessor :update_date

    attr_accessor :vendor_id

    # vendorName
    attr_accessor :vendor_name

    # walletId
    attr_accessor :wallet_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
          :'aws_key_id' => :'aws_key_id',
          :'create_date' => :'create_date',
          :'id' => :'id',
          :'key_name' => :'key_name',
          :'key_value' => :'key_value',
          :'nucleus_client_id' => :'nucleus_client_id',
          :'product' => :'product',
          :'secondary_id' => :'secondary_id',
          :'update_date' => :'update_date',
          :'vendor_id' => :'vendor_id',
          :'vendor_name' => :'vendor_name',
          :'wallet_id' => :'wallet_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
          :'aws_key_id' => :'String',
          :'create_date' => :'DateTime',
          :'id' => :'String',
          :'key_name' => :'String',
          :'key_value' => :'String',
          :'nucleus_client_id' => :'String',
          :'product' => :'String',
          :'secondary_id' => :'String',
          :'update_date' => :'DateTime',
          :'vendor_id' => :'String',
          :'vendor_name' => :'String',
          :'wallet_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'aws_key_id')
        self.aws_key_id = attributes[:'aws_key_id']
      end

      if attributes.has_key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'key_name')
        self.key_name = attributes[:'key_name']
      end

      if attributes.has_key?(:'key_value')
        self.key_value = attributes[:'key_value']
      end

      if attributes.has_key?(:'nucleus_client_id')
        self.nucleus_client_id = attributes[:'nucleus_client_id']
      end

      if attributes.has_key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end

      if attributes.has_key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.has_key?(:'vendor_id')
        self.vendor_id = attributes[:'vendor_id']
      end

      if attributes.has_key?(:'vendor_name')
        self.vendor_name = attributes[:'vendor_name']
      end

      if attributes.has_key?(:'wallet_id')
        self.wallet_id = attributes[:'wallet_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @key_name.nil?
        invalid_properties.push('invalid value for "key_name", key_name cannot be nil.')
      end

      if @nucleus_client_id.nil?
        invalid_properties.push('invalid value for "nucleus_client_id", nucleus_client_id cannot be nil.')
      end

      if @product.nil?
        invalid_properties.push('invalid value for "product", product cannot be nil.')
      end

      if @vendor_name.nil?
        invalid_properties.push('invalid value for "vendor_name", vendor_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @key_name.nil?
      return false if @nucleus_client_id.nil?
      return false if @product.nil?
      return false if @vendor_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aws_key_id == o.aws_key_id &&
          create_date == o.create_date &&
          id == o.id &&
          key_name == o.key_name &&
          key_value == o.key_value &&
          nucleus_client_id == o.nucleus_client_id &&
          product == o.product &&
          secondary_id == o.secondary_id &&
          update_date == o.update_date &&
          vendor_id == o.vendor_id &&
          vendor_name == o.vendor_name &&
          wallet_id == o.wallet_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [aws_key_id, create_date, id, key_name, key_value, nucleus_client_id, product, secondary_id, update_date, vendor_id, vendor_name, wallet_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", attributes[self.class.attribute_map[key]])
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end
      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        value
      when :Date
        value
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = IntegrationApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
