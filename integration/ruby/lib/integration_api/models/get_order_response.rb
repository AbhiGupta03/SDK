=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.2.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module IntegrationApi
  class GetOrderResponse
    attr_accessor :account_id

    attr_accessor :account_no

    attr_accessor :amount_cash

    attr_accessor :average_price

    attr_accessor :created

    attr_accessor :created_by

    attr_accessor :cumulative_quantity

    attr_accessor :fees

    attr_accessor :id

    attr_accessor :order_expires

    attr_accessor :order_no

    attr_accessor :quantity

    attr_accessor :side

    attr_accessor :status

    attr_accessor :status_message

    attr_accessor :symbol

    attr_accessor :total_order_amount

    attr_accessor :type

    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
          :'account_id' => :'account_id',
          :'account_no' => :'account_no',
          :'amount_cash' => :'amount_cash',
          :'average_price' => :'average_price',
          :'created' => :'created',
          :'created_by' => :'created_by',
          :'cumulative_quantity' => :'cumulative_quantity',
          :'fees' => :'fees',
          :'id' => :'id',
          :'order_expires' => :'order_expires',
          :'order_no' => :'order_no',
          :'quantity' => :'quantity',
          :'side' => :'side',
          :'status' => :'status',
          :'status_message' => :'status_message',
          :'symbol' => :'symbol',
          :'total_order_amount' => :'total_order_amount',
          :'type' => :'type',
          :'user_id' => :'user_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
          :'account_id' => :'String',
          :'account_no' => :'String',
          :'amount_cash' => :'Integer',
          :'average_price' => :'Float',
          :'created' => :'String',
          :'created_by' => :'String',
          :'cumulative_quantity' => :'Float',
          :'fees' => :'Float',
          :'id' => :'String',
          :'order_expires' => :'String',
          :'order_no' => :'String',
          :'quantity' => :'Float',
          :'side' => :'String',
          :'status' => :'String',
          :'status_message' => :'StatusMessage',
          :'symbol' => :'String',
          :'total_order_amount' => :'Integer',
          :'type' => :'String',
          :'user_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.has_key?(:'account_no')
        self.account_no = attributes[:'account_no']
      end

      if attributes.has_key?(:'amount_cash')
        self.amount_cash = attributes[:'amount_cash']
      end

      if attributes.has_key?(:'average_price')
        self.average_price = attributes[:'average_price']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.has_key?(:'cumulative_quantity')
        self.cumulative_quantity = attributes[:'cumulative_quantity']
      end

      if attributes.has_key?(:'fees')
        self.fees = attributes[:'fees']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'order_expires')
        self.order_expires = attributes[:'order_expires']
      end

      if attributes.has_key?(:'order_no')
        self.order_no = attributes[:'order_no']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'side')
        self.side = attributes[:'side']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'status_message')
        self.status_message = attributes[:'status_message']
      end

      if attributes.has_key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.has_key?(:'total_order_amount')
        self.total_order_amount = attributes[:'total_order_amount']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          account_no == o.account_no &&
          amount_cash == o.amount_cash &&
          average_price == o.average_price &&
          created == o.created &&
          created_by == o.created_by &&
          cumulative_quantity == o.cumulative_quantity &&
          fees == o.fees &&
          id == o.id &&
          order_expires == o.order_expires &&
          order_no == o.order_no &&
          quantity == o.quantity &&
          side == o.side &&
          status == o.status &&
          status_message == o.status_message &&
          symbol == o.symbol &&
          total_order_amount == o.total_order_amount &&
          type == o.type &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_id, account_no, amount_cash, average_price, created, created_by, cumulative_quantity, fees, id, order_expires, order_no, quantity, side, status, status_message, symbol, total_order_amount, type, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", attributes[self.class.attribute_map[key]])
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end
      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        value
      when :Date
        value
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = IntegrationApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
