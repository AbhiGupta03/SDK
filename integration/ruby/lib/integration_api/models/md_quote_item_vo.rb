=begin
#Hydrogen Integration API

#The Hydrogen Integration API

OpenAPI spec version: 1.2.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module IntegrationApi
  class MdQuoteItemVO
    attr_accessor :ask

    attr_accessor :bid

    attr_accessor :change

    attr_accessor :close

    attr_accessor :currency_code

    attr_accessor :day_range

    attr_accessor :exchange

    attr_accessor :high

    attr_accessor :last_trade

    attr_accessor :last_trade_time_stamp

    attr_accessor :low

    attr_accessor :market_cap

    attr_accessor :nucleus_security_id

    attr_accessor :open

    attr_accessor :prev_close

    attr_accessor :ticker

    attr_accessor :volume

    attr_accessor :year_range

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
          :'ask' => :'ask',
          :'bid' => :'bid',
          :'change' => :'change',
          :'close' => :'close',
          :'currency_code' => :'currency_code',
          :'day_range' => :'day_range',
          :'exchange' => :'exchange',
          :'high' => :'high',
          :'last_trade' => :'last_trade',
          :'last_trade_time_stamp' => :'last_trade_time_stamp',
          :'low' => :'low',
          :'market_cap' => :'market_cap',
          :'nucleus_security_id' => :'nucleus_security_id',
          :'open' => :'open',
          :'prev_close' => :'prev_close',
          :'ticker' => :'ticker',
          :'volume' => :'volume',
          :'year_range' => :'year_range'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
          :'ask' => :'Float',
          :'bid' => :'Float',
          :'change' => :'Float',
          :'close' => :'Float',
          :'currency_code' => :'String',
          :'day_range' => :'String',
          :'exchange' => :'String',
          :'high' => :'Float',
          :'last_trade' => :'Float',
          :'last_trade_time_stamp' => :'DateTime',
          :'low' => :'Float',
          :'market_cap' => :'String',
          :'nucleus_security_id' => :'String',
          :'open' => :'Float',
          :'prev_close' => :'Float',
          :'ticker' => :'String',
          :'volume' => :'Integer',
          :'year_range' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ask')
        self.ask = attributes[:'ask']
      end

      if attributes.has_key?(:'bid')
        self.bid = attributes[:'bid']
      end

      if attributes.has_key?(:'change')
        self.change = attributes[:'change']
      end

      if attributes.has_key?(:'close')
        self.close = attributes[:'close']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'day_range')
        self.day_range = attributes[:'day_range']
      end

      if attributes.has_key?(:'exchange')
        self.exchange = attributes[:'exchange']
      end

      if attributes.has_key?(:'high')
        self.high = attributes[:'high']
      end

      if attributes.has_key?(:'last_trade')
        self.last_trade = attributes[:'last_trade']
      end

      if attributes.has_key?(:'last_trade_time_stamp')
        self.last_trade_time_stamp = attributes[:'last_trade_time_stamp']
      end

      if attributes.has_key?(:'low')
        self.low = attributes[:'low']
      end

      if attributes.has_key?(:'market_cap')
        self.market_cap = attributes[:'market_cap']
      end

      if attributes.has_key?(:'nucleus_security_id')
        self.nucleus_security_id = attributes[:'nucleus_security_id']
      end

      if attributes.has_key?(:'open')
        self.open = attributes[:'open']
      end

      if attributes.has_key?(:'prev_close')
        self.prev_close = attributes[:'prev_close']
      end

      if attributes.has_key?(:'ticker')
        self.ticker = attributes[:'ticker']
      end

      if attributes.has_key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.has_key?(:'year_range')
        self.year_range = attributes[:'year_range']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ask == o.ask &&
          bid == o.bid &&
          change == o.change &&
          close == o.close &&
          currency_code == o.currency_code &&
          day_range == o.day_range &&
          exchange == o.exchange &&
          high == o.high &&
          last_trade == o.last_trade &&
          last_trade_time_stamp == o.last_trade_time_stamp &&
          low == o.low &&
          market_cap == o.market_cap &&
          nucleus_security_id == o.nucleus_security_id &&
          open == o.open &&
          prev_close == o.prev_close &&
          ticker == o.ticker &&
          volume == o.volume &&
          year_range == o.year_range
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ask, bid, change, close, currency_code, day_range, exchange, high, last_trade, last_trade_time_stamp, low, market_cap, nucleus_security_id, open, prev_close, ticker, volume, year_range].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", attributes[self.class.attribute_map[key]])
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end
      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        value
      when :Date
        value
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = IntegrationApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
