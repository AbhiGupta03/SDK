/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.google.gson.reflect.TypeToken;
import com.hydrogen.integration.*;
import com.hydrogen.integration.model.SMS;
import com.hydrogen.integration.model.SMSResponseVO;
import com.hydrogen.integration.model.SMSVO;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

public class SmsApi {
    private ApiClient apiClient;

    public SmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getVendorCallLimit
     * @param smsId sms_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVendorCallLimitCall(UUID smsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/status/{sms_id}"
            .replaceAll("\\{" + "sms_id" + "\\}", apiClient.escapeString(smsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVendorCallLimitValidateBeforeCall(UUID smsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'smsId' is set
        if (smsId == null) {
            throw new ApiException("Missing the required parameter 'smsId' when calling getVendorCallLimit(Async)");
        }


        com.squareup.okhttp.Call call = getVendorCallLimitCall(smsId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch details for corresponding sms_id
     * Fetch details for corresponding sms_id
     * @param smsId sms_id (required)
     * @return SMS
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SMS getVendorCallLimit(UUID smsId) throws ApiException {
        ApiResponse<SMS> resp = getVendorCallLimitWithHttpInfo(smsId);
        return resp.getData();
    }

    /**
     * Fetch details for corresponding sms_id
     * Fetch details for corresponding sms_id
     * @param smsId sms_id (required)
     * @return ApiResponse&lt;SMS&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SMS> getVendorCallLimitWithHttpInfo(UUID smsId) throws ApiException {
        com.squareup.okhttp.Call call = getVendorCallLimitValidateBeforeCall(smsId, null, null);
        Type localVarReturnType = new TypeToken<SMS>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch details for corresponding sms_id (asynchronously)
     * Fetch details for corresponding sms_id
     * @param smsId sms_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVendorCallLimitAsync(UUID smsId, final ApiCallback<SMS> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVendorCallLimitValidateBeforeCall(smsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SMS>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendMail
     * @param smsVO smsVO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendMailCall(SMSVO smsVO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = smsVO;

        // create path and map variables
        String localVarPath = "/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendMailValidateBeforeCall(SMSVO smsVO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smsVO' is set
        if (smsVO == null) {
            throw new ApiException("Missing the required parameter 'smsVO' when calling sendMail(Async)");
        }
        

        com.squareup.okhttp.Call call = sendMailCall(smsVO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send SMS to recipient
     * Send SMS to recipient
     * @param smsVO smsVO (required)
     * @return SMSResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SMSResponseVO sendMail(SMSVO smsVO) throws ApiException {
        ApiResponse<SMSResponseVO> resp = sendMailWithHttpInfo(smsVO);
        return resp.getData();
    }

    /**
     * Send SMS to recipient
     * Send SMS to recipient
     * @param smsVO smsVO (required)
     * @return ApiResponse&lt;SMSResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SMSResponseVO> sendMailWithHttpInfo(SMSVO smsVO) throws ApiException {
        com.squareup.okhttp.Call call = sendMailValidateBeforeCall(smsVO, null, null);
        Type localVarReturnType = new TypeToken<SMSResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send SMS to recipient (asynchronously)
     * Send SMS to recipient
     * @param smsVO smsVO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendMailAsync(SMSVO smsVO, final ApiCallback<SMSResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendMailValidateBeforeCall(smsVO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SMSResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
