/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.integration.model.AccountingFinalResponseVO;
import org.threeten.bp.OffsetDateTime;
import java.util.UUID;
import com.hydrogen.integration.model.VendorAccessConfigVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountingApi {
    private ApiClient apiClient;

    public AccountingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOrUpdateCustomer
     * @param nucleusClientId nucleus_client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateCustomerCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nucleusClientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_client_id", nucleusClientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateCustomerValidateBeforeCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling createOrUpdateCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrUpdateCustomerCall(nucleusClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     * @param nucleusClientId nucleus_client_id (required)
     * @return AccountingFinalResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountingFinalResponseVO createOrUpdateCustomer(UUID nucleusClientId) throws ApiException {
        ApiResponse<AccountingFinalResponseVO> resp = createOrUpdateCustomerWithHttpInfo(nucleusClientId);
        return resp.getData();
    }

    /**
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     * @param nucleusClientId nucleus_client_id (required)
     * @return ApiResponse&lt;AccountingFinalResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountingFinalResponseVO> createOrUpdateCustomerWithHttpInfo(UUID nucleusClientId) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdateCustomerValidateBeforeCall(nucleusClientId, null, null);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update/Create all customers in Nucleus for a given nucleus_client_id (asynchronously)
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     * @param nucleusClientId nucleus_client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateCustomerAsync(UUID nucleusClientId, final ApiCallback<AccountingFinalResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateCustomerValidateBeforeCall(nucleusClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrUpdateCustomerRevenue
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param startDate start_date (required)
     * @param accountingMethod accounting_method (optional, default to accrual)
     * @param endDate end_date (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateCustomerRevenueCall(UUID nucleusCustomerId, OffsetDateTime startDate, String accountingMethod, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customer_revenue/{nucleus_customer_id}"
            .replaceAll("\\{" + "nucleus_customer_id" + "\\}", apiClient.escapeString(nucleusCustomerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountingMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accounting_method", accountingMethod));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateCustomerRevenueValidateBeforeCall(UUID nucleusCustomerId, OffsetDateTime startDate, String accountingMethod, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusCustomerId' is set
        if (nucleusCustomerId == null) {
            throw new ApiException("Missing the required parameter 'nucleusCustomerId' when calling createOrUpdateCustomerRevenue(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling createOrUpdateCustomerRevenue(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrUpdateCustomerRevenueCall(nucleusCustomerId, startDate, accountingMethod, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param startDate start_date (required)
     * @param accountingMethod accounting_method (optional, default to accrual)
     * @param endDate end_date (optional, default to null)
     * @return AccountingFinalResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountingFinalResponseVO createOrUpdateCustomerRevenue(UUID nucleusCustomerId, OffsetDateTime startDate, String accountingMethod, OffsetDateTime endDate) throws ApiException {
        ApiResponse<AccountingFinalResponseVO> resp = createOrUpdateCustomerRevenueWithHttpInfo(nucleusCustomerId, startDate, accountingMethod, endDate);
        return resp.getData();
    }

    /**
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param startDate start_date (required)
     * @param accountingMethod accounting_method (optional, default to accrual)
     * @param endDate end_date (optional, default to null)
     * @return ApiResponse&lt;AccountingFinalResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountingFinalResponseVO> createOrUpdateCustomerRevenueWithHttpInfo(UUID nucleusCustomerId, OffsetDateTime startDate, String accountingMethod, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdateCustomerRevenueValidateBeforeCall(nucleusCustomerId, startDate, accountingMethod, endDate, null, null);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id (asynchronously)
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param startDate start_date (required)
     * @param accountingMethod accounting_method (optional, default to accrual)
     * @param endDate end_date (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateCustomerRevenueAsync(UUID nucleusCustomerId, OffsetDateTime startDate, String accountingMethod, OffsetDateTime endDate, final ApiCallback<AccountingFinalResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateCustomerRevenueValidateBeforeCall(nucleusCustomerId, startDate, accountingMethod, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrUpdateInvoicePayment
     * @param nucleusInvoiceId nucleus_invoice_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateInvoicePaymentCall(UUID nucleusInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/invoice_payment/{nucleus_invoice_id}"
            .replaceAll("\\{" + "nucleus_invoice_id" + "\\}", apiClient.escapeString(nucleusInvoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateInvoicePaymentValidateBeforeCall(UUID nucleusInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusInvoiceId' is set
        if (nucleusInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'nucleusInvoiceId' when calling createOrUpdateInvoicePayment(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrUpdateInvoicePaymentCall(nucleusInvoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     * @param nucleusInvoiceId nucleus_invoice_id (required)
     * @return AccountingFinalResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountingFinalResponseVO createOrUpdateInvoicePayment(UUID nucleusInvoiceId) throws ApiException {
        ApiResponse<AccountingFinalResponseVO> resp = createOrUpdateInvoicePaymentWithHttpInfo(nucleusInvoiceId);
        return resp.getData();
    }

    /**
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     * @param nucleusInvoiceId nucleus_invoice_id (required)
     * @return ApiResponse&lt;AccountingFinalResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountingFinalResponseVO> createOrUpdateInvoicePaymentWithHttpInfo(UUID nucleusInvoiceId) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdateInvoicePaymentValidateBeforeCall(nucleusInvoiceId, null, null);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id (asynchronously)
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     * @param nucleusInvoiceId nucleus_invoice_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateInvoicePaymentAsync(UUID nucleusInvoiceId, final ApiCallback<AccountingFinalResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateInvoicePaymentValidateBeforeCall(nucleusInvoiceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrUpdateInvoices
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param startDate start_date (required)
     * @param endDate end_date (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateInvoicesCall(UUID nucleusCustomerId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/invoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (nucleusCustomerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_customer_id", nucleusCustomerId));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateInvoicesValidateBeforeCall(UUID nucleusCustomerId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusCustomerId' is set
        if (nucleusCustomerId == null) {
            throw new ApiException("Missing the required parameter 'nucleusCustomerId' when calling createOrUpdateInvoices(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling createOrUpdateInvoices(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrUpdateInvoicesCall(nucleusCustomerId, startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param startDate start_date (required)
     * @param endDate end_date (optional, default to null)
     * @return AccountingFinalResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountingFinalResponseVO createOrUpdateInvoices(UUID nucleusCustomerId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<AccountingFinalResponseVO> resp = createOrUpdateInvoicesWithHttpInfo(nucleusCustomerId, startDate, endDate);
        return resp.getData();
    }

    /**
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param startDate start_date (required)
     * @param endDate end_date (optional, default to null)
     * @return ApiResponse&lt;AccountingFinalResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountingFinalResponseVO> createOrUpdateInvoicesWithHttpInfo(UUID nucleusCustomerId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdateInvoicesValidateBeforeCall(nucleusCustomerId, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update/Create all invoices in Nucleus for a given nucleus_client_id (asynchronously)
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param startDate start_date (required)
     * @param endDate end_date (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateInvoicesAsync(UUID nucleusCustomerId, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<AccountingFinalResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateInvoicesValidateBeforeCall(nucleusCustomerId, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAccountingVendorAccessConfigIsActiveById
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountingVendorAccessConfigIsActiveByIdCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/vendor/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountingVendorAccessConfigIsActiveByIdValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAccountingVendorAccessConfigIsActiveById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountingVendorAccessConfigIsActiveByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Permanently delete relation with particular accounting vendor.
     * Permanently delete relation with particular accounting vendor.
     * @param id id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountingVendorAccessConfigIsActiveById(UUID id) throws ApiException {
        deleteAccountingVendorAccessConfigIsActiveByIdWithHttpInfo(id);
    }

    /**
     * Permanently delete relation with particular accounting vendor.
     * Permanently delete relation with particular accounting vendor.
     * @param id id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountingVendorAccessConfigIsActiveByIdWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountingVendorAccessConfigIsActiveByIdValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Permanently delete relation with particular accounting vendor. (asynchronously)
     * Permanently delete relation with particular accounting vendor.
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountingVendorAccessConfigIsActiveByIdAsync(UUID id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountingVendorAccessConfigIsActiveByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccountingStats
     * @param accountingMethod accounting_method (optional, default to accrual)
     * @param nucleusClientId nucleus_client_id (optional)
     * @param periodLength period_length (optional)
     * @param periodMonth period_month (optional)
     * @param periodQuarter period_quarter (optional)
     * @param periodType period_type (optional)
     * @param periodYear period_year (optional)
     * @param report report (optional)
     * @param statementDate statement_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountingStatsCall(String accountingMethod, UUID nucleusClientId, String periodLength, Integer periodMonth, Integer periodQuarter, String periodType, Integer periodYear, String report, OffsetDateTime statementDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountingMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accounting_method", accountingMethod));
        if (nucleusClientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_client_id", nucleusClientId));
        if (periodLength != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_length", periodLength));
        if (periodMonth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_month", periodMonth));
        if (periodQuarter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_quarter", periodQuarter));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (periodYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_year", periodYear));
        if (report != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("report", report));
        if (statementDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statement_date", statementDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountingStatsValidateBeforeCall(String accountingMethod, UUID nucleusClientId, String periodLength, Integer periodMonth, Integer periodQuarter, String periodType, Integer periodYear, String report, OffsetDateTime statementDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountingStatsCall(accountingMethod, nucleusClientId, periodLength, periodMonth, periodQuarter, periodType, periodYear, report, statementDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get accounting stats from financial statements at the vendor for the business provided
     * Get accounting stats from financial statements at the vendor for the business provided
     * @param accountingMethod accounting_method (optional, default to accrual)
     * @param nucleusClientId nucleus_client_id (optional)
     * @param periodLength period_length (optional)
     * @param periodMonth period_month (optional)
     * @param periodQuarter period_quarter (optional)
     * @param periodType period_type (optional)
     * @param periodYear period_year (optional)
     * @param report report (optional)
     * @param statementDate statement_date (optional)
     * @return AccountingFinalResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountingFinalResponseVO getAccountingStats(String accountingMethod, UUID nucleusClientId, String periodLength, Integer periodMonth, Integer periodQuarter, String periodType, Integer periodYear, String report, OffsetDateTime statementDate) throws ApiException {
        ApiResponse<AccountingFinalResponseVO> resp = getAccountingStatsWithHttpInfo(accountingMethod, nucleusClientId, periodLength, periodMonth, periodQuarter, periodType, periodYear, report, statementDate);
        return resp.getData();
    }

    /**
     * Get accounting stats from financial statements at the vendor for the business provided
     * Get accounting stats from financial statements at the vendor for the business provided
     * @param accountingMethod accounting_method (optional, default to accrual)
     * @param nucleusClientId nucleus_client_id (optional)
     * @param periodLength period_length (optional)
     * @param periodMonth period_month (optional)
     * @param periodQuarter period_quarter (optional)
     * @param periodType period_type (optional)
     * @param periodYear period_year (optional)
     * @param report report (optional)
     * @param statementDate statement_date (optional)
     * @return ApiResponse&lt;AccountingFinalResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountingFinalResponseVO> getAccountingStatsWithHttpInfo(String accountingMethod, UUID nucleusClientId, String periodLength, Integer periodMonth, Integer periodQuarter, String periodType, Integer periodYear, String report, OffsetDateTime statementDate) throws ApiException {
        com.squareup.okhttp.Call call = getAccountingStatsValidateBeforeCall(accountingMethod, nucleusClientId, periodLength, periodMonth, periodQuarter, periodType, periodYear, report, statementDate, null, null);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get accounting stats from financial statements at the vendor for the business provided (asynchronously)
     * Get accounting stats from financial statements at the vendor for the business provided
     * @param accountingMethod accounting_method (optional, default to accrual)
     * @param nucleusClientId nucleus_client_id (optional)
     * @param periodLength period_length (optional)
     * @param periodMonth period_month (optional)
     * @param periodQuarter period_quarter (optional)
     * @param periodType period_type (optional)
     * @param periodYear period_year (optional)
     * @param report report (optional)
     * @param statementDate statement_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountingStatsAsync(String accountingMethod, UUID nucleusClientId, String periodLength, Integer periodMonth, Integer periodQuarter, String periodType, Integer periodYear, String report, OffsetDateTime statementDate, final ApiCallback<AccountingFinalResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountingStatsValidateBeforeCall(accountingMethod, nucleusClientId, periodLength, periodMonth, periodQuarter, periodType, periodYear, report, statementDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountingVendorInfoUsingClientId
     * @param nucleusClientId nucleus_client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountingVendorInfoUsingClientIdCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/vendor/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountingVendorInfoUsingClientIdValidateBeforeCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling getAccountingVendorInfoUsingClientId(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountingVendorInfoUsingClientIdCall(nucleusClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Accounting Vendor Config
     * Get Accounting vendor config information with its status.
     * @param nucleusClientId nucleus_client_id (required)
     * @return VendorAccessConfigVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VendorAccessConfigVO getAccountingVendorInfoUsingClientId(UUID nucleusClientId) throws ApiException {
        ApiResponse<VendorAccessConfigVO> resp = getAccountingVendorInfoUsingClientIdWithHttpInfo(nucleusClientId);
        return resp.getData();
    }

    /**
     * Get Accounting Vendor Config
     * Get Accounting vendor config information with its status.
     * @param nucleusClientId nucleus_client_id (required)
     * @return ApiResponse&lt;VendorAccessConfigVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VendorAccessConfigVO> getAccountingVendorInfoUsingClientIdWithHttpInfo(UUID nucleusClientId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountingVendorInfoUsingClientIdValidateBeforeCall(nucleusClientId, null, null);
        Type localVarReturnType = new TypeToken<VendorAccessConfigVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Accounting Vendor Config (asynchronously)
     * Get Accounting vendor config information with its status.
     * @param nucleusClientId nucleus_client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountingVendorInfoUsingClientIdAsync(UUID nucleusClientId, final ApiCallback<VendorAccessConfigVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountingVendorInfoUsingClientIdValidateBeforeCall(nucleusClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VendorAccessConfigVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountingVendorAccessConfigIsActiveById
     * @param id id (required)
     * @param isActive is_active (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAccountingVendorAccessConfigIsActiveByIdCall(UUID id, Boolean isActive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/vendor/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isActive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_active", isActive));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountingVendorAccessConfigIsActiveByIdValidateBeforeCall(UUID id, Boolean isActive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAccountingVendorAccessConfigIsActiveById(Async)");
        }
        
        // verify the required parameter 'isActive' is set
        if (isActive == null) {
            throw new ApiException("Missing the required parameter 'isActive' when calling updateAccountingVendorAccessConfigIsActiveById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountingVendorAccessConfigIsActiveByIdCall(id, isActive, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enable/Disable relation with particular accounting vendor.
     * Enable/Disable link with particular accounting vendor.
     * @param id id (required)
     * @param isActive is_active (required)
     * @return VendorAccessConfigVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VendorAccessConfigVO updateAccountingVendorAccessConfigIsActiveById(UUID id, Boolean isActive) throws ApiException {
        ApiResponse<VendorAccessConfigVO> resp = updateAccountingVendorAccessConfigIsActiveByIdWithHttpInfo(id, isActive);
        return resp.getData();
    }

    /**
     * Enable/Disable relation with particular accounting vendor.
     * Enable/Disable link with particular accounting vendor.
     * @param id id (required)
     * @param isActive is_active (required)
     * @return ApiResponse&lt;VendorAccessConfigVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VendorAccessConfigVO> updateAccountingVendorAccessConfigIsActiveByIdWithHttpInfo(UUID id, Boolean isActive) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountingVendorAccessConfigIsActiveByIdValidateBeforeCall(id, isActive, null, null);
        Type localVarReturnType = new TypeToken<VendorAccessConfigVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable/Disable relation with particular accounting vendor. (asynchronously)
     * Enable/Disable link with particular accounting vendor.
     * @param id id (required)
     * @param isActive is_active (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAccountingVendorAccessConfigIsActiveByIdAsync(UUID id, Boolean isActive, final ApiCallback<VendorAccessConfigVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountingVendorAccessConfigIsActiveByIdValidateBeforeCall(id, isActive, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VendorAccessConfigVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomer
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomerCall(UUID nucleusCustomerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customer/{nucleus_customer_id}"
            .replaceAll("\\{" + "nucleus_customer_id" + "\\}", apiClient.escapeString(nucleusCustomerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomerValidateBeforeCall(UUID nucleusCustomerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusCustomerId' is set
        if (nucleusCustomerId == null) {
            throw new ApiException("Missing the required parameter 'nucleusCustomerId' when calling updateCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomerCall(nucleusCustomerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update customer in Nucleus for a given nucleus_customer_id
     * Update customer in Nucleus for a given nucleus_customer_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @return AccountingFinalResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountingFinalResponseVO updateCustomer(UUID nucleusCustomerId) throws ApiException {
        ApiResponse<AccountingFinalResponseVO> resp = updateCustomerWithHttpInfo(nucleusCustomerId);
        return resp.getData();
    }

    /**
     * Update customer in Nucleus for a given nucleus_customer_id
     * Update customer in Nucleus for a given nucleus_customer_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @return ApiResponse&lt;AccountingFinalResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountingFinalResponseVO> updateCustomerWithHttpInfo(UUID nucleusCustomerId) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomerValidateBeforeCall(nucleusCustomerId, null, null);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update customer in Nucleus for a given nucleus_customer_id (asynchronously)
     * Update customer in Nucleus for a given nucleus_customer_id
     * @param nucleusCustomerId nucleus_customer_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomerAsync(UUID nucleusCustomerId, final ApiCallback<AccountingFinalResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomerValidateBeforeCall(nucleusCustomerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInvoice
     * @param nucleusInvoiceId nucleus_invoice_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInvoiceCall(UUID nucleusInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/invoice/{nucleus_invoice_id}"
            .replaceAll("\\{" + "nucleus_invoice_id" + "\\}", apiClient.escapeString(nucleusInvoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInvoiceValidateBeforeCall(UUID nucleusInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusInvoiceId' is set
        if (nucleusInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'nucleusInvoiceId' when calling updateInvoice(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInvoiceCall(nucleusInvoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update invoice in Nucleus for a given nucleus_invoice_id
     * Update invoice in Nucleus for a given nucleus_invoice_id
     * @param nucleusInvoiceId nucleus_invoice_id (required)
     * @return AccountingFinalResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountingFinalResponseVO updateInvoice(UUID nucleusInvoiceId) throws ApiException {
        ApiResponse<AccountingFinalResponseVO> resp = updateInvoiceWithHttpInfo(nucleusInvoiceId);
        return resp.getData();
    }

    /**
     * Update invoice in Nucleus for a given nucleus_invoice_id
     * Update invoice in Nucleus for a given nucleus_invoice_id
     * @param nucleusInvoiceId nucleus_invoice_id (required)
     * @return ApiResponse&lt;AccountingFinalResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountingFinalResponseVO> updateInvoiceWithHttpInfo(UUID nucleusInvoiceId) throws ApiException {
        com.squareup.okhttp.Call call = updateInvoiceValidateBeforeCall(nucleusInvoiceId, null, null);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update invoice in Nucleus for a given nucleus_invoice_id (asynchronously)
     * Update invoice in Nucleus for a given nucleus_invoice_id
     * @param nucleusInvoiceId nucleus_invoice_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInvoiceAsync(UUID nucleusInvoiceId, final ApiCallback<AccountingFinalResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInvoiceValidateBeforeCall(nucleusInvoiceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountingFinalResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
