/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.model.BrokerageAccountCO;
import com.hydrogen.integration.model.BrokerageAccountVO;
import com.hydrogen.integration.model.BrokerageBankLinkCO;
import com.hydrogen.integration.model.BrokerageBankLinkVO;
import com.hydrogen.integration.model.BrokerageClientCO;
import com.hydrogen.integration.model.BrokerageCreateClientVO;
import com.hydrogen.integration.model.BrokerageStatementVO;
import com.hydrogen.integration.model.BrokerageUpdateClientVO;
import com.hydrogen.integration.model.CreateOrderResponse;
import com.hydrogen.integration.model.GetOrderResponse;
import com.hydrogen.integration.model.ResponseEntity;
import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrokerageApi {
    private ApiClient apiClient;

    public BrokerageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrokerageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBankLinkUsingPost
     * @param brokerageBankLinkCO brokerageBankLinkCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPostCall(BrokerageBankLinkCO brokerageBankLinkCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = brokerageBankLinkCO;

        // create path and map variables
        String localVarPath = "/brokerage/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBankLinkUsingPostValidateBeforeCall(BrokerageBankLinkCO brokerageBankLinkCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'brokerageBankLinkCO' is set
        if (brokerageBankLinkCO == null) {
            throw new ApiException("Missing the required parameter 'brokerageBankLinkCO' when calling createBankLinkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBankLinkUsingPostCall(brokerageBankLinkCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create a Bank Link
     * 
     * @param brokerageBankLinkCO brokerageBankLinkCO (required)
     * @return BrokerageBankLinkVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageBankLinkVO createBankLinkUsingPost(BrokerageBankLinkCO brokerageBankLinkCO) throws ApiException {
        ApiResponse<BrokerageBankLinkVO> resp = createBankLinkUsingPostWithHttpInfo(brokerageBankLinkCO);
        return resp.getData();
    }

    /**
     * create a Bank Link
     * 
     * @param brokerageBankLinkCO brokerageBankLinkCO (required)
     * @return ApiResponse&lt;BrokerageBankLinkVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageBankLinkVO> createBankLinkUsingPostWithHttpInfo(BrokerageBankLinkCO brokerageBankLinkCO) throws ApiException {
        com.squareup.okhttp.Call call = createBankLinkUsingPostValidateBeforeCall(brokerageBankLinkCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a Bank Link (asynchronously)
     * 
     * @param brokerageBankLinkCO brokerageBankLinkCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPostAsync(BrokerageBankLinkCO brokerageBankLinkCO, final ApiCallback<BrokerageBankLinkVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBankLinkUsingPostValidateBeforeCall(brokerageBankLinkCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBrokerageAccountUsingPost
     * @param brokerageAccountCO brokerageAccountCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBrokerageAccountUsingPostCall(BrokerageAccountCO brokerageAccountCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = brokerageAccountCO;

        // create path and map variables
        String localVarPath = "/brokerage/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBrokerageAccountUsingPostValidateBeforeCall(BrokerageAccountCO brokerageAccountCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'brokerageAccountCO' is set
        if (brokerageAccountCO == null) {
            throw new ApiException("Missing the required parameter 'brokerageAccountCO' when calling createBrokerageAccountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBrokerageAccountUsingPostCall(brokerageAccountCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create a Brokerage account
     * 
     * @param brokerageAccountCO brokerageAccountCO (required)
     * @return BrokerageAccountVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageAccountVO createBrokerageAccountUsingPost(BrokerageAccountCO brokerageAccountCO) throws ApiException {
        ApiResponse<BrokerageAccountVO> resp = createBrokerageAccountUsingPostWithHttpInfo(brokerageAccountCO);
        return resp.getData();
    }

    /**
     * create a Brokerage account
     * 
     * @param brokerageAccountCO brokerageAccountCO (required)
     * @return ApiResponse&lt;BrokerageAccountVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageAccountVO> createBrokerageAccountUsingPostWithHttpInfo(BrokerageAccountCO brokerageAccountCO) throws ApiException {
        com.squareup.okhttp.Call call = createBrokerageAccountUsingPostValidateBeforeCall(brokerageAccountCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageAccountVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a Brokerage account (asynchronously)
     * 
     * @param brokerageAccountCO brokerageAccountCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBrokerageAccountUsingPostAsync(BrokerageAccountCO brokerageAccountCO, final ApiCallback<BrokerageAccountVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBrokerageAccountUsingPostValidateBeforeCall(brokerageAccountCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageAccountVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBrokerageClientUsingPost
     * @param clientCO clientCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBrokerageClientUsingPostCall(BrokerageClientCO clientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientCO;

        // create path and map variables
        String localVarPath = "/brokerage/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBrokerageClientUsingPostValidateBeforeCall(BrokerageClientCO clientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientCO' is set
        if (clientCO == null) {
            throw new ApiException("Missing the required parameter 'clientCO' when calling createBrokerageClientUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBrokerageClientUsingPostCall(clientCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Brokerage Client
     * 
     * @param clientCO clientCO (required)
     * @return BrokerageCreateClientVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageCreateClientVO createBrokerageClientUsingPost(BrokerageClientCO clientCO) throws ApiException {
        ApiResponse<BrokerageCreateClientVO> resp = createBrokerageClientUsingPostWithHttpInfo(clientCO);
        return resp.getData();
    }

    /**
     * Create a Brokerage Client
     * 
     * @param clientCO clientCO (required)
     * @return ApiResponse&lt;BrokerageCreateClientVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageCreateClientVO> createBrokerageClientUsingPostWithHttpInfo(BrokerageClientCO clientCO) throws ApiException {
        com.squareup.okhttp.Call call = createBrokerageClientUsingPostValidateBeforeCall(clientCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageCreateClientVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Brokerage Client (asynchronously)
     * 
     * @param clientCO clientCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBrokerageClientUsingPostAsync(BrokerageClientCO clientCO, final ApiCallback<BrokerageCreateClientVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBrokerageClientUsingPostValidateBeforeCall(clientCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageCreateClientVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrderUsingPost
     * @param nucleusOrderId nucleus_order_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrderUsingPostCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nucleusOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_order_id", nucleusOrderId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrderUsingPostValidateBeforeCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusOrderId' is set
        if (nucleusOrderId == null) {
            throw new ApiException("Missing the required parameter 'nucleusOrderId' when calling createOrderUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrderUsingPostCall(nucleusOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @return CreateOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateOrderResponse createOrderUsingPost(UUID nucleusOrderId) throws ApiException {
        ApiResponse<CreateOrderResponse> resp = createOrderUsingPostWithHttpInfo(nucleusOrderId);
        return resp.getData();
    }

    /**
     * Create an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @return ApiResponse&lt;CreateOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateOrderResponse> createOrderUsingPostWithHttpInfo(UUID nucleusOrderId) throws ApiException {
        com.squareup.okhttp.Call call = createOrderUsingPostValidateBeforeCall(nucleusOrderId, null, null);
        Type localVarReturnType = new TypeToken<CreateOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Order (asynchronously)
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrderUsingPostAsync(UUID nucleusOrderId, final ApiCallback<CreateOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrderUsingPostValidateBeforeCall(nucleusOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBankLinkUsingDelete
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDeleteCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBankLinkUsingDeleteValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling deleteBankLinkUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteCall(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ResponseEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseEntity deleteBankLinkUsingDelete(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<ResponseEntity> resp = deleteBankLinkUsingDeleteWithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Delete a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;ResponseEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseEntity> deleteBankLinkUsingDeleteWithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Bank Link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDeleteAsync(UUID nucleusBankLinkId, final ApiCallback<ResponseEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOrderUsingDelete
     * @param nucleusOrderId nucleus_order_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderUsingDeleteCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nucleusOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_order_id", nucleusOrderId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderUsingDeleteValidateBeforeCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusOrderId' is set
        if (nucleusOrderId == null) {
            throw new ApiException("Missing the required parameter 'nucleusOrderId' when calling deleteOrderUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderUsingDeleteCall(nucleusOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderUsingDelete(UUID nucleusOrderId) throws ApiException {
        deleteOrderUsingDeleteWithHttpInfo(nucleusOrderId);
    }

    /**
     * Delete an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderUsingDeleteWithHttpInfo(UUID nucleusOrderId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderUsingDeleteValidateBeforeCall(nucleusOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Order (asynchronously)
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderUsingDeleteAsync(UUID nucleusOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderUsingDeleteValidateBeforeCall(nucleusOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBankLinkUsingGet
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGetCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankLinkUsingGetValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling getBankLinkUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBankLinkUsingGetCall(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return BrokerageBankLinkVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageBankLinkVO getBankLinkUsingGet(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<BrokerageBankLinkVO> resp = getBankLinkUsingGetWithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Get a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;BrokerageBankLinkVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageBankLinkVO> getBankLinkUsingGetWithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = getBankLinkUsingGetValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Bank Link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGetAsync(UUID nucleusBankLinkId, final ApiCallback<BrokerageBankLinkVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankLinkUsingGetValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBrokerageAccountStatementUsingGet
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBrokerageAccountStatementUsingGetCall(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/{nucleus_account_id}/statement"
            .replaceAll("\\{" + "nucleus_account_id" + "\\}", apiClient.escapeString(nucleusAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (statementType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statement_type", statementType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBrokerageAccountStatementUsingGetValidateBeforeCall(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getBrokerageAccountStatementUsingGet(Async)");
        }
        
        // verify the required parameter 'nucleusAccountId' is set
        if (nucleusAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAccountId' when calling getBrokerageAccountStatementUsingGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getBrokerageAccountStatementUsingGet(Async)");
        }
        
        // verify the required parameter 'statementType' is set
        if (statementType == null) {
            throw new ApiException("Missing the required parameter 'statementType' when calling getBrokerageAccountStatementUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBrokerageAccountStatementUsingGetCall(endDate, nucleusAccountId, startDate, statementType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Brokerage account statement
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (required)
     * @return BrokerageStatementVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageStatementVO getBrokerageAccountStatementUsingGet(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType) throws ApiException {
        ApiResponse<BrokerageStatementVO> resp = getBrokerageAccountStatementUsingGetWithHttpInfo(endDate, nucleusAccountId, startDate, statementType);
        return resp.getData();
    }

    /**
     * Get a Brokerage account statement
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (required)
     * @return ApiResponse&lt;BrokerageStatementVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageStatementVO> getBrokerageAccountStatementUsingGetWithHttpInfo(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType) throws ApiException {
        com.squareup.okhttp.Call call = getBrokerageAccountStatementUsingGetValidateBeforeCall(endDate, nucleusAccountId, startDate, statementType, null, null);
        Type localVarReturnType = new TypeToken<BrokerageStatementVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Brokerage account statement (asynchronously)
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBrokerageAccountStatementUsingGetAsync(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType, final ApiCallback<BrokerageStatementVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBrokerageAccountStatementUsingGetValidateBeforeCall(endDate, nucleusAccountId, startDate, statementType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageStatementVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderUsingGet
     * @param nucleusOrderId nucleus_order_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderUsingGetCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nucleusOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_order_id", nucleusOrderId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderUsingGetValidateBeforeCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusOrderId' is set
        if (nucleusOrderId == null) {
            throw new ApiException("Missing the required parameter 'nucleusOrderId' when calling getOrderUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderUsingGetCall(nucleusOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @return GetOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOrderResponse getOrderUsingGet(UUID nucleusOrderId) throws ApiException {
        ApiResponse<GetOrderResponse> resp = getOrderUsingGetWithHttpInfo(nucleusOrderId);
        return resp.getData();
    }

    /**
     * Get an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @return ApiResponse&lt;GetOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOrderResponse> getOrderUsingGetWithHttpInfo(UUID nucleusOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderUsingGetValidateBeforeCall(nucleusOrderId, null, null);
        Type localVarReturnType = new TypeToken<GetOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Order (asynchronously)
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderUsingGetAsync(UUID nucleusOrderId, final ApiCallback<GetOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderUsingGetValidateBeforeCall(nucleusOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBankLinkUsingPut
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPutCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBankLinkUsingPutValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling updateBankLinkUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBankLinkUsingPutCall(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return BrokerageBankLinkVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageBankLinkVO updateBankLinkUsingPut(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<BrokerageBankLinkVO> resp = updateBankLinkUsingPutWithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Update a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;BrokerageBankLinkVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageBankLinkVO> updateBankLinkUsingPutWithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = updateBankLinkUsingPutValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Bank Link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPutAsync(UUID nucleusBankLinkId, final ApiCallback<BrokerageBankLinkVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBankLinkUsingPutValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBrokerageClientUsingPut
     * @param clientCO clientCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBrokerageClientUsingPutCall(BrokerageClientCO clientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientCO;

        // create path and map variables
        String localVarPath = "/brokerage/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBrokerageClientUsingPutValidateBeforeCall(BrokerageClientCO clientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientCO' is set
        if (clientCO == null) {
            throw new ApiException("Missing the required parameter 'clientCO' when calling updateBrokerageClientUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBrokerageClientUsingPutCall(clientCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Brokerage client
     * 
     * @param clientCO clientCO (required)
     * @return BrokerageUpdateClientVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageUpdateClientVO updateBrokerageClientUsingPut(BrokerageClientCO clientCO) throws ApiException {
        ApiResponse<BrokerageUpdateClientVO> resp = updateBrokerageClientUsingPutWithHttpInfo(clientCO);
        return resp.getData();
    }

    /**
     * Update a Brokerage client
     * 
     * @param clientCO clientCO (required)
     * @return ApiResponse&lt;BrokerageUpdateClientVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageUpdateClientVO> updateBrokerageClientUsingPutWithHttpInfo(BrokerageClientCO clientCO) throws ApiException {
        com.squareup.okhttp.Call call = updateBrokerageClientUsingPutValidateBeforeCall(clientCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageUpdateClientVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Brokerage client (asynchronously)
     * 
     * @param clientCO clientCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBrokerageClientUsingPutAsync(BrokerageClientCO clientCO, final ApiCallback<BrokerageUpdateClientVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBrokerageClientUsingPutValidateBeforeCall(clientCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageUpdateClientVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
