/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;
import com.hydrogen.integration.model.BrokerageAccountCO;
import com.hydrogen.integration.model.BrokerageBalanceVO;
import com.hydrogen.integration.model.BrokerageCreateClientCO;
import com.hydrogen.integration.model.BrokerageCreateClientVO;
import com.hydrogen.integration.model.BrokerageDepositVO;
import com.hydrogen.integration.model.BrokerageDocumentVO;
import com.hydrogen.integration.model.BrokerageHoldingVO;
import com.hydrogen.integration.model.BrokerageOrderCO;
import com.hydrogen.integration.model.BrokerageOrderVO;
import com.hydrogen.integration.model.BrokeragePerformanceVO;
import com.hydrogen.integration.model.BrokerageTransactionVO;
import com.hydrogen.integration.model.BrokerageUpdateClientCO;
import com.hydrogen.integration.model.BrokerageUpdateClientVO;
import com.hydrogen.integration.model.BrokerageWithdrawalCO;
import com.hydrogen.integration.model.GetTransactionsResponse;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.integration.model.BrokerageAccountVO;
import com.hydrogen.integration.model.BrokerageBankLinkCO;
import com.hydrogen.integration.model.BrokerageBankLinkVO;
import com.hydrogen.integration.model.BrokerageDepositCO;
import com.hydrogen.integration.model.BrokerageDocumentCO;
import com.hydrogen.integration.model.BrokerageSecuritiesVO;
import com.hydrogen.integration.model.BrokerageStatementVO;
import com.hydrogen.integration.model.BrokerageWithdrawalVO;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrokerageApi {
    private ApiClient apiClient;

    public BrokerageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrokerageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelOrderUsingPut
     * @param nucleusOrderId nucleus_order_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelOrderUsingPutCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/order/{nucleus_order_id}"
            .replaceAll("\\{" + "nucleus_order_id" + "\\}", apiClient.escapeString(nucleusOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelOrderUsingPutValidateBeforeCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusOrderId' is set
        if (nucleusOrderId == null) {
            throw new ApiException("Missing the required parameter 'nucleusOrderId' when calling cancelOrderUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelOrderUsingPutCall(nucleusOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cancelOrderUsingPut(UUID nucleusOrderId) throws ApiException {
        cancelOrderUsingPutWithHttpInfo(nucleusOrderId);
    }

    /**
     * Cancel an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cancelOrderUsingPutWithHttpInfo(UUID nucleusOrderId) throws ApiException {
        com.squareup.okhttp.Call call = cancelOrderUsingPutValidateBeforeCall(nucleusOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancel an Order (asynchronously)
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelOrderUsingPutAsync(UUID nucleusOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelOrderUsingPutValidateBeforeCall(nucleusOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createBankLinkUsingPost1
     * @param brokerageBankLinkCO brokerageBankLinkCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPost1Call(BrokerageBankLinkCO brokerageBankLinkCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = brokerageBankLinkCO;

        // create path and map variables
        String localVarPath = "/brokerage/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBankLinkUsingPost1ValidateBeforeCall(BrokerageBankLinkCO brokerageBankLinkCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'brokerageBankLinkCO' is set
        if (brokerageBankLinkCO == null) {
            throw new ApiException("Missing the required parameter 'brokerageBankLinkCO' when calling createBankLinkUsingPost1(Async)");
        }
        

        com.squareup.okhttp.Call call = createBankLinkUsingPost1Call(brokerageBankLinkCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create a Bank Link
     * 
     * @param brokerageBankLinkCO brokerageBankLinkCO (required)
     * @return BrokerageBankLinkVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageBankLinkVO createBankLinkUsingPost1(BrokerageBankLinkCO brokerageBankLinkCO) throws ApiException {
        ApiResponse<BrokerageBankLinkVO> resp = createBankLinkUsingPost1WithHttpInfo(brokerageBankLinkCO);
        return resp.getData();
    }

    /**
     * create a Bank Link
     * 
     * @param brokerageBankLinkCO brokerageBankLinkCO (required)
     * @return ApiResponse&lt;BrokerageBankLinkVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageBankLinkVO> createBankLinkUsingPost1WithHttpInfo(BrokerageBankLinkCO brokerageBankLinkCO) throws ApiException {
        com.squareup.okhttp.Call call = createBankLinkUsingPost1ValidateBeforeCall(brokerageBankLinkCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a Bank Link (asynchronously)
     * 
     * @param brokerageBankLinkCO brokerageBankLinkCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPost1Async(BrokerageBankLinkCO brokerageBankLinkCO, final ApiCallback<BrokerageBankLinkVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBankLinkUsingPost1ValidateBeforeCall(brokerageBankLinkCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBrokerageAccountUsingPost
     * @param brokerageAccountCO brokerageAccountCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBrokerageAccountUsingPostCall(BrokerageAccountCO brokerageAccountCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = brokerageAccountCO;

        // create path and map variables
        String localVarPath = "/brokerage/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBrokerageAccountUsingPostValidateBeforeCall(BrokerageAccountCO brokerageAccountCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'brokerageAccountCO' is set
        if (brokerageAccountCO == null) {
            throw new ApiException("Missing the required parameter 'brokerageAccountCO' when calling createBrokerageAccountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBrokerageAccountUsingPostCall(brokerageAccountCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create a Brokerage account
     * 
     * @param brokerageAccountCO brokerageAccountCO (required)
     * @return BrokerageAccountVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageAccountVO createBrokerageAccountUsingPost(BrokerageAccountCO brokerageAccountCO) throws ApiException {
        ApiResponse<BrokerageAccountVO> resp = createBrokerageAccountUsingPostWithHttpInfo(brokerageAccountCO);
        return resp.getData();
    }

    /**
     * create a Brokerage account
     * 
     * @param brokerageAccountCO brokerageAccountCO (required)
     * @return ApiResponse&lt;BrokerageAccountVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageAccountVO> createBrokerageAccountUsingPostWithHttpInfo(BrokerageAccountCO brokerageAccountCO) throws ApiException {
        com.squareup.okhttp.Call call = createBrokerageAccountUsingPostValidateBeforeCall(brokerageAccountCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageAccountVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a Brokerage account (asynchronously)
     * 
     * @param brokerageAccountCO brokerageAccountCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBrokerageAccountUsingPostAsync(BrokerageAccountCO brokerageAccountCO, final ApiCallback<BrokerageAccountVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBrokerageAccountUsingPostValidateBeforeCall(brokerageAccountCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageAccountVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBrokerageClientUsingPost
     * @param clientCO clientCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBrokerageClientUsingPostCall(BrokerageCreateClientCO clientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientCO;

        // create path and map variables
        String localVarPath = "/brokerage/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBrokerageClientUsingPostValidateBeforeCall(BrokerageCreateClientCO clientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientCO' is set
        if (clientCO == null) {
            throw new ApiException("Missing the required parameter 'clientCO' when calling createBrokerageClientUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBrokerageClientUsingPostCall(clientCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Brokerage Client
     * 
     * @param clientCO clientCO (required)
     * @return BrokerageCreateClientVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageCreateClientVO createBrokerageClientUsingPost(BrokerageCreateClientCO clientCO) throws ApiException {
        ApiResponse<BrokerageCreateClientVO> resp = createBrokerageClientUsingPostWithHttpInfo(clientCO);
        return resp.getData();
    }

    /**
     * Create a Brokerage Client
     * 
     * @param clientCO clientCO (required)
     * @return ApiResponse&lt;BrokerageCreateClientVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageCreateClientVO> createBrokerageClientUsingPostWithHttpInfo(BrokerageCreateClientCO clientCO) throws ApiException {
        com.squareup.okhttp.Call call = createBrokerageClientUsingPostValidateBeforeCall(clientCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageCreateClientVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Brokerage Client (asynchronously)
     * 
     * @param clientCO clientCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBrokerageClientUsingPostAsync(BrokerageCreateClientCO clientCO, final ApiCallback<BrokerageCreateClientVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBrokerageClientUsingPostValidateBeforeCall(clientCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageCreateClientVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDepositUsingPost
     * @param brokerageDepositCO brokerageDepositCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDepositUsingPostCall(BrokerageDepositCO brokerageDepositCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = brokerageDepositCO;

        // create path and map variables
        String localVarPath = "/brokerage/deposit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDepositUsingPostValidateBeforeCall(BrokerageDepositCO brokerageDepositCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'brokerageDepositCO' is set
        if (brokerageDepositCO == null) {
            throw new ApiException("Missing the required parameter 'brokerageDepositCO' when calling createDepositUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createDepositUsingPostCall(brokerageDepositCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a deposit
     * 
     * @param brokerageDepositCO brokerageDepositCO (required)
     * @return BrokerageDepositVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageDepositVO createDepositUsingPost(BrokerageDepositCO brokerageDepositCO) throws ApiException {
        ApiResponse<BrokerageDepositVO> resp = createDepositUsingPostWithHttpInfo(brokerageDepositCO);
        return resp.getData();
    }

    /**
     * Create a deposit
     * 
     * @param brokerageDepositCO brokerageDepositCO (required)
     * @return ApiResponse&lt;BrokerageDepositVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageDepositVO> createDepositUsingPostWithHttpInfo(BrokerageDepositCO brokerageDepositCO) throws ApiException {
        com.squareup.okhttp.Call call = createDepositUsingPostValidateBeforeCall(brokerageDepositCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageDepositVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a deposit (asynchronously)
     * 
     * @param brokerageDepositCO brokerageDepositCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDepositUsingPostAsync(BrokerageDepositCO brokerageDepositCO, final ApiCallback<BrokerageDepositVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDepositUsingPostValidateBeforeCall(brokerageDepositCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageDepositVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDocumentUsingPost
     * @param documentCO documentCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDocumentUsingPostCall(BrokerageDocumentCO documentCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documentCO;

        // create path and map variables
        String localVarPath = "/brokerage/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDocumentUsingPostValidateBeforeCall(BrokerageDocumentCO documentCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentCO' is set
        if (documentCO == null) {
            throw new ApiException("Missing the required parameter 'documentCO' when calling createDocumentUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createDocumentUsingPostCall(documentCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Brokerage document
     * 
     * @param documentCO documentCO (required)
     * @return BrokerageDocumentVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageDocumentVO createDocumentUsingPost(BrokerageDocumentCO documentCO) throws ApiException {
        ApiResponse<BrokerageDocumentVO> resp = createDocumentUsingPostWithHttpInfo(documentCO);
        return resp.getData();
    }

    /**
     * Create a Brokerage document
     * 
     * @param documentCO documentCO (required)
     * @return ApiResponse&lt;BrokerageDocumentVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageDocumentVO> createDocumentUsingPostWithHttpInfo(BrokerageDocumentCO documentCO) throws ApiException {
        com.squareup.okhttp.Call call = createDocumentUsingPostValidateBeforeCall(documentCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageDocumentVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Brokerage document (asynchronously)
     * 
     * @param documentCO documentCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDocumentUsingPostAsync(BrokerageDocumentCO documentCO, final ApiCallback<BrokerageDocumentVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDocumentUsingPostValidateBeforeCall(documentCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageDocumentVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrderUsingPost
     * @param brokerageOrderCO brokerageOrderCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrderUsingPostCall(BrokerageOrderCO brokerageOrderCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = brokerageOrderCO;

        // create path and map variables
        String localVarPath = "/brokerage/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrderUsingPostValidateBeforeCall(BrokerageOrderCO brokerageOrderCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'brokerageOrderCO' is set
        if (brokerageOrderCO == null) {
            throw new ApiException("Missing the required parameter 'brokerageOrderCO' when calling createOrderUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrderUsingPostCall(brokerageOrderCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an Order
     * 
     * @param brokerageOrderCO brokerageOrderCO (required)
     * @return BrokerageOrderVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageOrderVO createOrderUsingPost(BrokerageOrderCO brokerageOrderCO) throws ApiException {
        ApiResponse<BrokerageOrderVO> resp = createOrderUsingPostWithHttpInfo(brokerageOrderCO);
        return resp.getData();
    }

    /**
     * Create an Order
     * 
     * @param brokerageOrderCO brokerageOrderCO (required)
     * @return ApiResponse&lt;BrokerageOrderVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageOrderVO> createOrderUsingPostWithHttpInfo(BrokerageOrderCO brokerageOrderCO) throws ApiException {
        com.squareup.okhttp.Call call = createOrderUsingPostValidateBeforeCall(brokerageOrderCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageOrderVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Order (asynchronously)
     * 
     * @param brokerageOrderCO brokerageOrderCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrderUsingPostAsync(BrokerageOrderCO brokerageOrderCO, final ApiCallback<BrokerageOrderVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrderUsingPostValidateBeforeCall(brokerageOrderCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageOrderVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createWithdrawalUsingPost
     * @param brokerageWithdrawalCO brokerageWithdrawalCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createWithdrawalUsingPostCall(BrokerageWithdrawalCO brokerageWithdrawalCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = brokerageWithdrawalCO;

        // create path and map variables
        String localVarPath = "/brokerage/withdrawal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createWithdrawalUsingPostValidateBeforeCall(BrokerageWithdrawalCO brokerageWithdrawalCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'brokerageWithdrawalCO' is set
        if (brokerageWithdrawalCO == null) {
            throw new ApiException("Missing the required parameter 'brokerageWithdrawalCO' when calling createWithdrawalUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createWithdrawalUsingPostCall(brokerageWithdrawalCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a withdrawal
     * 
     * @param brokerageWithdrawalCO brokerageWithdrawalCO (required)
     * @return BrokerageWithdrawalVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageWithdrawalVO createWithdrawalUsingPost(BrokerageWithdrawalCO brokerageWithdrawalCO) throws ApiException {
        ApiResponse<BrokerageWithdrawalVO> resp = createWithdrawalUsingPostWithHttpInfo(brokerageWithdrawalCO);
        return resp.getData();
    }

    /**
     * Create a withdrawal
     * 
     * @param brokerageWithdrawalCO brokerageWithdrawalCO (required)
     * @return ApiResponse&lt;BrokerageWithdrawalVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageWithdrawalVO> createWithdrawalUsingPostWithHttpInfo(BrokerageWithdrawalCO brokerageWithdrawalCO) throws ApiException {
        com.squareup.okhttp.Call call = createWithdrawalUsingPostValidateBeforeCall(brokerageWithdrawalCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageWithdrawalVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a withdrawal (asynchronously)
     * 
     * @param brokerageWithdrawalCO brokerageWithdrawalCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWithdrawalUsingPostAsync(BrokerageWithdrawalCO brokerageWithdrawalCO, final ApiCallback<BrokerageWithdrawalVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWithdrawalUsingPostValidateBeforeCall(brokerageWithdrawalCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageWithdrawalVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBankLinkUsingDelete1
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDelete1Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBankLinkUsingDelete1ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling deleteBankLinkUsingDelete1(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete1Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBankLinkUsingDelete1(UUID nucleusBankLinkId) throws ApiException {
        deleteBankLinkUsingDelete1WithHttpInfo(nucleusBankLinkId);
    }

    /**
     * Delete a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBankLinkUsingDelete1WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete1ValidateBeforeCall(nucleusBankLinkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Bank Link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDelete1Async(UUID nucleusBankLinkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete1ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBalanceUsingGet1
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBalanceUsingGet1Call(UUID nucleusPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/balance/{nucleus_portfolio_id}"
            .replaceAll("\\{" + "nucleus_portfolio_id" + "\\}", apiClient.escapeString(nucleusPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBalanceUsingGet1ValidateBeforeCall(UUID nucleusPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusPortfolioId' is set
        if (nucleusPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'nucleusPortfolioId' when calling getBalanceUsingGet1(Async)");
        }
        

        com.squareup.okhttp.Call call = getBalanceUsingGet1Call(nucleusPortfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get account balance
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @return BrokerageBalanceVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageBalanceVO getBalanceUsingGet1(UUID nucleusPortfolioId) throws ApiException {
        ApiResponse<BrokerageBalanceVO> resp = getBalanceUsingGet1WithHttpInfo(nucleusPortfolioId);
        return resp.getData();
    }

    /**
     * Get account balance
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @return ApiResponse&lt;BrokerageBalanceVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageBalanceVO> getBalanceUsingGet1WithHttpInfo(UUID nucleusPortfolioId) throws ApiException {
        com.squareup.okhttp.Call call = getBalanceUsingGet1ValidateBeforeCall(nucleusPortfolioId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageBalanceVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account balance (asynchronously)
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBalanceUsingGet1Async(UUID nucleusPortfolioId, final ApiCallback<BrokerageBalanceVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBalanceUsingGet1ValidateBeforeCall(nucleusPortfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageBalanceVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBankLinkUsingGet1
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGet1Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankLinkUsingGet1ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling getBankLinkUsingGet1(Async)");
        }
        

        com.squareup.okhttp.Call call = getBankLinkUsingGet1Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return BrokerageBankLinkVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageBankLinkVO getBankLinkUsingGet1(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<BrokerageBankLinkVO> resp = getBankLinkUsingGet1WithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Get a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;BrokerageBankLinkVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageBankLinkVO> getBankLinkUsingGet1WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = getBankLinkUsingGet1ValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Bank Link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGet1Async(UUID nucleusBankLinkId, final ApiCallback<BrokerageBankLinkVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankLinkUsingGet1ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBrokerageAccountStatementUsingGet
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBrokerageAccountStatementUsingGetCall(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/statement/{nucleus_account_id}"
            .replaceAll("\\{" + "nucleus_account_id" + "\\}", apiClient.escapeString(nucleusAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (statementType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statement_type", statementType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBrokerageAccountStatementUsingGetValidateBeforeCall(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getBrokerageAccountStatementUsingGet(Async)");
        }
        
        // verify the required parameter 'nucleusAccountId' is set
        if (nucleusAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAccountId' when calling getBrokerageAccountStatementUsingGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getBrokerageAccountStatementUsingGet(Async)");
        }
        
        // verify the required parameter 'statementType' is set
        if (statementType == null) {
            throw new ApiException("Missing the required parameter 'statementType' when calling getBrokerageAccountStatementUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBrokerageAccountStatementUsingGetCall(endDate, nucleusAccountId, startDate, statementType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Brokerage account statement
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (required)
     * @return BrokerageStatementVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageStatementVO getBrokerageAccountStatementUsingGet(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType) throws ApiException {
        ApiResponse<BrokerageStatementVO> resp = getBrokerageAccountStatementUsingGetWithHttpInfo(endDate, nucleusAccountId, startDate, statementType);
        return resp.getData();
    }

    /**
     * Get a Brokerage account statement
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (required)
     * @return ApiResponse&lt;BrokerageStatementVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageStatementVO> getBrokerageAccountStatementUsingGetWithHttpInfo(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType) throws ApiException {
        com.squareup.okhttp.Call call = getBrokerageAccountStatementUsingGetValidateBeforeCall(endDate, nucleusAccountId, startDate, statementType, null, null);
        Type localVarReturnType = new TypeToken<BrokerageStatementVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Brokerage account statement (asynchronously)
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBrokerageAccountStatementUsingGetAsync(OffsetDateTime endDate, UUID nucleusAccountId, OffsetDateTime startDate, String statementType, final ApiCallback<BrokerageStatementVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBrokerageAccountStatementUsingGetValidateBeforeCall(endDate, nucleusAccountId, startDate, statementType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageStatementVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentUsingGet
     * @param nucleusDocumentId nucleus_document_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentUsingGetCall(UUID nucleusDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/document/{nucleus_document_id}"
            .replaceAll("\\{" + "nucleus_document_id" + "\\}", apiClient.escapeString(nucleusDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentUsingGetValidateBeforeCall(UUID nucleusDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusDocumentId' is set
        if (nucleusDocumentId == null) {
            throw new ApiException("Missing the required parameter 'nucleusDocumentId' when calling getDocumentUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentUsingGetCall(nucleusDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Brokerage document
     * 
     * @param nucleusDocumentId nucleus_document_id (required)
     * @return BrokerageDocumentVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageDocumentVO getDocumentUsingGet(UUID nucleusDocumentId) throws ApiException {
        ApiResponse<BrokerageDocumentVO> resp = getDocumentUsingGetWithHttpInfo(nucleusDocumentId);
        return resp.getData();
    }

    /**
     * Get a Brokerage document
     * 
     * @param nucleusDocumentId nucleus_document_id (required)
     * @return ApiResponse&lt;BrokerageDocumentVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageDocumentVO> getDocumentUsingGetWithHttpInfo(UUID nucleusDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentUsingGetValidateBeforeCall(nucleusDocumentId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageDocumentVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Brokerage document (asynchronously)
     * 
     * @param nucleusDocumentId nucleus_document_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentUsingGetAsync(UUID nucleusDocumentId, final ApiCallback<BrokerageDocumentVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentUsingGetValidateBeforeCall(nucleusDocumentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageDocumentVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHoldingPerformanceUsingGet
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHoldingPerformanceUsingGetCall(UUID nucleusPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/holding/performance/{nucleus_portfolio_id}"
            .replaceAll("\\{" + "nucleus_portfolio_id" + "\\}", apiClient.escapeString(nucleusPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHoldingPerformanceUsingGetValidateBeforeCall(UUID nucleusPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusPortfolioId' is set
        if (nucleusPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'nucleusPortfolioId' when calling getHoldingPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getHoldingPerformanceUsingGetCall(nucleusPortfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get portfolio holding performance
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @return BrokeragePerformanceVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokeragePerformanceVO getHoldingPerformanceUsingGet(UUID nucleusPortfolioId) throws ApiException {
        ApiResponse<BrokeragePerformanceVO> resp = getHoldingPerformanceUsingGetWithHttpInfo(nucleusPortfolioId);
        return resp.getData();
    }

    /**
     * Get portfolio holding performance
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @return ApiResponse&lt;BrokeragePerformanceVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokeragePerformanceVO> getHoldingPerformanceUsingGetWithHttpInfo(UUID nucleusPortfolioId) throws ApiException {
        com.squareup.okhttp.Call call = getHoldingPerformanceUsingGetValidateBeforeCall(nucleusPortfolioId, null, null);
        Type localVarReturnType = new TypeToken<BrokeragePerformanceVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get portfolio holding performance (asynchronously)
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHoldingPerformanceUsingGetAsync(UUID nucleusPortfolioId, final ApiCallback<BrokeragePerformanceVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHoldingPerformanceUsingGetValidateBeforeCall(nucleusPortfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokeragePerformanceVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHoldingUsingGet
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHoldingUsingGetCall(UUID nucleusPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/holding/{nucleus_portfolio_id}"
            .replaceAll("\\{" + "nucleus_portfolio_id" + "\\}", apiClient.escapeString(nucleusPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHoldingUsingGetValidateBeforeCall(UUID nucleusPortfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusPortfolioId' is set
        if (nucleusPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'nucleusPortfolioId' when calling getHoldingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getHoldingUsingGetCall(nucleusPortfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get portfolio holdings
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @return BrokerageHoldingVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageHoldingVO getHoldingUsingGet(UUID nucleusPortfolioId) throws ApiException {
        ApiResponse<BrokerageHoldingVO> resp = getHoldingUsingGetWithHttpInfo(nucleusPortfolioId);
        return resp.getData();
    }

    /**
     * Get portfolio holdings
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @return ApiResponse&lt;BrokerageHoldingVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageHoldingVO> getHoldingUsingGetWithHttpInfo(UUID nucleusPortfolioId) throws ApiException {
        com.squareup.okhttp.Call call = getHoldingUsingGetValidateBeforeCall(nucleusPortfolioId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageHoldingVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get portfolio holdings (asynchronously)
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHoldingUsingGetAsync(UUID nucleusPortfolioId, final ApiCallback<BrokerageHoldingVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHoldingUsingGetValidateBeforeCall(nucleusPortfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageHoldingVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderUsingGet
     * @param nucleusOrderId nucleus_order_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderUsingGetCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/order/{nucleus_order_id}"
            .replaceAll("\\{" + "nucleus_order_id" + "\\}", apiClient.escapeString(nucleusOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderUsingGetValidateBeforeCall(UUID nucleusOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusOrderId' is set
        if (nucleusOrderId == null) {
            throw new ApiException("Missing the required parameter 'nucleusOrderId' when calling getOrderUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderUsingGetCall(nucleusOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @return BrokerageOrderVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageOrderVO getOrderUsingGet(UUID nucleusOrderId) throws ApiException {
        ApiResponse<BrokerageOrderVO> resp = getOrderUsingGetWithHttpInfo(nucleusOrderId);
        return resp.getData();
    }

    /**
     * Get an Order
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @return ApiResponse&lt;BrokerageOrderVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageOrderVO> getOrderUsingGetWithHttpInfo(UUID nucleusOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderUsingGetValidateBeforeCall(nucleusOrderId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageOrderVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Order (asynchronously)
     * 
     * @param nucleusOrderId nucleus_order_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderUsingGetAsync(UUID nucleusOrderId, final ApiCallback<BrokerageOrderVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderUsingGetValidateBeforeCall(nucleusOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageOrderVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecuritiesUsingGet
     * @param vendorName vendor_name (required)
     * @param getFundamentals get_fundamentals (optional, default to false)
     * @param nucleusSecurityId nucleus_security_id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSecuritiesUsingGetCall(String vendorName, Boolean getFundamentals, UUID nucleusSecurityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/securities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (getFundamentals != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_fundamentals", getFundamentals));
        if (nucleusSecurityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_security_id", nucleusSecurityId));
        if (vendorName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendor_name", vendorName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecuritiesUsingGetValidateBeforeCall(String vendorName, Boolean getFundamentals, UUID nucleusSecurityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorName' is set
        if (vendorName == null) {
            throw new ApiException("Missing the required parameter 'vendorName' when calling getSecuritiesUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getSecuritiesUsingGetCall(vendorName, getFundamentals, nucleusSecurityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get securities information
     * 
     * @param vendorName vendor_name (required)
     * @param getFundamentals get_fundamentals (optional, default to false)
     * @param nucleusSecurityId nucleus_security_id (optional)
     * @return BrokerageSecuritiesVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageSecuritiesVO getSecuritiesUsingGet(String vendorName, Boolean getFundamentals, UUID nucleusSecurityId) throws ApiException {
        ApiResponse<BrokerageSecuritiesVO> resp = getSecuritiesUsingGetWithHttpInfo(vendorName, getFundamentals, nucleusSecurityId);
        return resp.getData();
    }

    /**
     * Get securities information
     * 
     * @param vendorName vendor_name (required)
     * @param getFundamentals get_fundamentals (optional, default to false)
     * @param nucleusSecurityId nucleus_security_id (optional)
     * @return ApiResponse&lt;BrokerageSecuritiesVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageSecuritiesVO> getSecuritiesUsingGetWithHttpInfo(String vendorName, Boolean getFundamentals, UUID nucleusSecurityId) throws ApiException {
        com.squareup.okhttp.Call call = getSecuritiesUsingGetValidateBeforeCall(vendorName, getFundamentals, nucleusSecurityId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageSecuritiesVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get securities information (asynchronously)
     * 
     * @param vendorName vendor_name (required)
     * @param getFundamentals get_fundamentals (optional, default to false)
     * @param nucleusSecurityId nucleus_security_id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSecuritiesUsingGetAsync(String vendorName, Boolean getFundamentals, UUID nucleusSecurityId, final ApiCallback<BrokerageSecuritiesVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecuritiesUsingGetValidateBeforeCall(vendorName, getFundamentals, nucleusSecurityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageSecuritiesVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsUsingGet
     * @param drivewealthResponse drivewealthResponse (required)
     * @param endDate end_date (required)
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param startDate start_date (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsUsingGetCall(GetTransactionsResponse drivewealthResponse, LocalDate endDate, UUID nucleusPortfolioId, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = drivewealthResponse;

        // create path and map variables
        String localVarPath = "/brokerage/transaction/{nucleus_portfolio_id}"
            .replaceAll("\\{" + "nucleus_portfolio_id" + "\\}", apiClient.escapeString(nucleusPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsUsingGetValidateBeforeCall(GetTransactionsResponse drivewealthResponse, LocalDate endDate, UUID nucleusPortfolioId, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'drivewealthResponse' is set
        if (drivewealthResponse == null) {
            throw new ApiException("Missing the required parameter 'drivewealthResponse' when calling getTransactionsUsingGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getTransactionsUsingGet(Async)");
        }
        
        // verify the required parameter 'nucleusPortfolioId' is set
        if (nucleusPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'nucleusPortfolioId' when calling getTransactionsUsingGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getTransactionsUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsUsingGetCall(drivewealthResponse, endDate, nucleusPortfolioId, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get account transactions
     * 
     * @param drivewealthResponse drivewealthResponse (required)
     * @param endDate end_date (required)
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param startDate start_date (required)
     * @return BrokerageTransactionVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageTransactionVO getTransactionsUsingGet(GetTransactionsResponse drivewealthResponse, LocalDate endDate, UUID nucleusPortfolioId, LocalDate startDate) throws ApiException {
        ApiResponse<BrokerageTransactionVO> resp = getTransactionsUsingGetWithHttpInfo(drivewealthResponse, endDate, nucleusPortfolioId, startDate);
        return resp.getData();
    }

    /**
     * Get account transactions
     * 
     * @param drivewealthResponse drivewealthResponse (required)
     * @param endDate end_date (required)
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param startDate start_date (required)
     * @return ApiResponse&lt;BrokerageTransactionVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageTransactionVO> getTransactionsUsingGetWithHttpInfo(GetTransactionsResponse drivewealthResponse, LocalDate endDate, UUID nucleusPortfolioId, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsUsingGetValidateBeforeCall(drivewealthResponse, endDate, nucleusPortfolioId, startDate, null, null);
        Type localVarReturnType = new TypeToken<BrokerageTransactionVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account transactions (asynchronously)
     * 
     * @param drivewealthResponse drivewealthResponse (required)
     * @param endDate end_date (required)
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param startDate start_date (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsUsingGetAsync(GetTransactionsResponse drivewealthResponse, LocalDate endDate, UUID nucleusPortfolioId, LocalDate startDate, final ApiCallback<BrokerageTransactionVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsUsingGetValidateBeforeCall(drivewealthResponse, endDate, nucleusPortfolioId, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageTransactionVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBankLinkUsingPut1
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPut1Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBankLinkUsingPut1ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling updateBankLinkUsingPut1(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBankLinkUsingPut1Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return BrokerageBankLinkVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageBankLinkVO updateBankLinkUsingPut1(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<BrokerageBankLinkVO> resp = updateBankLinkUsingPut1WithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Update a Bank Link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;BrokerageBankLinkVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageBankLinkVO> updateBankLinkUsingPut1WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = updateBankLinkUsingPut1ValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Bank Link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPut1Async(UUID nucleusBankLinkId, final ApiCallback<BrokerageBankLinkVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBankLinkUsingPut1ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageBankLinkVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBrokerageClientUsingPut
     * @param nucleusClientId nucleus_client_id (required)
     * @param clientCO clientCO (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBrokerageClientUsingPutCall(UUID nucleusClientId, BrokerageUpdateClientCO clientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientCO;

        // create path and map variables
        String localVarPath = "/brokerage/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBrokerageClientUsingPutValidateBeforeCall(UUID nucleusClientId, BrokerageUpdateClientCO clientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling updateBrokerageClientUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBrokerageClientUsingPutCall(nucleusClientId, clientCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Brokerage client
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param clientCO clientCO (optional)
     * @return BrokerageUpdateClientVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrokerageUpdateClientVO updateBrokerageClientUsingPut(UUID nucleusClientId, BrokerageUpdateClientCO clientCO) throws ApiException {
        ApiResponse<BrokerageUpdateClientVO> resp = updateBrokerageClientUsingPutWithHttpInfo(nucleusClientId, clientCO);
        return resp.getData();
    }

    /**
     * Update a Brokerage client
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param clientCO clientCO (optional)
     * @return ApiResponse&lt;BrokerageUpdateClientVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrokerageUpdateClientVO> updateBrokerageClientUsingPutWithHttpInfo(UUID nucleusClientId, BrokerageUpdateClientCO clientCO) throws ApiException {
        com.squareup.okhttp.Call call = updateBrokerageClientUsingPutValidateBeforeCall(nucleusClientId, clientCO, null, null);
        Type localVarReturnType = new TypeToken<BrokerageUpdateClientVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Brokerage client (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param clientCO clientCO (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBrokerageClientUsingPutAsync(UUID nucleusClientId, BrokerageUpdateClientCO clientCO, final ApiCallback<BrokerageUpdateClientVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBrokerageClientUsingPutValidateBeforeCall(nucleusClientId, clientCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrokerageUpdateClientVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
