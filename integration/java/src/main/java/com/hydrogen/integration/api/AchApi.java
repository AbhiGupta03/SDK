/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.integration.model.AchBalanceResponseVO;
import com.hydrogen.integration.model.AchBankLinkRequestCO;
import com.hydrogen.integration.model.AchBankLinkResponseVO;
import com.hydrogen.integration.model.AchBeneficialOwnerRequestCO;
import com.hydrogen.integration.model.AchBeneficialOwnerResponseVO;
import com.hydrogen.integration.model.AchBusinessRequestCO;
import com.hydrogen.integration.model.AchBusinessResponseVO;
import com.hydrogen.integration.model.AchCardLinkRequestCO;
import com.hydrogen.integration.model.AchCardLinkResponseVO;
import com.hydrogen.integration.model.AchCardRequestCO;
import com.hydrogen.integration.model.AchCardReserveRequestCO;
import com.hydrogen.integration.model.AchCardReserveResponseVO;
import com.hydrogen.integration.model.AchCardResponseVO;
import com.hydrogen.integration.model.AchClientRequestCO;
import com.hydrogen.integration.model.AchClientResponseVO;
import com.hydrogen.integration.model.AchReserveLinkRequestCO;
import com.hydrogen.integration.model.AchReserveLinkResponseVO;
import com.hydrogen.integration.model.AchTransferRequestCO;
import com.hydrogen.integration.model.AchTransferResponseVO;
import org.threeten.bp.LocalDate;
import com.hydrogen.integration.model.PageAchTransferResponseVO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AchApi {
    private ApiClient apiClient;

    public AchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelAchTransferUsingDelete
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelAchTransferUsingDeleteCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/{nucleus_funding_id}"
            .replaceAll("\\{" + "nucleus_funding_id" + "\\}", apiClient.escapeString(nucleusFundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelAchTransferUsingDeleteValidateBeforeCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusFundingId' is set
        if (nucleusFundingId == null) {
            throw new ApiException("Missing the required parameter 'nucleusFundingId' when calling cancelAchTransferUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelAchTransferUsingDeleteCall(nucleusFundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel the ACH transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return AchTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchTransferResponseVO cancelAchTransferUsingDelete(UUID nucleusFundingId) throws ApiException {
        ApiResponse<AchTransferResponseVO> resp = cancelAchTransferUsingDeleteWithHttpInfo(nucleusFundingId);
        return resp.getData();
    }

    /**
     * Cancel the ACH transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return ApiResponse&lt;AchTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchTransferResponseVO> cancelAchTransferUsingDeleteWithHttpInfo(UUID nucleusFundingId) throws ApiException {
        com.squareup.okhttp.Call call = cancelAchTransferUsingDeleteValidateBeforeCall(nucleusFundingId, null, null);
        Type localVarReturnType = new TypeToken<AchTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel the ACH transfer (asynchronously)
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelAchTransferUsingDeleteAsync(UUID nucleusFundingId, final ApiCallback<AchTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelAchTransferUsingDeleteValidateBeforeCall(nucleusFundingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAchBankLinkUsingPost
     * @param achBankLinkRequestCO achBankLinkRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAchBankLinkUsingPostCall(AchBankLinkRequestCO achBankLinkRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = achBankLinkRequestCO;

        // create path and map variables
        String localVarPath = "/ach/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAchBankLinkUsingPostValidateBeforeCall(AchBankLinkRequestCO achBankLinkRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'achBankLinkRequestCO' is set
        if (achBankLinkRequestCO == null) {
            throw new ApiException("Missing the required parameter 'achBankLinkRequestCO' when calling createAchBankLinkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAchBankLinkUsingPostCall(achBankLinkRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bank link
     * 
     * @param achBankLinkRequestCO achBankLinkRequestCO (required)
     * @return AchBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchBankLinkResponseVO createAchBankLinkUsingPost(AchBankLinkRequestCO achBankLinkRequestCO) throws ApiException {
        ApiResponse<AchBankLinkResponseVO> resp = createAchBankLinkUsingPostWithHttpInfo(achBankLinkRequestCO);
        return resp.getData();
    }

    /**
     * Create bank link
     * 
     * @param achBankLinkRequestCO achBankLinkRequestCO (required)
     * @return ApiResponse&lt;AchBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchBankLinkResponseVO> createAchBankLinkUsingPostWithHttpInfo(AchBankLinkRequestCO achBankLinkRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = createAchBankLinkUsingPostValidateBeforeCall(achBankLinkRequestCO, null, null);
        Type localVarReturnType = new TypeToken<AchBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create bank link (asynchronously)
     * 
     * @param achBankLinkRequestCO achBankLinkRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAchBankLinkUsingPostAsync(AchBankLinkRequestCO achBankLinkRequestCO, final ApiCallback<AchBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAchBankLinkUsingPostValidateBeforeCall(achBankLinkRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAchBeneficialOwnerUsingPost
     * @param beneficialOwnerRequest beneficialOwnerRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAchBeneficialOwnerUsingPostCall(AchBeneficialOwnerRequestCO beneficialOwnerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = beneficialOwnerRequest;

        // create path and map variables
        String localVarPath = "/ach/business/beneficial_owner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAchBeneficialOwnerUsingPostValidateBeforeCall(AchBeneficialOwnerRequestCO beneficialOwnerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'beneficialOwnerRequest' is set
        if (beneficialOwnerRequest == null) {
            throw new ApiException("Missing the required parameter 'beneficialOwnerRequest' when calling createAchBeneficialOwnerUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAchBeneficialOwnerUsingPostCall(beneficialOwnerRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a beneficial owner
     * 
     * @param beneficialOwnerRequest beneficialOwnerRequest (required)
     * @return AchBeneficialOwnerResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchBeneficialOwnerResponseVO createAchBeneficialOwnerUsingPost(AchBeneficialOwnerRequestCO beneficialOwnerRequest) throws ApiException {
        ApiResponse<AchBeneficialOwnerResponseVO> resp = createAchBeneficialOwnerUsingPostWithHttpInfo(beneficialOwnerRequest);
        return resp.getData();
    }

    /**
     * Create a beneficial owner
     * 
     * @param beneficialOwnerRequest beneficialOwnerRequest (required)
     * @return ApiResponse&lt;AchBeneficialOwnerResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchBeneficialOwnerResponseVO> createAchBeneficialOwnerUsingPostWithHttpInfo(AchBeneficialOwnerRequestCO beneficialOwnerRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAchBeneficialOwnerUsingPostValidateBeforeCall(beneficialOwnerRequest, null, null);
        Type localVarReturnType = new TypeToken<AchBeneficialOwnerResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a beneficial owner (asynchronously)
     * 
     * @param beneficialOwnerRequest beneficialOwnerRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAchBeneficialOwnerUsingPostAsync(AchBeneficialOwnerRequestCO beneficialOwnerRequest, final ApiCallback<AchBeneficialOwnerResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAchBeneficialOwnerUsingPostValidateBeforeCall(beneficialOwnerRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchBeneficialOwnerResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAchBusinessUsingPost
     * @param businessRequest businessRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAchBusinessUsingPostCall(AchBusinessRequestCO businessRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessRequest;

        // create path and map variables
        String localVarPath = "/ach/business";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAchBusinessUsingPostValidateBeforeCall(AchBusinessRequestCO businessRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessRequest' is set
        if (businessRequest == null) {
            throw new ApiException("Missing the required parameter 'businessRequest' when calling createAchBusinessUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAchBusinessUsingPostCall(businessRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a business
     * 
     * @param businessRequest businessRequest (required)
     * @return AchBusinessResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchBusinessResponseVO createAchBusinessUsingPost(AchBusinessRequestCO businessRequest) throws ApiException {
        ApiResponse<AchBusinessResponseVO> resp = createAchBusinessUsingPostWithHttpInfo(businessRequest);
        return resp.getData();
    }

    /**
     * Create a business
     * 
     * @param businessRequest businessRequest (required)
     * @return ApiResponse&lt;AchBusinessResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchBusinessResponseVO> createAchBusinessUsingPostWithHttpInfo(AchBusinessRequestCO businessRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAchBusinessUsingPostValidateBeforeCall(businessRequest, null, null);
        Type localVarReturnType = new TypeToken<AchBusinessResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a business (asynchronously)
     * 
     * @param businessRequest businessRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAchBusinessUsingPostAsync(AchBusinessRequestCO businessRequest, final ApiCallback<AchBusinessResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAchBusinessUsingPostValidateBeforeCall(businessRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchBusinessResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAchCardLinkUsingPost
     * @param cardLinkRequestCO cardLinkRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAchCardLinkUsingPostCall(AchCardLinkRequestCO cardLinkRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardLinkRequestCO;

        // create path and map variables
        String localVarPath = "/ach/card_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAchCardLinkUsingPostValidateBeforeCall(AchCardLinkRequestCO cardLinkRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardLinkRequestCO' is set
        if (cardLinkRequestCO == null) {
            throw new ApiException("Missing the required parameter 'cardLinkRequestCO' when calling createAchCardLinkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAchCardLinkUsingPostCall(cardLinkRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an ACH card link
     * 
     * @param cardLinkRequestCO cardLinkRequestCO (required)
     * @return AchCardLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchCardLinkResponseVO createAchCardLinkUsingPost(AchCardLinkRequestCO cardLinkRequestCO) throws ApiException {
        ApiResponse<AchCardLinkResponseVO> resp = createAchCardLinkUsingPostWithHttpInfo(cardLinkRequestCO);
        return resp.getData();
    }

    /**
     * Create an ACH card link
     * 
     * @param cardLinkRequestCO cardLinkRequestCO (required)
     * @return ApiResponse&lt;AchCardLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchCardLinkResponseVO> createAchCardLinkUsingPostWithHttpInfo(AchCardLinkRequestCO cardLinkRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = createAchCardLinkUsingPostValidateBeforeCall(cardLinkRequestCO, null, null);
        Type localVarReturnType = new TypeToken<AchCardLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an ACH card link (asynchronously)
     * 
     * @param cardLinkRequestCO cardLinkRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAchCardLinkUsingPostAsync(AchCardLinkRequestCO cardLinkRequestCO, final ApiCallback<AchCardLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAchCardLinkUsingPostValidateBeforeCall(cardLinkRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchCardLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAchCardReserveUsingPost
     * @param cardReserveRequestCO cardReserveRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAchCardReserveUsingPostCall(AchCardReserveRequestCO cardReserveRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardReserveRequestCO;

        // create path and map variables
        String localVarPath = "/ach/card_reserve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAchCardReserveUsingPostValidateBeforeCall(AchCardReserveRequestCO cardReserveRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardReserveRequestCO' is set
        if (cardReserveRequestCO == null) {
            throw new ApiException("Missing the required parameter 'cardReserveRequestCO' when calling createAchCardReserveUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAchCardReserveUsingPostCall(cardReserveRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an ACH card reserve
     * 
     * @param cardReserveRequestCO cardReserveRequestCO (required)
     * @return AchCardReserveResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchCardReserveResponseVO createAchCardReserveUsingPost(AchCardReserveRequestCO cardReserveRequestCO) throws ApiException {
        ApiResponse<AchCardReserveResponseVO> resp = createAchCardReserveUsingPostWithHttpInfo(cardReserveRequestCO);
        return resp.getData();
    }

    /**
     * Create an ACH card reserve
     * 
     * @param cardReserveRequestCO cardReserveRequestCO (required)
     * @return ApiResponse&lt;AchCardReserveResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchCardReserveResponseVO> createAchCardReserveUsingPostWithHttpInfo(AchCardReserveRequestCO cardReserveRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = createAchCardReserveUsingPostValidateBeforeCall(cardReserveRequestCO, null, null);
        Type localVarReturnType = new TypeToken<AchCardReserveResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an ACH card reserve (asynchronously)
     * 
     * @param cardReserveRequestCO cardReserveRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAchCardReserveUsingPostAsync(AchCardReserveRequestCO cardReserveRequestCO, final ApiCallback<AchCardReserveResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAchCardReserveUsingPostValidateBeforeCall(cardReserveRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchCardReserveResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAchClientUsingPost
     * @param clientRequest clientRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAchClientUsingPostCall(AchClientRequestCO clientRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientRequest;

        // create path and map variables
        String localVarPath = "/ach/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAchClientUsingPostValidateBeforeCall(AchClientRequestCO clientRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientRequest' is set
        if (clientRequest == null) {
            throw new ApiException("Missing the required parameter 'clientRequest' when calling createAchClientUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAchClientUsingPostCall(clientRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a client
     * 
     * @param clientRequest clientRequest (required)
     * @return AchClientResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchClientResponseVO createAchClientUsingPost(AchClientRequestCO clientRequest) throws ApiException {
        ApiResponse<AchClientResponseVO> resp = createAchClientUsingPostWithHttpInfo(clientRequest);
        return resp.getData();
    }

    /**
     * Create a client
     * 
     * @param clientRequest clientRequest (required)
     * @return ApiResponse&lt;AchClientResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchClientResponseVO> createAchClientUsingPostWithHttpInfo(AchClientRequestCO clientRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAchClientUsingPostValidateBeforeCall(clientRequest, null, null);
        Type localVarReturnType = new TypeToken<AchClientResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a client (asynchronously)
     * 
     * @param clientRequest clientRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAchClientUsingPostAsync(AchClientRequestCO clientRequest, final ApiCallback<AchClientResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAchClientUsingPostValidateBeforeCall(clientRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchClientResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAchReserveLinkUsingPost
     * @param reserveLinkRequestCO reserveLinkRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAchReserveLinkUsingPostCall(AchReserveLinkRequestCO reserveLinkRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reserveLinkRequestCO;

        // create path and map variables
        String localVarPath = "/ach/reserve_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAchReserveLinkUsingPostValidateBeforeCall(AchReserveLinkRequestCO reserveLinkRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reserveLinkRequestCO' is set
        if (reserveLinkRequestCO == null) {
            throw new ApiException("Missing the required parameter 'reserveLinkRequestCO' when calling createAchReserveLinkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAchReserveLinkUsingPostCall(reserveLinkRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an ACH reserve link
     * 
     * @param reserveLinkRequestCO reserveLinkRequestCO (required)
     * @return AchReserveLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchReserveLinkResponseVO createAchReserveLinkUsingPost(AchReserveLinkRequestCO reserveLinkRequestCO) throws ApiException {
        ApiResponse<AchReserveLinkResponseVO> resp = createAchReserveLinkUsingPostWithHttpInfo(reserveLinkRequestCO);
        return resp.getData();
    }

    /**
     * Create an ACH reserve link
     * 
     * @param reserveLinkRequestCO reserveLinkRequestCO (required)
     * @return ApiResponse&lt;AchReserveLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchReserveLinkResponseVO> createAchReserveLinkUsingPostWithHttpInfo(AchReserveLinkRequestCO reserveLinkRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = createAchReserveLinkUsingPostValidateBeforeCall(reserveLinkRequestCO, null, null);
        Type localVarReturnType = new TypeToken<AchReserveLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an ACH reserve link (asynchronously)
     * 
     * @param reserveLinkRequestCO reserveLinkRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAchReserveLinkUsingPostAsync(AchReserveLinkRequestCO reserveLinkRequestCO, final ApiCallback<AchReserveLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAchReserveLinkUsingPostValidateBeforeCall(reserveLinkRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchReserveLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAchBankLinkUsingDelete
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAchBankLinkUsingDeleteCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAchBankLinkUsingDeleteValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling deleteAchBankLinkUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAchBankLinkUsingDeleteCall(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return AchBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchBankLinkResponseVO deleteAchBankLinkUsingDelete(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<AchBankLinkResponseVO> resp = deleteAchBankLinkUsingDeleteWithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Delete bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;AchBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchBankLinkResponseVO> deleteAchBankLinkUsingDeleteWithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAchBankLinkUsingDeleteValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<AchBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAchBankLinkUsingDeleteAsync(UUID nucleusBankLinkId, final ApiCallback<AchBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAchBankLinkUsingDeleteValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fundCardUsingPost
     * @param achCardRequestCO achCardRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fundCardUsingPostCall(AchCardRequestCO achCardRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = achCardRequestCO;

        // create path and map variables
        String localVarPath = "/ach/card";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fundCardUsingPostValidateBeforeCall(AchCardRequestCO achCardRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'achCardRequestCO' is set
        if (achCardRequestCO == null) {
            throw new ApiException("Missing the required parameter 'achCardRequestCO' when calling fundCardUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = fundCardUsingPostCall(achCardRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fund card
     * 
     * @param achCardRequestCO achCardRequestCO (required)
     * @return AchCardResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchCardResponseVO fundCardUsingPost(AchCardRequestCO achCardRequestCO) throws ApiException {
        ApiResponse<AchCardResponseVO> resp = fundCardUsingPostWithHttpInfo(achCardRequestCO);
        return resp.getData();
    }

    /**
     * Fund card
     * 
     * @param achCardRequestCO achCardRequestCO (required)
     * @return ApiResponse&lt;AchCardResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchCardResponseVO> fundCardUsingPostWithHttpInfo(AchCardRequestCO achCardRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = fundCardUsingPostValidateBeforeCall(achCardRequestCO, null, null);
        Type localVarReturnType = new TypeToken<AchCardResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fund card (asynchronously)
     * 
     * @param achCardRequestCO achCardRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fundCardUsingPostAsync(AchCardRequestCO achCardRequestCO, final ApiCallback<AchCardResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fundCardUsingPostValidateBeforeCall(achCardRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchCardResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAchBalanceUsingGet
     * @param portfolioId portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAchBalanceUsingGetCall(UUID portfolioId, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/balance/{portfolio_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAchBalanceUsingGetValidateBeforeCall(UUID portfolioId, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getAchBalanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAchBalanceUsingGetCall(portfolioId, endDate, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get balance
     * 
     * @param portfolioId portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return AchBalanceResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchBalanceResponseVO getAchBalanceUsingGet(UUID portfolioId, LocalDate endDate, LocalDate startDate) throws ApiException {
        ApiResponse<AchBalanceResponseVO> resp = getAchBalanceUsingGetWithHttpInfo(portfolioId, endDate, startDate);
        return resp.getData();
    }

    /**
     * Get balance
     * 
     * @param portfolioId portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;AchBalanceResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchBalanceResponseVO> getAchBalanceUsingGetWithHttpInfo(UUID portfolioId, LocalDate endDate, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getAchBalanceUsingGetValidateBeforeCall(portfolioId, endDate, startDate, null, null);
        Type localVarReturnType = new TypeToken<AchBalanceResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get balance (asynchronously)
     * 
     * @param portfolioId portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAchBalanceUsingGetAsync(UUID portfolioId, LocalDate endDate, LocalDate startDate, final ApiCallback<AchBalanceResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAchBalanceUsingGetValidateBeforeCall(portfolioId, endDate, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchBalanceResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAchBankLinkUsingGet
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAchBankLinkUsingGetCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAchBankLinkUsingGetValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling getAchBankLinkUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAchBankLinkUsingGetCall(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return AchBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchBankLinkResponseVO getAchBankLinkUsingGet(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<AchBankLinkResponseVO> resp = getAchBankLinkUsingGetWithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Get bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;AchBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchBankLinkResponseVO> getAchBankLinkUsingGetWithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = getAchBankLinkUsingGetValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<AchBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAchBankLinkUsingGetAsync(UUID nucleusBankLinkId, final ApiCallback<AchBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAchBankLinkUsingGetValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAchBankLinksForReserveAccountUsingGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAchBankLinksForReserveAccountUsingGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/bank_link/reserve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAchBankLinksForReserveAccountUsingGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAchBankLinksForReserveAccountUsingGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get bank links for a reserve account
     * 
     * @return List&lt;AchBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AchBankLinkResponseVO> getAchBankLinksForReserveAccountUsingGet() throws ApiException {
        ApiResponse<List<AchBankLinkResponseVO>> resp = getAchBankLinksForReserveAccountUsingGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get bank links for a reserve account
     * 
     * @return ApiResponse&lt;List&lt;AchBankLinkResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AchBankLinkResponseVO>> getAchBankLinksForReserveAccountUsingGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAchBankLinksForReserveAccountUsingGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<AchBankLinkResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bank links for a reserve account (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAchBankLinksForReserveAccountUsingGetAsync(final ApiCallback<List<AchBankLinkResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAchBankLinksForReserveAccountUsingGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AchBankLinkResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAchBusinessBalanceUsingGet
     * @param businessId business_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAchBusinessBalanceUsingGetCall(UUID businessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/business/balance/{business_id}"
            .replaceAll("\\{" + "business_id" + "\\}", apiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAchBusinessBalanceUsingGetValidateBeforeCall(UUID businessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling getAchBusinessBalanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAchBusinessBalanceUsingGetCall(businessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get business balance
     * 
     * @param businessId business_id (required)
     * @return AchBalanceResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchBalanceResponseVO getAchBusinessBalanceUsingGet(UUID businessId) throws ApiException {
        ApiResponse<AchBalanceResponseVO> resp = getAchBusinessBalanceUsingGetWithHttpInfo(businessId);
        return resp.getData();
    }

    /**
     * Get business balance
     * 
     * @param businessId business_id (required)
     * @return ApiResponse&lt;AchBalanceResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchBalanceResponseVO> getAchBusinessBalanceUsingGetWithHttpInfo(UUID businessId) throws ApiException {
        com.squareup.okhttp.Call call = getAchBusinessBalanceUsingGetValidateBeforeCall(businessId, null, null);
        Type localVarReturnType = new TypeToken<AchBalanceResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get business balance (asynchronously)
     * 
     * @param businessId business_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAchBusinessBalanceUsingGetAsync(UUID businessId, final ApiCallback<AchBalanceResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAchBusinessBalanceUsingGetValidateBeforeCall(businessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchBalanceResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAchClientBankLinksUsingGet
     * @param nucleusClientId nucleus_client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAchClientBankLinksUsingGetCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/bank_link/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAchClientBankLinksUsingGetValidateBeforeCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling getAchClientBankLinksUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAchClientBankLinksUsingGetCall(nucleusClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get client bank links
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return List&lt;AchBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AchBankLinkResponseVO> getAchClientBankLinksUsingGet(UUID nucleusClientId) throws ApiException {
        ApiResponse<List<AchBankLinkResponseVO>> resp = getAchClientBankLinksUsingGetWithHttpInfo(nucleusClientId);
        return resp.getData();
    }

    /**
     * Get client bank links
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return ApiResponse&lt;List&lt;AchBankLinkResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AchBankLinkResponseVO>> getAchClientBankLinksUsingGetWithHttpInfo(UUID nucleusClientId) throws ApiException {
        com.squareup.okhttp.Call call = getAchClientBankLinksUsingGetValidateBeforeCall(nucleusClientId, null, null);
        Type localVarReturnType = new TypeToken<List<AchBankLinkResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get client bank links (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAchClientBankLinksUsingGetAsync(UUID nucleusClientId, final ApiCallback<List<AchBankLinkResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAchClientBankLinksUsingGetValidateBeforeCall(nucleusClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AchBankLinkResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAchStatusUsingGet
     * @param nucleusBusinessId nucleus_business_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAchStatusUsingGetCall(UUID nucleusBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nucleusBusinessId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_business_id", nucleusBusinessId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAchStatusUsingGetValidateBeforeCall(UUID nucleusBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBusinessId' is set
        if (nucleusBusinessId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBusinessId' when calling getAchStatusUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAchStatusUsingGetCall(nucleusBusinessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the ACH status
     * 
     * @param nucleusBusinessId nucleus_business_id (required)
     * @return AchTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchTransferResponseVO getAchStatusUsingGet(UUID nucleusBusinessId) throws ApiException {
        ApiResponse<AchTransferResponseVO> resp = getAchStatusUsingGetWithHttpInfo(nucleusBusinessId);
        return resp.getData();
    }

    /**
     * Get the ACH status
     * 
     * @param nucleusBusinessId nucleus_business_id (required)
     * @return ApiResponse&lt;AchTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchTransferResponseVO> getAchStatusUsingGetWithHttpInfo(UUID nucleusBusinessId) throws ApiException {
        com.squareup.okhttp.Call call = getAchStatusUsingGetValidateBeforeCall(nucleusBusinessId, null, null);
        Type localVarReturnType = new TypeToken<AchTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the ACH status (asynchronously)
     * 
     * @param nucleusBusinessId nucleus_business_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAchStatusUsingGetAsync(UUID nucleusBusinessId, final ApiCallback<AchTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAchStatusUsingGetValidateBeforeCall(nucleusBusinessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAchTransferUsingGet
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAchTransferUsingGetCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/{nucleus_funding_id}"
            .replaceAll("\\{" + "nucleus_funding_id" + "\\}", apiClient.escapeString(nucleusFundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAchTransferUsingGetValidateBeforeCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusFundingId' is set
        if (nucleusFundingId == null) {
            throw new ApiException("Missing the required parameter 'nucleusFundingId' when calling getAchTransferUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAchTransferUsingGetCall(nucleusFundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the ACH transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return AchTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchTransferResponseVO getAchTransferUsingGet(UUID nucleusFundingId) throws ApiException {
        ApiResponse<AchTransferResponseVO> resp = getAchTransferUsingGetWithHttpInfo(nucleusFundingId);
        return resp.getData();
    }

    /**
     * Get the ACH transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return ApiResponse&lt;AchTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchTransferResponseVO> getAchTransferUsingGetWithHttpInfo(UUID nucleusFundingId) throws ApiException {
        com.squareup.okhttp.Call call = getAchTransferUsingGetValidateBeforeCall(nucleusFundingId, null, null);
        Type localVarReturnType = new TypeToken<AchTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the ACH transfer (asynchronously)
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAchTransferUsingGetAsync(UUID nucleusFundingId, final ApiCallback<AchTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAchTransferUsingGetValidateBeforeCall(nucleusFundingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListOfClientAchTransfersUsingGet
     * @param nucleusClientId nucleus_client_id (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListOfClientAchTransfersUsingGetCall(UUID nucleusClientId, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListOfClientAchTransfersUsingGetValidateBeforeCall(UUID nucleusClientId, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling getListOfClientAchTransfersUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getListOfClientAchTransfersUsingGetCall(nucleusClientId, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of client&#39;s ACH transfers
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAchTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAchTransferResponseVO getListOfClientAchTransfersUsingGet(UUID nucleusClientId, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAchTransferResponseVO> resp = getListOfClientAchTransfersUsingGetWithHttpInfo(nucleusClientId, page, size);
        return resp.getData();
    }

    /**
     * Get a list of client&#39;s ACH transfers
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAchTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAchTransferResponseVO> getListOfClientAchTransfersUsingGetWithHttpInfo(UUID nucleusClientId, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getListOfClientAchTransfersUsingGetValidateBeforeCall(nucleusClientId, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAchTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of client&#39;s ACH transfers (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListOfClientAchTransfersUsingGetAsync(UUID nucleusClientId, Integer page, Integer size, final ApiCallback<PageAchTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListOfClientAchTransfersUsingGetValidateBeforeCall(nucleusClientId, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAchTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitAchTransferUsingPost
     * @param transferRequest transferRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitAchTransferUsingPostCall(AchTransferRequestCO transferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transferRequest;

        // create path and map variables
        String localVarPath = "/ach";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitAchTransferUsingPostValidateBeforeCall(AchTransferRequestCO transferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferRequest' is set
        if (transferRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRequest' when calling submitAchTransferUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = submitAchTransferUsingPostCall(transferRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submit an ACH transfer
     * 
     * @param transferRequest transferRequest (required)
     * @return AchTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchTransferResponseVO submitAchTransferUsingPost(AchTransferRequestCO transferRequest) throws ApiException {
        ApiResponse<AchTransferResponseVO> resp = submitAchTransferUsingPostWithHttpInfo(transferRequest);
        return resp.getData();
    }

    /**
     * Submit an ACH transfer
     * 
     * @param transferRequest transferRequest (required)
     * @return ApiResponse&lt;AchTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchTransferResponseVO> submitAchTransferUsingPostWithHttpInfo(AchTransferRequestCO transferRequest) throws ApiException {
        com.squareup.okhttp.Call call = submitAchTransferUsingPostValidateBeforeCall(transferRequest, null, null);
        Type localVarReturnType = new TypeToken<AchTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit an ACH transfer (asynchronously)
     * 
     * @param transferRequest transferRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitAchTransferUsingPostAsync(AchTransferRequestCO transferRequest, final ApiCallback<AchTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitAchTransferUsingPostValidateBeforeCall(transferRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAchBankLinkUsingPut
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAchBankLinkUsingPutCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAchBankLinkUsingPutValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling updateAchBankLinkUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAchBankLinkUsingPutCall(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return AchBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchBankLinkResponseVO updateAchBankLinkUsingPut(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<AchBankLinkResponseVO> resp = updateAchBankLinkUsingPutWithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Update bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;AchBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchBankLinkResponseVO> updateAchBankLinkUsingPutWithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = updateAchBankLinkUsingPutValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<AchBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAchBankLinkUsingPutAsync(UUID nucleusBankLinkId, final ApiCallback<AchBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAchBankLinkUsingPutValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
