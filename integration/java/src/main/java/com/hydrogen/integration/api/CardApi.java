/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.integration.model.CardBaseRequestCO;
import com.hydrogen.integration.model.CardClientRequestCO;
import com.hydrogen.integration.model.CardReloadRequestCO;
import com.hydrogen.integration.model.CardTransactionResponseVO;
import com.hydrogen.integration.model.CardTransferRequestCO;
import com.hydrogen.integration.model.CardUnloadRequestCO;
import com.hydrogen.integration.model.BaseResponseVO;
import com.hydrogen.integration.model.CardBalanceResponseVO;
import com.hydrogen.integration.model.CardClientResponseVO;
import com.hydrogen.integration.model.CardPinRequestCO;
import com.hydrogen.integration.model.CardReloadUnloadResponseVO;
import com.hydrogen.integration.model.CardTokenRequestCO;
import com.hydrogen.integration.model.CardTokenResponseVO;
import com.hydrogen.integration.model.CardTransferResponseVO;
import com.hydrogen.integration.model.GetCardTokenResponseVO;
import org.threeten.bp.LocalDate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardApi {
    private ApiClient apiClient;

    public CardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCardActivateUsingPost
     * @param activateRequest activateRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardActivateUsingPostCall(CardBaseRequestCO activateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = activateRequest;

        // create path and map variables
        String localVarPath = "/card/activate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardActivateUsingPostValidateBeforeCall(CardBaseRequestCO activateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'activateRequest' is set
        if (activateRequest == null) {
            throw new ApiException("Missing the required parameter 'activateRequest' when calling createCardActivateUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardActivateUsingPostCall(activateRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Activate card
     * 
     * @param activateRequest activateRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardActivateUsingPost(CardBaseRequestCO activateRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardActivateUsingPostWithHttpInfo(activateRequest);
        return resp.getData();
    }

    /**
     * Activate card
     * 
     * @param activateRequest activateRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardActivateUsingPostWithHttpInfo(CardBaseRequestCO activateRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardActivateUsingPostValidateBeforeCall(activateRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Activate card (asynchronously)
     * 
     * @param activateRequest activateRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardActivateUsingPostAsync(CardBaseRequestCO activateRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardActivateUsingPostValidateBeforeCall(activateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardCloseUsingPost
     * @param closeRequest closeRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardCloseUsingPostCall(CardBaseRequestCO closeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = closeRequest;

        // create path and map variables
        String localVarPath = "/card/close";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardCloseUsingPostValidateBeforeCall(CardBaseRequestCO closeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'closeRequest' is set
        if (closeRequest == null) {
            throw new ApiException("Missing the required parameter 'closeRequest' when calling createCardCloseUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardCloseUsingPostCall(closeRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * close a card
     * 
     * @param closeRequest closeRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardCloseUsingPost(CardBaseRequestCO closeRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardCloseUsingPostWithHttpInfo(closeRequest);
        return resp.getData();
    }

    /**
     * close a card
     * 
     * @param closeRequest closeRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardCloseUsingPostWithHttpInfo(CardBaseRequestCO closeRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardCloseUsingPostValidateBeforeCall(closeRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * close a card (asynchronously)
     * 
     * @param closeRequest closeRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardCloseUsingPostAsync(CardBaseRequestCO closeRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardCloseUsingPostValidateBeforeCall(closeRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardIssueUsingPost
     * @param issueRequest issueRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardIssueUsingPostCall(CardBaseRequestCO issueRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = issueRequest;

        // create path and map variables
        String localVarPath = "/card/issue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardIssueUsingPostValidateBeforeCall(CardBaseRequestCO issueRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'issueRequest' is set
        if (issueRequest == null) {
            throw new ApiException("Missing the required parameter 'issueRequest' when calling createCardIssueUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardIssueUsingPostCall(issueRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * issue a card
     * 
     * @param issueRequest issueRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardIssueUsingPost(CardBaseRequestCO issueRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardIssueUsingPostWithHttpInfo(issueRequest);
        return resp.getData();
    }

    /**
     * issue a card
     * 
     * @param issueRequest issueRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardIssueUsingPostWithHttpInfo(CardBaseRequestCO issueRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardIssueUsingPostValidateBeforeCall(issueRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * issue a card (asynchronously)
     * 
     * @param issueRequest issueRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardIssueUsingPostAsync(CardBaseRequestCO issueRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardIssueUsingPostValidateBeforeCall(issueRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardPinUsingPost
     * @param cardPinRequestCO cardPinRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardPinUsingPostCall(CardPinRequestCO cardPinRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardPinRequestCO;

        // create path and map variables
        String localVarPath = "/card/pin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardPinUsingPostValidateBeforeCall(CardPinRequestCO cardPinRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardPinRequestCO' is set
        if (cardPinRequestCO == null) {
            throw new ApiException("Missing the required parameter 'cardPinRequestCO' when calling createCardPinUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardPinUsingPostCall(cardPinRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * pin card
     * 
     * @param cardPinRequestCO cardPinRequestCO (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardPinUsingPost(CardPinRequestCO cardPinRequestCO) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardPinUsingPostWithHttpInfo(cardPinRequestCO);
        return resp.getData();
    }

    /**
     * pin card
     * 
     * @param cardPinRequestCO cardPinRequestCO (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardPinUsingPostWithHttpInfo(CardPinRequestCO cardPinRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = createCardPinUsingPostValidateBeforeCall(cardPinRequestCO, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * pin card (asynchronously)
     * 
     * @param cardPinRequestCO cardPinRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardPinUsingPostAsync(CardPinRequestCO cardPinRequestCO, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardPinUsingPostValidateBeforeCall(cardPinRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardReactivateUsingPost
     * @param reactivateRequest reactivateRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardReactivateUsingPostCall(CardBaseRequestCO reactivateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reactivateRequest;

        // create path and map variables
        String localVarPath = "/card/reactivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardReactivateUsingPostValidateBeforeCall(CardBaseRequestCO reactivateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reactivateRequest' is set
        if (reactivateRequest == null) {
            throw new ApiException("Missing the required parameter 'reactivateRequest' when calling createCardReactivateUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardReactivateUsingPostCall(reactivateRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * reactivate card
     * 
     * @param reactivateRequest reactivateRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardReactivateUsingPost(CardBaseRequestCO reactivateRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardReactivateUsingPostWithHttpInfo(reactivateRequest);
        return resp.getData();
    }

    /**
     * reactivate card
     * 
     * @param reactivateRequest reactivateRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardReactivateUsingPostWithHttpInfo(CardBaseRequestCO reactivateRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardReactivateUsingPostValidateBeforeCall(reactivateRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * reactivate card (asynchronously)
     * 
     * @param reactivateRequest reactivateRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardReactivateUsingPostAsync(CardBaseRequestCO reactivateRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardReactivateUsingPostValidateBeforeCall(reactivateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardReissueUsingPost
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardReissueUsingPostCall(CardBaseRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/card/reissue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardReissueUsingPostValidateBeforeCall(CardBaseRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createCardReissueUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardReissueUsingPostCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reissue a card
     * 
     * @param request request (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardReissueUsingPost(CardBaseRequestCO request) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardReissueUsingPostWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Reissue a card
     * 
     * @param request request (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardReissueUsingPostWithHttpInfo(CardBaseRequestCO request) throws ApiException {
        com.squareup.okhttp.Call call = createCardReissueUsingPostValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reissue a card (asynchronously)
     * 
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardReissueUsingPostAsync(CardBaseRequestCO request, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardReissueUsingPostValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardReloadUsingPost
     * @param reloadRequest reloadRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardReloadUsingPostCall(CardReloadRequestCO reloadRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reloadRequest;

        // create path and map variables
        String localVarPath = "/card/reload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardReloadUsingPostValidateBeforeCall(CardReloadRequestCO reloadRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reloadRequest' is set
        if (reloadRequest == null) {
            throw new ApiException("Missing the required parameter 'reloadRequest' when calling createCardReloadUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardReloadUsingPostCall(reloadRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a card reload
     * 
     * @param reloadRequest reloadRequest (required)
     * @return CardReloadUnloadResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardReloadUnloadResponseVO createCardReloadUsingPost(CardReloadRequestCO reloadRequest) throws ApiException {
        ApiResponse<CardReloadUnloadResponseVO> resp = createCardReloadUsingPostWithHttpInfo(reloadRequest);
        return resp.getData();
    }

    /**
     * Create a card reload
     * 
     * @param reloadRequest reloadRequest (required)
     * @return ApiResponse&lt;CardReloadUnloadResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardReloadUnloadResponseVO> createCardReloadUsingPostWithHttpInfo(CardReloadRequestCO reloadRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardReloadUsingPostValidateBeforeCall(reloadRequest, null, null);
        Type localVarReturnType = new TypeToken<CardReloadUnloadResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a card reload (asynchronously)
     * 
     * @param reloadRequest reloadRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardReloadUsingPostAsync(CardReloadRequestCO reloadRequest, final ApiCallback<CardReloadUnloadResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardReloadUsingPostValidateBeforeCall(reloadRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardReloadUnloadResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardSuspendUsingPost
     * @param suspendRequest suspendRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardSuspendUsingPostCall(CardBaseRequestCO suspendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = suspendRequest;

        // create path and map variables
        String localVarPath = "/card/suspend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardSuspendUsingPostValidateBeforeCall(CardBaseRequestCO suspendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'suspendRequest' is set
        if (suspendRequest == null) {
            throw new ApiException("Missing the required parameter 'suspendRequest' when calling createCardSuspendUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardSuspendUsingPostCall(suspendRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * suspend card
     * 
     * @param suspendRequest suspendRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardSuspendUsingPost(CardBaseRequestCO suspendRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardSuspendUsingPostWithHttpInfo(suspendRequest);
        return resp.getData();
    }

    /**
     * suspend card
     * 
     * @param suspendRequest suspendRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardSuspendUsingPostWithHttpInfo(CardBaseRequestCO suspendRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardSuspendUsingPostValidateBeforeCall(suspendRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * suspend card (asynchronously)
     * 
     * @param suspendRequest suspendRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardSuspendUsingPostAsync(CardBaseRequestCO suspendRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardSuspendUsingPostValidateBeforeCall(suspendRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardTokenUsingPost
     * @param tokenizeRequest tokenizeRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardTokenUsingPostCall(CardTokenRequestCO tokenizeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tokenizeRequest;

        // create path and map variables
        String localVarPath = "/card/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardTokenUsingPostValidateBeforeCall(CardTokenRequestCO tokenizeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tokenizeRequest' is set
        if (tokenizeRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenizeRequest' when calling createCardTokenUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardTokenUsingPostCall(tokenizeRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * token card
     * 
     * @param tokenizeRequest tokenizeRequest (required)
     * @return CardTokenResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardTokenResponseVO createCardTokenUsingPost(CardTokenRequestCO tokenizeRequest) throws ApiException {
        ApiResponse<CardTokenResponseVO> resp = createCardTokenUsingPostWithHttpInfo(tokenizeRequest);
        return resp.getData();
    }

    /**
     * token card
     * 
     * @param tokenizeRequest tokenizeRequest (required)
     * @return ApiResponse&lt;CardTokenResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardTokenResponseVO> createCardTokenUsingPostWithHttpInfo(CardTokenRequestCO tokenizeRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardTokenUsingPostValidateBeforeCall(tokenizeRequest, null, null);
        Type localVarReturnType = new TypeToken<CardTokenResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * token card (asynchronously)
     * 
     * @param tokenizeRequest tokenizeRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardTokenUsingPostAsync(CardTokenRequestCO tokenizeRequest, final ApiCallback<CardTokenResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardTokenUsingPostValidateBeforeCall(tokenizeRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardTokenResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardTransferUsingPost
     * @param transferRequest transferRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardTransferUsingPostCall(CardTransferRequestCO transferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transferRequest;

        // create path and map variables
        String localVarPath = "/card/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardTransferUsingPostValidateBeforeCall(CardTransferRequestCO transferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferRequest' is set
        if (transferRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRequest' when calling createCardTransferUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardTransferUsingPostCall(transferRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Card transfer
     * 
     * @param transferRequest transferRequest (required)
     * @return CardTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardTransferResponseVO createCardTransferUsingPost(CardTransferRequestCO transferRequest) throws ApiException {
        ApiResponse<CardTransferResponseVO> resp = createCardTransferUsingPostWithHttpInfo(transferRequest);
        return resp.getData();
    }

    /**
     * Create Card transfer
     * 
     * @param transferRequest transferRequest (required)
     * @return ApiResponse&lt;CardTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardTransferResponseVO> createCardTransferUsingPostWithHttpInfo(CardTransferRequestCO transferRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardTransferUsingPostValidateBeforeCall(transferRequest, null, null);
        Type localVarReturnType = new TypeToken<CardTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Card transfer (asynchronously)
     * 
     * @param transferRequest transferRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardTransferUsingPostAsync(CardTransferRequestCO transferRequest, final ApiCallback<CardTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardTransferUsingPostValidateBeforeCall(transferRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardUnloadUsingPost
     * @param reloadRequest reloadRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardUnloadUsingPostCall(CardUnloadRequestCO reloadRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reloadRequest;

        // create path and map variables
        String localVarPath = "/card/unload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardUnloadUsingPostValidateBeforeCall(CardUnloadRequestCO reloadRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reloadRequest' is set
        if (reloadRequest == null) {
            throw new ApiException("Missing the required parameter 'reloadRequest' when calling createCardUnloadUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardUnloadUsingPostCall(reloadRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a card upload
     * 
     * @param reloadRequest reloadRequest (required)
     * @return CardReloadUnloadResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardReloadUnloadResponseVO createCardUnloadUsingPost(CardUnloadRequestCO reloadRequest) throws ApiException {
        ApiResponse<CardReloadUnloadResponseVO> resp = createCardUnloadUsingPostWithHttpInfo(reloadRequest);
        return resp.getData();
    }

    /**
     * Create a card upload
     * 
     * @param reloadRequest reloadRequest (required)
     * @return ApiResponse&lt;CardReloadUnloadResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardReloadUnloadResponseVO> createCardUnloadUsingPostWithHttpInfo(CardUnloadRequestCO reloadRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardUnloadUsingPostValidateBeforeCall(reloadRequest, null, null);
        Type localVarReturnType = new TypeToken<CardReloadUnloadResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a card upload (asynchronously)
     * 
     * @param reloadRequest reloadRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardUnloadUsingPostAsync(CardUnloadRequestCO reloadRequest, final ApiCallback<CardReloadUnloadResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardUnloadUsingPostValidateBeforeCall(reloadRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardReloadUnloadResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClientCardUsingPost
     * @param cardClientRequestCO cardClientRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClientCardUsingPostCall(CardClientRequestCO cardClientRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardClientRequestCO;

        // create path and map variables
        String localVarPath = "/card/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClientCardUsingPostValidateBeforeCall(CardClientRequestCO cardClientRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardClientRequestCO' is set
        if (cardClientRequestCO == null) {
            throw new ApiException("Missing the required parameter 'cardClientRequestCO' when calling createClientCardUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createClientCardUsingPostCall(cardClientRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a card client
     * 
     * @param cardClientRequestCO cardClientRequestCO (required)
     * @return CardClientResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardClientResponseVO createClientCardUsingPost(CardClientRequestCO cardClientRequestCO) throws ApiException {
        ApiResponse<CardClientResponseVO> resp = createClientCardUsingPostWithHttpInfo(cardClientRequestCO);
        return resp.getData();
    }

    /**
     * Create a card client
     * 
     * @param cardClientRequestCO cardClientRequestCO (required)
     * @return ApiResponse&lt;CardClientResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardClientResponseVO> createClientCardUsingPostWithHttpInfo(CardClientRequestCO cardClientRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = createClientCardUsingPostValidateBeforeCall(cardClientRequestCO, null, null);
        Type localVarReturnType = new TypeToken<CardClientResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a card client (asynchronously)
     * 
     * @param cardClientRequestCO cardClientRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClientCardUsingPostAsync(CardClientRequestCO cardClientRequestCO, final ApiCallback<CardClientResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClientCardUsingPostValidateBeforeCall(cardClientRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardClientResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCardBalanceUsingGet
     * @param id id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCardBalanceUsingGetCall(UUID id, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card/balance/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCardBalanceUsingGetValidateBeforeCall(UUID id, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCardBalanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getCardBalanceUsingGetCall(id, endDate, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Card Balance
     * 
     * @param id id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return CardBalanceResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardBalanceResponseVO getCardBalanceUsingGet(UUID id, LocalDate endDate, LocalDate startDate) throws ApiException {
        ApiResponse<CardBalanceResponseVO> resp = getCardBalanceUsingGetWithHttpInfo(id, endDate, startDate);
        return resp.getData();
    }

    /**
     * Get a Card Balance
     * 
     * @param id id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;CardBalanceResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardBalanceResponseVO> getCardBalanceUsingGetWithHttpInfo(UUID id, LocalDate endDate, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getCardBalanceUsingGetValidateBeforeCall(id, endDate, startDate, null, null);
        Type localVarReturnType = new TypeToken<CardBalanceResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Card Balance (asynchronously)
     * 
     * @param id id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCardBalanceUsingGetAsync(UUID id, LocalDate endDate, LocalDate startDate, final ApiCallback<CardBalanceResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCardBalanceUsingGetValidateBeforeCall(id, endDate, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardBalanceResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCardTokenUsingToken
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCardTokenUsingTokenCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card/token/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCardTokenUsingTokenValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCardTokenUsingToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getCardTokenUsingTokenCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a card token
     * 
     * @param id id (required)
     * @return GetCardTokenResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCardTokenResponseVO getCardTokenUsingToken(UUID id) throws ApiException {
        ApiResponse<GetCardTokenResponseVO> resp = getCardTokenUsingTokenWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a card token
     * 
     * @param id id (required)
     * @return ApiResponse&lt;GetCardTokenResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCardTokenResponseVO> getCardTokenUsingTokenWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = getCardTokenUsingTokenValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GetCardTokenResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a card token (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCardTokenUsingTokenAsync(UUID id, final ApiCallback<GetCardTokenResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCardTokenUsingTokenValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCardTokenResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCardTransactionUsingGet
     * @param id id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCardTransactionUsingGetCall(UUID id, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card/transaction/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCardTransactionUsingGetValidateBeforeCall(UUID id, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCardTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getCardTransactionUsingGetCall(id, endDate, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a card transaction
     * 
     * @param id id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return CardTransactionResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardTransactionResponseVO getCardTransactionUsingGet(UUID id, LocalDate endDate, LocalDate startDate) throws ApiException {
        ApiResponse<CardTransactionResponseVO> resp = getCardTransactionUsingGetWithHttpInfo(id, endDate, startDate);
        return resp.getData();
    }

    /**
     * Get a card transaction
     * 
     * @param id id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;CardTransactionResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardTransactionResponseVO> getCardTransactionUsingGetWithHttpInfo(UUID id, LocalDate endDate, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getCardTransactionUsingGetValidateBeforeCall(id, endDate, startDate, null, null);
        Type localVarReturnType = new TypeToken<CardTransactionResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a card transaction (asynchronously)
     * 
     * @param id id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCardTransactionUsingGetAsync(UUID id, LocalDate endDate, LocalDate startDate, final ApiCallback<CardTransactionResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCardTransactionUsingGetValidateBeforeCall(id, endDate, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardTransactionResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCardUsingGet
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCardUsingGetCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCardUsingGetValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCardUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getCardUsingGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a card information
     * 
     * @param id id (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO getCardUsingGet(UUID id) throws ApiException {
        ApiResponse<BaseResponseVO> resp = getCardUsingGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a card information
     * 
     * @param id id (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> getCardUsingGetWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = getCardUsingGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a card information (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCardUsingGetAsync(UUID id, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCardUsingGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCardPinUsingPost
     * @param cardPinRequestCO cardPinRequestCO (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCardPinUsingPostCall(CardPinRequestCO cardPinRequestCO, UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardPinRequestCO;

        // create path and map variables
        String localVarPath = "/card/pin/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCardPinUsingPostValidateBeforeCall(CardPinRequestCO cardPinRequestCO, UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardPinRequestCO' is set
        if (cardPinRequestCO == null) {
            throw new ApiException("Missing the required parameter 'cardPinRequestCO' when calling updateCardPinUsingPost(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCardPinUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCardPinUsingPostCall(cardPinRequestCO, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * update a pin card
     * 
     * @param cardPinRequestCO cardPinRequestCO (required)
     * @param id id (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO updateCardPinUsingPost(CardPinRequestCO cardPinRequestCO, UUID id) throws ApiException {
        ApiResponse<BaseResponseVO> resp = updateCardPinUsingPostWithHttpInfo(cardPinRequestCO, id);
        return resp.getData();
    }

    /**
     * update a pin card
     * 
     * @param cardPinRequestCO cardPinRequestCO (required)
     * @param id id (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> updateCardPinUsingPostWithHttpInfo(CardPinRequestCO cardPinRequestCO, UUID id) throws ApiException {
        com.squareup.okhttp.Call call = updateCardPinUsingPostValidateBeforeCall(cardPinRequestCO, id, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * update a pin card (asynchronously)
     * 
     * @param cardPinRequestCO cardPinRequestCO (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCardPinUsingPostAsync(CardPinRequestCO cardPinRequestCO, UUID id, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCardPinUsingPostValidateBeforeCall(cardPinRequestCO, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCardUsingPut
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCardUsingPutCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCardUsingPutValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCardUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCardUsingPutCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a card information
     * 
     * @param id id (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO updateCardUsingPut(UUID id) throws ApiException {
        ApiResponse<BaseResponseVO> resp = updateCardUsingPutWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Update a card information
     * 
     * @param id id (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> updateCardUsingPutWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = updateCardUsingPutValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a card information (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCardUsingPutAsync(UUID id, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCardUsingPutValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
