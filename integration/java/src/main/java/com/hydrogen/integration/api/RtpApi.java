/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.integration.model.RtpBankLinkRequestCO;
import com.hydrogen.integration.model.RtpBankLinkResponseVO;
import com.hydrogen.integration.model.RtpTransferRequestCO;
import com.hydrogen.integration.model.RtpTransferResponseVO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RtpApi {
    private ApiClient apiClient;

    public RtpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RtpApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelRtpTransferUsingDelete
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelRtpTransferUsingDeleteCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rtp/{nucleus_funding_id}"
            .replaceAll("\\{" + "nucleus_funding_id" + "\\}", apiClient.escapeString(nucleusFundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelRtpTransferUsingDeleteValidateBeforeCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusFundingId' is set
        if (nucleusFundingId == null) {
            throw new ApiException("Missing the required parameter 'nucleusFundingId' when calling cancelRtpTransferUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelRtpTransferUsingDeleteCall(nucleusFundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel the RTP transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return RtpTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RtpTransferResponseVO cancelRtpTransferUsingDelete(UUID nucleusFundingId) throws ApiException {
        ApiResponse<RtpTransferResponseVO> resp = cancelRtpTransferUsingDeleteWithHttpInfo(nucleusFundingId);
        return resp.getData();
    }

    /**
     * Cancel the RTP transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return ApiResponse&lt;RtpTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RtpTransferResponseVO> cancelRtpTransferUsingDeleteWithHttpInfo(UUID nucleusFundingId) throws ApiException {
        com.squareup.okhttp.Call call = cancelRtpTransferUsingDeleteValidateBeforeCall(nucleusFundingId, null, null);
        Type localVarReturnType = new TypeToken<RtpTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel the RTP transfer (asynchronously)
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelRtpTransferUsingDeleteAsync(UUID nucleusFundingId, final ApiCallback<RtpTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelRtpTransferUsingDeleteValidateBeforeCall(nucleusFundingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RtpTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBankLinkUsingPost2
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPost2Call(RtpBankLinkRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/rtp/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBankLinkUsingPost2ValidateBeforeCall(RtpBankLinkRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createBankLinkUsingPost2(Async)");
        }
        

        com.squareup.okhttp.Call call = createBankLinkUsingPost2Call(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bank link
     * 
     * @param request request (required)
     * @return RtpBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RtpBankLinkResponseVO createBankLinkUsingPost2(RtpBankLinkRequestCO request) throws ApiException {
        ApiResponse<RtpBankLinkResponseVO> resp = createBankLinkUsingPost2WithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create bank link
     * 
     * @param request request (required)
     * @return ApiResponse&lt;RtpBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RtpBankLinkResponseVO> createBankLinkUsingPost2WithHttpInfo(RtpBankLinkRequestCO request) throws ApiException {
        com.squareup.okhttp.Call call = createBankLinkUsingPost2ValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<RtpBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create bank link (asynchronously)
     * 
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPost2Async(RtpBankLinkRequestCO request, final ApiCallback<RtpBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBankLinkUsingPost2ValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RtpBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBankLinkUsingDelete2
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDelete2Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBankLinkUsingDelete2ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling deleteBankLinkUsingDelete2(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete2Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return RtpBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RtpBankLinkResponseVO deleteBankLinkUsingDelete2(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<RtpBankLinkResponseVO> resp = deleteBankLinkUsingDelete2WithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Delete bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;RtpBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RtpBankLinkResponseVO> deleteBankLinkUsingDelete2WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete2ValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<RtpBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDelete2Async(UUID nucleusBankLinkId, final ApiCallback<RtpBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete2ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RtpBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBankLinkUsingGet2
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGet2Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankLinkUsingGet2ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling getBankLinkUsingGet2(Async)");
        }
        

        com.squareup.okhttp.Call call = getBankLinkUsingGet2Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return RtpBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RtpBankLinkResponseVO getBankLinkUsingGet2(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<RtpBankLinkResponseVO> resp = getBankLinkUsingGet2WithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Get bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;RtpBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RtpBankLinkResponseVO> getBankLinkUsingGet2WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = getBankLinkUsingGet2ValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<RtpBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGet2Async(UUID nucleusBankLinkId, final ApiCallback<RtpBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankLinkUsingGet2ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RtpBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientBankLinksUsingGet1
     * @param nucleusClientId nucleus_client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientBankLinksUsingGet1Call(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rtp/bank_link/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientBankLinksUsingGet1ValidateBeforeCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling getClientBankLinksUsingGet1(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientBankLinksUsingGet1Call(nucleusClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get client bank links
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return List&lt;RtpBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RtpBankLinkResponseVO> getClientBankLinksUsingGet1(UUID nucleusClientId) throws ApiException {
        ApiResponse<List<RtpBankLinkResponseVO>> resp = getClientBankLinksUsingGet1WithHttpInfo(nucleusClientId);
        return resp.getData();
    }

    /**
     * Get client bank links
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return ApiResponse&lt;List&lt;RtpBankLinkResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RtpBankLinkResponseVO>> getClientBankLinksUsingGet1WithHttpInfo(UUID nucleusClientId) throws ApiException {
        com.squareup.okhttp.Call call = getClientBankLinksUsingGet1ValidateBeforeCall(nucleusClientId, null, null);
        Type localVarReturnType = new TypeToken<List<RtpBankLinkResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get client bank links (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientBankLinksUsingGet1Async(UUID nucleusClientId, final ApiCallback<List<RtpBankLinkResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientBankLinksUsingGet1ValidateBeforeCall(nucleusClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RtpBankLinkResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListOfRtpTransfersUsingGet
     * @param nucleusClientId nucleus_client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListOfRtpTransfersUsingGetCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rtp/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListOfRtpTransfersUsingGetValidateBeforeCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling getListOfRtpTransfersUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getListOfRtpTransfersUsingGetCall(nucleusClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of Rtp transfers
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return List&lt;RtpTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RtpTransferResponseVO> getListOfRtpTransfersUsingGet(UUID nucleusClientId) throws ApiException {
        ApiResponse<List<RtpTransferResponseVO>> resp = getListOfRtpTransfersUsingGetWithHttpInfo(nucleusClientId);
        return resp.getData();
    }

    /**
     * Get a list of Rtp transfers
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return ApiResponse&lt;List&lt;RtpTransferResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RtpTransferResponseVO>> getListOfRtpTransfersUsingGetWithHttpInfo(UUID nucleusClientId) throws ApiException {
        com.squareup.okhttp.Call call = getListOfRtpTransfersUsingGetValidateBeforeCall(nucleusClientId, null, null);
        Type localVarReturnType = new TypeToken<List<RtpTransferResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of Rtp transfers (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListOfRtpTransfersUsingGetAsync(UUID nucleusClientId, final ApiCallback<List<RtpTransferResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListOfRtpTransfersUsingGetValidateBeforeCall(nucleusClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RtpTransferResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRtpTransferUsingGet
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRtpTransferUsingGetCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rtp/{nucleus_funding_id}"
            .replaceAll("\\{" + "nucleus_funding_id" + "\\}", apiClient.escapeString(nucleusFundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRtpTransferUsingGetValidateBeforeCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusFundingId' is set
        if (nucleusFundingId == null) {
            throw new ApiException("Missing the required parameter 'nucleusFundingId' when calling getRtpTransferUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getRtpTransferUsingGetCall(nucleusFundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the RTP transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return RtpTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RtpTransferResponseVO getRtpTransferUsingGet(UUID nucleusFundingId) throws ApiException {
        ApiResponse<RtpTransferResponseVO> resp = getRtpTransferUsingGetWithHttpInfo(nucleusFundingId);
        return resp.getData();
    }

    /**
     * Get the RTP transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return ApiResponse&lt;RtpTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RtpTransferResponseVO> getRtpTransferUsingGetWithHttpInfo(UUID nucleusFundingId) throws ApiException {
        com.squareup.okhttp.Call call = getRtpTransferUsingGetValidateBeforeCall(nucleusFundingId, null, null);
        Type localVarReturnType = new TypeToken<RtpTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the RTP transfer (asynchronously)
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRtpTransferUsingGetAsync(UUID nucleusFundingId, final ApiCallback<RtpTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRtpTransferUsingGetValidateBeforeCall(nucleusFundingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RtpTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitRtpTransferUsingPost
     * @param transferRequest transferRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitRtpTransferUsingPostCall(RtpTransferRequestCO transferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transferRequest;

        // create path and map variables
        String localVarPath = "/rtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitRtpTransferUsingPostValidateBeforeCall(RtpTransferRequestCO transferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferRequest' is set
        if (transferRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRequest' when calling submitRtpTransferUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = submitRtpTransferUsingPostCall(transferRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submit a RTP transfer
     * 
     * @param transferRequest transferRequest (required)
     * @return RtpTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RtpTransferResponseVO submitRtpTransferUsingPost(RtpTransferRequestCO transferRequest) throws ApiException {
        ApiResponse<RtpTransferResponseVO> resp = submitRtpTransferUsingPostWithHttpInfo(transferRequest);
        return resp.getData();
    }

    /**
     * Submit a RTP transfer
     * 
     * @param transferRequest transferRequest (required)
     * @return ApiResponse&lt;RtpTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RtpTransferResponseVO> submitRtpTransferUsingPostWithHttpInfo(RtpTransferRequestCO transferRequest) throws ApiException {
        com.squareup.okhttp.Call call = submitRtpTransferUsingPostValidateBeforeCall(transferRequest, null, null);
        Type localVarReturnType = new TypeToken<RtpTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a RTP transfer (asynchronously)
     * 
     * @param transferRequest transferRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitRtpTransferUsingPostAsync(RtpTransferRequestCO transferRequest, final ApiCallback<RtpTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitRtpTransferUsingPostValidateBeforeCall(transferRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RtpTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBankLinkUsingPut2
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPut2Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBankLinkUsingPut2ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling updateBankLinkUsingPut2(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBankLinkUsingPut2Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return RtpBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RtpBankLinkResponseVO updateBankLinkUsingPut2(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<RtpBankLinkResponseVO> resp = updateBankLinkUsingPut2WithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Update bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;RtpBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RtpBankLinkResponseVO> updateBankLinkUsingPut2WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = updateBankLinkUsingPut2ValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<RtpBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPut2Async(UUID nucleusBankLinkId, final ApiCallback<RtpBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBankLinkUsingPut2ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RtpBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
