/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.integration.model.BaasAccountCO;
import com.hydrogen.integration.model.BaasAccountVO;
import com.hydrogen.integration.model.BaasBalanceVO;
import com.hydrogen.integration.model.BaasBusinessVO;
import com.hydrogen.integration.model.BaasClientVO;
import com.hydrogen.integration.model.BaasStatementsVO;
import com.hydrogen.integration.model.BaasSubAccountCO;
import com.hydrogen.integration.model.BaasSubAccountVO;
import com.hydrogen.integration.model.BaasTransactionsVO;
import com.hydrogen.integration.model.CreateBaasBusinessCO;
import com.hydrogen.integration.model.CreateBaasClientCO;
import org.threeten.bp.LocalDate;
import java.util.UUID;
import com.hydrogen.integration.model.UpdateBaasBusinessCO;
import com.hydrogen.integration.model.UpdateBaasClientCO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BaasApi {
    private ApiClient apiClient;

    public BaasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BaasApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBaasAccountUsingPost
     * @param baasAccountCO baasAccountCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBaasAccountUsingPostCall(BaasAccountCO baasAccountCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = baasAccountCO;

        // create path and map variables
        String localVarPath = "/baas/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBaasAccountUsingPostValidateBeforeCall(BaasAccountCO baasAccountCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'baasAccountCO' is set
        if (baasAccountCO == null) {
            throw new ApiException("Missing the required parameter 'baasAccountCO' when calling createBaasAccountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBaasAccountUsingPostCall(baasAccountCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create a Baas account
     * 
     * @param baasAccountCO baasAccountCO (required)
     * @return BaasAccountVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasAccountVO createBaasAccountUsingPost(BaasAccountCO baasAccountCO) throws ApiException {
        ApiResponse<BaasAccountVO> resp = createBaasAccountUsingPostWithHttpInfo(baasAccountCO);
        return resp.getData();
    }

    /**
     * create a Baas account
     * 
     * @param baasAccountCO baasAccountCO (required)
     * @return ApiResponse&lt;BaasAccountVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasAccountVO> createBaasAccountUsingPostWithHttpInfo(BaasAccountCO baasAccountCO) throws ApiException {
        com.squareup.okhttp.Call call = createBaasAccountUsingPostValidateBeforeCall(baasAccountCO, null, null);
        Type localVarReturnType = new TypeToken<BaasAccountVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a Baas account (asynchronously)
     * 
     * @param baasAccountCO baasAccountCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBaasAccountUsingPostAsync(BaasAccountCO baasAccountCO, final ApiCallback<BaasAccountVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBaasAccountUsingPostValidateBeforeCall(baasAccountCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasAccountVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBaasBusinessUsingPost
     * @param baasBusinessCO baasBusinessCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBaasBusinessUsingPostCall(CreateBaasBusinessCO baasBusinessCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = baasBusinessCO;

        // create path and map variables
        String localVarPath = "/baas/business";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBaasBusinessUsingPostValidateBeforeCall(CreateBaasBusinessCO baasBusinessCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'baasBusinessCO' is set
        if (baasBusinessCO == null) {
            throw new ApiException("Missing the required parameter 'baasBusinessCO' when calling createBaasBusinessUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBaasBusinessUsingPostCall(baasBusinessCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Baas Business
     * 
     * @param baasBusinessCO baasBusinessCO (required)
     * @return BaasBusinessVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasBusinessVO createBaasBusinessUsingPost(CreateBaasBusinessCO baasBusinessCO) throws ApiException {
        ApiResponse<BaasBusinessVO> resp = createBaasBusinessUsingPostWithHttpInfo(baasBusinessCO);
        return resp.getData();
    }

    /**
     * Create a Baas Business
     * 
     * @param baasBusinessCO baasBusinessCO (required)
     * @return ApiResponse&lt;BaasBusinessVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasBusinessVO> createBaasBusinessUsingPostWithHttpInfo(CreateBaasBusinessCO baasBusinessCO) throws ApiException {
        com.squareup.okhttp.Call call = createBaasBusinessUsingPostValidateBeforeCall(baasBusinessCO, null, null);
        Type localVarReturnType = new TypeToken<BaasBusinessVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Baas Business (asynchronously)
     * 
     * @param baasBusinessCO baasBusinessCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBaasBusinessUsingPostAsync(CreateBaasBusinessCO baasBusinessCO, final ApiCallback<BaasBusinessVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBaasBusinessUsingPostValidateBeforeCall(baasBusinessCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasBusinessVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBaasClientUsingPost
     * @param baasClientCO baasClientCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBaasClientUsingPostCall(CreateBaasClientCO baasClientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = baasClientCO;

        // create path and map variables
        String localVarPath = "/baas/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBaasClientUsingPostValidateBeforeCall(CreateBaasClientCO baasClientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'baasClientCO' is set
        if (baasClientCO == null) {
            throw new ApiException("Missing the required parameter 'baasClientCO' when calling createBaasClientUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBaasClientUsingPostCall(baasClientCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Baas Client
     * 
     * @param baasClientCO baasClientCO (required)
     * @return BaasClientVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasClientVO createBaasClientUsingPost(CreateBaasClientCO baasClientCO) throws ApiException {
        ApiResponse<BaasClientVO> resp = createBaasClientUsingPostWithHttpInfo(baasClientCO);
        return resp.getData();
    }

    /**
     * Create a Baas Client
     * 
     * @param baasClientCO baasClientCO (required)
     * @return ApiResponse&lt;BaasClientVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasClientVO> createBaasClientUsingPostWithHttpInfo(CreateBaasClientCO baasClientCO) throws ApiException {
        com.squareup.okhttp.Call call = createBaasClientUsingPostValidateBeforeCall(baasClientCO, null, null);
        Type localVarReturnType = new TypeToken<BaasClientVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Baas Client (asynchronously)
     * 
     * @param baasClientCO baasClientCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBaasClientUsingPostAsync(CreateBaasClientCO baasClientCO, final ApiCallback<BaasClientVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBaasClientUsingPostValidateBeforeCall(baasClientCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasClientVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBaasSubAccountUsingPost
     * @param baasSubAccountCO baasSubAccountCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBaasSubAccountUsingPostCall(BaasSubAccountCO baasSubAccountCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = baasSubAccountCO;

        // create path and map variables
        String localVarPath = "/baas/subaccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBaasSubAccountUsingPostValidateBeforeCall(BaasSubAccountCO baasSubAccountCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'baasSubAccountCO' is set
        if (baasSubAccountCO == null) {
            throw new ApiException("Missing the required parameter 'baasSubAccountCO' when calling createBaasSubAccountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBaasSubAccountUsingPostCall(baasSubAccountCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create a Baas subaccount
     * 
     * @param baasSubAccountCO baasSubAccountCO (required)
     * @return BaasSubAccountVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasSubAccountVO createBaasSubAccountUsingPost(BaasSubAccountCO baasSubAccountCO) throws ApiException {
        ApiResponse<BaasSubAccountVO> resp = createBaasSubAccountUsingPostWithHttpInfo(baasSubAccountCO);
        return resp.getData();
    }

    /**
     * create a Baas subaccount
     * 
     * @param baasSubAccountCO baasSubAccountCO (required)
     * @return ApiResponse&lt;BaasSubAccountVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasSubAccountVO> createBaasSubAccountUsingPostWithHttpInfo(BaasSubAccountCO baasSubAccountCO) throws ApiException {
        com.squareup.okhttp.Call call = createBaasSubAccountUsingPostValidateBeforeCall(baasSubAccountCO, null, null);
        Type localVarReturnType = new TypeToken<BaasSubAccountVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a Baas subaccount (asynchronously)
     * 
     * @param baasSubAccountCO baasSubAccountCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBaasSubAccountUsingPostAsync(BaasSubAccountCO baasSubAccountCO, final ApiCallback<BaasSubAccountVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBaasSubAccountUsingPostValidateBeforeCall(baasSubAccountCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasSubAccountVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBaasAccountStatementUsingGet
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBaasAccountStatementUsingGetCall(LocalDate endDate, UUID nucleusAccountId, LocalDate startDate, String statementType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baas/statement/{nucleus_account_id}"
            .replaceAll("\\{" + "nucleus_account_id" + "\\}", apiClient.escapeString(nucleusAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (statementType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statement_type", statementType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBaasAccountStatementUsingGetValidateBeforeCall(LocalDate endDate, UUID nucleusAccountId, LocalDate startDate, String statementType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getBaasAccountStatementUsingGet(Async)");
        }
        
        // verify the required parameter 'nucleusAccountId' is set
        if (nucleusAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAccountId' when calling getBaasAccountStatementUsingGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getBaasAccountStatementUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBaasAccountStatementUsingGetCall(endDate, nucleusAccountId, startDate, statementType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Baas account statement
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (optional)
     * @return BaasStatementsVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasStatementsVO getBaasAccountStatementUsingGet(LocalDate endDate, UUID nucleusAccountId, LocalDate startDate, String statementType) throws ApiException {
        ApiResponse<BaasStatementsVO> resp = getBaasAccountStatementUsingGetWithHttpInfo(endDate, nucleusAccountId, startDate, statementType);
        return resp.getData();
    }

    /**
     * Get a Baas account statement
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (optional)
     * @return ApiResponse&lt;BaasStatementsVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasStatementsVO> getBaasAccountStatementUsingGetWithHttpInfo(LocalDate endDate, UUID nucleusAccountId, LocalDate startDate, String statementType) throws ApiException {
        com.squareup.okhttp.Call call = getBaasAccountStatementUsingGetValidateBeforeCall(endDate, nucleusAccountId, startDate, statementType, null, null);
        Type localVarReturnType = new TypeToken<BaasStatementsVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Baas account statement (asynchronously)
     * 
     * @param endDate end_date (required)
     * @param nucleusAccountId nucleus_account_id (required)
     * @param startDate start_date (required)
     * @param statementType statement_type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBaasAccountStatementUsingGetAsync(LocalDate endDate, UUID nucleusAccountId, LocalDate startDate, String statementType, final ApiCallback<BaasStatementsVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBaasAccountStatementUsingGetValidateBeforeCall(endDate, nucleusAccountId, startDate, statementType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasStatementsVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBaasPortfolioBalanceUsingGet
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBaasPortfolioBalanceUsingGetCall(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baas/balance/{nucleus_portfolio_id}"
            .replaceAll("\\{" + "nucleus_portfolio_id" + "\\}", apiClient.escapeString(nucleusPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBaasPortfolioBalanceUsingGetValidateBeforeCall(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusPortfolioId' is set
        if (nucleusPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'nucleusPortfolioId' when calling getBaasPortfolioBalanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBaasPortfolioBalanceUsingGetCall(nucleusPortfolioId, endDate, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Baas portfolio balance
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return BaasBalanceVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasBalanceVO getBaasPortfolioBalanceUsingGet(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate) throws ApiException {
        ApiResponse<BaasBalanceVO> resp = getBaasPortfolioBalanceUsingGetWithHttpInfo(nucleusPortfolioId, endDate, startDate);
        return resp.getData();
    }

    /**
     * Get a Baas portfolio balance
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;BaasBalanceVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasBalanceVO> getBaasPortfolioBalanceUsingGetWithHttpInfo(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getBaasPortfolioBalanceUsingGetValidateBeforeCall(nucleusPortfolioId, endDate, startDate, null, null);
        Type localVarReturnType = new TypeToken<BaasBalanceVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Baas portfolio balance (asynchronously)
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBaasPortfolioBalanceUsingGetAsync(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate, final ApiCallback<BaasBalanceVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBaasPortfolioBalanceUsingGetValidateBeforeCall(nucleusPortfolioId, endDate, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasBalanceVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBaasPortfolioTransactionUsingGet
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBaasPortfolioTransactionUsingGetCall(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baas/transaction/{nucleus_portfolio_id}"
            .replaceAll("\\{" + "nucleus_portfolio_id" + "\\}", apiClient.escapeString(nucleusPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBaasPortfolioTransactionUsingGetValidateBeforeCall(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusPortfolioId' is set
        if (nucleusPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'nucleusPortfolioId' when calling getBaasPortfolioTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBaasPortfolioTransactionUsingGetCall(nucleusPortfolioId, endDate, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Baas portfolio transaction
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return BaasTransactionsVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasTransactionsVO getBaasPortfolioTransactionUsingGet(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate) throws ApiException {
        ApiResponse<BaasTransactionsVO> resp = getBaasPortfolioTransactionUsingGetWithHttpInfo(nucleusPortfolioId, endDate, startDate);
        return resp.getData();
    }

    /**
     * Get a Baas portfolio transaction
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;BaasTransactionsVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasTransactionsVO> getBaasPortfolioTransactionUsingGetWithHttpInfo(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getBaasPortfolioTransactionUsingGetValidateBeforeCall(nucleusPortfolioId, endDate, startDate, null, null);
        Type localVarReturnType = new TypeToken<BaasTransactionsVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Baas portfolio transaction (asynchronously)
     * 
     * @param nucleusPortfolioId nucleus_portfolio_id (required)
     * @param endDate end_date (optional)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBaasPortfolioTransactionUsingGetAsync(UUID nucleusPortfolioId, LocalDate endDate, LocalDate startDate, final ApiCallback<BaasTransactionsVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBaasPortfolioTransactionUsingGetValidateBeforeCall(nucleusPortfolioId, endDate, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasTransactionsVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBaasBusinessUsingPut
     * @param nucleusBusinessId nucleus_business_id (required)
     * @param baasBusinessCO baasBusinessCO (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBaasBusinessUsingPutCall(UUID nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = baasBusinessCO;

        // create path and map variables
        String localVarPath = "/baas/business/{nucleus_business_id}"
            .replaceAll("\\{" + "nucleus_business_id" + "\\}", apiClient.escapeString(nucleusBusinessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBaasBusinessUsingPutValidateBeforeCall(UUID nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBusinessId' is set
        if (nucleusBusinessId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBusinessId' when calling updateBaasBusinessUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBaasBusinessUsingPutCall(nucleusBusinessId, baasBusinessCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Baas business
     * 
     * @param nucleusBusinessId nucleus_business_id (required)
     * @param baasBusinessCO baasBusinessCO (optional)
     * @return BaasBusinessVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasBusinessVO updateBaasBusinessUsingPut(UUID nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO) throws ApiException {
        ApiResponse<BaasBusinessVO> resp = updateBaasBusinessUsingPutWithHttpInfo(nucleusBusinessId, baasBusinessCO);
        return resp.getData();
    }

    /**
     * Update a Baas business
     * 
     * @param nucleusBusinessId nucleus_business_id (required)
     * @param baasBusinessCO baasBusinessCO (optional)
     * @return ApiResponse&lt;BaasBusinessVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasBusinessVO> updateBaasBusinessUsingPutWithHttpInfo(UUID nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO) throws ApiException {
        com.squareup.okhttp.Call call = updateBaasBusinessUsingPutValidateBeforeCall(nucleusBusinessId, baasBusinessCO, null, null);
        Type localVarReturnType = new TypeToken<BaasBusinessVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Baas business (asynchronously)
     * 
     * @param nucleusBusinessId nucleus_business_id (required)
     * @param baasBusinessCO baasBusinessCO (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBaasBusinessUsingPutAsync(UUID nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO, final ApiCallback<BaasBusinessVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBaasBusinessUsingPutValidateBeforeCall(nucleusBusinessId, baasBusinessCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasBusinessVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBaasClientUsingPut
     * @param nucleusClientId nucleus_client_id (required)
     * @param baasClientCO baasClientCO (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBaasClientUsingPutCall(UUID nucleusClientId, UpdateBaasClientCO baasClientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = baasClientCO;

        // create path and map variables
        String localVarPath = "/baas/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBaasClientUsingPutValidateBeforeCall(UUID nucleusClientId, UpdateBaasClientCO baasClientCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling updateBaasClientUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBaasClientUsingPutCall(nucleusClientId, baasClientCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Baas client
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param baasClientCO baasClientCO (optional)
     * @return BaasClientVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaasClientVO updateBaasClientUsingPut(UUID nucleusClientId, UpdateBaasClientCO baasClientCO) throws ApiException {
        ApiResponse<BaasClientVO> resp = updateBaasClientUsingPutWithHttpInfo(nucleusClientId, baasClientCO);
        return resp.getData();
    }

    /**
     * Update a Baas client
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param baasClientCO baasClientCO (optional)
     * @return ApiResponse&lt;BaasClientVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaasClientVO> updateBaasClientUsingPutWithHttpInfo(UUID nucleusClientId, UpdateBaasClientCO baasClientCO) throws ApiException {
        com.squareup.okhttp.Call call = updateBaasClientUsingPutValidateBeforeCall(nucleusClientId, baasClientCO, null, null);
        Type localVarReturnType = new TypeToken<BaasClientVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Baas client (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param baasClientCO baasClientCO (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBaasClientUsingPutAsync(UUID nucleusClientId, UpdateBaasClientCO baasClientCO, final ApiCallback<BaasClientVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBaasClientUsingPutValidateBeforeCall(nucleusClientId, baasClientCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaasClientVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
