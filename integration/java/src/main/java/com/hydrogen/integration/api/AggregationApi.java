/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;
import com.hydrogen.integration.model.AggregationAccountBalanceResponseVO;
import com.hydrogen.integration.model.AggregationAccountHoldingResponseVO;
import com.hydrogen.integration.model.AggregationAccountResponseVO;
import com.hydrogen.integration.model.AggregationAccountTransactionResponseVO;
import com.hydrogen.integration.model.AggregationAccountsResponseVO;
import com.hydrogen.integration.model.PropertyValueResponseVO;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.integration.model.AggregationRequestObject;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AggregationApi {
    private ApiClient apiClient;

    public AggregationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AggregationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAggregationAccountUsingPost
     * @param aggregationRequestObject aggregationRequestObject (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountUsingPostCall(AggregationRequestObject aggregationRequestObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationRequestObject;

        // create path and map variables
        String localVarPath = "/aggregation/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountUsingPostValidateBeforeCall(AggregationRequestObject aggregationRequestObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationRequestObject' is set
        if (aggregationRequestObject == null) {
            throw new ApiException("Missing the required parameter 'aggregationRequestObject' when calling createAggregationAccountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountUsingPostCall(aggregationRequestObject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create mapping between client,vendor,tenant
     * Create mapping between client,vendor,tenant
     * @param aggregationRequestObject aggregationRequestObject (required)
     * @return AggregationAccountsResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountsResponseVO createAggregationAccountUsingPost(AggregationRequestObject aggregationRequestObject) throws ApiException {
        ApiResponse<AggregationAccountsResponseVO> resp = createAggregationAccountUsingPostWithHttpInfo(aggregationRequestObject);
        return resp.getData();
    }

    /**
     * Create mapping between client,vendor,tenant
     * Create mapping between client,vendor,tenant
     * @param aggregationRequestObject aggregationRequestObject (required)
     * @return ApiResponse&lt;AggregationAccountsResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountsResponseVO> createAggregationAccountUsingPostWithHttpInfo(AggregationRequestObject aggregationRequestObject) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountUsingPostValidateBeforeCall(aggregationRequestObject, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountsResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create mapping between client,vendor,tenant (asynchronously)
     * Create mapping between client,vendor,tenant
     * @param aggregationRequestObject aggregationRequestObject (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountUsingPostAsync(AggregationRequestObject aggregationRequestObject, final ApiCallback<AggregationAccountsResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountUsingPostValidateBeforeCall(aggregationRequestObject, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountsResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPropertyValueUsingPost
     * @param aggregationRequestObject aggregationRequestObject (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPropertyValueUsingPostCall(AggregationRequestObject aggregationRequestObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationRequestObject;

        // create path and map variables
        String localVarPath = "/property_value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPropertyValueUsingPostValidateBeforeCall(AggregationRequestObject aggregationRequestObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationRequestObject' is set
        if (aggregationRequestObject == null) {
            throw new ApiException("Missing the required parameter 'aggregationRequestObject' when calling createPropertyValueUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createPropertyValueUsingPostCall(aggregationRequestObject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create mapping between client,vendor,tenant for the property
     * Create mapping between client,vendor,tenant for property
     * @param aggregationRequestObject aggregationRequestObject (required)
     * @return PropertyValueResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PropertyValueResponseVO createPropertyValueUsingPost(AggregationRequestObject aggregationRequestObject) throws ApiException {
        ApiResponse<PropertyValueResponseVO> resp = createPropertyValueUsingPostWithHttpInfo(aggregationRequestObject);
        return resp.getData();
    }

    /**
     * Create mapping between client,vendor,tenant for the property
     * Create mapping between client,vendor,tenant for property
     * @param aggregationRequestObject aggregationRequestObject (required)
     * @return ApiResponse&lt;PropertyValueResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PropertyValueResponseVO> createPropertyValueUsingPostWithHttpInfo(AggregationRequestObject aggregationRequestObject) throws ApiException {
        com.squareup.okhttp.Call call = createPropertyValueUsingPostValidateBeforeCall(aggregationRequestObject, null, null);
        Type localVarReturnType = new TypeToken<PropertyValueResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create mapping between client,vendor,tenant for the property (asynchronously)
     * Create mapping between client,vendor,tenant for property
     * @param aggregationRequestObject aggregationRequestObject (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPropertyValueUsingPostAsync(AggregationRequestObject aggregationRequestObject, final ApiCallback<PropertyValueResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPropertyValueUsingPostValidateBeforeCall(aggregationRequestObject, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PropertyValueResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAggregationAccountUsingDelete
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param deleteType delete_type (optional, default to delink)
     * @param nucleusData nucleus_data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountUsingDeleteCall(UUID nucleusAggregationAccountId, String deleteType, String nucleusData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/account/{nucleus_aggregation_account_id}"
            .replaceAll("\\{" + "nucleus_aggregation_account_id" + "\\}", apiClient.escapeString(nucleusAggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deleteType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delete_type", deleteType));
        if (nucleusData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_data", nucleusData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAggregationAccountUsingDeleteValidateBeforeCall(UUID nucleusAggregationAccountId, String deleteType, String nucleusData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusAggregationAccountId' is set
        if (nucleusAggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAggregationAccountId' when calling deleteAggregationAccountUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAggregationAccountUsingDeleteCall(nucleusAggregationAccountId, deleteType, nucleusData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * De-Link mapping between client,vendor,tenant
     * De-Link mapping between client,vendor,tenant
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param deleteType delete_type (optional, default to delink)
     * @param nucleusData nucleus_data (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAggregationAccountUsingDelete(UUID nucleusAggregationAccountId, String deleteType, String nucleusData) throws ApiException {
        deleteAggregationAccountUsingDeleteWithHttpInfo(nucleusAggregationAccountId, deleteType, nucleusData);
    }

    /**
     * De-Link mapping between client,vendor,tenant
     * De-Link mapping between client,vendor,tenant
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param deleteType delete_type (optional, default to delink)
     * @param nucleusData nucleus_data (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAggregationAccountUsingDeleteWithHttpInfo(UUID nucleusAggregationAccountId, String deleteType, String nucleusData) throws ApiException {
        com.squareup.okhttp.Call call = deleteAggregationAccountUsingDeleteValidateBeforeCall(nucleusAggregationAccountId, deleteType, nucleusData, null, null);
        return apiClient.execute(call);
    }

    /**
     * De-Link mapping between client,vendor,tenant (asynchronously)
     * De-Link mapping between client,vendor,tenant
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param deleteType delete_type (optional, default to delink)
     * @param nucleusData nucleus_data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountUsingDeleteAsync(UUID nucleusAggregationAccountId, String deleteType, String nucleusData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAggregationAccountUsingDeleteValidateBeforeCall(nucleusAggregationAccountId, deleteType, nucleusData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountAllUsingGet
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountAllUsingGetCall(List<UUID> aggregationAccountIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggregationAccountIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "aggregation_account_id_list", aggregationAccountIdList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountAllUsingGetValidateBeforeCall(List<UUID> aggregationAccountIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountIdList' is set
        if (aggregationAccountIdList == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountIdList' when calling getAggregationAccountAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountAllUsingGetCall(aggregationAccountIdList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @return List&lt;AggregationAccountResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccountResponseVO> getAggregationAccountAllUsingGet(List<UUID> aggregationAccountIdList) throws ApiException {
        ApiResponse<List<AggregationAccountResponseVO>> resp = getAggregationAccountAllUsingGetWithHttpInfo(aggregationAccountIdList);
        return resp.getData();
    }

    /**
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @return ApiResponse&lt;List&lt;AggregationAccountResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccountResponseVO>> getAggregationAccountAllUsingGetWithHttpInfo(List<UUID> aggregationAccountIdList) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountAllUsingGetValidateBeforeCall(aggregationAccountIdList, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccountResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client (asynchronously)
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountAllUsingGetAsync(List<UUID> aggregationAccountIdList, final ApiCallback<List<AggregationAccountResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountAllUsingGetValidateBeforeCall(aggregationAccountIdList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccountResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountBalanceAllUsingGet
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceAllUsingGetCall(List<UUID> aggregationAccountIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggregationAccountIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "aggregation_account_id_list", aggregationAccountIdList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountBalanceAllUsingGetValidateBeforeCall(List<UUID> aggregationAccountIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountIdList' is set
        if (aggregationAccountIdList == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountIdList' when calling getAggregationAccountBalanceAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountBalanceAllUsingGetCall(aggregationAccountIdList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all aggregation account balance details with for the given aggregation accounts 
     * Fetch all aggregation account balance details with for the given aggregation accounts
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @return List&lt;AggregationAccountBalanceResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccountBalanceResponseVO> getAggregationAccountBalanceAllUsingGet(List<UUID> aggregationAccountIdList) throws ApiException {
        ApiResponse<List<AggregationAccountBalanceResponseVO>> resp = getAggregationAccountBalanceAllUsingGetWithHttpInfo(aggregationAccountIdList);
        return resp.getData();
    }

    /**
     * Fetch all aggregation account balance details with for the given aggregation accounts 
     * Fetch all aggregation account balance details with for the given aggregation accounts
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @return ApiResponse&lt;List&lt;AggregationAccountBalanceResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccountBalanceResponseVO>> getAggregationAccountBalanceAllUsingGetWithHttpInfo(List<UUID> aggregationAccountIdList) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountBalanceAllUsingGetValidateBeforeCall(aggregationAccountIdList, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccountBalanceResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all aggregation account balance details with for the given aggregation accounts  (asynchronously)
     * Fetch all aggregation account balance details with for the given aggregation accounts
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceAllUsingGetAsync(List<UUID> aggregationAccountIdList, final ApiCallback<List<AggregationAccountBalanceResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountBalanceAllUsingGetValidateBeforeCall(aggregationAccountIdList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccountBalanceResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountBalanceUsingGet
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceUsingGetCall(UUID nucleusAggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/balance/{nucleus_aggregation_account_id}"
            .replaceAll("\\{" + "nucleus_aggregation_account_id" + "\\}", apiClient.escapeString(nucleusAggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountBalanceUsingGetValidateBeforeCall(UUID nucleusAggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusAggregationAccountId' is set
        if (nucleusAggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAggregationAccountId' when calling getAggregationAccountBalanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountBalanceUsingGetCall(nucleusAggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @return AggregationAccountBalanceResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountBalanceResponseVO getAggregationAccountBalanceUsingGet(UUID nucleusAggregationAccountId) throws ApiException {
        ApiResponse<AggregationAccountBalanceResponseVO> resp = getAggregationAccountBalanceUsingGetWithHttpInfo(nucleusAggregationAccountId);
        return resp.getData();
    }

    /**
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @return ApiResponse&lt;AggregationAccountBalanceResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountBalanceResponseVO> getAggregationAccountBalanceUsingGetWithHttpInfo(UUID nucleusAggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountBalanceUsingGetValidateBeforeCall(nucleusAggregationAccountId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountBalanceResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch aggregation account balance details with the mapping created in POST endpoint (asynchronously)
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceUsingGetAsync(UUID nucleusAggregationAccountId, final ApiCallback<AggregationAccountBalanceResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountBalanceUsingGetValidateBeforeCall(nucleusAggregationAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountBalanceResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountHoldingAllUsingGet
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountHoldingAllUsingGetCall(List<UUID> aggregationAccountIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggregationAccountIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "aggregation_account_id_list", aggregationAccountIdList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountHoldingAllUsingGetValidateBeforeCall(List<UUID> aggregationAccountIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountIdList' is set
        if (aggregationAccountIdList == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountIdList' when calling getAggregationAccountHoldingAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountHoldingAllUsingGetCall(aggregationAccountIdList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @return List&lt;AggregationAccountHoldingResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccountHoldingResponseVO> getAggregationAccountHoldingAllUsingGet(List<UUID> aggregationAccountIdList) throws ApiException {
        ApiResponse<List<AggregationAccountHoldingResponseVO>> resp = getAggregationAccountHoldingAllUsingGetWithHttpInfo(aggregationAccountIdList);
        return resp.getData();
    }

    /**
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @return ApiResponse&lt;List&lt;AggregationAccountHoldingResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccountHoldingResponseVO>> getAggregationAccountHoldingAllUsingGetWithHttpInfo(List<UUID> aggregationAccountIdList) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountHoldingAllUsingGetValidateBeforeCall(aggregationAccountIdList, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccountHoldingResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint (asynchronously)
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountHoldingAllUsingGetAsync(List<UUID> aggregationAccountIdList, final ApiCallback<List<AggregationAccountHoldingResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountHoldingAllUsingGetValidateBeforeCall(aggregationAccountIdList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccountHoldingResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountHoldingUsingGet
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountHoldingUsingGetCall(UUID nucleusAggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/holding/{nucleus_aggregation_account_id}"
            .replaceAll("\\{" + "nucleus_aggregation_account_id" + "\\}", apiClient.escapeString(nucleusAggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountHoldingUsingGetValidateBeforeCall(UUID nucleusAggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusAggregationAccountId' is set
        if (nucleusAggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAggregationAccountId' when calling getAggregationAccountHoldingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountHoldingUsingGetCall(nucleusAggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @return AggregationAccountHoldingResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountHoldingResponseVO getAggregationAccountHoldingUsingGet(UUID nucleusAggregationAccountId) throws ApiException {
        ApiResponse<AggregationAccountHoldingResponseVO> resp = getAggregationAccountHoldingUsingGetWithHttpInfo(nucleusAggregationAccountId);
        return resp.getData();
    }

    /**
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @return ApiResponse&lt;AggregationAccountHoldingResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountHoldingResponseVO> getAggregationAccountHoldingUsingGetWithHttpInfo(UUID nucleusAggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountHoldingUsingGetValidateBeforeCall(nucleusAggregationAccountId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountHoldingResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch aggregation account holding details with the mapping created in POST endpoint (asynchronously)
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountHoldingUsingGetAsync(UUID nucleusAggregationAccountId, final ApiCallback<AggregationAccountHoldingResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountHoldingUsingGetValidateBeforeCall(nucleusAggregationAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountHoldingResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountTransactionAllUsingGet
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountTransactionAllUsingGetCall(List<UUID> aggregationAccountIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggregationAccountIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "aggregation_account_id_list", aggregationAccountIdList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountTransactionAllUsingGetValidateBeforeCall(List<UUID> aggregationAccountIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountIdList' is set
        if (aggregationAccountIdList == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountIdList' when calling getAggregationAccountTransactionAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountTransactionAllUsingGetCall(aggregationAccountIdList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all aggregation account balance details with for the given aggregation accounts 
     * Fetch all aggregation account balance details with for the given aggregation accounts
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @return List&lt;AggregationAccountTransactionResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccountTransactionResponseVO> getAggregationAccountTransactionAllUsingGet(List<UUID> aggregationAccountIdList) throws ApiException {
        ApiResponse<List<AggregationAccountTransactionResponseVO>> resp = getAggregationAccountTransactionAllUsingGetWithHttpInfo(aggregationAccountIdList);
        return resp.getData();
    }

    /**
     * Fetch all aggregation account balance details with for the given aggregation accounts 
     * Fetch all aggregation account balance details with for the given aggregation accounts
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @return ApiResponse&lt;List&lt;AggregationAccountTransactionResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccountTransactionResponseVO>> getAggregationAccountTransactionAllUsingGetWithHttpInfo(List<UUID> aggregationAccountIdList) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountTransactionAllUsingGetValidateBeforeCall(aggregationAccountIdList, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccountTransactionResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all aggregation account balance details with for the given aggregation accounts  (asynchronously)
     * Fetch all aggregation account balance details with for the given aggregation accounts
     * @param aggregationAccountIdList aggregation_account_id_list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountTransactionAllUsingGetAsync(List<UUID> aggregationAccountIdList, final ApiCallback<List<AggregationAccountTransactionResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountTransactionAllUsingGetValidateBeforeCall(aggregationAccountIdList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccountTransactionResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountTransactionUsingGet
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountTransactionUsingGetCall(UUID nucleusAggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/transaction/{nucleus_aggregation_account_id}"
            .replaceAll("\\{" + "nucleus_aggregation_account_id" + "\\}", apiClient.escapeString(nucleusAggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountTransactionUsingGetValidateBeforeCall(UUID nucleusAggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusAggregationAccountId' is set
        if (nucleusAggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAggregationAccountId' when calling getAggregationAccountTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountTransactionUsingGetCall(nucleusAggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @return AggregationAccountTransactionResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountTransactionResponseVO getAggregationAccountTransactionUsingGet(UUID nucleusAggregationAccountId) throws ApiException {
        ApiResponse<AggregationAccountTransactionResponseVO> resp = getAggregationAccountTransactionUsingGetWithHttpInfo(nucleusAggregationAccountId);
        return resp.getData();
    }

    /**
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @return ApiResponse&lt;AggregationAccountTransactionResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountTransactionResponseVO> getAggregationAccountTransactionUsingGetWithHttpInfo(UUID nucleusAggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountTransactionUsingGetValidateBeforeCall(nucleusAggregationAccountId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountTransactionResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch aggregation account transaction details with the mapping created in POST endpoint (asynchronously)
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountTransactionUsingGetAsync(UUID nucleusAggregationAccountId, final ApiCallback<AggregationAccountTransactionResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountTransactionUsingGetValidateBeforeCall(nucleusAggregationAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountTransactionResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountUsingGet
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountUsingGetCall(UUID nucleusAggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/account/{nucleus_aggregation_account_id}"
            .replaceAll("\\{" + "nucleus_aggregation_account_id" + "\\}", apiClient.escapeString(nucleusAggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountUsingGetValidateBeforeCall(UUID nucleusAggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusAggregationAccountId' is set
        if (nucleusAggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAggregationAccountId' when calling getAggregationAccountUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountUsingGetCall(nucleusAggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch aggregation account details with the mapping created in POST endpoint
     * Fetch aggregation account details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @return AggregationAccountResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountResponseVO getAggregationAccountUsingGet(UUID nucleusAggregationAccountId) throws ApiException {
        ApiResponse<AggregationAccountResponseVO> resp = getAggregationAccountUsingGetWithHttpInfo(nucleusAggregationAccountId);
        return resp.getData();
    }

    /**
     * Fetch aggregation account details with the mapping created in POST endpoint
     * Fetch aggregation account details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @return ApiResponse&lt;AggregationAccountResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountResponseVO> getAggregationAccountUsingGetWithHttpInfo(UUID nucleusAggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountUsingGetValidateBeforeCall(nucleusAggregationAccountId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch aggregation account details with the mapping created in POST endpoint (asynchronously)
     * Fetch aggregation account details with the mapping created in POST endpoint
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountUsingGetAsync(UUID nucleusAggregationAccountId, final ApiCallback<AggregationAccountResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountUsingGetValidateBeforeCall(nucleusAggregationAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPropertyValue
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param nucleusBusinessId nucleus_business_id (optional)
     * @param nucleusClientId nucleus_client_id (optional)
     * @param product product (optional, default to atom)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPropertyValueCall(UUID nucleusAggregationAccountId, UUID nucleusBusinessId, UUID nucleusClientId, String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/property_value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nucleusAggregationAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_aggregation_account_id", nucleusAggregationAccountId));
        if (nucleusBusinessId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_business_id", nucleusBusinessId));
        if (nucleusClientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_client_id", nucleusClientId));
        if (product != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product", product));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPropertyValueValidateBeforeCall(UUID nucleusAggregationAccountId, UUID nucleusBusinessId, UUID nucleusClientId, String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusAggregationAccountId' is set
        if (nucleusAggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'nucleusAggregationAccountId' when calling getPropertyValue(Async)");
        }
        

        com.squareup.okhttp.Call call = getPropertyValueCall(nucleusAggregationAccountId, nucleusBusinessId, nucleusClientId, product, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Value of the given property
     * Get Value of the given property
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param nucleusBusinessId nucleus_business_id (optional)
     * @param nucleusClientId nucleus_client_id (optional)
     * @param product product (optional, default to atom)
     * @return PropertyValueResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PropertyValueResponseVO getPropertyValue(UUID nucleusAggregationAccountId, UUID nucleusBusinessId, UUID nucleusClientId, String product) throws ApiException {
        ApiResponse<PropertyValueResponseVO> resp = getPropertyValueWithHttpInfo(nucleusAggregationAccountId, nucleusBusinessId, nucleusClientId, product);
        return resp.getData();
    }

    /**
     * Get Value of the given property
     * Get Value of the given property
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param nucleusBusinessId nucleus_business_id (optional)
     * @param nucleusClientId nucleus_client_id (optional)
     * @param product product (optional, default to atom)
     * @return ApiResponse&lt;PropertyValueResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PropertyValueResponseVO> getPropertyValueWithHttpInfo(UUID nucleusAggregationAccountId, UUID nucleusBusinessId, UUID nucleusClientId, String product) throws ApiException {
        com.squareup.okhttp.Call call = getPropertyValueValidateBeforeCall(nucleusAggregationAccountId, nucleusBusinessId, nucleusClientId, product, null, null);
        Type localVarReturnType = new TypeToken<PropertyValueResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Value of the given property (asynchronously)
     * Get Value of the given property
     * @param nucleusAggregationAccountId nucleus_aggregation_account_id (required)
     * @param nucleusBusinessId nucleus_business_id (optional)
     * @param nucleusClientId nucleus_client_id (optional)
     * @param product product (optional, default to atom)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPropertyValueAsync(UUID nucleusAggregationAccountId, UUID nucleusBusinessId, UUID nucleusClientId, String product, final ApiCallback<PropertyValueResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPropertyValueValidateBeforeCall(nucleusAggregationAccountId, nucleusBusinessId, nucleusClientId, product, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PropertyValueResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
