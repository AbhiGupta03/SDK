/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressRequestBody;
import com.hydrogen.integration.ProgressResponseBody;
import com.hydrogen.integration.model.IavRequestCO;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.integration.model.IavResponseVo;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IavApi {
    private ApiClient apiClient;

    public IavApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IavApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createIAVUsingPost
     * @param iavRequestCO iavRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIAVUsingPostCall(IavRequestCO iavRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = iavRequestCO;

        // create path and map variables
        String localVarPath = "/iav";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIAVUsingPostValidateBeforeCall(IavRequestCO iavRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'iavRequestCO' is set
        if (iavRequestCO == null) {
            throw new ApiException("Missing the required parameter 'iavRequestCO' when calling createIAVUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createIAVUsingPostCall(iavRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Instant Account Verification of an account.
     * Endpoint is used to verify account.
     * @param iavRequestCO iavRequestCO (required)
     * @return IavResponseVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IavResponseVo createIAVUsingPost(IavRequestCO iavRequestCO) throws ApiException {
        ApiResponse<IavResponseVo> resp = createIAVUsingPostWithHttpInfo(iavRequestCO);
        return resp.getData();
    }

    /**
     * Instant Account Verification of an account.
     * Endpoint is used to verify account.
     * @param iavRequestCO iavRequestCO (required)
     * @return ApiResponse&lt;IavResponseVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IavResponseVo> createIAVUsingPostWithHttpInfo(IavRequestCO iavRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = createIAVUsingPostValidateBeforeCall(iavRequestCO, null, null);
        Type localVarReturnType = new TypeToken<IavResponseVo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Instant Account Verification of an account. (asynchronously)
     * Endpoint is used to verify account.
     * @param iavRequestCO iavRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIAVUsingPostAsync(IavRequestCO iavRequestCO, final ApiCallback<IavResponseVo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIAVUsingPostValidateBeforeCall(iavRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IavResponseVo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBankLinkUsingDelete
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param deleteType delete_type (optional, default to delink)
     * @param nucleusData nucleus_data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDeleteCall(UUID nucleusBankLinkId, String deleteType, String nucleusData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iav/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deleteType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delete_type", deleteType));
        if (nucleusData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nucleus_data", nucleusData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBankLinkUsingDeleteValidateBeforeCall(UUID nucleusBankLinkId, String deleteType, String nucleusData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling deleteBankLinkUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteCall(nucleusBankLinkId, deleteType, nucleusData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * De-Link mapping between client,vendor,tenant
     * De-Link mapping between client,vendor,tenant
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param deleteType delete_type (optional, default to delink)
     * @param nucleusData nucleus_data (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBankLinkUsingDelete(UUID nucleusBankLinkId, String deleteType, String nucleusData) throws ApiException {
        deleteBankLinkUsingDeleteWithHttpInfo(nucleusBankLinkId, deleteType, nucleusData);
    }

    /**
     * De-Link mapping between client,vendor,tenant
     * De-Link mapping between client,vendor,tenant
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param deleteType delete_type (optional, default to delink)
     * @param nucleusData nucleus_data (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBankLinkUsingDeleteWithHttpInfo(UUID nucleusBankLinkId, String deleteType, String nucleusData) throws ApiException {
        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteValidateBeforeCall(nucleusBankLinkId, deleteType, nucleusData, null, null);
        return apiClient.execute(call);
    }

    /**
     * De-Link mapping between client,vendor,tenant (asynchronously)
     * De-Link mapping between client,vendor,tenant
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param deleteType delete_type (optional, default to delink)
     * @param nucleusData nucleus_data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDeleteAsync(UUID nucleusBankLinkId, String deleteType, String nucleusData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteValidateBeforeCall(nucleusBankLinkId, deleteType, nucleusData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getIAVUsingGet
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIAVUsingGetCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iav/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIAVUsingGetValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling getIAVUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getIAVUsingGetCall(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get verified account based on id.
     * Get verified account based on id.
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return IavResponseVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IavResponseVo getIAVUsingGet(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<IavResponseVo> resp = getIAVUsingGetWithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Get verified account based on id.
     * Get verified account based on id.
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;IavResponseVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IavResponseVo> getIAVUsingGetWithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = getIAVUsingGetValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<IavResponseVo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get verified account based on id. (asynchronously)
     * Get verified account based on id.
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIAVUsingGetAsync(UUID nucleusBankLinkId, final ApiCallback<IavResponseVo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIAVUsingGetValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IavResponseVo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
