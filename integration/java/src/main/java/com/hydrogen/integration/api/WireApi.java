/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiClient;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.ApiResponse;
import com.hydrogen.integration.Pair;
import com.hydrogen.integration.ProgressResponseBody;
import com.hydrogen.integration.model.WireBankLinkRequestCO;
import com.hydrogen.integration.model.WireBankLinkResponseVO;
import com.hydrogen.integration.model.WireTransferResponseVO;
import com.hydrogen.integration.ApiCallback;
import com.hydrogen.integration.Configuration;
import com.hydrogen.integration.ProgressRequestBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import com.hydrogen.integration.model.WireTransferRequestCO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WireApi {
    private ApiClient apiClient;

    public WireApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WireApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelWireTransferUsingDelete
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelWireTransferUsingDeleteCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire/{nucleus_funding_id}"
            .replaceAll("\\{" + "nucleus_funding_id" + "\\}", apiClient.escapeString(nucleusFundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelWireTransferUsingDeleteValidateBeforeCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusFundingId' is set
        if (nucleusFundingId == null) {
            throw new ApiException("Missing the required parameter 'nucleusFundingId' when calling cancelWireTransferUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelWireTransferUsingDeleteCall(nucleusFundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel the Wire transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return WireTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WireTransferResponseVO cancelWireTransferUsingDelete(UUID nucleusFundingId) throws ApiException {
        ApiResponse<WireTransferResponseVO> resp = cancelWireTransferUsingDeleteWithHttpInfo(nucleusFundingId);
        return resp.getData();
    }

    /**
     * Cancel the Wire transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return ApiResponse&lt;WireTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WireTransferResponseVO> cancelWireTransferUsingDeleteWithHttpInfo(UUID nucleusFundingId) throws ApiException {
        com.squareup.okhttp.Call call = cancelWireTransferUsingDeleteValidateBeforeCall(nucleusFundingId, null, null);
        Type localVarReturnType = new TypeToken<WireTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel the Wire transfer (asynchronously)
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelWireTransferUsingDeleteAsync(UUID nucleusFundingId, final ApiCallback<WireTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelWireTransferUsingDeleteValidateBeforeCall(nucleusFundingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WireTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBankLinkUsingPost3
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPost3Call(WireBankLinkRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/wire/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBankLinkUsingPost3ValidateBeforeCall(WireBankLinkRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createBankLinkUsingPost3(Async)");
        }
        

        com.squareup.okhttp.Call call = createBankLinkUsingPost3Call(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bank link
     * 
     * @param request request (required)
     * @return WireBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WireBankLinkResponseVO createBankLinkUsingPost3(WireBankLinkRequestCO request) throws ApiException {
        ApiResponse<WireBankLinkResponseVO> resp = createBankLinkUsingPost3WithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create bank link
     * 
     * @param request request (required)
     * @return ApiResponse&lt;WireBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WireBankLinkResponseVO> createBankLinkUsingPost3WithHttpInfo(WireBankLinkRequestCO request) throws ApiException {
        com.squareup.okhttp.Call call = createBankLinkUsingPost3ValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<WireBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create bank link (asynchronously)
     * 
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPost3Async(WireBankLinkRequestCO request, final ApiCallback<WireBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBankLinkUsingPost3ValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WireBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBankLinkUsingDelete4
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDelete4Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBankLinkUsingDelete4ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling deleteBankLinkUsingDelete4(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete4Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return WireBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WireBankLinkResponseVO deleteBankLinkUsingDelete4(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<WireBankLinkResponseVO> resp = deleteBankLinkUsingDelete4WithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Delete bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;WireBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WireBankLinkResponseVO> deleteBankLinkUsingDelete4WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete4ValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<WireBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDelete4Async(UUID nucleusBankLinkId, final ApiCallback<WireBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBankLinkUsingDelete4ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WireBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBankLinkUsingGet3
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGet3Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankLinkUsingGet3ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling getBankLinkUsingGet3(Async)");
        }
        

        com.squareup.okhttp.Call call = getBankLinkUsingGet3Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return WireBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WireBankLinkResponseVO getBankLinkUsingGet3(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<WireBankLinkResponseVO> resp = getBankLinkUsingGet3WithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Get bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;WireBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WireBankLinkResponseVO> getBankLinkUsingGet3WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = getBankLinkUsingGet3ValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<WireBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGet3Async(UUID nucleusBankLinkId, final ApiCallback<WireBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankLinkUsingGet3ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WireBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientBankLinksUsingGet2
     * @param nucleusClientId nucleus_client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientBankLinksUsingGet2Call(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire/bank_link/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientBankLinksUsingGet2ValidateBeforeCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling getClientBankLinksUsingGet2(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientBankLinksUsingGet2Call(nucleusClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get client bank links
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return List&lt;WireBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WireBankLinkResponseVO> getClientBankLinksUsingGet2(UUID nucleusClientId) throws ApiException {
        ApiResponse<List<WireBankLinkResponseVO>> resp = getClientBankLinksUsingGet2WithHttpInfo(nucleusClientId);
        return resp.getData();
    }

    /**
     * Get client bank links
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return ApiResponse&lt;List&lt;WireBankLinkResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WireBankLinkResponseVO>> getClientBankLinksUsingGet2WithHttpInfo(UUID nucleusClientId) throws ApiException {
        com.squareup.okhttp.Call call = getClientBankLinksUsingGet2ValidateBeforeCall(nucleusClientId, null, null);
        Type localVarReturnType = new TypeToken<List<WireBankLinkResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get client bank links (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientBankLinksUsingGet2Async(UUID nucleusClientId, final ApiCallback<List<WireBankLinkResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientBankLinksUsingGet2ValidateBeforeCall(nucleusClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WireBankLinkResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListOfWireTransfersUsingGet
     * @param nucleusClientId nucleus_client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListOfWireTransfersUsingGetCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListOfWireTransfersUsingGetValidateBeforeCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling getListOfWireTransfersUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getListOfWireTransfersUsingGetCall(nucleusClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of Wire transfers
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return List&lt;WireTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WireTransferResponseVO> getListOfWireTransfersUsingGet(UUID nucleusClientId) throws ApiException {
        ApiResponse<List<WireTransferResponseVO>> resp = getListOfWireTransfersUsingGetWithHttpInfo(nucleusClientId);
        return resp.getData();
    }

    /**
     * Get a list of Wire transfers
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return ApiResponse&lt;List&lt;WireTransferResponseVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WireTransferResponseVO>> getListOfWireTransfersUsingGetWithHttpInfo(UUID nucleusClientId) throws ApiException {
        com.squareup.okhttp.Call call = getListOfWireTransfersUsingGetValidateBeforeCall(nucleusClientId, null, null);
        Type localVarReturnType = new TypeToken<List<WireTransferResponseVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of Wire transfers (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListOfWireTransfersUsingGetAsync(UUID nucleusClientId, final ApiCallback<List<WireTransferResponseVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListOfWireTransfersUsingGetValidateBeforeCall(nucleusClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WireTransferResponseVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWireTransferUsingGet
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWireTransferUsingGetCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire/{nucleus_funding_id}"
            .replaceAll("\\{" + "nucleus_funding_id" + "\\}", apiClient.escapeString(nucleusFundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWireTransferUsingGetValidateBeforeCall(UUID nucleusFundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusFundingId' is set
        if (nucleusFundingId == null) {
            throw new ApiException("Missing the required parameter 'nucleusFundingId' when calling getWireTransferUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getWireTransferUsingGetCall(nucleusFundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the Wire transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return WireTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WireTransferResponseVO getWireTransferUsingGet(UUID nucleusFundingId) throws ApiException {
        ApiResponse<WireTransferResponseVO> resp = getWireTransferUsingGetWithHttpInfo(nucleusFundingId);
        return resp.getData();
    }

    /**
     * Get the Wire transfer
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @return ApiResponse&lt;WireTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WireTransferResponseVO> getWireTransferUsingGetWithHttpInfo(UUID nucleusFundingId) throws ApiException {
        com.squareup.okhttp.Call call = getWireTransferUsingGetValidateBeforeCall(nucleusFundingId, null, null);
        Type localVarReturnType = new TypeToken<WireTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Wire transfer (asynchronously)
     * 
     * @param nucleusFundingId nucleus_funding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWireTransferUsingGetAsync(UUID nucleusFundingId, final ApiCallback<WireTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWireTransferUsingGetValidateBeforeCall(nucleusFundingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WireTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitWireTransferUsingPost
     * @param transferRequest transferRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitWireTransferUsingPostCall(WireTransferRequestCO transferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transferRequest;

        // create path and map variables
        String localVarPath = "/wire";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitWireTransferUsingPostValidateBeforeCall(WireTransferRequestCO transferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferRequest' is set
        if (transferRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRequest' when calling submitWireTransferUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = submitWireTransferUsingPostCall(transferRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submit a Wire transfer
     * 
     * @param transferRequest transferRequest (required)
     * @return WireTransferResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WireTransferResponseVO submitWireTransferUsingPost(WireTransferRequestCO transferRequest) throws ApiException {
        ApiResponse<WireTransferResponseVO> resp = submitWireTransferUsingPostWithHttpInfo(transferRequest);
        return resp.getData();
    }

    /**
     * Submit a Wire transfer
     * 
     * @param transferRequest transferRequest (required)
     * @return ApiResponse&lt;WireTransferResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WireTransferResponseVO> submitWireTransferUsingPostWithHttpInfo(WireTransferRequestCO transferRequest) throws ApiException {
        com.squareup.okhttp.Call call = submitWireTransferUsingPostValidateBeforeCall(transferRequest, null, null);
        Type localVarReturnType = new TypeToken<WireTransferResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a Wire transfer (asynchronously)
     * 
     * @param transferRequest transferRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitWireTransferUsingPostAsync(WireTransferRequestCO transferRequest, final ApiCallback<WireTransferResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitWireTransferUsingPostValidateBeforeCall(transferRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WireTransferResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBankLinkUsingPut3
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPut3Call(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire/bank_link/{nucleus_bank_link_id}"
            .replaceAll("\\{" + "nucleus_bank_link_id" + "\\}", apiClient.escapeString(nucleusBankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBankLinkUsingPut3ValidateBeforeCall(UUID nucleusBankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusBankLinkId' is set
        if (nucleusBankLinkId == null) {
            throw new ApiException("Missing the required parameter 'nucleusBankLinkId' when calling updateBankLinkUsingPut3(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBankLinkUsingPut3Call(nucleusBankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return WireBankLinkResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WireBankLinkResponseVO updateBankLinkUsingPut3(UUID nucleusBankLinkId) throws ApiException {
        ApiResponse<WireBankLinkResponseVO> resp = updateBankLinkUsingPut3WithHttpInfo(nucleusBankLinkId);
        return resp.getData();
    }

    /**
     * Update bank link
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @return ApiResponse&lt;WireBankLinkResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WireBankLinkResponseVO> updateBankLinkUsingPut3WithHttpInfo(UUID nucleusBankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = updateBankLinkUsingPut3ValidateBeforeCall(nucleusBankLinkId, null, null);
        Type localVarReturnType = new TypeToken<WireBankLinkResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update bank link (asynchronously)
     * 
     * @param nucleusBankLinkId nucleus_bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPut3Async(UUID nucleusBankLinkId, final ApiCallback<WireBankLinkResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBankLinkUsingPut3ValidateBeforeCall(nucleusBankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WireBankLinkResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
