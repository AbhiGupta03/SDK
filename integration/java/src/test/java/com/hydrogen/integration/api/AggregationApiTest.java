/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.model.AggregationAccountBalanceResponseVO;
import com.hydrogen.integration.model.AggregationAccountHoldingResponseVO;
import com.hydrogen.integration.model.AggregationAccountResponseVO;
import com.hydrogen.integration.model.AggregationAccountTransactionResponseVO;
import com.hydrogen.integration.model.AggregationAccountsResponseVO;
import com.hydrogen.integration.model.PropertyValueResponseVO;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.model.AggregationRequestObject;

import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for AggregationApi
 */
@Ignore
public class AggregationApiTest {

    private final AggregationApi api = new AggregationApi();

    
    /**
     * Create mapping between client,vendor,tenant
     *
     * Create mapping between client,vendor,tenant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAggregationAccountUsingPostTest() throws ApiException {
        AggregationRequestObject aggregationRequestObject = null;
        AggregationAccountsResponseVO response = api.createAggregationAccountUsingPost(aggregationRequestObject);

        // TODO: test validations
    }
    
    /**
     * Create mapping between client,vendor,tenant for the property
     *
     * Create mapping between client,vendor,tenant for property
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPropertyValueUsingPostTest() throws ApiException {
        AggregationRequestObject aggregationRequestObject = null;
        PropertyValueResponseVO response = api.createPropertyValueUsingPost(aggregationRequestObject);

        // TODO: test validations
    }
    
    /**
     * De-Link mapping between client,vendor,tenant
     *
     * De-Link mapping between client,vendor,tenant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAggregationAccountUsingDeleteTest() throws ApiException {
        UUID nucleusAggregationAccountId = null;
        String deleteType = null;
        String nucleusData = null;
        api.deleteAggregationAccountUsingDelete(nucleusAggregationAccountId, deleteType, nucleusData);

        // TODO: test validations
    }
    
    /**
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     *
     * Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountAllUsingGetTest() throws ApiException {
        List<UUID> aggregationAccountIdList = null;
        List<AggregationAccountResponseVO> response = api.getAggregationAccountAllUsingGet(aggregationAccountIdList);

        // TODO: test validations
    }
    
    /**
     * Fetch all aggregation account balance details with for the given aggregation accounts 
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountBalanceAllUsingGetTest() throws ApiException {
        List<UUID> aggregationAccountIdList = null;
        List<AggregationAccountBalanceResponseVO> response = api.getAggregationAccountBalanceAllUsingGet(aggregationAccountIdList);

        // TODO: test validations
    }
    
    /**
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     *
     * Fetch aggregation account balance details with the mapping created in POST endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountBalanceUsingGetTest() throws ApiException {
        UUID nucleusAggregationAccountId = null;
        AggregationAccountBalanceResponseVO response = api.getAggregationAccountBalanceUsingGet(nucleusAggregationAccountId);

        // TODO: test validations
    }
    
    /**
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     *
     * Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountHoldingAllUsingGetTest() throws ApiException {
        List<UUID> aggregationAccountIdList = null;
        List<AggregationAccountHoldingResponseVO> response = api.getAggregationAccountHoldingAllUsingGet(aggregationAccountIdList);

        // TODO: test validations
    }
    
    /**
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     *
     * Fetch aggregation account holding details with the mapping created in POST endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountHoldingUsingGetTest() throws ApiException {
        UUID nucleusAggregationAccountId = null;
        AggregationAccountHoldingResponseVO response = api.getAggregationAccountHoldingUsingGet(nucleusAggregationAccountId);

        // TODO: test validations
    }
    
    /**
     * Fetch all aggregation account balance details with for the given aggregation accounts 
     *
     * Fetch all aggregation account balance details with for the given aggregation accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountTransactionAllUsingGetTest() throws ApiException {
        List<UUID> aggregationAccountIdList = null;
        List<AggregationAccountTransactionResponseVO> response = api.getAggregationAccountTransactionAllUsingGet(aggregationAccountIdList);

        // TODO: test validations
    }
    
    /**
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     *
     * Fetch aggregation account transaction details with the mapping created in POST endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountTransactionUsingGetTest() throws ApiException {
        UUID nucleusAggregationAccountId = null;
        AggregationAccountTransactionResponseVO response = api.getAggregationAccountTransactionUsingGet(nucleusAggregationAccountId);

        // TODO: test validations
    }
    
    /**
     * Fetch aggregation account details with the mapping created in POST endpoint
     *
     * Fetch aggregation account details with the mapping created in POST endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountUsingGetTest() throws ApiException {
        UUID nucleusAggregationAccountId = null;
        AggregationAccountResponseVO response = api.getAggregationAccountUsingGet(nucleusAggregationAccountId);

        // TODO: test validations
    }
    
    /**
     * Get Value of the given property
     *
     * Get Value of the given property
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPropertyValueTest() throws ApiException {
        UUID nucleusAggregationAccountId = null;
        UUID nucleusBusinessId = null;
        UUID nucleusClientId = null;
        String product = null;
        PropertyValueResponseVO response = api.getPropertyValue(nucleusAggregationAccountId, nucleusBusinessId, nucleusClientId, product);

        // TODO: test validations
    }
    
}
