/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.model.AchBalanceResponseVO;
import com.hydrogen.integration.model.AchBankLinkRequestCO;
import com.hydrogen.integration.model.AchBankLinkResponseVO;
import com.hydrogen.integration.model.AchBeneficialOwnerRequestCO;
import com.hydrogen.integration.model.AchBeneficialOwnerResponseVO;
import com.hydrogen.integration.model.AchBusinessRequestCO;
import com.hydrogen.integration.model.AchBusinessResponseVO;
import com.hydrogen.integration.model.AchCardLinkRequestCO;
import com.hydrogen.integration.model.AchCardLinkResponseVO;
import com.hydrogen.integration.model.AchCardRequestCO;
import com.hydrogen.integration.model.AchCardReserveRequestCO;
import com.hydrogen.integration.model.AchCardReserveResponseVO;
import com.hydrogen.integration.model.AchCardResponseVO;
import com.hydrogen.integration.model.AchClientRequestCO;
import com.hydrogen.integration.model.AchClientResponseVO;
import com.hydrogen.integration.model.AchReserveLinkRequestCO;
import com.hydrogen.integration.model.AchReserveLinkResponseVO;
import com.hydrogen.integration.model.AchTransferRequestCO;
import com.hydrogen.integration.model.AchTransferResponseVO;
import org.threeten.bp.LocalDate;
import com.hydrogen.integration.model.PageAchTransferResponseVO;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AchApi
 */
@Ignore
public class AchApiTest {

    private final AchApi api = new AchApi();

    
    /**
     * Cancel the ACH transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelAchTransferUsingDeleteTest() throws ApiException {
        UUID nucleusFundingId = null;
        AchTransferResponseVO response = api.cancelAchTransferUsingDelete(nucleusFundingId);

        // TODO: test validations
    }
    
    /**
     * Create bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchBankLinkUsingPostTest() throws ApiException {
        AchBankLinkRequestCO achBankLinkRequestCO = null;
        AchBankLinkResponseVO response = api.createAchBankLinkUsingPost(achBankLinkRequestCO);

        // TODO: test validations
    }
    
    /**
     * Create a beneficial owner
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchBeneficialOwnerUsingPostTest() throws ApiException {
        AchBeneficialOwnerRequestCO beneficialOwnerRequest = null;
        AchBeneficialOwnerResponseVO response = api.createAchBeneficialOwnerUsingPost(beneficialOwnerRequest);

        // TODO: test validations
    }
    
    /**
     * Create a business
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchBusinessUsingPostTest() throws ApiException {
        AchBusinessRequestCO businessRequest = null;
        AchBusinessResponseVO response = api.createAchBusinessUsingPost(businessRequest);

        // TODO: test validations
    }
    
    /**
     * Create an ACH card link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchCardLinkUsingPostTest() throws ApiException {
        AchCardLinkRequestCO cardLinkRequestCO = null;
        AchCardLinkResponseVO response = api.createAchCardLinkUsingPost(cardLinkRequestCO);

        // TODO: test validations
    }
    
    /**
     * Create an ACH card reserve
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchCardReserveUsingPostTest() throws ApiException {
        AchCardReserveRequestCO cardReserveRequestCO = null;
        AchCardReserveResponseVO response = api.createAchCardReserveUsingPost(cardReserveRequestCO);

        // TODO: test validations
    }
    
    /**
     * Create a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchClientUsingPostTest() throws ApiException {
        AchClientRequestCO clientRequest = null;
        AchClientResponseVO response = api.createAchClientUsingPost(clientRequest);

        // TODO: test validations
    }
    
    /**
     * Create an ACH reserve link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchReserveLinkUsingPostTest() throws ApiException {
        AchReserveLinkRequestCO reserveLinkRequestCO = null;
        AchReserveLinkResponseVO response = api.createAchReserveLinkUsingPost(reserveLinkRequestCO);

        // TODO: test validations
    }
    
    /**
     * Delete bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAchBankLinkUsingDeleteTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        AchBankLinkResponseVO response = api.deleteAchBankLinkUsingDelete(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Fund card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fundCardUsingPostTest() throws ApiException {
        AchCardRequestCO achCardRequestCO = null;
        AchCardResponseVO response = api.fundCardUsingPost(achCardRequestCO);

        // TODO: test validations
    }
    
    /**
     * Get balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchBalanceUsingGetTest() throws ApiException {
        UUID portfolioId = null;
        LocalDate endDate = null;
        LocalDate startDate = null;
        AchBalanceResponseVO response = api.getAchBalanceUsingGet(portfolioId, endDate, startDate);

        // TODO: test validations
    }
    
    /**
     * Get bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchBankLinkUsingGetTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        AchBankLinkResponseVO response = api.getAchBankLinkUsingGet(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Get bank links for a reserve account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchBankLinksForReserveAccountUsingGetTest() throws ApiException {
        List<AchBankLinkResponseVO> response = api.getAchBankLinksForReserveAccountUsingGet();

        // TODO: test validations
    }
    
    /**
     * Get business balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchBusinessBalanceUsingGetTest() throws ApiException {
        UUID businessId = null;
        AchBalanceResponseVO response = api.getAchBusinessBalanceUsingGet(businessId);

        // TODO: test validations
    }
    
    /**
     * Get client bank links
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchClientBankLinksUsingGetTest() throws ApiException {
        UUID nucleusClientId = null;
        List<AchBankLinkResponseVO> response = api.getAchClientBankLinksUsingGet(nucleusClientId);

        // TODO: test validations
    }
    
    /**
     * Get the ACH status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchStatusUsingGetTest() throws ApiException {
        UUID nucleusBusinessId = null;
        AchTransferResponseVO response = api.getAchStatusUsingGet(nucleusBusinessId);

        // TODO: test validations
    }
    
    /**
     * Get the ACH transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchTransferUsingGetTest() throws ApiException {
        UUID nucleusFundingId = null;
        AchTransferResponseVO response = api.getAchTransferUsingGet(nucleusFundingId);

        // TODO: test validations
    }
    
    /**
     * Get a list of client&#39;s ACH transfers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfClientAchTransfersUsingGetTest() throws ApiException {
        UUID nucleusClientId = null;
        Integer page = null;
        Integer size = null;
        PageAchTransferResponseVO response = api.getListOfClientAchTransfersUsingGet(nucleusClientId, page, size);

        // TODO: test validations
    }
    /**
     * Submit an ACH transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitAchTransferUsingPostTest() throws ApiException {
        AchTransferRequestCO transferRequest = null;
        AchTransferResponseVO response = api.submitAchTransferUsingPost(transferRequest);

        // TODO: test validations
    }
    
    /**
     * Update bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAchBankLinkUsingPutTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        AchBankLinkResponseVO response = api.updateAchBankLinkUsingPut(nucleusBankLinkId);

        // TODO: test validations
    }
    
}
