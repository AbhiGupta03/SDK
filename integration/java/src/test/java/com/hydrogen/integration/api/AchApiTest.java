/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.model.AchBalanceResponseVO;
import com.hydrogen.integration.model.AchBankLinkRequestCO;
import com.hydrogen.integration.model.AchCardLinkRequestCO;
import com.hydrogen.integration.model.AchCardReserveRequestCO;
import com.hydrogen.integration.model.AchCardReserveResponseVO;
import com.hydrogen.integration.model.AchTransferRequestCO;
import com.hydrogen.integration.model.PageAchTransferResponseVO;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.model.AchBankLinkResponseVO;
import com.hydrogen.integration.model.AchBusinessRequestCO;
import com.hydrogen.integration.model.AchCardLinkResponseVO;
import com.hydrogen.integration.model.AchClientRequestCO;
import com.hydrogen.integration.model.AchClientResponseVO;
import com.hydrogen.integration.model.AchTransferResponseVO;
import com.hydrogen.integration.model.BaseResponseVO;
import org.threeten.bp.LocalDate;

import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for AchApi
 */
@Ignore
public class AchApiTest {

    private final AchApi api = new AchApi();

    
    /**
     * Cancel the ACH transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelAchTransferUsingDeleteTest() throws ApiException {
        UUID nucleusFundingId = null;
        AchTransferResponseVO response = api.cancelAchTransferUsingDelete(nucleusFundingId);

        // TODO: test validations
    }
    
    /**
     * Create an ACH card link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchCardLinkUsingPostTest() throws ApiException {
        AchCardLinkRequestCO cardLinkRequestCO = null;
        AchCardLinkResponseVO response = api.createAchCardLinkUsingPost(cardLinkRequestCO);

        // TODO: test validations
    }
    
    /**
     * Create an ACH card reserve
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchCardReserveUsingPostTest() throws ApiException {
        AchCardReserveRequestCO cardReserveRequestCO = null;
        AchCardReserveResponseVO response = api.createAchCardReserveUsingPost(cardReserveRequestCO);

        // TODO: test validations
    }
    
    /**
     * Create bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBankLinkUsingPostTest() throws ApiException {
        AchBankLinkRequestCO achBankLinkRequestCO = null;
        AchBankLinkResponseVO response = api.createBankLinkUsingPost(achBankLinkRequestCO);

        // TODO: test validations
    }
    
    /**
     * Create a business
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBusinessUsingPostTest() throws ApiException {
        AchBusinessRequestCO businessRequest = null;
        BaseResponseVO response = api.createBusinessUsingPost(businessRequest);

        // TODO: test validations
    }
    
    /**
     * Create a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClientUsingPostTest() throws ApiException {
        AchClientRequestCO clientRequest = null;
        AchClientResponseVO response = api.createClientUsingPost(clientRequest);

        // TODO: test validations
    }
    
    /**
     * Delete bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBankLinkUsingDeleteTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        AchBankLinkResponseVO response = api.deleteBankLinkUsingDelete(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Get the ACH status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchStatusUsingGetTest() throws ApiException {
        UUID nucleusBusinessId = null;
        AchTransferResponseVO response = api.getAchStatusUsingGet(nucleusBusinessId);

        // TODO: test validations
    }
    
    /**
     * Get the ACH transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchTransferUsingGetTest() throws ApiException {
        UUID nucleusFundingId = null;
        AchTransferResponseVO response = api.getAchTransferUsingGet(nucleusFundingId);

        // TODO: test validations
    }
    
    /**
     * Get balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceUsingGetTest() throws ApiException {
        UUID portfolioId = null;
        LocalDate endDate = null;
        LocalDate startDate = null;
        AchBalanceResponseVO response = api.getBalanceUsingGet(portfolioId, endDate, startDate);

        // TODO: test validations
    }
    
    /**
     * Get bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankLinkUsingGetTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        AchBankLinkResponseVO response = api.getBankLinkUsingGet(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Get bank links for a reserve account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankLinksForReserveAccountUsingGetTest() throws ApiException {
        List<AchBankLinkResponseVO> response = api.getBankLinksForReserveAccountUsingGet();

        // TODO: test validations
    }
    
    /**
     * Get business balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBusinessBalanceUsingGetTest() throws ApiException {
        UUID businessId = null;
        AchBalanceResponseVO response = api.getBusinessBalanceUsingGet(businessId);

        // TODO: test validations
    }
    
    /**
     * Get client bank links
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientBankLinksUsingGetTest() throws ApiException {
        UUID nucleusClientId = null;
        List<AchBankLinkResponseVO> response = api.getClientBankLinksUsingGet(nucleusClientId);

        // TODO: test validations
    }
    
    /**
     * Get a list of client&#39;s ACH transfers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfClientAchTransfersUsingGetTest() throws ApiException {
        UUID nucleusClientId = null;
        Integer page = null;
        Integer size = null;
        PageAchTransferResponseVO response = api.getListOfClientAchTransfersUsingGet(nucleusClientId, page, size);

        // TODO: test validations
    }
    
    /**
     * Get a list of tenant&#39;s ACH transfers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfTenantAchTransfersUsingGetTest() throws ApiException {
        LocalDate endDate = null;
        Integer page = null;
        Integer size = null;
        LocalDate startDate = null;
        String status = null;
        PageAchTransferResponseVO response = api.getListOfTenantAchTransfersUsingGet(endDate, page, size, startDate, status);

        // TODO: test validations
    }
    
    /**
     * Submit an ACH transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitAchTransferUsingPostTest() throws ApiException {
        AchTransferRequestCO transferRequest = null;
        AchTransferResponseVO response = api.submitAchTransferUsingPost(transferRequest);

        // TODO: test validations
    }
    
    /**
     * Update bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBankLinkUsingPutTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        AchBankLinkResponseVO response = api.updateBankLinkUsingPut(nucleusBankLinkId);

        // TODO: test validations
    }
    
}
