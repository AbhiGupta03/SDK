/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.model.CardBaseRequestCO;
import com.hydrogen.integration.model.CardReloadRequestCO;
import com.hydrogen.integration.model.CardTransactionResponseVO;
import com.hydrogen.integration.model.CardTransferRequestCO;
import com.hydrogen.integration.model.CardUnloadRequestCO;
import com.hydrogen.integration.model.BaseResponseVO;
import com.hydrogen.integration.model.CardBalanceResponseVO;
import com.hydrogen.integration.model.CardClientRequestCO;
import com.hydrogen.integration.model.CardClientResponseVO;
import com.hydrogen.integration.model.CardPinRequestCO;
import com.hydrogen.integration.model.CardReloadUnloadResponseVO;
import com.hydrogen.integration.model.CardTokenRequestCO;
import com.hydrogen.integration.model.CardTokenResponseVO;
import com.hydrogen.integration.model.CardTransferResponseVO;
import com.hydrogen.integration.model.GetCardTokenResponseVO;
import org.threeten.bp.LocalDate;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for CardApi
 */
@Ignore
public class CardApiTest {

    private final CardApi api = new CardApi();

    
    /**
     * Activate card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardActivateUsingPostTest() throws ApiException {
        CardBaseRequestCO activateRequest = null;
        BaseResponseVO response = api.createCardActivateUsingPost(activateRequest);

        // TODO: test validations
    }
    
    /**
     * close a card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardCloseUsingPostTest() throws ApiException {
        CardBaseRequestCO closeRequest = null;
        BaseResponseVO response = api.createCardCloseUsingPost(closeRequest);

        // TODO: test validations
    }
    
    /**
     * issue a card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardIssueUsingPostTest() throws ApiException {
        CardBaseRequestCO issueRequest = null;
        BaseResponseVO response = api.createCardIssueUsingPost(issueRequest);

        // TODO: test validations
    }
    
    /**
     * pin card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardPinUsingPostTest() throws ApiException {
        CardPinRequestCO cardPinRequestCO = null;
        BaseResponseVO response = api.createCardPinUsingPost(cardPinRequestCO);

        // TODO: test validations
    }
    
    /**
     * reactivate card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardReactivateUsingPostTest() throws ApiException {
        CardBaseRequestCO reactivateRequest = null;
        BaseResponseVO response = api.createCardReactivateUsingPost(reactivateRequest);

        // TODO: test validations
    }
    
    /**
     * Reissue a card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardReissueUsingPostTest() throws ApiException {
        CardBaseRequestCO request = null;
        BaseResponseVO response = api.createCardReissueUsingPost(request);

        // TODO: test validations
    }
    
    /**
     * Create a card reload
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardReloadUsingPostTest() throws ApiException {
        CardReloadRequestCO reloadRequest = null;
        CardReloadUnloadResponseVO response = api.createCardReloadUsingPost(reloadRequest);

        // TODO: test validations
    }
    
    /**
     * suspend card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardSuspendUsingPostTest() throws ApiException {
        CardBaseRequestCO suspendRequest = null;
        BaseResponseVO response = api.createCardSuspendUsingPost(suspendRequest);

        // TODO: test validations
    }
    
    /**
     * token card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardTokenUsingPostTest() throws ApiException {
        CardTokenRequestCO tokenizeRequest = null;
        CardTokenResponseVO response = api.createCardTokenUsingPost(tokenizeRequest);

        // TODO: test validations
    }
    
    /**
     * Create Card transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardTransferUsingPostTest() throws ApiException {
        CardTransferRequestCO transferRequest = null;
        CardTransferResponseVO response = api.createCardTransferUsingPost(transferRequest);

        // TODO: test validations
    }
    
    /**
     * Create a card upload
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardUnloadUsingPostTest() throws ApiException {
        CardUnloadRequestCO reloadRequest = null;
        CardReloadUnloadResponseVO response = api.createCardUnloadUsingPost(reloadRequest);

        // TODO: test validations
    }
    
    /**
     * Create a card client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClientCardUsingPostTest() throws ApiException {
        CardClientRequestCO cardClientRequestCO = null;
        CardClientResponseVO response = api.createClientCardUsingPost(cardClientRequestCO);

        // TODO: test validations
    }
    
    /**
     * Get a Card Balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardBalanceUsingGetTest() throws ApiException {
        UUID id = null;
        LocalDate endDate = null;
        LocalDate startDate = null;
        CardBalanceResponseVO response = api.getCardBalanceUsingGet(id, endDate, startDate);

        // TODO: test validations
    }
    
    /**
     * Get a card token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardTokenUsingTokenTest() throws ApiException {
        UUID id = null;
        GetCardTokenResponseVO response = api.getCardTokenUsingToken(id);

        // TODO: test validations
    }
    
    /**
     * Get a card transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardTransactionUsingGetTest() throws ApiException {
        UUID id = null;
        LocalDate endDate = null;
        LocalDate startDate = null;
        CardTransactionResponseVO response = api.getCardTransactionUsingGet(id, endDate, startDate);

        // TODO: test validations
    }
    
    /**
     * Get a card information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardUsingGetTest() throws ApiException {
        UUID id = null;
        BaseResponseVO response = api.getCardUsingGet(id);

        // TODO: test validations
    }
    
    /**
     * update a pin card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCardPinUsingPostTest() throws ApiException {
        CardPinRequestCO cardPinRequestCO = null;
        UUID id = null;
        BaseResponseVO response = api.updateCardPinUsingPost(cardPinRequestCO, id);

        // TODO: test validations
    }
    
    /**
     * Update a card information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCardUsingPutTest() throws ApiException {
        UUID id = null;
        BaseResponseVO response = api.updateCardUsingPut(id);

        // TODO: test validations
    }
    
}
