/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.model.BrokerageDocumentVO;
import com.hydrogen.integration.model.BrokerageOrderCO;
import com.hydrogen.integration.model.BrokerageTransactionVO;
import com.hydrogen.integration.model.BrokerageUpdateClientVO;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.model.BrokerageAccountCO;
import com.hydrogen.integration.model.BrokerageAccountVO;
import com.hydrogen.integration.model.BrokerageBalanceVO;
import com.hydrogen.integration.model.BrokerageBankLinkCO;
import com.hydrogen.integration.model.BrokerageBankLinkVO;
import com.hydrogen.integration.model.BrokerageCreateClientCO;
import com.hydrogen.integration.model.BrokerageCreateClientVO;
import com.hydrogen.integration.model.BrokerageDepositCO;
import com.hydrogen.integration.model.BrokerageDepositVO;
import com.hydrogen.integration.model.BrokerageDocumentCO;
import com.hydrogen.integration.model.BrokerageHoldingVO;
import com.hydrogen.integration.model.BrokerageOrderVO;
import com.hydrogen.integration.model.BrokeragePerformanceVO;
import com.hydrogen.integration.model.BrokerageSecuritiesVO;
import com.hydrogen.integration.model.BrokerageStatementVO;
import com.hydrogen.integration.model.BrokerageUpdateClientCO;
import com.hydrogen.integration.model.BrokerageWithdrawalCO;
import com.hydrogen.integration.model.BrokerageWithdrawalVO;
import com.hydrogen.integration.model.GetTransactionsResponse;
import org.threeten.bp.LocalDate;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for BrokerageApi
 */
@Ignore
public class BrokerageApiTest {

    private final BrokerageApi api = new BrokerageApi();

    
    /**
     * Cancel an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelBrokerageOrderUsingPutTest() throws ApiException {
        UUID nucleusOrderId = null;
        api.cancelBrokerageOrderUsingPut(nucleusOrderId);

        // TODO: test validations
    }
    
    /**
     * create a Brokerage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageAccountUsingPostTest() throws ApiException {
        BrokerageAccountCO brokerageAccountCO = null;
        BrokerageAccountVO response = api.createBrokerageAccountUsingPost(brokerageAccountCO);

        // TODO: test validations
    }
    
    /**
     * create a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageBankLinkUsingPostTest() throws ApiException {
        BrokerageBankLinkCO brokerageBankLinkCO = null;
        BrokerageBankLinkVO response = api.createBrokerageBankLinkUsingPost(brokerageBankLinkCO);

        // TODO: test validations
    }
    
    /**
     * Create a Brokerage Client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageClientUsingPostTest() throws ApiException {
        BrokerageCreateClientCO clientCO = null;
        BrokerageCreateClientVO response = api.createBrokerageClientUsingPost(clientCO);

        // TODO: test validations
    }
    
    /**
     * Create a deposit
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageDepositUsingPostTest() throws ApiException {
        BrokerageDepositCO brokerageDepositCO = null;
        BrokerageDepositVO response = api.createBrokerageDepositUsingPost(brokerageDepositCO);

        // TODO: test validations
    }
    
    /**
     * Create a Brokerage document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageDocumentUsingPostTest() throws ApiException {
        BrokerageDocumentCO documentCO = null;
        BrokerageDocumentVO response = api.createBrokerageDocumentUsingPost(documentCO);

        // TODO: test validations
    }
    
    /**
     * Create an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageOrderUsingPostTest() throws ApiException {
        BrokerageOrderCO brokerageOrderCO = null;
        BrokerageOrderVO response = api.createBrokerageOrderUsingPost(brokerageOrderCO);

        // TODO: test validations
    }
    
    /**
     * Create a withdrawal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageWithdrawalUsingPostTest() throws ApiException {
        BrokerageWithdrawalCO brokerageWithdrawalCO = null;
        BrokerageWithdrawalVO response = api.createBrokerageWithdrawalUsingPost(brokerageWithdrawalCO);

        // TODO: test validations
    }
    
    /**
     * Delete a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBrokerageBankLinkUsingDeleteTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        api.deleteBrokerageBankLinkUsingDelete(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Get a Brokerage account statement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageAccountStatementUsingGetTest() throws ApiException {
         LocalDate endDate = null;
        UUID nucleusAccountId = null;
         LocalDate startDate = null;
        String statementType = null;
        BrokerageStatementVO response = api.getBrokerageAccountStatementUsingGet(endDate, nucleusAccountId, startDate, statementType);

        // TODO: test validations
    }
    
    /**
     * Get account balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageBalanceUsingGetTest() throws ApiException {
        UUID nucleusPortfolioId = null;
        BrokerageBalanceVO response = api.getBrokerageBalanceUsingGet(nucleusPortfolioId);

        // TODO: test validations
    }
    
    /**
     * Get a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageBankLinkUsingGetTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        BrokerageBankLinkVO response = api.getBrokerageBankLinkUsingGet(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Get a Brokerage document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageDocumentUsingGetTest() throws ApiException {
        UUID nucleusDocumentId = null;
        BrokerageDocumentVO response = api.getBrokerageDocumentUsingGet(nucleusDocumentId);

        // TODO: test validations
    }
    
    /**
     * Get portfolio holding performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageHoldingPerformanceUsingGetTest() throws ApiException {
        UUID nucleusPortfolioId = null;
        BrokeragePerformanceVO response = api.getBrokerageHoldingPerformanceUsingGet(nucleusPortfolioId);

        // TODO: test validations
    }
    
    /**
     * Get portfolio holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageHoldingUsingGetTest() throws ApiException {
        UUID nucleusPortfolioId = null;
        BrokerageHoldingVO response = api.getBrokerageHoldingUsingGet(nucleusPortfolioId);

        // TODO: test validations
    }
    
    /**
     * Get an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageOrderUsingGetTest() throws ApiException {
        UUID nucleusOrderId = null;
        BrokerageOrderVO response = api.getBrokerageOrderUsingGet(nucleusOrderId);

        // TODO: test validations
    }
    
    /**
     * Get securities information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageSecuritiesUsingGetTest() throws ApiException {
        String vendorName = null;
        Boolean getFundamentals = null;
        UUID nucleusSecurityId = null;
        BrokerageSecuritiesVO response = api.getBrokerageSecuritiesUsingGet(vendorName, getFundamentals, nucleusSecurityId);

        // TODO: test validations
    }
    
    /**
     * Get account transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageTransactionsUsingGetTest() throws ApiException {
        GetTransactionsResponse drivewealthResponse = null;
        LocalDate endDate = null;
        UUID nucleusPortfolioId = null;
        LocalDate startDate = null;
        BrokerageTransactionVO response = api.getBrokerageTransactionsUsingGet(drivewealthResponse, endDate, nucleusPortfolioId, startDate);

        // TODO: test validations
    }
    
    /**
     * Update a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBrokerageBankLinkUsingPutTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        BrokerageBankLinkVO response = api.updateBrokerageBankLinkUsingPut(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Update a Brokerage client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBrokerageClientUsingPutTest() throws ApiException {
        UUID nucleusClientId = null;
        BrokerageUpdateClientCO clientCO = null;
        BrokerageUpdateClientVO response = api.updateBrokerageClientUsingPut(nucleusClientId, clientCO);

        // TODO: test validations
    }
    
}
