/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.model.BrokerageAccountCO;
import com.hydrogen.integration.model.BrokerageAccountVO;
import com.hydrogen.integration.model.BrokerageBankLinkCO;
import com.hydrogen.integration.model.BrokerageBankLinkVO;
import com.hydrogen.integration.model.BrokerageCreateClientVO;
import com.hydrogen.integration.model.BrokerageStatementVO;
import com.hydrogen.integration.model.CreateOrderResponse;
import com.hydrogen.integration.model.GetOrderResponse;
import com.hydrogen.integration.model.ResponseEntity;
import com.hydrogen.integration.model.BrokerageUpdateClientVO;
import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.model.BrokerageClientCO;
import org.threeten.bp.OffsetDateTime;

import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for BrokerageApi
 */
@Ignore
public class BrokerageApiTest {

    private final BrokerageApi api = new BrokerageApi();

    
    /**
     * create a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBankLinkUsingPostTest() throws ApiException {
        BrokerageBankLinkCO brokerageBankLinkCO = null;
        BrokerageBankLinkVO response = api.createBankLinkUsingPost(brokerageBankLinkCO);

        // TODO: test validations
    }
    
    /**
     * create a Brokerage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageAccountUsingPostTest() throws ApiException {
        BrokerageAccountCO brokerageAccountCO = null;
        BrokerageAccountVO response = api.createBrokerageAccountUsingPost(brokerageAccountCO);

        // TODO: test validations
    }
    
    /**
     * Create a Brokerage Client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageClientUsingPostTest() throws ApiException {
        BrokerageClientCO clientCO = null;
        BrokerageCreateClientVO response = api.createBrokerageClientUsingPost(clientCO);

        // TODO: test validations
    }
    
    /**
     * Create an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrderUsingPostTest() throws ApiException {
        UUID nucleusOrderId = null;
        CreateOrderResponse response = api.createOrderUsingPost(nucleusOrderId);

        // TODO: test validations
    }
    
    /**
     * Delete a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBankLinkUsingDeleteTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        ResponseEntity response = api.deleteBankLinkUsingDelete(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Delete an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderUsingDeleteTest() throws ApiException {
        UUID nucleusOrderId = null;
        api.deleteOrderUsingDelete(nucleusOrderId);

        // TODO: test validations
    }
    
    /**
     * Get a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankLinkUsingGetTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        BrokerageBankLinkVO response = api.getBankLinkUsingGet(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Get a Brokerage account statement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageAccountStatementUsingGetTest() throws ApiException {
        OffsetDateTime endDate = null;
        UUID nucleusAccountId = null;
        OffsetDateTime startDate = null;
        String statementType = null;
        BrokerageStatementVO response = api.getBrokerageAccountStatementUsingGet(endDate, nucleusAccountId, startDate, statementType);

        // TODO: test validations
    }
    
    /**
     * Get an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderUsingGetTest() throws ApiException {
        UUID nucleusOrderId = null;
        GetOrderResponse response = api.getOrderUsingGet(nucleusOrderId);

        // TODO: test validations
    }
    
    /**
     * Update a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBankLinkUsingPutTest() throws ApiException {
        UUID nucleusBankLinkId = null;
        BrokerageBankLinkVO response = api.updateBankLinkUsingPut(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Update a Brokerage client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBrokerageClientUsingPutTest() throws ApiException {
        BrokerageClientCO clientCO = null;
        BrokerageUpdateClientVO response = api.updateBrokerageClientUsingPut(clientCO);

        // TODO: test validations
    }
    
}
