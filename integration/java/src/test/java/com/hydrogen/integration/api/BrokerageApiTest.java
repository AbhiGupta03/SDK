/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.integration.api;

import com.hydrogen.integration.ApiException;
import com.hydrogen.integration.model.BrokerageAccountVO;
import com.hydrogen.integration.model.BrokerageCreateClientVO;
import com.hydrogen.integration.model.BrokerageDepositVO;
import com.hydrogen.integration.model.BrokerageAccountCO;
import com.hydrogen.integration.model.BrokerageBalanceVO;
import com.hydrogen.integration.model.BrokerageBankLinkCO;
import com.hydrogen.integration.model.BrokerageBankLinkVO;
import com.hydrogen.integration.model.BrokerageClientCO;
import com.hydrogen.integration.model.BrokerageDepositCO;
import com.hydrogen.integration.model.BrokerageDocumentCO;
import com.hydrogen.integration.model.BrokerageDocumentVO;
import com.hydrogen.integration.model.BrokerageHoldingVO;
import com.hydrogen.integration.model.BrokerageOrderCO;
import com.hydrogen.integration.model.BrokerageOrderVO;
import com.hydrogen.integration.model.BrokeragePerformanceVO;
import com.hydrogen.integration.model.BrokerageSecuritiesVO;
import com.hydrogen.integration.model.BrokerageStatementVO;
import com.hydrogen.integration.model.BrokerageTransactionVO;
import com.hydrogen.integration.model.BrokerageUpdateClientVO;
import com.hydrogen.integration.model.BrokerageWithdrawalCO;
import com.hydrogen.integration.model.BrokerageWithdrawalVO;
import com.hydrogen.integration.model.GetTransactionsResponse;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for BrokerageApi
 */
@Ignore
public class BrokerageApiTest {

    private final BrokerageApi api = new BrokerageApi();

    
    /**
     * Cancel an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelOrderUsingPutTest() throws ApiException {
        UUID nucleusOrderId = null;
        api.cancelOrderUsingPut(nucleusOrderId);

        // TODO: test validations
    }
    
    /**
     * create a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBankLinkUsingPost1Test() throws ApiException {
        BrokerageBankLinkCO brokerageBankLinkCO = null;
        BrokerageBankLinkVO response = api.createBankLinkUsingPost1(brokerageBankLinkCO);

        // TODO: test validations
    }
    
    /**
     * create a Brokerage account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageAccountUsingPostTest() throws ApiException {
        BrokerageAccountCO brokerageAccountCO = null;
        BrokerageAccountVO response = api.createBrokerageAccountUsingPost(brokerageAccountCO);

        // TODO: test validations
    }
    
    /**
     * Create a Brokerage Client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrokerageClientUsingPostTest() throws ApiException {
        BrokerageClientCO clientCO = null;
        BrokerageCreateClientVO response = api.createBrokerageClientUsingPost(clientCO);

        // TODO: test validations
    }
    
    /**
     * Create a deposit
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDepositUsingPostTest() throws ApiException {
        BrokerageDepositCO brokerageDepositCO = null;
        BrokerageDepositVO response = api.createDepositUsingPost(brokerageDepositCO);

        // TODO: test validations
    }
    
    /**
     * Create a Brokerage document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDocumentUsingPostTest() throws ApiException {
        BrokerageDocumentCO documentCO = null;
        BrokerageDocumentVO response = api.createDocumentUsingPost(documentCO);

        // TODO: test validations
    }
    
    /**
     * Create an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrderUsingPostTest() throws ApiException {
        BrokerageOrderCO brokerageOrderCO = null;
        BrokerageOrderVO response = api.createOrderUsingPost(brokerageOrderCO);

        // TODO: test validations
    }
    
    /**
     * Create a withdrawal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWithdrawalUsingPostTest() throws ApiException {
        BrokerageWithdrawalCO brokerageWithdrawalCO = null;
        BrokerageWithdrawalVO response = api.createWithdrawalUsingPost(brokerageWithdrawalCO);

        // TODO: test validations
    }
    
    /**
     * Delete a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBankLinkUsingDelete1Test() throws ApiException {
        UUID nucleusBankLinkId = null;
        api.deleteBankLinkUsingDelete1(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Get account balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceUsingGet1Test() throws ApiException {
        UUID nucleusPortfolioId = null;
        BrokerageBalanceVO response = api.getBalanceUsingGet1(nucleusPortfolioId);

        // TODO: test validations
    }
    
    /**
     * Get a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankLinkUsingGet1Test() throws ApiException {
        UUID nucleusBankLinkId = null;
        BrokerageBankLinkVO response = api.getBankLinkUsingGet1(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Get a Brokerage account statement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrokerageAccountStatementUsingGetTest() throws ApiException {
        OffsetDateTime endDate = null;
        UUID nucleusAccountId = null;
        OffsetDateTime startDate = null;
        String statementType = null;
        BrokerageStatementVO response = api.getBrokerageAccountStatementUsingGet(endDate, nucleusAccountId, startDate, statementType);

        // TODO: test validations
    }
    
    /**
     * Get a Brokerage document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentUsingGetTest() throws ApiException {
        UUID nucleusDocumentId = null;
        BrokerageDocumentVO response = api.getDocumentUsingGet(nucleusDocumentId);

        // TODO: test validations
    }
    
    /**
     * Get portfolio holding performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHoldingPerformanceUsingGetTest() throws ApiException {
        UUID nucleusPortfolioId = null;
        BrokeragePerformanceVO response = api.getHoldingPerformanceUsingGet(nucleusPortfolioId);

        // TODO: test validations
    }
    
    /**
     * Get portfolio holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHoldingUsingGetTest() throws ApiException {
        UUID nucleusPortfolioId = null;
        BrokerageHoldingVO response = api.getHoldingUsingGet(nucleusPortfolioId);

        // TODO: test validations
    }
    
    /**
     * Get an Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderUsingGetTest() throws ApiException {
        UUID nucleusOrderId = null;
        BrokerageOrderVO response = api.getOrderUsingGet(nucleusOrderId);

        // TODO: test validations
    }
    
    /**
     * Get securities information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecuritiesUsingGetTest() throws ApiException {
        String vendorName = null;
        Boolean getFundamentals = null;
        UUID nucleusSecurityId = null;
        BrokerageSecuritiesVO response = api.getSecuritiesUsingGet(vendorName, getFundamentals, nucleusSecurityId);

        // TODO: test validations
    }
    
    /**
     * Get account transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsUsingGetTest() throws ApiException {
        GetTransactionsResponse drivewealthResponse = null;
        LocalDate endDate = null;
        UUID nucleusPortfolioId = null;
        LocalDate startDate = null;
        BrokerageTransactionVO response = api.getTransactionsUsingGet(drivewealthResponse, endDate, nucleusPortfolioId, startDate);

        // TODO: test validations
    }
    
    /**
     * Update a Bank Link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBankLinkUsingPut1Test() throws ApiException {
        UUID nucleusBankLinkId = null;
        BrokerageBankLinkVO response = api.updateBankLinkUsingPut1(nucleusBankLinkId);

        // TODO: test validations
    }
    
    /**
     * Update a Brokerage client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBrokerageClientUsingPutTest() throws ApiException {
        BrokerageClientCO clientCO = null;
        BrokerageUpdateClientVO response = api.updateBrokerageClientUsingPut(clientCO);

        // TODO: test validations
    }
    
}
