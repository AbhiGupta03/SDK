/*
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * API version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package integration_api

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type UtilsApiService service

/*
UtilsApiService Retrieve token based on certain vendor specific value
Retrieve the token.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param exchangeTokenCO exchangeTokenCO

@return ExchangePublicTokenVo
*/
func (a *UtilsApiService) CreateTokenExchangeUsingPost(ctx context.Context, exchangeTokenCO ExchangeTokenCo) (ExchangePublicTokenVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ExchangePublicTokenVo
	)

	// create path and map variables
	a.client = NewAPIClient(&Configuration{
		BasePath:      ctx.Value("BasePath").(string),
		DefaultHeader: make(map[string]string),
		UserAgent:     "Swagger-Codegen/1.0.0/go",
	})
	localVarPath := a.client.cfg.BasePath + "/token_exchange"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &exchangeTokenCO
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ExchangePublicTokenVo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
UtilsApiService Create user in vendor
Create user in vendor.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param createUserRequest createUserRequest

@return UserResponseVo
*/
func (a *UtilsApiService) CreateUserUsingPost(ctx context.Context, createUserRequest CreateUserRequest) (UserResponseVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue UserResponseVo
	)

	// create path and map variables
	a.client = NewAPIClient(&Configuration{
		BasePath:      ctx.Value("BasePath").(string),
		DefaultHeader: make(map[string]string),
		UserAgent:     "Swagger-Codegen/1.0.0/go",
	})
	localVarPath := a.client.cfg.BasePath + "/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &createUserRequest
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v UserResponseVo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
UtilsApiService Gel all audit log
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *UtilsApiGetAuditLogAllUsingGetOpts - Optional Parameters:
     * @param "Ascending" (optional.Bool) -  ascending
     * @param "EndDate" (optional.String) -  end_date
     * @param "Event" (optional.String) -  event
     * @param "IntegrationType" (optional.String) -  integration_type
     * @param "IsRequest" (optional.Bool) -  is_request
     * @param "NucleusAggregationAccountId" (optional.Interface of string) -  nucleus_aggregation_account_id
     * @param "NucleusClientId" (optional.Interface of string) -  nucleus_client_id
     * @param "OrderBy" (optional.String) -  order_by
     * @param "Page" (optional.Int32) -  page
     * @param "RequestType" (optional.String) -  request_type
     * @param "Size" (optional.Int32) -  size
     * @param "StartDate" (optional.String) -  start_date
     * @param "VendorName" (optional.String) -  vendor_name

@return Pageobject
*/

type UtilsApiGetAuditLogAllUsingGetOpts struct {
	Ascending                   optional.Bool
	EndDate                     optional.String
	Event                       optional.String
	IntegrationType             optional.String
	IsRequest                   optional.Bool
	NucleusAggregationAccountId optional.Interface
	NucleusClientId             optional.Interface
	OrderBy                     optional.String
	Page                        optional.Int32
	RequestType                 optional.String
	Size                        optional.Int32
	StartDate                   optional.String
	VendorName                  optional.String
}

func (a *UtilsApiService) GetAuditLogAllUsingGet(ctx context.Context, localVarOptionals *UtilsApiGetAuditLogAllUsingGetOpts) (Pageobject, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Pageobject
	)

	// create path and map variables
	a.client = NewAPIClient(&Configuration{
		BasePath:      ctx.Value("BasePath").(string),
		DefaultHeader: make(map[string]string),
		UserAgent:     "Swagger-Codegen/1.0.0/go",
	})
	localVarPath := a.client.cfg.BasePath + "/audit_log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Ascending.IsSet() {
		localVarQueryParams.Add("ascending", parameterToString(localVarOptionals.Ascending.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Event.IsSet() {
		localVarQueryParams.Add("event", parameterToString(localVarOptionals.Event.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IntegrationType.IsSet() {
		localVarQueryParams.Add("integration_type", parameterToString(localVarOptionals.IntegrationType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsRequest.IsSet() {
		localVarQueryParams.Add("is_request", parameterToString(localVarOptionals.IsRequest.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NucleusAggregationAccountId.IsSet() {
		localVarQueryParams.Add("nucleus_aggregation_account_id", parameterToString(localVarOptionals.NucleusAggregationAccountId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NucleusClientId.IsSet() {
		localVarQueryParams.Add("nucleus_client_id", parameterToString(localVarOptionals.NucleusClientId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderBy.IsSet() {
		localVarQueryParams.Add("order_by", parameterToString(localVarOptionals.OrderBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequestType.IsSet() {
		localVarQueryParams.Add("request_type", parameterToString(localVarOptionals.RequestType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VendorName.IsSet() {
		localVarQueryParams.Add("vendor_name", parameterToString(localVarOptionals.VendorName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v Pageobject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
UtilsApiService Retrieve widget link
Retrieve the widget link.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nucleusId nucleus_id
 * @param optional nil or *UtilsApiGetWidgetLinkUsingGetOpts - Optional Parameters:
     * @param "IsBusiness" (optional.Bool) -  is_business
     * @param "IsMobileWebview" (optional.Bool) -  is_mobile_webview
     * @param "MemberId" (optional.String) -  member_id
     * @param "MessageVersion" (optional.Float32) -  message_version
     * @param "Mode" (optional.String) -  mode
     * @param "NucleusAggregationAccountId" (optional.Interface of string) -  nucleus_aggregation_account_id
     * @param "NucleusBankLinkId" (optional.Interface of string) -  nucleus_bank_link_id
     * @param "VendorName" (optional.String) -  vendor_name
     * @param "WaitForFullAggregation" (optional.Bool) -  wait_for_full_aggregation
     * @param "WebviewUrlScheme" (optional.String) -  webview_url_scheme

@return WidgetUrlVo
*/

type UtilsApiGetWidgetLinkUsingGetOpts struct {
	IsBusiness                  optional.Bool
	IsMobileWebview             optional.Bool
	MemberId                    optional.String
	MessageVersion              optional.Float32
	Mode                        optional.String
	NucleusAggregationAccountId optional.Interface
	NucleusBankLinkId           optional.Interface
	VendorName                  optional.String
	WaitForFullAggregation      optional.Bool
	WebviewUrlScheme            optional.String
}

func (a *UtilsApiService) GetWidgetLinkUsingGet(ctx context.Context, nucleusId string, localVarOptionals *UtilsApiGetWidgetLinkUsingGetOpts) (WidgetUrlVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue WidgetUrlVo
	)

	// create path and map variables
	a.client = NewAPIClient(&Configuration{
		BasePath:      ctx.Value("BasePath").(string),
		DefaultHeader: make(map[string]string),
		UserAgent:     "Swagger-Codegen/1.0.0/go",
	})
	localVarPath := a.client.cfg.BasePath + "/widget_link/{nucleus_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"nucleus_id"+"}", fmt.Sprintf("%v", nucleusId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsBusiness.IsSet() {
		localVarQueryParams.Add("is_business", parameterToString(localVarOptionals.IsBusiness.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsMobileWebview.IsSet() {
		localVarQueryParams.Add("is_mobile_webview", parameterToString(localVarOptionals.IsMobileWebview.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MemberId.IsSet() {
		localVarQueryParams.Add("member_id", parameterToString(localVarOptionals.MemberId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MessageVersion.IsSet() {
		localVarQueryParams.Add("message_version", parameterToString(localVarOptionals.MessageVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mode.IsSet() {
		localVarQueryParams.Add("mode", parameterToString(localVarOptionals.Mode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NucleusAggregationAccountId.IsSet() {
		localVarQueryParams.Add("nucleus_aggregation_account_id", parameterToString(localVarOptionals.NucleusAggregationAccountId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NucleusBankLinkId.IsSet() {
		localVarQueryParams.Add("nucleus_bank_link_id", parameterToString(localVarOptionals.NucleusBankLinkId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VendorName.IsSet() {
		localVarQueryParams.Add("vendor_name", parameterToString(localVarOptionals.VendorName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitForFullAggregation.IsSet() {
		localVarQueryParams.Add("wait_for_full_aggregation", parameterToString(localVarOptionals.WaitForFullAggregation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebviewUrlScheme.IsSet() {
		localVarQueryParams.Add("webview_url_scheme", parameterToString(localVarOptionals.WebviewUrlScheme.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v WidgetUrlVo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
