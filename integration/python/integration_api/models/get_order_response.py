# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOrderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_no': 'str',
        'amount_cash': 'int',
        'average_price': 'float',
        'created': 'str',
        'created_by': 'str',
        'cumulative_quantity': 'float',
        'fees': 'float',
        'id': 'str',
        'order_expires': 'str',
        'order_no': 'str',
        'quantity': 'float',
        'side': 'str',
        'status': 'str',
        'status_message': 'StatusMessage',
        'symbol': 'str',
        'total_order_amount': 'int',
        'type': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'account_no': 'account_no',
        'amount_cash': 'amount_cash',
        'average_price': 'average_price',
        'created': 'created',
        'created_by': 'created_by',
        'cumulative_quantity': 'cumulative_quantity',
        'fees': 'fees',
        'id': 'id',
        'order_expires': 'order_expires',
        'order_no': 'order_no',
        'quantity': 'quantity',
        'side': 'side',
        'status': 'status',
        'status_message': 'status_message',
        'symbol': 'symbol',
        'total_order_amount': 'total_order_amount',
        'type': 'type',
        'user_id': 'user_id'
    }

    def __init__(self, account_id=None, account_no=None, amount_cash=None, average_price=None, created=None, created_by=None, cumulative_quantity=None, fees=None, id=None, order_expires=None, order_no=None, quantity=None, side=None, status=None, status_message=None, symbol=None, total_order_amount=None, type=None, user_id=None):  # noqa: E501
        """GetOrderResponse - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._account_no = None
        self._amount_cash = None
        self._average_price = None
        self._created = None
        self._created_by = None
        self._cumulative_quantity = None
        self._fees = None
        self._id = None
        self._order_expires = None
        self._order_no = None
        self._quantity = None
        self._side = None
        self._status = None
        self._status_message = None
        self._symbol = None
        self._total_order_amount = None
        self._type = None
        self._user_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if account_no is not None:
            self.account_no = account_no
        if amount_cash is not None:
            self.amount_cash = amount_cash
        if average_price is not None:
            self.average_price = average_price
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if cumulative_quantity is not None:
            self.cumulative_quantity = cumulative_quantity
        if fees is not None:
            self.fees = fees
        if id is not None:
            self.id = id
        if order_expires is not None:
            self.order_expires = order_expires
        if order_no is not None:
            self.order_no = order_no
        if quantity is not None:
            self.quantity = quantity
        if side is not None:
            self.side = side
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message
        if symbol is not None:
            self.symbol = symbol
        if total_order_amount is not None:
            self.total_order_amount = total_order_amount
        if type is not None:
            self.type = type
        if user_id is not None:
            self.user_id = user_id

    @property
    def account_id(self):
        """Gets the account_id of this GetOrderResponse.  # noqa: E501


        :return: The account_id of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetOrderResponse.


        :param account_id: The account_id of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_no(self):
        """Gets the account_no of this GetOrderResponse.  # noqa: E501


        :return: The account_no of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_no

    @account_no.setter
    def account_no(self, account_no):
        """Sets the account_no of this GetOrderResponse.


        :param account_no: The account_no of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._account_no = account_no

    @property
    def amount_cash(self):
        """Gets the amount_cash of this GetOrderResponse.  # noqa: E501


        :return: The amount_cash of this GetOrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._amount_cash

    @amount_cash.setter
    def amount_cash(self, amount_cash):
        """Sets the amount_cash of this GetOrderResponse.


        :param amount_cash: The amount_cash of this GetOrderResponse.  # noqa: E501
        :type: int
        """

        self._amount_cash = amount_cash

    @property
    def average_price(self):
        """Gets the average_price of this GetOrderResponse.  # noqa: E501


        :return: The average_price of this GetOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price):
        """Sets the average_price of this GetOrderResponse.


        :param average_price: The average_price of this GetOrderResponse.  # noqa: E501
        :type: float
        """

        self._average_price = average_price

    @property
    def created(self):
        """Gets the created of this GetOrderResponse.  # noqa: E501


        :return: The created of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GetOrderResponse.


        :param created: The created of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this GetOrderResponse.  # noqa: E501


        :return: The created_by of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetOrderResponse.


        :param created_by: The created_by of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def cumulative_quantity(self):
        """Gets the cumulative_quantity of this GetOrderResponse.  # noqa: E501


        :return: The cumulative_quantity of this GetOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_quantity

    @cumulative_quantity.setter
    def cumulative_quantity(self, cumulative_quantity):
        """Sets the cumulative_quantity of this GetOrderResponse.


        :param cumulative_quantity: The cumulative_quantity of this GetOrderResponse.  # noqa: E501
        :type: float
        """

        self._cumulative_quantity = cumulative_quantity

    @property
    def fees(self):
        """Gets the fees of this GetOrderResponse.  # noqa: E501


        :return: The fees of this GetOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this GetOrderResponse.


        :param fees: The fees of this GetOrderResponse.  # noqa: E501
        :type: float
        """

        self._fees = fees

    @property
    def id(self):
        """Gets the id of this GetOrderResponse.  # noqa: E501


        :return: The id of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetOrderResponse.


        :param id: The id of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def order_expires(self):
        """Gets the order_expires of this GetOrderResponse.  # noqa: E501


        :return: The order_expires of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_expires

    @order_expires.setter
    def order_expires(self, order_expires):
        """Sets the order_expires of this GetOrderResponse.


        :param order_expires: The order_expires of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_expires = order_expires

    @property
    def order_no(self):
        """Gets the order_no of this GetOrderResponse.  # noqa: E501


        :return: The order_no of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this GetOrderResponse.


        :param order_no: The order_no of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_no = order_no

    @property
    def quantity(self):
        """Gets the quantity of this GetOrderResponse.  # noqa: E501


        :return: The quantity of this GetOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetOrderResponse.


        :param quantity: The quantity of this GetOrderResponse.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def side(self):
        """Gets the side of this GetOrderResponse.  # noqa: E501


        :return: The side of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this GetOrderResponse.


        :param side: The side of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def status(self):
        """Gets the status of this GetOrderResponse.  # noqa: E501


        :return: The status of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetOrderResponse.


        :param status: The status of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this GetOrderResponse.  # noqa: E501


        :return: The status_message of this GetOrderResponse.  # noqa: E501
        :rtype: StatusMessage
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this GetOrderResponse.


        :param status_message: The status_message of this GetOrderResponse.  # noqa: E501
        :type: StatusMessage
        """

        self._status_message = status_message

    @property
    def symbol(self):
        """Gets the symbol of this GetOrderResponse.  # noqa: E501


        :return: The symbol of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this GetOrderResponse.


        :param symbol: The symbol of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def total_order_amount(self):
        """Gets the total_order_amount of this GetOrderResponse.  # noqa: E501


        :return: The total_order_amount of this GetOrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_order_amount

    @total_order_amount.setter
    def total_order_amount(self, total_order_amount):
        """Sets the total_order_amount of this GetOrderResponse.


        :param total_order_amount: The total_order_amount of this GetOrderResponse.  # noqa: E501
        :type: int
        """

        self._total_order_amount = total_order_amount

    @property
    def type(self):
        """Gets the type of this GetOrderResponse.  # noqa: E501


        :return: The type of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetOrderResponse.


        :param type: The type of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this GetOrderResponse.  # noqa: E501


        :return: The user_id of this GetOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetOrderResponse.


        :param user_id: The user_id of this GetOrderResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
