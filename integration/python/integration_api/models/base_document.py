# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BaseDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'DigitalDocumentData',
        'type': 'str'
    }

    attribute_map = {
        'data': 'data',
        'type': 'type'
    }

    def __init__(self, data=None, type=None):  # noqa: E501
        """BaseDocument - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._type = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if type is not None:
            self.type = type

    @property
    def data(self):
        """Gets the data of this BaseDocument.  # noqa: E501


        :return: The data of this BaseDocument.  # noqa: E501
        :rtype: DigitalDocumentData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BaseDocument.


        :param data: The data of this BaseDocument.  # noqa: E501
        :type: DigitalDocumentData
        """

        self._data = data

    @property
    def type(self):
        """Gets the type of this BaseDocument.  # noqa: E501


        :return: The type of this BaseDocument.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseDocument.


        :param type: The type of this BaseDocument.  # noqa: E501
        :type: str
        """
        allowed_values = ["BASIC_INFO", "ADDRESS_INFO", "PERSONAL_INFO", "IDENTIFICATION_INFO", "EMPLOYMENT_INFO", "INVESTOR_PROFILE_INFO", "COMPLIANCE_AML_INFO", "DISCLOSURES", "MARGIN_DISCLOSURE", "MARKETING_INFO", "CUSTODIAN_INFO", "INSTITUTIONAL_INFO", "DIRECTOR_INFO", "TRUST_INFO", "JOINT_BASIC_INFO", "JOINT_ADDRESS_INFO", "JOINT_PERSONAL_INFO", "JOINT_IDENTIFICATION_INFO", "JOINT_EMPLOYMENT_INFO", "JOINT_INVESTOR_PROFILE_INFO", "JOINT_COMPLIANCE_AML_INFO", "JOINT_DISCLOSURES", "JOINT_MARGIN_DISCLOSURE", "JOINT_MARKETING_INFO", "JOINT_CUSTODIAN_INFO", "JOINT_INSTITUTIONAL_INFO", "JOINT_DIRECTOR_INFO", "JOINT_TRUST_INFO"]  # noqa: E501
        if type is not None and type.upper() not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
