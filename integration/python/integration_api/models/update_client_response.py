# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateClientResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ack_customer_agreement': 'bool',
        'ack_disclosure_rule14b': 'bool',
        'ack_finders_fee': 'bool',
        'ack_foreign_finders_fee': 'bool',
        'ack_joint_customer_agreement': 'bool',
        'ack_joint_disclosure_rule14b': 'bool',
        'ack_joint_finders_fee': 'bool',
        'ack_joint_foreign_finders_fee': 'bool',
        'ack_joint_market_data': 'bool',
        'ack_market_data': 'bool',
        'ack_signed_by': 'str',
        'ack_signed_when': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_proof_review_by': 'str',
        'address_proof_review_when': 'datetime',
        'annual_income': 'str',
        'annual_income_number': 'int',
        'approved_by': 'str',
        'approved_when': 'datetime',
        'avatar_url': 'str',
        'bad_password_count': 'int',
        'brand_ambassador': 'bool',
        'citizenship': 'str',
        'city': 'str',
        'country_id': 'str',
        'created_when': 'datetime',
        'director': 'bool',
        'display_name': 'str',
        'dob': 'datetime',
        'email': 'str',
        'employer_business': 'str',
        'employer_company': 'str',
        'employer_country_id': 'str',
        'employer_is_broker': 'bool',
        'employment_status': 'ExpandedProperty',
        'employment_years': 'int',
        'first_name': 'str',
        'gender': 'ExpandedProperty',
        'id': 'str',
        'id_no': 'str',
        'investment_experience': 'ExpandedProperty',
        'investment_objectives': 'ExpandedProperty',
        'kyc_when': 'datetime',
        'language_id': 'str',
        'last_login_when': 'datetime',
        'last_name': 'str',
        'margin_default': 'int',
        'marital_status': 'ExpandedProperty',
        'networth_liquid': 'str',
        'networth_total': 'str',
        'ownership_type': 'str',
        'parent_ib': 'ParentIB',
        'phone': 'str',
        'picture_review_by': 'str',
        'picture_review_when': 'datetime',
        'politcally_exposed': 'bool',
        'referral_code': 'str',
        'risk_tolerance': 'str',
        'state_province': 'str',
        'status': 'ExpandedProperty',
        'terms_of_use': 'bool',
        'updated_when': 'datetime',
        'us_citizen': 'bool',
        'user_note_qty': 'int',
        'user_type': 'ExpandedProperty',
        'username': 'str',
        'wlp_id': 'str',
        'zip_postal_code': 'int'
    }

    attribute_map = {
        'ack_customer_agreement': 'ack_customer_agreement',
        'ack_disclosure_rule14b': 'ack_disclosure_rule14b',
        'ack_finders_fee': 'ack_finders_fee',
        'ack_foreign_finders_fee': 'ack_foreign_finders_fee',
        'ack_joint_customer_agreement': 'ack_joint_customer_agreement',
        'ack_joint_disclosure_rule14b': 'ack_joint_disclosure_rule14b',
        'ack_joint_finders_fee': 'ack_joint_finders_fee',
        'ack_joint_foreign_finders_fee': 'ack_joint_foreign_finders_fee',
        'ack_joint_market_data': 'ack_joint_market_data',
        'ack_market_data': 'ack_market_data',
        'ack_signed_by': 'ack_signed_by',
        'ack_signed_when': 'ack_signed_when',
        'address_line1': 'address_line1',
        'address_line2': 'address_line2',
        'address_proof_review_by': 'address_proof_review_by',
        'address_proof_review_when': 'address_proof_review_when',
        'annual_income': 'annual_income',
        'annual_income_number': 'annual_income_number',
        'approved_by': 'approved_by',
        'approved_when': 'approved_when',
        'avatar_url': 'avatar_url',
        'bad_password_count': 'bad_password_count',
        'brand_ambassador': 'brand_ambassador',
        'citizenship': 'citizenship',
        'city': 'city',
        'country_id': 'country_id',
        'created_when': 'created_when',
        'director': 'director',
        'display_name': 'display_name',
        'dob': 'dob',
        'email': 'email',
        'employer_business': 'employer_business',
        'employer_company': 'employer_company',
        'employer_country_id': 'employer_country_id',
        'employer_is_broker': 'employer_is_broker',
        'employment_status': 'employment_status',
        'employment_years': 'employment_years',
        'first_name': 'first_name',
        'gender': 'gender',
        'id': 'id',
        'id_no': 'id_no',
        'investment_experience': 'investment_experience',
        'investment_objectives': 'investment_objectives',
        'kyc_when': 'kyc_when',
        'language_id': 'language_id',
        'last_login_when': 'last_login_when',
        'last_name': 'last_name',
        'margin_default': 'margin_default',
        'marital_status': 'marital_status',
        'networth_liquid': 'networth_liquid',
        'networth_total': 'networth_total',
        'ownership_type': 'ownership_type',
        'parent_ib': 'parent_ib',
        'phone': 'phone',
        'picture_review_by': 'picture_review_by',
        'picture_review_when': 'picture_review_when',
        'politcally_exposed': 'politcally_exposed',
        'referral_code': 'referral_code',
        'risk_tolerance': 'risk_tolerance',
        'state_province': 'state_province',
        'status': 'status',
        'terms_of_use': 'terms_of_use',
        'updated_when': 'updated_when',
        'us_citizen': 'us_citizen',
        'user_note_qty': 'user_note_qty',
        'user_type': 'user_type',
        'username': 'username',
        'wlp_id': 'wlp_id',
        'zip_postal_code': 'zip_postal_code'
    }

    def __init__(self, ack_customer_agreement=None, ack_disclosure_rule14b=None, ack_finders_fee=None, ack_foreign_finders_fee=None, ack_joint_customer_agreement=None, ack_joint_disclosure_rule14b=None, ack_joint_finders_fee=None, ack_joint_foreign_finders_fee=None, ack_joint_market_data=None, ack_market_data=None, ack_signed_by=None, ack_signed_when=None, address_line1=None, address_line2=None, address_proof_review_by=None, address_proof_review_when=None, annual_income=None, annual_income_number=None, approved_by=None, approved_when=None, avatar_url=None, bad_password_count=None, brand_ambassador=None, citizenship=None, city=None, country_id=None, created_when=None, director=None, display_name=None, dob=None, email=None, employer_business=None, employer_company=None, employer_country_id=None, employer_is_broker=None, employment_status=None, employment_years=None, first_name=None, gender=None, id=None, id_no=None, investment_experience=None, investment_objectives=None, kyc_when=None, language_id=None, last_login_when=None, last_name=None, margin_default=None, marital_status=None, networth_liquid=None, networth_total=None, ownership_type=None, parent_ib=None, phone=None, picture_review_by=None, picture_review_when=None, politcally_exposed=None, referral_code=None, risk_tolerance=None, state_province=None, status=None, terms_of_use=None, updated_when=None, us_citizen=None, user_note_qty=None, user_type=None, username=None, wlp_id=None, zip_postal_code=None):  # noqa: E501
        """UpdateClientResponse - a model defined in Swagger"""  # noqa: E501

        self._ack_customer_agreement = None
        self._ack_disclosure_rule14b = None
        self._ack_finders_fee = None
        self._ack_foreign_finders_fee = None
        self._ack_joint_customer_agreement = None
        self._ack_joint_disclosure_rule14b = None
        self._ack_joint_finders_fee = None
        self._ack_joint_foreign_finders_fee = None
        self._ack_joint_market_data = None
        self._ack_market_data = None
        self._ack_signed_by = None
        self._ack_signed_when = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_proof_review_by = None
        self._address_proof_review_when = None
        self._annual_income = None
        self._annual_income_number = None
        self._approved_by = None
        self._approved_when = None
        self._avatar_url = None
        self._bad_password_count = None
        self._brand_ambassador = None
        self._citizenship = None
        self._city = None
        self._country_id = None
        self._created_when = None
        self._director = None
        self._display_name = None
        self._dob = None
        self._email = None
        self._employer_business = None
        self._employer_company = None
        self._employer_country_id = None
        self._employer_is_broker = None
        self._employment_status = None
        self._employment_years = None
        self._first_name = None
        self._gender = None
        self._id = None
        self._id_no = None
        self._investment_experience = None
        self._investment_objectives = None
        self._kyc_when = None
        self._language_id = None
        self._last_login_when = None
        self._last_name = None
        self._margin_default = None
        self._marital_status = None
        self._networth_liquid = None
        self._networth_total = None
        self._ownership_type = None
        self._parent_ib = None
        self._phone = None
        self._picture_review_by = None
        self._picture_review_when = None
        self._politcally_exposed = None
        self._referral_code = None
        self._risk_tolerance = None
        self._state_province = None
        self._status = None
        self._terms_of_use = None
        self._updated_when = None
        self._us_citizen = None
        self._user_note_qty = None
        self._user_type = None
        self._username = None
        self._wlp_id = None
        self._zip_postal_code = None
        self.discriminator = None

        if ack_customer_agreement is not None:
            self.ack_customer_agreement = ack_customer_agreement
        if ack_disclosure_rule14b is not None:
            self.ack_disclosure_rule14b = ack_disclosure_rule14b
        if ack_finders_fee is not None:
            self.ack_finders_fee = ack_finders_fee
        if ack_foreign_finders_fee is not None:
            self.ack_foreign_finders_fee = ack_foreign_finders_fee
        if ack_joint_customer_agreement is not None:
            self.ack_joint_customer_agreement = ack_joint_customer_agreement
        if ack_joint_disclosure_rule14b is not None:
            self.ack_joint_disclosure_rule14b = ack_joint_disclosure_rule14b
        if ack_joint_finders_fee is not None:
            self.ack_joint_finders_fee = ack_joint_finders_fee
        if ack_joint_foreign_finders_fee is not None:
            self.ack_joint_foreign_finders_fee = ack_joint_foreign_finders_fee
        if ack_joint_market_data is not None:
            self.ack_joint_market_data = ack_joint_market_data
        if ack_market_data is not None:
            self.ack_market_data = ack_market_data
        if ack_signed_by is not None:
            self.ack_signed_by = ack_signed_by
        if ack_signed_when is not None:
            self.ack_signed_when = ack_signed_when
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_proof_review_by is not None:
            self.address_proof_review_by = address_proof_review_by
        if address_proof_review_when is not None:
            self.address_proof_review_when = address_proof_review_when
        if annual_income is not None:
            self.annual_income = annual_income
        if annual_income_number is not None:
            self.annual_income_number = annual_income_number
        if approved_by is not None:
            self.approved_by = approved_by
        if approved_when is not None:
            self.approved_when = approved_when
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if bad_password_count is not None:
            self.bad_password_count = bad_password_count
        if brand_ambassador is not None:
            self.brand_ambassador = brand_ambassador
        if citizenship is not None:
            self.citizenship = citizenship
        if city is not None:
            self.city = city
        if country_id is not None:
            self.country_id = country_id
        if created_when is not None:
            self.created_when = created_when
        if director is not None:
            self.director = director
        if display_name is not None:
            self.display_name = display_name
        if dob is not None:
            self.dob = dob
        if email is not None:
            self.email = email
        if employer_business is not None:
            self.employer_business = employer_business
        if employer_company is not None:
            self.employer_company = employer_company
        if employer_country_id is not None:
            self.employer_country_id = employer_country_id
        if employer_is_broker is not None:
            self.employer_is_broker = employer_is_broker
        if employment_status is not None:
            self.employment_status = employment_status
        if employment_years is not None:
            self.employment_years = employment_years
        if first_name is not None:
            self.first_name = first_name
        if gender is not None:
            self.gender = gender
        if id is not None:
            self.id = id
        if id_no is not None:
            self.id_no = id_no
        if investment_experience is not None:
            self.investment_experience = investment_experience
        if investment_objectives is not None:
            self.investment_objectives = investment_objectives
        if kyc_when is not None:
            self.kyc_when = kyc_when
        if language_id is not None:
            self.language_id = language_id
        if last_login_when is not None:
            self.last_login_when = last_login_when
        if last_name is not None:
            self.last_name = last_name
        if margin_default is not None:
            self.margin_default = margin_default
        if marital_status is not None:
            self.marital_status = marital_status
        if networth_liquid is not None:
            self.networth_liquid = networth_liquid
        if networth_total is not None:
            self.networth_total = networth_total
        if ownership_type is not None:
            self.ownership_type = ownership_type
        if parent_ib is not None:
            self.parent_ib = parent_ib
        if phone is not None:
            self.phone = phone
        if picture_review_by is not None:
            self.picture_review_by = picture_review_by
        if picture_review_when is not None:
            self.picture_review_when = picture_review_when
        if politcally_exposed is not None:
            self.politcally_exposed = politcally_exposed
        if referral_code is not None:
            self.referral_code = referral_code
        if risk_tolerance is not None:
            self.risk_tolerance = risk_tolerance
        if state_province is not None:
            self.state_province = state_province
        if status is not None:
            self.status = status
        if terms_of_use is not None:
            self.terms_of_use = terms_of_use
        if updated_when is not None:
            self.updated_when = updated_when
        if us_citizen is not None:
            self.us_citizen = us_citizen
        if user_note_qty is not None:
            self.user_note_qty = user_note_qty
        if user_type is not None:
            self.user_type = user_type
        if username is not None:
            self.username = username
        if wlp_id is not None:
            self.wlp_id = wlp_id
        if zip_postal_code is not None:
            self.zip_postal_code = zip_postal_code

    @property
    def ack_customer_agreement(self):
        """Gets the ack_customer_agreement of this UpdateClientResponse.  # noqa: E501


        :return: The ack_customer_agreement of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_customer_agreement

    @ack_customer_agreement.setter
    def ack_customer_agreement(self, ack_customer_agreement):
        """Sets the ack_customer_agreement of this UpdateClientResponse.


        :param ack_customer_agreement: The ack_customer_agreement of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_customer_agreement = ack_customer_agreement

    @property
    def ack_disclosure_rule14b(self):
        """Gets the ack_disclosure_rule14b of this UpdateClientResponse.  # noqa: E501


        :return: The ack_disclosure_rule14b of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_disclosure_rule14b

    @ack_disclosure_rule14b.setter
    def ack_disclosure_rule14b(self, ack_disclosure_rule14b):
        """Sets the ack_disclosure_rule14b of this UpdateClientResponse.


        :param ack_disclosure_rule14b: The ack_disclosure_rule14b of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_disclosure_rule14b = ack_disclosure_rule14b

    @property
    def ack_finders_fee(self):
        """Gets the ack_finders_fee of this UpdateClientResponse.  # noqa: E501


        :return: The ack_finders_fee of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_finders_fee

    @ack_finders_fee.setter
    def ack_finders_fee(self, ack_finders_fee):
        """Sets the ack_finders_fee of this UpdateClientResponse.


        :param ack_finders_fee: The ack_finders_fee of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_finders_fee = ack_finders_fee

    @property
    def ack_foreign_finders_fee(self):
        """Gets the ack_foreign_finders_fee of this UpdateClientResponse.  # noqa: E501


        :return: The ack_foreign_finders_fee of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_foreign_finders_fee

    @ack_foreign_finders_fee.setter
    def ack_foreign_finders_fee(self, ack_foreign_finders_fee):
        """Sets the ack_foreign_finders_fee of this UpdateClientResponse.


        :param ack_foreign_finders_fee: The ack_foreign_finders_fee of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_foreign_finders_fee = ack_foreign_finders_fee

    @property
    def ack_joint_customer_agreement(self):
        """Gets the ack_joint_customer_agreement of this UpdateClientResponse.  # noqa: E501


        :return: The ack_joint_customer_agreement of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_joint_customer_agreement

    @ack_joint_customer_agreement.setter
    def ack_joint_customer_agreement(self, ack_joint_customer_agreement):
        """Sets the ack_joint_customer_agreement of this UpdateClientResponse.


        :param ack_joint_customer_agreement: The ack_joint_customer_agreement of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_joint_customer_agreement = ack_joint_customer_agreement

    @property
    def ack_joint_disclosure_rule14b(self):
        """Gets the ack_joint_disclosure_rule14b of this UpdateClientResponse.  # noqa: E501


        :return: The ack_joint_disclosure_rule14b of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_joint_disclosure_rule14b

    @ack_joint_disclosure_rule14b.setter
    def ack_joint_disclosure_rule14b(self, ack_joint_disclosure_rule14b):
        """Sets the ack_joint_disclosure_rule14b of this UpdateClientResponse.


        :param ack_joint_disclosure_rule14b: The ack_joint_disclosure_rule14b of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_joint_disclosure_rule14b = ack_joint_disclosure_rule14b

    @property
    def ack_joint_finders_fee(self):
        """Gets the ack_joint_finders_fee of this UpdateClientResponse.  # noqa: E501


        :return: The ack_joint_finders_fee of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_joint_finders_fee

    @ack_joint_finders_fee.setter
    def ack_joint_finders_fee(self, ack_joint_finders_fee):
        """Sets the ack_joint_finders_fee of this UpdateClientResponse.


        :param ack_joint_finders_fee: The ack_joint_finders_fee of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_joint_finders_fee = ack_joint_finders_fee

    @property
    def ack_joint_foreign_finders_fee(self):
        """Gets the ack_joint_foreign_finders_fee of this UpdateClientResponse.  # noqa: E501


        :return: The ack_joint_foreign_finders_fee of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_joint_foreign_finders_fee

    @ack_joint_foreign_finders_fee.setter
    def ack_joint_foreign_finders_fee(self, ack_joint_foreign_finders_fee):
        """Sets the ack_joint_foreign_finders_fee of this UpdateClientResponse.


        :param ack_joint_foreign_finders_fee: The ack_joint_foreign_finders_fee of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_joint_foreign_finders_fee = ack_joint_foreign_finders_fee

    @property
    def ack_joint_market_data(self):
        """Gets the ack_joint_market_data of this UpdateClientResponse.  # noqa: E501


        :return: The ack_joint_market_data of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_joint_market_data

    @ack_joint_market_data.setter
    def ack_joint_market_data(self, ack_joint_market_data):
        """Sets the ack_joint_market_data of this UpdateClientResponse.


        :param ack_joint_market_data: The ack_joint_market_data of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_joint_market_data = ack_joint_market_data

    @property
    def ack_market_data(self):
        """Gets the ack_market_data of this UpdateClientResponse.  # noqa: E501


        :return: The ack_market_data of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ack_market_data

    @ack_market_data.setter
    def ack_market_data(self, ack_market_data):
        """Sets the ack_market_data of this UpdateClientResponse.


        :param ack_market_data: The ack_market_data of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._ack_market_data = ack_market_data

    @property
    def ack_signed_by(self):
        """Gets the ack_signed_by of this UpdateClientResponse.  # noqa: E501


        :return: The ack_signed_by of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._ack_signed_by

    @ack_signed_by.setter
    def ack_signed_by(self, ack_signed_by):
        """Sets the ack_signed_by of this UpdateClientResponse.


        :param ack_signed_by: The ack_signed_by of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._ack_signed_by = ack_signed_by

    @property
    def ack_signed_when(self):
        """Gets the ack_signed_when of this UpdateClientResponse.  # noqa: E501


        :return: The ack_signed_when of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._ack_signed_when

    @ack_signed_when.setter
    def ack_signed_when(self, ack_signed_when):
        """Sets the ack_signed_when of this UpdateClientResponse.


        :param ack_signed_when: The ack_signed_when of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._ack_signed_when = ack_signed_when

    @property
    def address_line1(self):
        """Gets the address_line1 of this UpdateClientResponse.  # noqa: E501


        :return: The address_line1 of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this UpdateClientResponse.


        :param address_line1: The address_line1 of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this UpdateClientResponse.  # noqa: E501


        :return: The address_line2 of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this UpdateClientResponse.


        :param address_line2: The address_line2 of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_proof_review_by(self):
        """Gets the address_proof_review_by of this UpdateClientResponse.  # noqa: E501


        :return: The address_proof_review_by of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._address_proof_review_by

    @address_proof_review_by.setter
    def address_proof_review_by(self, address_proof_review_by):
        """Sets the address_proof_review_by of this UpdateClientResponse.


        :param address_proof_review_by: The address_proof_review_by of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._address_proof_review_by = address_proof_review_by

    @property
    def address_proof_review_when(self):
        """Gets the address_proof_review_when of this UpdateClientResponse.  # noqa: E501


        :return: The address_proof_review_when of this UpdateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._address_proof_review_when

    @address_proof_review_when.setter
    def address_proof_review_when(self, address_proof_review_when):
        """Sets the address_proof_review_when of this UpdateClientResponse.


        :param address_proof_review_when: The address_proof_review_when of this UpdateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._address_proof_review_when = address_proof_review_when

    @property
    def annual_income(self):
        """Gets the annual_income of this UpdateClientResponse.  # noqa: E501


        :return: The annual_income of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._annual_income

    @annual_income.setter
    def annual_income(self, annual_income):
        """Sets the annual_income of this UpdateClientResponse.


        :param annual_income: The annual_income of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._annual_income = annual_income

    @property
    def annual_income_number(self):
        """Gets the annual_income_number of this UpdateClientResponse.  # noqa: E501


        :return: The annual_income_number of this UpdateClientResponse.  # noqa: E501
        :rtype: int
        """
        return self._annual_income_number

    @annual_income_number.setter
    def annual_income_number(self, annual_income_number):
        """Sets the annual_income_number of this UpdateClientResponse.


        :param annual_income_number: The annual_income_number of this UpdateClientResponse.  # noqa: E501
        :type: int
        """

        self._annual_income_number = annual_income_number

    @property
    def approved_by(self):
        """Gets the approved_by of this UpdateClientResponse.  # noqa: E501


        :return: The approved_by of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._approved_by

    @approved_by.setter
    def approved_by(self, approved_by):
        """Sets the approved_by of this UpdateClientResponse.


        :param approved_by: The approved_by of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._approved_by = approved_by

    @property
    def approved_when(self):
        """Gets the approved_when of this UpdateClientResponse.  # noqa: E501


        :return: The approved_when of this UpdateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._approved_when

    @approved_when.setter
    def approved_when(self, approved_when):
        """Sets the approved_when of this UpdateClientResponse.


        :param approved_when: The approved_when of this UpdateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._approved_when = approved_when

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UpdateClientResponse.  # noqa: E501


        :return: The avatar_url of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UpdateClientResponse.


        :param avatar_url: The avatar_url of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def bad_password_count(self):
        """Gets the bad_password_count of this UpdateClientResponse.  # noqa: E501


        :return: The bad_password_count of this UpdateClientResponse.  # noqa: E501
        :rtype: int
        """
        return self._bad_password_count

    @bad_password_count.setter
    def bad_password_count(self, bad_password_count):
        """Sets the bad_password_count of this UpdateClientResponse.


        :param bad_password_count: The bad_password_count of this UpdateClientResponse.  # noqa: E501
        :type: int
        """

        self._bad_password_count = bad_password_count

    @property
    def brand_ambassador(self):
        """Gets the brand_ambassador of this UpdateClientResponse.  # noqa: E501


        :return: The brand_ambassador of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._brand_ambassador

    @brand_ambassador.setter
    def brand_ambassador(self, brand_ambassador):
        """Sets the brand_ambassador of this UpdateClientResponse.


        :param brand_ambassador: The brand_ambassador of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._brand_ambassador = brand_ambassador

    @property
    def citizenship(self):
        """Gets the citizenship of this UpdateClientResponse.  # noqa: E501


        :return: The citizenship of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._citizenship

    @citizenship.setter
    def citizenship(self, citizenship):
        """Sets the citizenship of this UpdateClientResponse.


        :param citizenship: The citizenship of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._citizenship = citizenship

    @property
    def city(self):
        """Gets the city of this UpdateClientResponse.  # noqa: E501


        :return: The city of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UpdateClientResponse.


        :param city: The city of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country_id(self):
        """Gets the country_id of this UpdateClientResponse.  # noqa: E501


        :return: The country_id of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this UpdateClientResponse.


        :param country_id: The country_id of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._country_id = country_id

    @property
    def created_when(self):
        """Gets the created_when of this UpdateClientResponse.  # noqa: E501


        :return: The created_when of this UpdateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_when

    @created_when.setter
    def created_when(self, created_when):
        """Sets the created_when of this UpdateClientResponse.


        :param created_when: The created_when of this UpdateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._created_when = created_when

    @property
    def director(self):
        """Gets the director of this UpdateClientResponse.  # noqa: E501


        :return: The director of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._director

    @director.setter
    def director(self, director):
        """Sets the director of this UpdateClientResponse.


        :param director: The director of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._director = director

    @property
    def display_name(self):
        """Gets the display_name of this UpdateClientResponse.  # noqa: E501


        :return: The display_name of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpdateClientResponse.


        :param display_name: The display_name of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def dob(self):
        """Gets the dob of this UpdateClientResponse.  # noqa: E501


        :return: The dob of this UpdateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this UpdateClientResponse.


        :param dob: The dob of this UpdateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._dob = dob

    @property
    def email(self):
        """Gets the email of this UpdateClientResponse.  # noqa: E501


        :return: The email of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateClientResponse.


        :param email: The email of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def employer_business(self):
        """Gets the employer_business of this UpdateClientResponse.  # noqa: E501


        :return: The employer_business of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._employer_business

    @employer_business.setter
    def employer_business(self, employer_business):
        """Sets the employer_business of this UpdateClientResponse.


        :param employer_business: The employer_business of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._employer_business = employer_business

    @property
    def employer_company(self):
        """Gets the employer_company of this UpdateClientResponse.  # noqa: E501


        :return: The employer_company of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._employer_company

    @employer_company.setter
    def employer_company(self, employer_company):
        """Sets the employer_company of this UpdateClientResponse.


        :param employer_company: The employer_company of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._employer_company = employer_company

    @property
    def employer_country_id(self):
        """Gets the employer_country_id of this UpdateClientResponse.  # noqa: E501


        :return: The employer_country_id of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._employer_country_id

    @employer_country_id.setter
    def employer_country_id(self, employer_country_id):
        """Sets the employer_country_id of this UpdateClientResponse.


        :param employer_country_id: The employer_country_id of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._employer_country_id = employer_country_id

    @property
    def employer_is_broker(self):
        """Gets the employer_is_broker of this UpdateClientResponse.  # noqa: E501


        :return: The employer_is_broker of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._employer_is_broker

    @employer_is_broker.setter
    def employer_is_broker(self, employer_is_broker):
        """Sets the employer_is_broker of this UpdateClientResponse.


        :param employer_is_broker: The employer_is_broker of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._employer_is_broker = employer_is_broker

    @property
    def employment_status(self):
        """Gets the employment_status of this UpdateClientResponse.  # noqa: E501


        :return: The employment_status of this UpdateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this UpdateClientResponse.


        :param employment_status: The employment_status of this UpdateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._employment_status = employment_status

    @property
    def employment_years(self):
        """Gets the employment_years of this UpdateClientResponse.  # noqa: E501


        :return: The employment_years of this UpdateClientResponse.  # noqa: E501
        :rtype: int
        """
        return self._employment_years

    @employment_years.setter
    def employment_years(self, employment_years):
        """Sets the employment_years of this UpdateClientResponse.


        :param employment_years: The employment_years of this UpdateClientResponse.  # noqa: E501
        :type: int
        """

        self._employment_years = employment_years

    @property
    def first_name(self):
        """Gets the first_name of this UpdateClientResponse.  # noqa: E501


        :return: The first_name of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UpdateClientResponse.


        :param first_name: The first_name of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this UpdateClientResponse.  # noqa: E501


        :return: The gender of this UpdateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UpdateClientResponse.


        :param gender: The gender of this UpdateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this UpdateClientResponse.  # noqa: E501


        :return: The id of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateClientResponse.


        :param id: The id of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_no(self):
        """Gets the id_no of this UpdateClientResponse.  # noqa: E501


        :return: The id_no of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._id_no

    @id_no.setter
    def id_no(self, id_no):
        """Sets the id_no of this UpdateClientResponse.


        :param id_no: The id_no of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._id_no = id_no

    @property
    def investment_experience(self):
        """Gets the investment_experience of this UpdateClientResponse.  # noqa: E501


        :return: The investment_experience of this UpdateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._investment_experience

    @investment_experience.setter
    def investment_experience(self, investment_experience):
        """Sets the investment_experience of this UpdateClientResponse.


        :param investment_experience: The investment_experience of this UpdateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._investment_experience = investment_experience

    @property
    def investment_objectives(self):
        """Gets the investment_objectives of this UpdateClientResponse.  # noqa: E501


        :return: The investment_objectives of this UpdateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._investment_objectives

    @investment_objectives.setter
    def investment_objectives(self, investment_objectives):
        """Sets the investment_objectives of this UpdateClientResponse.


        :param investment_objectives: The investment_objectives of this UpdateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._investment_objectives = investment_objectives

    @property
    def kyc_when(self):
        """Gets the kyc_when of this UpdateClientResponse.  # noqa: E501


        :return: The kyc_when of this UpdateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._kyc_when

    @kyc_when.setter
    def kyc_when(self, kyc_when):
        """Sets the kyc_when of this UpdateClientResponse.


        :param kyc_when: The kyc_when of this UpdateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._kyc_when = kyc_when

    @property
    def language_id(self):
        """Gets the language_id of this UpdateClientResponse.  # noqa: E501


        :return: The language_id of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this UpdateClientResponse.


        :param language_id: The language_id of this UpdateClientResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["en_US", "zh_CN", "es_ES", "pt_BR"]  # noqa: E501
        if language_id not in allowed_values:
            raise ValueError(
                "Invalid value for `language_id` ({0}), must be one of {1}"  # noqa: E501
                .format(language_id, allowed_values)
            )

        self._language_id = language_id

    @property
    def last_login_when(self):
        """Gets the last_login_when of this UpdateClientResponse.  # noqa: E501


        :return: The last_login_when of this UpdateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_when

    @last_login_when.setter
    def last_login_when(self, last_login_when):
        """Sets the last_login_when of this UpdateClientResponse.


        :param last_login_when: The last_login_when of this UpdateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._last_login_when = last_login_when

    @property
    def last_name(self):
        """Gets the last_name of this UpdateClientResponse.  # noqa: E501


        :return: The last_name of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UpdateClientResponse.


        :param last_name: The last_name of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def margin_default(self):
        """Gets the margin_default of this UpdateClientResponse.  # noqa: E501


        :return: The margin_default of this UpdateClientResponse.  # noqa: E501
        :rtype: int
        """
        return self._margin_default

    @margin_default.setter
    def margin_default(self, margin_default):
        """Sets the margin_default of this UpdateClientResponse.


        :param margin_default: The margin_default of this UpdateClientResponse.  # noqa: E501
        :type: int
        """

        self._margin_default = margin_default

    @property
    def marital_status(self):
        """Gets the marital_status of this UpdateClientResponse.  # noqa: E501


        :return: The marital_status of this UpdateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this UpdateClientResponse.


        :param marital_status: The marital_status of this UpdateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._marital_status = marital_status

    @property
    def networth_liquid(self):
        """Gets the networth_liquid of this UpdateClientResponse.  # noqa: E501


        :return: The networth_liquid of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._networth_liquid

    @networth_liquid.setter
    def networth_liquid(self, networth_liquid):
        """Sets the networth_liquid of this UpdateClientResponse.


        :param networth_liquid: The networth_liquid of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._networth_liquid = networth_liquid

    @property
    def networth_total(self):
        """Gets the networth_total of this UpdateClientResponse.  # noqa: E501


        :return: The networth_total of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._networth_total

    @networth_total.setter
    def networth_total(self, networth_total):
        """Sets the networth_total of this UpdateClientResponse.


        :param networth_total: The networth_total of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._networth_total = networth_total

    @property
    def ownership_type(self):
        """Gets the ownership_type of this UpdateClientResponse.  # noqa: E501


        :return: The ownership_type of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._ownership_type

    @ownership_type.setter
    def ownership_type(self, ownership_type):
        """Sets the ownership_type of this UpdateClientResponse.


        :param ownership_type: The ownership_type of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._ownership_type = ownership_type

    @property
    def parent_ib(self):
        """Gets the parent_ib of this UpdateClientResponse.  # noqa: E501


        :return: The parent_ib of this UpdateClientResponse.  # noqa: E501
        :rtype: ParentIB
        """
        return self._parent_ib

    @parent_ib.setter
    def parent_ib(self, parent_ib):
        """Sets the parent_ib of this UpdateClientResponse.


        :param parent_ib: The parent_ib of this UpdateClientResponse.  # noqa: E501
        :type: ParentIB
        """

        self._parent_ib = parent_ib

    @property
    def phone(self):
        """Gets the phone of this UpdateClientResponse.  # noqa: E501


        :return: The phone of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UpdateClientResponse.


        :param phone: The phone of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def picture_review_by(self):
        """Gets the picture_review_by of this UpdateClientResponse.  # noqa: E501


        :return: The picture_review_by of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._picture_review_by

    @picture_review_by.setter
    def picture_review_by(self, picture_review_by):
        """Sets the picture_review_by of this UpdateClientResponse.


        :param picture_review_by: The picture_review_by of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._picture_review_by = picture_review_by

    @property
    def picture_review_when(self):
        """Gets the picture_review_when of this UpdateClientResponse.  # noqa: E501


        :return: The picture_review_when of this UpdateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._picture_review_when

    @picture_review_when.setter
    def picture_review_when(self, picture_review_when):
        """Sets the picture_review_when of this UpdateClientResponse.


        :param picture_review_when: The picture_review_when of this UpdateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._picture_review_when = picture_review_when

    @property
    def politcally_exposed(self):
        """Gets the politcally_exposed of this UpdateClientResponse.  # noqa: E501


        :return: The politcally_exposed of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._politcally_exposed

    @politcally_exposed.setter
    def politcally_exposed(self, politcally_exposed):
        """Sets the politcally_exposed of this UpdateClientResponse.


        :param politcally_exposed: The politcally_exposed of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._politcally_exposed = politcally_exposed

    @property
    def referral_code(self):
        """Gets the referral_code of this UpdateClientResponse.  # noqa: E501


        :return: The referral_code of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this UpdateClientResponse.


        :param referral_code: The referral_code of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._referral_code = referral_code

    @property
    def risk_tolerance(self):
        """Gets the risk_tolerance of this UpdateClientResponse.  # noqa: E501


        :return: The risk_tolerance of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._risk_tolerance

    @risk_tolerance.setter
    def risk_tolerance(self, risk_tolerance):
        """Sets the risk_tolerance of this UpdateClientResponse.


        :param risk_tolerance: The risk_tolerance of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._risk_tolerance = risk_tolerance

    @property
    def state_province(self):
        """Gets the state_province of this UpdateClientResponse.  # noqa: E501


        :return: The state_province of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this UpdateClientResponse.


        :param state_province: The state_province of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._state_province = state_province

    @property
    def status(self):
        """Gets the status of this UpdateClientResponse.  # noqa: E501


        :return: The status of this UpdateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateClientResponse.


        :param status: The status of this UpdateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._status = status

    @property
    def terms_of_use(self):
        """Gets the terms_of_use of this UpdateClientResponse.  # noqa: E501


        :return: The terms_of_use of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._terms_of_use

    @terms_of_use.setter
    def terms_of_use(self, terms_of_use):
        """Sets the terms_of_use of this UpdateClientResponse.


        :param terms_of_use: The terms_of_use of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._terms_of_use = terms_of_use

    @property
    def updated_when(self):
        """Gets the updated_when of this UpdateClientResponse.  # noqa: E501


        :return: The updated_when of this UpdateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_when

    @updated_when.setter
    def updated_when(self, updated_when):
        """Sets the updated_when of this UpdateClientResponse.


        :param updated_when: The updated_when of this UpdateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_when = updated_when

    @property
    def us_citizen(self):
        """Gets the us_citizen of this UpdateClientResponse.  # noqa: E501


        :return: The us_citizen of this UpdateClientResponse.  # noqa: E501
        :rtype: bool
        """
        return self._us_citizen

    @us_citizen.setter
    def us_citizen(self, us_citizen):
        """Sets the us_citizen of this UpdateClientResponse.


        :param us_citizen: The us_citizen of this UpdateClientResponse.  # noqa: E501
        :type: bool
        """

        self._us_citizen = us_citizen

    @property
    def user_note_qty(self):
        """Gets the user_note_qty of this UpdateClientResponse.  # noqa: E501


        :return: The user_note_qty of this UpdateClientResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_note_qty

    @user_note_qty.setter
    def user_note_qty(self, user_note_qty):
        """Sets the user_note_qty of this UpdateClientResponse.


        :param user_note_qty: The user_note_qty of this UpdateClientResponse.  # noqa: E501
        :type: int
        """

        self._user_note_qty = user_note_qty

    @property
    def user_type(self):
        """Gets the user_type of this UpdateClientResponse.  # noqa: E501


        :return: The user_type of this UpdateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UpdateClientResponse.


        :param user_type: The user_type of this UpdateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._user_type = user_type

    @property
    def username(self):
        """Gets the username of this UpdateClientResponse.  # noqa: E501


        :return: The username of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UpdateClientResponse.


        :param username: The username of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def wlp_id(self):
        """Gets the wlp_id of this UpdateClientResponse.  # noqa: E501


        :return: The wlp_id of this UpdateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._wlp_id

    @wlp_id.setter
    def wlp_id(self, wlp_id):
        """Sets the wlp_id of this UpdateClientResponse.


        :param wlp_id: The wlp_id of this UpdateClientResponse.  # noqa: E501
        :type: str
        """

        self._wlp_id = wlp_id

    @property
    def zip_postal_code(self):
        """Gets the zip_postal_code of this UpdateClientResponse.  # noqa: E501


        :return: The zip_postal_code of this UpdateClientResponse.  # noqa: E501
        :rtype: int
        """
        return self._zip_postal_code

    @zip_postal_code.setter
    def zip_postal_code(self, zip_postal_code):
        """Sets the zip_postal_code of this UpdateClientResponse.


        :param zip_postal_code: The zip_postal_code of this UpdateClientResponse.  # noqa: E501
        :type: int
        """

        self._zip_postal_code = zip_postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateClientResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateClientResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
