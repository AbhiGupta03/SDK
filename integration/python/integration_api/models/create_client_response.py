# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateClientResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_when': 'datetime',
        'documents': 'list[object]',
        'id': 'str',
        'parent_ib': 'ParentIB',
        'referral_code': 'str',
        'status': 'ExpandedProperty',
        'updated_when': 'datetime',
        'user_type': 'ExpandedProperty',
        'wlp_id': 'str'
    }

    attribute_map = {
        'created_when': 'created_when',
        'documents': 'documents',
        'id': 'id',
        'parent_ib': 'parent_ib',
        'referral_code': 'referral_code',
        'status': 'status',
        'updated_when': 'updated_when',
        'user_type': 'user_type',
        'wlp_id': 'wlp_id'
    }

    def __init__(self, created_when=None, documents=None, id=None, parent_ib=None, referral_code=None, status=None, updated_when=None, user_type=None, wlp_id=None):  # noqa: E501
        """CreateClientResponse - a model defined in Swagger"""  # noqa: E501

        self._created_when = None
        self._documents = None
        self._id = None
        self._parent_ib = None
        self._referral_code = None
        self._status = None
        self._updated_when = None
        self._user_type = None
        self._wlp_id = None
        self.discriminator = None

        if created_when is not None:
            self.created_when = created_when
        if documents is not None:
            self.documents = documents
        if id is not None:
            self.id = id
        if parent_ib is not None:
            self.parent_ib = parent_ib
        if referral_code is not None:
            self.referral_code = referral_code
        if status is not None:
            self.status = status
        if updated_when is not None:
            self.updated_when = updated_when
        if user_type is not None:
            self.user_type = user_type
        if wlp_id is not None:
            self.wlp_id = wlp_id

    @property
    def created_when(self):
        """Gets the created_when of this CreateClientResponse.  # noqa: E501


        :return: The created_when of this CreateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_when

    @created_when.setter
    def created_when(self, created_when):
        """Sets the created_when of this CreateClientResponse.


        :param created_when: The created_when of this CreateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._created_when = created_when

    @property
    def documents(self):
        """Gets the documents of this CreateClientResponse.  # noqa: E501


        :return: The documents of this CreateClientResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this CreateClientResponse.


        :param documents: The documents of this CreateClientResponse.  # noqa: E501
        :type: list[object]
        """

        self._documents = documents

    @property
    def id(self):
        """Gets the id of this CreateClientResponse.  # noqa: E501


        :return: The id of this CreateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateClientResponse.


        :param id: The id of this CreateClientResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parent_ib(self):
        """Gets the parent_ib of this CreateClientResponse.  # noqa: E501


        :return: The parent_ib of this CreateClientResponse.  # noqa: E501
        :rtype: ParentIB
        """
        return self._parent_ib

    @parent_ib.setter
    def parent_ib(self, parent_ib):
        """Sets the parent_ib of this CreateClientResponse.


        :param parent_ib: The parent_ib of this CreateClientResponse.  # noqa: E501
        :type: ParentIB
        """

        self._parent_ib = parent_ib

    @property
    def referral_code(self):
        """Gets the referral_code of this CreateClientResponse.  # noqa: E501


        :return: The referral_code of this CreateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this CreateClientResponse.


        :param referral_code: The referral_code of this CreateClientResponse.  # noqa: E501
        :type: str
        """

        self._referral_code = referral_code

    @property
    def status(self):
        """Gets the status of this CreateClientResponse.  # noqa: E501


        :return: The status of this CreateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateClientResponse.


        :param status: The status of this CreateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._status = status

    @property
    def updated_when(self):
        """Gets the updated_when of this CreateClientResponse.  # noqa: E501


        :return: The updated_when of this CreateClientResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_when

    @updated_when.setter
    def updated_when(self, updated_when):
        """Sets the updated_when of this CreateClientResponse.


        :param updated_when: The updated_when of this CreateClientResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_when = updated_when

    @property
    def user_type(self):
        """Gets the user_type of this CreateClientResponse.  # noqa: E501


        :return: The user_type of this CreateClientResponse.  # noqa: E501
        :rtype: ExpandedProperty
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this CreateClientResponse.


        :param user_type: The user_type of this CreateClientResponse.  # noqa: E501
        :type: ExpandedProperty
        """

        self._user_type = user_type

    @property
    def wlp_id(self):
        """Gets the wlp_id of this CreateClientResponse.  # noqa: E501


        :return: The wlp_id of this CreateClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._wlp_id

    @wlp_id.setter
    def wlp_id(self, wlp_id):
        """Sets the wlp_id of this CreateClientResponse.


        :param wlp_id: The wlp_id of this CreateClientResponse.  # noqa: E501
        :type: str
        """

        self._wlp_id = wlp_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateClientResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClientResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
