# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class KycVendorRequestDataVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'list[ClientAddress]',
        'country_of_residence': 'str',
        'date_of_birth': 'datetime',
        'electron_document_id': 'str',
        'email': 'str',
        'first_name': 'str',
        'gender': 'str',
        'identification_number': 'str',
        'identification_number_type': 'str',
        'last_name': 'str',
        'metadata': 'object',
        'middle_name': 'str',
        'phone_number': 'str'
    }

    attribute_map = {
        'address': 'address',
        'country_of_residence': 'country_of_residence',
        'date_of_birth': 'date_of_birth',
        'electron_document_id': 'electron_document_id',
        'email': 'email',
        'first_name': 'first_name',
        'gender': 'gender',
        'identification_number': 'identification_number',
        'identification_number_type': 'identification_number_type',
        'last_name': 'last_name',
        'metadata': 'metadata',
        'middle_name': 'middle_name',
        'phone_number': 'phone_number'
    }

    def __init__(self, address=None, country_of_residence=None, date_of_birth=None, electron_document_id=None, email=None, first_name=None, gender=None, identification_number=None, identification_number_type=None, last_name=None, metadata=None, middle_name=None, phone_number=None):  # noqa: E501
        """KycVendorRequestDataVO - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._country_of_residence = None
        self._date_of_birth = None
        self._electron_document_id = None
        self._email = None
        self._first_name = None
        self._gender = None
        self._identification_number = None
        self._identification_number_type = None
        self._last_name = None
        self._metadata = None
        self._middle_name = None
        self._phone_number = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if country_of_residence is not None:
            self.country_of_residence = country_of_residence
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if electron_document_id is not None:
            self.electron_document_id = electron_document_id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if gender is not None:
            self.gender = gender
        if identification_number is not None:
            self.identification_number = identification_number
        if identification_number_type is not None:
            self.identification_number_type = identification_number_type
        if last_name is not None:
            self.last_name = last_name
        if metadata is not None:
            self.metadata = metadata
        if middle_name is not None:
            self.middle_name = middle_name
        if phone_number is not None:
            self.phone_number = phone_number

    @property
    def address(self):
        """Gets the address of this KycVendorRequestDataVO.  # noqa: E501


        :return: The address of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: list[ClientAddress]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this KycVendorRequestDataVO.


        :param address: The address of this KycVendorRequestDataVO.  # noqa: E501
        :type: list[ClientAddress]
        """

        self._address = address

    @property
    def country_of_residence(self):
        """Gets the country_of_residence of this KycVendorRequestDataVO.  # noqa: E501


        :return: The country_of_residence of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._country_of_residence

    @country_of_residence.setter
    def country_of_residence(self, country_of_residence):
        """Sets the country_of_residence of this KycVendorRequestDataVO.


        :param country_of_residence: The country_of_residence of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._country_of_residence = country_of_residence

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this KycVendorRequestDataVO.  # noqa: E501


        :return: The date_of_birth of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this KycVendorRequestDataVO.


        :param date_of_birth: The date_of_birth of this KycVendorRequestDataVO.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def electron_document_id(self):
        """Gets the electron_document_id of this KycVendorRequestDataVO.  # noqa: E501


        :return: The electron_document_id of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._electron_document_id

    @electron_document_id.setter
    def electron_document_id(self, electron_document_id):
        """Sets the electron_document_id of this KycVendorRequestDataVO.


        :param electron_document_id: The electron_document_id of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._electron_document_id = electron_document_id

    @property
    def email(self):
        """Gets the email of this KycVendorRequestDataVO.  # noqa: E501


        :return: The email of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this KycVendorRequestDataVO.


        :param email: The email of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this KycVendorRequestDataVO.  # noqa: E501


        :return: The first_name of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this KycVendorRequestDataVO.


        :param first_name: The first_name of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this KycVendorRequestDataVO.  # noqa: E501


        :return: The gender of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this KycVendorRequestDataVO.


        :param gender: The gender of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def identification_number(self):
        """Gets the identification_number of this KycVendorRequestDataVO.  # noqa: E501


        :return: The identification_number of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._identification_number

    @identification_number.setter
    def identification_number(self, identification_number):
        """Sets the identification_number of this KycVendorRequestDataVO.


        :param identification_number: The identification_number of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._identification_number = identification_number

    @property
    def identification_number_type(self):
        """Gets the identification_number_type of this KycVendorRequestDataVO.  # noqa: E501


        :return: The identification_number_type of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._identification_number_type

    @identification_number_type.setter
    def identification_number_type(self, identification_number_type):
        """Sets the identification_number_type of this KycVendorRequestDataVO.


        :param identification_number_type: The identification_number_type of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._identification_number_type = identification_number_type

    @property
    def last_name(self):
        """Gets the last_name of this KycVendorRequestDataVO.  # noqa: E501


        :return: The last_name of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this KycVendorRequestDataVO.


        :param last_name: The last_name of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def metadata(self):
        """Gets the metadata of this KycVendorRequestDataVO.  # noqa: E501


        :return: The metadata of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this KycVendorRequestDataVO.


        :param metadata: The metadata of this KycVendorRequestDataVO.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def middle_name(self):
        """Gets the middle_name of this KycVendorRequestDataVO.  # noqa: E501


        :return: The middle_name of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this KycVendorRequestDataVO.


        :param middle_name: The middle_name of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def phone_number(self):
        """Gets the phone_number of this KycVendorRequestDataVO.  # noqa: E501


        :return: The phone_number of this KycVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this KycVendorRequestDataVO.


        :param phone_number: The phone_number of this KycVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycVendorRequestDataVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycVendorRequestDataVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
