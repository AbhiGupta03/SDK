<?php
/**
 * CreateClientResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Model;

use \ArrayAccess;
use \com\hydrogen\integration\ObjectSerializer;

/**
 * CreateClientResponse Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateClientResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateClientResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_when' => '\DateTime',
        'documents' => 'object[]',
        'id' => 'string',
        'parent_ib' => '\com\hydrogen\integration\Model\ParentIB',
        'referral_code' => 'string',
        'status' => '\com\hydrogen\integration\Model\ExpandedProperty',
        'updated_when' => '\DateTime',
        'user_type' => '\com\hydrogen\integration\Model\ExpandedProperty',
        'wlp_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_when' => 'date-time',
        'documents' => null,
        'id' => 'uuid',
        'parent_ib' => null,
        'referral_code' => null,
        'status' => null,
        'updated_when' => 'date-time',
        'user_type' => null,
        'wlp_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_when' => 'created_when',
        'documents' => 'documents',
        'id' => 'id',
        'parent_ib' => 'parent_ib',
        'referral_code' => 'referral_code',
        'status' => 'status',
        'updated_when' => 'updated_when',
        'user_type' => 'user_type',
        'wlp_id' => 'wlp_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_when' => 'setCreatedWhen',
        'documents' => 'setDocuments',
        'id' => 'setId',
        'parent_ib' => 'setParentIb',
        'referral_code' => 'setReferralCode',
        'status' => 'setStatus',
        'updated_when' => 'setUpdatedWhen',
        'user_type' => 'setUserType',
        'wlp_id' => 'setWlpId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_when' => 'getCreatedWhen',
        'documents' => 'getDocuments',
        'id' => 'getId',
        'parent_ib' => 'getParentIb',
        'referral_code' => 'getReferralCode',
        'status' => 'getStatus',
        'updated_when' => 'getUpdatedWhen',
        'user_type' => 'getUserType',
        'wlp_id' => 'getWlpId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_when'] = isset($data['created_when']) ? $data['created_when'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_ib'] = isset($data['parent_ib']) ? $data['parent_ib'] : null;
        $this->container['referral_code'] = isset($data['referral_code']) ? $data['referral_code'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['updated_when'] = isset($data['updated_when']) ? $data['updated_when'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
        $this->container['wlp_id'] = isset($data['wlp_id']) ? $data['wlp_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_when
     *
     * @return \DateTime
     */
    public function getCreatedWhen()
    {
        return $this->container['created_when'];
    }

    /**
     * Sets created_when
     *
     * @param \DateTime $created_when created_when
     *
     * @return $this
     */
    public function setCreatedWhen($created_when)
    {
        $this->container['created_when'] = $created_when;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return object[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param object[] $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_ib
     *
     * @return \com\hydrogen\integration\Model\ParentIB
     */
    public function getParentIb()
    {
        return $this->container['parent_ib'];
    }

    /**
     * Sets parent_ib
     *
     * @param \com\hydrogen\integration\Model\ParentIB $parent_ib parent_ib
     *
     * @return $this
     */
    public function setParentIb($parent_ib)
    {
        $this->container['parent_ib'] = $parent_ib;

        return $this;
    }

    /**
     * Gets referral_code
     *
     * @return string
     */
    public function getReferralCode()
    {
        return $this->container['referral_code'];
    }

    /**
     * Sets referral_code
     *
     * @param string $referral_code referral_code
     *
     * @return $this
     */
    public function setReferralCode($referral_code)
    {
        $this->container['referral_code'] = $referral_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \com\hydrogen\integration\Model\ExpandedProperty
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \com\hydrogen\integration\Model\ExpandedProperty $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_when
     *
     * @return \DateTime
     */
    public function getUpdatedWhen()
    {
        return $this->container['updated_when'];
    }

    /**
     * Sets updated_when
     *
     * @param \DateTime $updated_when updated_when
     *
     * @return $this
     */
    public function setUpdatedWhen($updated_when)
    {
        $this->container['updated_when'] = $updated_when;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return \com\hydrogen\integration\Model\ExpandedProperty
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param \com\hydrogen\integration\Model\ExpandedProperty $user_type user_type
     *
     * @return $this
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets wlp_id
     *
     * @return string
     */
    public function getWlpId()
    {
        return $this->container['wlp_id'];
    }

    /**
     * Sets wlp_id
     *
     * @param string $wlp_id wlp_id
     *
     * @return $this
     */
    public function setWlpId($wlp_id)
    {
        $this->container['wlp_id'] = $wlp_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


