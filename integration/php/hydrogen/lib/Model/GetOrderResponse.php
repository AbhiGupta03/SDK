<?php
/**
 * GetOrderResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Model;

use \ArrayAccess;
use \com\hydrogen\integration\ObjectSerializer;

/**
 * GetOrderResponse Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetOrderResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetOrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'account_no' => 'string',
        'amount_cash' => 'int',
        'average_price' => 'double',
        'created' => 'string',
        'created_by' => 'string',
        'cumulative_quantity' => 'double',
        'fees' => 'double',
        'id' => 'string',
        'order_expires' => 'string',
        'order_no' => 'string',
        'quantity' => 'double',
        'side' => 'string',
        'status' => 'string',
        'status_message' => '\com\hydrogen\integration\Model\StatusMessage',
        'symbol' => 'string',
        'total_order_amount' => 'int',
        'type' => 'string',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'account_no' => null,
        'amount_cash' => 'int32',
        'average_price' => 'double',
        'created' => null,
        'created_by' => null,
        'cumulative_quantity' => 'double',
        'fees' => 'double',
        'id' => null,
        'order_expires' => null,
        'order_no' => null,
        'quantity' => 'double',
        'side' => null,
        'status' => null,
        'status_message' => null,
        'symbol' => null,
        'total_order_amount' => 'int32',
        'type' => null,
        'user_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'account_no' => 'account_no',
        'amount_cash' => 'amount_cash',
        'average_price' => 'average_price',
        'created' => 'created',
        'created_by' => 'created_by',
        'cumulative_quantity' => 'cumulative_quantity',
        'fees' => 'fees',
        'id' => 'id',
        'order_expires' => 'order_expires',
        'order_no' => 'order_no',
        'quantity' => 'quantity',
        'side' => 'side',
        'status' => 'status',
        'status_message' => 'status_message',
        'symbol' => 'symbol',
        'total_order_amount' => 'total_order_amount',
        'type' => 'type',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_no' => 'setAccountNo',
        'amount_cash' => 'setAmountCash',
        'average_price' => 'setAveragePrice',
        'created' => 'setCreated',
        'created_by' => 'setCreatedBy',
        'cumulative_quantity' => 'setCumulativeQuantity',
        'fees' => 'setFees',
        'id' => 'setId',
        'order_expires' => 'setOrderExpires',
        'order_no' => 'setOrderNo',
        'quantity' => 'setQuantity',
        'side' => 'setSide',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'symbol' => 'setSymbol',
        'total_order_amount' => 'setTotalOrderAmount',
        'type' => 'setType',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_no' => 'getAccountNo',
        'amount_cash' => 'getAmountCash',
        'average_price' => 'getAveragePrice',
        'created' => 'getCreated',
        'created_by' => 'getCreatedBy',
        'cumulative_quantity' => 'getCumulativeQuantity',
        'fees' => 'getFees',
        'id' => 'getId',
        'order_expires' => 'getOrderExpires',
        'order_no' => 'getOrderNo',
        'quantity' => 'getQuantity',
        'side' => 'getSide',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'symbol' => 'getSymbol',
        'total_order_amount' => 'getTotalOrderAmount',
        'type' => 'getType',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_no'] = isset($data['account_no']) ? $data['account_no'] : null;
        $this->container['amount_cash'] = isset($data['amount_cash']) ? $data['amount_cash'] : null;
        $this->container['average_price'] = isset($data['average_price']) ? $data['average_price'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['cumulative_quantity'] = isset($data['cumulative_quantity']) ? $data['cumulative_quantity'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_expires'] = isset($data['order_expires']) ? $data['order_expires'] : null;
        $this->container['order_no'] = isset($data['order_no']) ? $data['order_no'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['side'] = isset($data['side']) ? $data['side'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_message'] = isset($data['status_message']) ? $data['status_message'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['total_order_amount'] = isset($data['total_order_amount']) ? $data['total_order_amount'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_no
     *
     * @return string
     */
    public function getAccountNo()
    {
        return $this->container['account_no'];
    }

    /**
     * Sets account_no
     *
     * @param string $account_no account_no
     *
     * @return $this
     */
    public function setAccountNo($account_no)
    {
        $this->container['account_no'] = $account_no;

        return $this;
    }

    /**
     * Gets amount_cash
     *
     * @return int
     */
    public function getAmountCash()
    {
        return $this->container['amount_cash'];
    }

    /**
     * Sets amount_cash
     *
     * @param int $amount_cash amount_cash
     *
     * @return $this
     */
    public function setAmountCash($amount_cash)
    {
        $this->container['amount_cash'] = $amount_cash;

        return $this;
    }

    /**
     * Gets average_price
     *
     * @return double
     */
    public function getAveragePrice()
    {
        return $this->container['average_price'];
    }

    /**
     * Sets average_price
     *
     * @param double $average_price average_price
     *
     * @return $this
     */
    public function setAveragePrice($average_price)
    {
        $this->container['average_price'] = $average_price;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets cumulative_quantity
     *
     * @return double
     */
    public function getCumulativeQuantity()
    {
        return $this->container['cumulative_quantity'];
    }

    /**
     * Sets cumulative_quantity
     *
     * @param double $cumulative_quantity cumulative_quantity
     *
     * @return $this
     */
    public function setCumulativeQuantity($cumulative_quantity)
    {
        $this->container['cumulative_quantity'] = $cumulative_quantity;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return double
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param double $fees fees
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_expires
     *
     * @return string
     */
    public function getOrderExpires()
    {
        return $this->container['order_expires'];
    }

    /**
     * Sets order_expires
     *
     * @param string $order_expires order_expires
     *
     * @return $this
     */
    public function setOrderExpires($order_expires)
    {
        $this->container['order_expires'] = $order_expires;

        return $this;
    }

    /**
     * Gets order_no
     *
     * @return string
     */
    public function getOrderNo()
    {
        return $this->container['order_no'];
    }

    /**
     * Sets order_no
     *
     * @param string $order_no order_no
     *
     * @return $this
     */
    public function setOrderNo($order_no)
    {
        $this->container['order_no'] = $order_no;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string $side side
     *
     * @return $this
     */
    public function setSide($side)
    {
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return \com\hydrogen\integration\Model\StatusMessage
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param \com\hydrogen\integration\Model\StatusMessage $status_message status_message
     *
     * @return $this
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets total_order_amount
     *
     * @return int
     */
    public function getTotalOrderAmount()
    {
        return $this->container['total_order_amount'];
    }

    /**
     * Sets total_order_amount
     *
     * @param int $total_order_amount total_order_amount
     *
     * @return $this
     */
    public function setTotalOrderAmount($total_order_amount)
    {
        $this->container['total_order_amount'] = $total_order_amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


