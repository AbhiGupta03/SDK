<?php
/**
 * BaseDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\integration\Model;

use \ArrayAccess;
use \com\hydrogen\integration\ObjectSerializer;

/**
 * BaseDocument Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\integration
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'data' => '\com\hydrogen\integration\Model\DigitalDocumentData',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'data' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data' => 'data',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data' => 'setData',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data' => 'getData',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_BASIC_INFO = 'BASIC_INFO';
    const TYPE_ADDRESS_INFO = 'ADDRESS_INFO';
    const TYPE_PERSONAL_INFO = 'PERSONAL_INFO';
    const TYPE_IDENTIFICATION_INFO = 'IDENTIFICATION_INFO';
    const TYPE_EMPLOYMENT_INFO = 'EMPLOYMENT_INFO';
    const TYPE_INVESTOR_PROFILE_INFO = 'INVESTOR_PROFILE_INFO';
    const TYPE_COMPLIANCE_AML_INFO = 'COMPLIANCE_AML_INFO';
    const TYPE_DISCLOSURES = 'DISCLOSURES';
    const TYPE_MARGIN_DISCLOSURE = 'MARGIN_DISCLOSURE';
    const TYPE_MARKETING_INFO = 'MARKETING_INFO';
    const TYPE_CUSTODIAN_INFO = 'CUSTODIAN_INFO';
    const TYPE_INSTITUTIONAL_INFO = 'INSTITUTIONAL_INFO';
    const TYPE_DIRECTOR_INFO = 'DIRECTOR_INFO';
    const TYPE_TRUST_INFO = 'TRUST_INFO';
    const TYPE_JOINT_BASIC_INFO = 'JOINT_BASIC_INFO';
    const TYPE_JOINT_ADDRESS_INFO = 'JOINT_ADDRESS_INFO';
    const TYPE_JOINT_PERSONAL_INFO = 'JOINT_PERSONAL_INFO';
    const TYPE_JOINT_IDENTIFICATION_INFO = 'JOINT_IDENTIFICATION_INFO';
    const TYPE_JOINT_EMPLOYMENT_INFO = 'JOINT_EMPLOYMENT_INFO';
    const TYPE_JOINT_INVESTOR_PROFILE_INFO = 'JOINT_INVESTOR_PROFILE_INFO';
    const TYPE_JOINT_COMPLIANCE_AML_INFO = 'JOINT_COMPLIANCE_AML_INFO';
    const TYPE_JOINT_DISCLOSURES = 'JOINT_DISCLOSURES';
    const TYPE_JOINT_MARGIN_DISCLOSURE = 'JOINT_MARGIN_DISCLOSURE';
    const TYPE_JOINT_MARKETING_INFO = 'JOINT_MARKETING_INFO';
    const TYPE_JOINT_CUSTODIAN_INFO = 'JOINT_CUSTODIAN_INFO';
    const TYPE_JOINT_INSTITUTIONAL_INFO = 'JOINT_INSTITUTIONAL_INFO';
    const TYPE_JOINT_DIRECTOR_INFO = 'JOINT_DIRECTOR_INFO';
    const TYPE_JOINT_TRUST_INFO = 'JOINT_TRUST_INFO';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BASIC_INFO,
            self::TYPE_ADDRESS_INFO,
            self::TYPE_PERSONAL_INFO,
            self::TYPE_IDENTIFICATION_INFO,
            self::TYPE_EMPLOYMENT_INFO,
            self::TYPE_INVESTOR_PROFILE_INFO,
            self::TYPE_COMPLIANCE_AML_INFO,
            self::TYPE_DISCLOSURES,
            self::TYPE_MARGIN_DISCLOSURE,
            self::TYPE_MARKETING_INFO,
            self::TYPE_CUSTODIAN_INFO,
            self::TYPE_INSTITUTIONAL_INFO,
            self::TYPE_DIRECTOR_INFO,
            self::TYPE_TRUST_INFO,
            self::TYPE_JOINT_BASIC_INFO,
            self::TYPE_JOINT_ADDRESS_INFO,
            self::TYPE_JOINT_PERSONAL_INFO,
            self::TYPE_JOINT_IDENTIFICATION_INFO,
            self::TYPE_JOINT_EMPLOYMENT_INFO,
            self::TYPE_JOINT_INVESTOR_PROFILE_INFO,
            self::TYPE_JOINT_COMPLIANCE_AML_INFO,
            self::TYPE_JOINT_DISCLOSURES,
            self::TYPE_JOINT_MARGIN_DISCLOSURE,
            self::TYPE_JOINT_MARKETING_INFO,
            self::TYPE_JOINT_CUSTODIAN_INFO,
            self::TYPE_JOINT_INSTITUTIONAL_INFO,
            self::TYPE_JOINT_DIRECTOR_INFO,
            self::TYPE_JOINT_TRUST_INFO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data
     *
     * @return \com\hydrogen\integration\Model\DigitalDocumentData
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \com\hydrogen\integration\Model\DigitalDocumentData $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


