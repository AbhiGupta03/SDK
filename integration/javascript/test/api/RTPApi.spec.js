/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.RTPApi();
  });

  describe('(package)', function() {
    describe('RTPApi', function() {
      describe('cancelRtpTransferUsingDelete', function() {
        it('should call cancelRtpTransferUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelRtpTransferUsingDelete call and complete the assertions
          /*
          var nucleusFundingId = "nucleusFundingId_example";

          instance.cancelRtpTransferUsingDelete(nucleusFundingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.RtpTransferResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequest).to.be.a(Object);
            expect(data.vendorRequest).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBankLinkUsingPost2', function() {
        it('should call createBankLinkUsingPost2 successfully', function(done) {
          // TODO: uncomment, update parameter values for createBankLinkUsingPost2 call and complete the assertions
          /*
          var request = new HydrogenIntegrationApi.RtpBankLinkRequestCO();
          request.nucleusBankLinkId = """00000000-0000-0000-0000-000000000000";
          request.vendorRequest = ;

          instance.createBankLinkUsingPost2(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.RtpBankLinkResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                  expect(data.vendorRequestData.bankAccountName).to.be.a('string');
              expect(data.vendorRequestData.bankAccountName).to.be("");
              expect(data.vendorRequestData.name).to.be.a('string');
              expect(data.vendorRequestData.name).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBankLinkUsingDelete2', function() {
        it('should call deleteBankLinkUsingDelete2 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBankLinkUsingDelete2 call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.deleteBankLinkUsingDelete2(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.RtpBankLinkResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                  expect(data.vendorRequestData.bankAccountName).to.be.a('string');
              expect(data.vendorRequestData.bankAccountName).to.be("");
              expect(data.vendorRequestData.name).to.be.a('string');
              expect(data.vendorRequestData.name).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBankLinkUsingGet2', function() {
        it('should call getBankLinkUsingGet2 successfully', function(done) {
          // TODO: uncomment, update parameter values for getBankLinkUsingGet2 call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.getBankLinkUsingGet2(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.RtpBankLinkResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                  expect(data.vendorRequestData.bankAccountName).to.be.a('string');
              expect(data.vendorRequestData.bankAccountName).to.be("");
              expect(data.vendorRequestData.name).to.be.a('string');
              expect(data.vendorRequestData.name).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getClientBankLinksUsingGet1', function() {
        it('should call getClientBankLinksUsingGet1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getClientBankLinksUsingGet1 call and complete the assertions
          /*
          var nucleusClientId = "nucleusClientId_example";

          instance.getClientBankLinksUsingGet1(nucleusClientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.RtpBankLinkResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusBankLinkId).to.be.a('string');
              expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.nucleusClientId).to.be.a('string');
              expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                    expect(data.vendorRequestData.bankAccountName).to.be.a('string');
                expect(data.vendorRequestData.bankAccountName).to.be("");
                expect(data.vendorRequestData.name).to.be.a('string');
                expect(data.vendorRequestData.name).to.be("");
              expect(data.vendorResponse).to.be.a(Object);
              expect(data.vendorResponse).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getListOfRtpTransfersUsingGet', function() {
        it('should call getListOfRtpTransfersUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getListOfRtpTransfersUsingGet call and complete the assertions
          /*
          var nucleusClientId = "nucleusClientId_example";

          instance.getListOfRtpTransfersUsingGet(nucleusClientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.RtpTransferResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusFundingId).to.be.a('string');
              expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.vendorRequest).to.be.a(Object);
              expect(data.vendorRequest).to.be();
              expect(data.vendorResponse).to.be.a(Object);
              expect(data.vendorResponse).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRtpTransferUsingGet', function() {
        it('should call getRtpTransferUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getRtpTransferUsingGet call and complete the assertions
          /*
          var nucleusFundingId = "nucleusFundingId_example";

          instance.getRtpTransferUsingGet(nucleusFundingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.RtpTransferResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequest).to.be.a(Object);
            expect(data.vendorRequest).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitRtpTransferUsingPost', function() {
        it('should call submitRtpTransferUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for submitRtpTransferUsingPost call and complete the assertions
          /*
          var transferRequest = new HydrogenIntegrationApi.RtpTransferRequestCO();
          transferRequest.nucleusFundingId = """00000000-0000-0000-0000-000000000000";
          transferRequest.vendorRequest = ;

          instance.submitRtpTransferUsingPost(transferRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.RtpTransferResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequest).to.be.a(Object);
            expect(data.vendorRequest).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBankLinkUsingPut2', function() {
        it('should call updateBankLinkUsingPut2 successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBankLinkUsingPut2 call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.updateBankLinkUsingPut2(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.RtpBankLinkResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                  expect(data.vendorRequestData.bankAccountName).to.be.a('string');
              expect(data.vendorRequestData.bankAccountName).to.be("");
              expect(data.vendorRequestData.name).to.be.a('string');
              expect(data.vendorRequestData.name).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
