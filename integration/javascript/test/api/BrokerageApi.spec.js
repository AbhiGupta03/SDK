/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.BrokerageApi();
  });

  describe('(package)', function() {
    describe('BrokerageApi', function() {
      describe('createBankLinkUsingPost', function() {
        it('should call createBankLinkUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBankLinkUsingPost call and complete the assertions
          /*
          var brokerageBankLinkCO = new HydrogenIntegrationApi.BrokerageBankLinkCO();
          brokerageBankLinkCO.nucleusBankLinkId = """00000000-0000-0000-0000-000000000000";

          instance.createBankLinkUsingPost(brokerageBankLinkCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageBankLinkVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBrokerageAccountUsingPost', function() {
        it('should call createBrokerageAccountUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBrokerageAccountUsingPost call and complete the assertions
          /*
          var brokerageAccountCO = new HydrogenIntegrationApi.BrokerageAccountCO();
          brokerageAccountCO.electronDocumentId = ["""00000000-0000-0000-0000-000000000000"];
          brokerageAccountCO.nucleusAccountId = """00000000-0000-0000-0000-000000000000";
          brokerageAccountCO.nucleusAccountTypeId = """00000000-0000-0000-0000-000000000000";

          instance.createBrokerageAccountUsingPost(brokerageAccountCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageAccountVO);
            {
              let dataCtr = data.electronDocumentId;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("""00000000-0000-0000-0000-000000000000");
              }
            }
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBrokerageClientUsingPost', function() {
        it('should call createBrokerageClientUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBrokerageClientUsingPost call and complete the assertions
          /*
          var clientCO = new HydrogenIntegrationApi.BrokerageClientCO();
          clientCO.nucleusAccountId = """00000000-0000-0000-0000-000000000000";
          clientCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";

          instance.createBrokerageClientUsingPost(clientCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageCreateClientVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(HydrogenIntegrationApi.CreateClientResponse);
                  expect(data.vendorResponse.createdWhen).to.be.a(Date);
              expect(data.vendorResponse.createdWhen).to.be(new Date());
              {
                let dataCtr = data.vendorResponse.documents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.vendorResponse.id).to.be.a('string');
              expect(data.vendorResponse.id).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorResponse.parentIb).to.be.a(HydrogenIntegrationApi.ParentIB);
                    expect(data.vendorResponse.parentIb.id).to.be.a('string');
                expect(data.vendorResponse.parentIb.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.vendorResponse.parentIb.name).to.be.a('string');
                expect(data.vendorResponse.parentIb.name).to.be("");
              expect(data.vendorResponse.referralCode).to.be.a('string');
              expect(data.vendorResponse.referralCode).to.be("");
              expect(data.vendorResponse.status).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.status.description).to.be.a('string');
                expect(data.vendorResponse.status.description).to.be("");
                expect(data.vendorResponse.status.name).to.be.a('string');
                expect(data.vendorResponse.status.name).to.be("");
              expect(data.vendorResponse.updatedWhen).to.be.a(Date);
              expect(data.vendorResponse.updatedWhen).to.be(new Date());
              expect(data.vendorResponse.userType).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.userType.description).to.be.a('string');
                expect(data.vendorResponse.userType.description).to.be("");
                expect(data.vendorResponse.userType.name).to.be.a('string');
                expect(data.vendorResponse.userType.name).to.be("");
              expect(data.vendorResponse.wlpId).to.be.a('string');
              expect(data.vendorResponse.wlpId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrderUsingPost', function() {
        it('should call createOrderUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrderUsingPost call and complete the assertions
          /*
          var nucleusOrderId = "nucleusOrderId_example";

          instance.createOrderUsingPost(nucleusOrderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CreateOrderResponse);
            expect(data.orderId).to.be.a('string');
            expect(data.orderId).to.be("");
            expect(data.orderNo).to.be.a('string');
            expect(data.orderNo).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBankLinkUsingDelete', function() {
        it('should call deleteBankLinkUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBankLinkUsingDelete call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.deleteBankLinkUsingDelete(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.ResponseEntity);
            expect(data.body).to.be.a(Object);
            expect(data.body).to.be();
            expect(data.status).to.be.a(Object);
            expect(data.status).to.be();
            expect(data.statusCode).to.be.a('string');
            expect(data.statusCode).to.be("100 CONTINUE");
            expect(data.statusCodeValue).to.be.a('number');
            expect(data.statusCodeValue).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrderUsingDelete', function() {
        it('should call deleteOrderUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrderUsingDelete call
          /*
          var nucleusOrderId = "nucleusOrderId_example";

          instance.deleteOrderUsingDelete(nucleusOrderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBankLinkUsingGet', function() {
        it('should call getBankLinkUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getBankLinkUsingGet call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.getBankLinkUsingGet(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageBankLinkVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBrokerageAccountStatementUsingGet', function() {
        it('should call getBrokerageAccountStatementUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getBrokerageAccountStatementUsingGet call and complete the assertions
          /*
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var nucleusAccountId = "nucleusAccountId_example";
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var statementType = "statementType_example";

          instance.getBrokerageAccountStatementUsingGet(endDate, nucleusAccountId, startDate, statementType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageStatementVO);
            expect(data.nucleusAccountId).to.be.a('string');
            expect(data.nucleusAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            {
              let dataCtr = data.statements;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.StatementModel);
                expect(data.statementDate).to.be.a(Date);
                expect(data.statementDate).to.be(new Date());
                expect(data.statementLink).to.be.a('string');
                expect(data.statementLink).to.be("");
                expect(data.statementLinkExpiry).to.be.a('string');
                expect(data.statementLinkExpiry).to.be("");
                expect(data.statementName).to.be.a('string');
                expect(data.statementName).to.be("");
                expect(data.statementType).to.be.a('string');
                expect(data.statementType).to.be("");

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderUsingGet', function() {
        it('should call getOrderUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderUsingGet call and complete the assertions
          /*
          var nucleusOrderId = "nucleusOrderId_example";

          instance.getOrderUsingGet(nucleusOrderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.GetOrderResponse);
            expect(data.accountId).to.be.a('string');
            expect(data.accountId).to.be("");
            expect(data.accountNo).to.be.a('string');
            expect(data.accountNo).to.be("");
            expect(data.amountCash).to.be.a('number');
            expect(data.amountCash).to.be(0);
            expect(data.averagePrice).to.be.a('number');
            expect(data.averagePrice).to.be(0.0);
            expect(data.created).to.be.a('string');
            expect(data.created).to.be("");
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.cumulativeQuantity).to.be.a('number');
            expect(data.cumulativeQuantity).to.be(0.0);
            expect(data.fees).to.be.a('number');
            expect(data.fees).to.be(0.0);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.orderExpires).to.be.a('string');
            expect(data.orderExpires).to.be("");
            expect(data.orderNo).to.be.a('string');
            expect(data.orderNo).to.be("");
            expect(data.quantity).to.be.a('number');
            expect(data.quantity).to.be(0.0);
            expect(data.side).to.be.a('string');
            expect(data.side).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.statusMessage).to.be.a(HydrogenIntegrationApi.StatusMessage);
                  expect(data.statusMessage.errorCode).to.be.a('string');
              expect(data.statusMessage.errorCode).to.be("");
              expect(data.statusMessage.message).to.be.a('string');
              expect(data.statusMessage.message).to.be("");
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.totalOrderAmount).to.be.a('number');
            expect(data.totalOrderAmount).to.be(0);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.userId).to.be.a('string');
            expect(data.userId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBankLinkUsingPut', function() {
        it('should call updateBankLinkUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBankLinkUsingPut call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.updateBankLinkUsingPut(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageBankLinkVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBrokerageClientUsingPut', function() {
        it('should call updateBrokerageClientUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBrokerageClientUsingPut call and complete the assertions
          /*
          var clientCO = new HydrogenIntegrationApi.BrokerageClientCO();
          clientCO.nucleusAccountId = """00000000-0000-0000-0000-000000000000";
          clientCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";

          instance.updateBrokerageClientUsingPut(clientCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageUpdateClientVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            {
              let dataCtr = data.vendorRequestData;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.BaseDocument);
                expect(data.data).to.be.a(HydrogenIntegrationApi.DigitalDocumentData);
                    expect(data.type).to.be.a('string');
                expect(data.type).to.be("BASIC_INFO");

                      }
            }
            expect(data.vendorResponse).to.be.a(HydrogenIntegrationApi.UpdateClientResponse);
                  expect(data.vendorResponse.ackCustomerAgreement).to.be.a('boolean');
              expect(data.vendorResponse.ackCustomerAgreement).to.be(false);
              expect(data.vendorResponse.ackDisclosureRule14b).to.be.a('boolean');
              expect(data.vendorResponse.ackDisclosureRule14b).to.be(false);
              expect(data.vendorResponse.ackFindersFee).to.be.a('boolean');
              expect(data.vendorResponse.ackFindersFee).to.be(false);
              expect(data.vendorResponse.ackForeignFindersFee).to.be.a('boolean');
              expect(data.vendorResponse.ackForeignFindersFee).to.be(false);
              expect(data.vendorResponse.ackJointCustomerAgreement).to.be.a('boolean');
              expect(data.vendorResponse.ackJointCustomerAgreement).to.be(false);
              expect(data.vendorResponse.ackJointDisclosureRule14b).to.be.a('boolean');
              expect(data.vendorResponse.ackJointDisclosureRule14b).to.be(false);
              expect(data.vendorResponse.ackJointFindersFee).to.be.a('boolean');
              expect(data.vendorResponse.ackJointFindersFee).to.be(false);
              expect(data.vendorResponse.ackJointForeignFindersFee).to.be.a('boolean');
              expect(data.vendorResponse.ackJointForeignFindersFee).to.be(false);
              expect(data.vendorResponse.ackJointMarketData).to.be.a('boolean');
              expect(data.vendorResponse.ackJointMarketData).to.be(false);
              expect(data.vendorResponse.ackMarketData).to.be.a('boolean');
              expect(data.vendorResponse.ackMarketData).to.be(false);
              expect(data.vendorResponse.ackSignedBy).to.be.a('string');
              expect(data.vendorResponse.ackSignedBy).to.be("");
              expect(data.vendorResponse.ackSignedWhen).to.be.a('string');
              expect(data.vendorResponse.ackSignedWhen).to.be("");
              expect(data.vendorResponse.addressLine1).to.be.a('string');
              expect(data.vendorResponse.addressLine1).to.be("");
              expect(data.vendorResponse.addressLine2).to.be.a('string');
              expect(data.vendorResponse.addressLine2).to.be("");
              expect(data.vendorResponse.addressProofReviewBy).to.be.a('string');
              expect(data.vendorResponse.addressProofReviewBy).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorResponse.addressProofReviewWhen).to.be.a(Date);
              expect(data.vendorResponse.addressProofReviewWhen).to.be(new Date());
              expect(data.vendorResponse.annualIncome).to.be.a('string');
              expect(data.vendorResponse.annualIncome).to.be("");
              expect(data.vendorResponse.annualIncomeNumber).to.be.a('number');
              expect(data.vendorResponse.annualIncomeNumber).to.be(0);
              expect(data.vendorResponse.approvedBy).to.be.a('string');
              expect(data.vendorResponse.approvedBy).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorResponse.approvedWhen).to.be.a(Date);
              expect(data.vendorResponse.approvedWhen).to.be(new Date());
              expect(data.vendorResponse.avatarUrl).to.be.a('string');
              expect(data.vendorResponse.avatarUrl).to.be("");
              expect(data.vendorResponse.badPasswordCount).to.be.a('number');
              expect(data.vendorResponse.badPasswordCount).to.be(0);
              expect(data.vendorResponse.brandAmbassador).to.be.a('boolean');
              expect(data.vendorResponse.brandAmbassador).to.be(false);
              expect(data.vendorResponse.citizenship).to.be.a('string');
              expect(data.vendorResponse.citizenship).to.be("");
              expect(data.vendorResponse.city).to.be.a('string');
              expect(data.vendorResponse.city).to.be("");
              expect(data.vendorResponse.countryId).to.be.a('string');
              expect(data.vendorResponse.countryId).to.be("");
              expect(data.vendorResponse.createdWhen).to.be.a(Date);
              expect(data.vendorResponse.createdWhen).to.be(new Date());
              expect(data.vendorResponse.director).to.be.a('boolean');
              expect(data.vendorResponse.director).to.be(false);
              expect(data.vendorResponse.displayName).to.be.a('string');
              expect(data.vendorResponse.displayName).to.be("");
              expect(data.vendorResponse.dob).to.be.a(Date);
              expect(data.vendorResponse.dob).to.be(new Date());
              expect(data.vendorResponse.email).to.be.a('string');
              expect(data.vendorResponse.email).to.be("");
              expect(data.vendorResponse.employerBusiness).to.be.a('string');
              expect(data.vendorResponse.employerBusiness).to.be("");
              expect(data.vendorResponse.employerCompany).to.be.a('string');
              expect(data.vendorResponse.employerCompany).to.be("");
              expect(data.vendorResponse.employerCountryId).to.be.a('string');
              expect(data.vendorResponse.employerCountryId).to.be("");
              expect(data.vendorResponse.employerIsBroker).to.be.a('boolean');
              expect(data.vendorResponse.employerIsBroker).to.be(false);
              expect(data.vendorResponse.employmentStatus).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.employmentStatus.description).to.be.a('string');
                expect(data.vendorResponse.employmentStatus.description).to.be("");
                expect(data.vendorResponse.employmentStatus.name).to.be.a('string');
                expect(data.vendorResponse.employmentStatus.name).to.be("");
              expect(data.vendorResponse.employmentYears).to.be.a('number');
              expect(data.vendorResponse.employmentYears).to.be(0);
              expect(data.vendorResponse.firstName).to.be.a('string');
              expect(data.vendorResponse.firstName).to.be("");
              expect(data.vendorResponse.gender).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.gender.description).to.be.a('string');
                expect(data.vendorResponse.gender.description).to.be("");
                expect(data.vendorResponse.gender.name).to.be.a('string');
                expect(data.vendorResponse.gender.name).to.be("");
              expect(data.vendorResponse.id).to.be.a('string');
              expect(data.vendorResponse.id).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorResponse.idNo).to.be.a('string');
              expect(data.vendorResponse.idNo).to.be("");
              expect(data.vendorResponse.investmentExperience).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.investmentExperience.description).to.be.a('string');
                expect(data.vendorResponse.investmentExperience.description).to.be("");
                expect(data.vendorResponse.investmentExperience.name).to.be.a('string');
                expect(data.vendorResponse.investmentExperience.name).to.be("");
              expect(data.vendorResponse.investmentObjectives).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.investmentObjectives.description).to.be.a('string');
                expect(data.vendorResponse.investmentObjectives.description).to.be("");
                expect(data.vendorResponse.investmentObjectives.name).to.be.a('string');
                expect(data.vendorResponse.investmentObjectives.name).to.be("");
              expect(data.vendorResponse.kycWhen).to.be.a(Date);
              expect(data.vendorResponse.kycWhen).to.be(new Date());
              expect(data.vendorResponse.languageId).to.be.a('string');
              expect(data.vendorResponse.languageId).to.be("en_US");
              expect(data.vendorResponse.lastLoginWhen).to.be.a(Date);
              expect(data.vendorResponse.lastLoginWhen).to.be(new Date());
              expect(data.vendorResponse.lastName).to.be.a('string');
              expect(data.vendorResponse.lastName).to.be("");
              expect(data.vendorResponse.marginDefault).to.be.a('number');
              expect(data.vendorResponse.marginDefault).to.be(0);
              expect(data.vendorResponse.maritalStatus).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.maritalStatus.description).to.be.a('string');
                expect(data.vendorResponse.maritalStatus.description).to.be("");
                expect(data.vendorResponse.maritalStatus.name).to.be.a('string');
                expect(data.vendorResponse.maritalStatus.name).to.be("");
              expect(data.vendorResponse.networthLiquid).to.be.a('string');
              expect(data.vendorResponse.networthLiquid).to.be("");
              expect(data.vendorResponse.networthTotal).to.be.a('string');
              expect(data.vendorResponse.networthTotal).to.be("");
              expect(data.vendorResponse.ownershipType).to.be.a('string');
              expect(data.vendorResponse.ownershipType).to.be("");
              expect(data.vendorResponse.parentIb).to.be.a(HydrogenIntegrationApi.ParentIB);
                    expect(data.vendorResponse.parentIb.id).to.be.a('string');
                expect(data.vendorResponse.parentIb.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.vendorResponse.parentIb.name).to.be.a('string');
                expect(data.vendorResponse.parentIb.name).to.be("");
              expect(data.vendorResponse.phone).to.be.a('string');
              expect(data.vendorResponse.phone).to.be("");
              expect(data.vendorResponse.pictureReviewBy).to.be.a('string');
              expect(data.vendorResponse.pictureReviewBy).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorResponse.pictureReviewWhen).to.be.a(Date);
              expect(data.vendorResponse.pictureReviewWhen).to.be(new Date());
              expect(data.vendorResponse.politcallyExposed).to.be.a('boolean');
              expect(data.vendorResponse.politcallyExposed).to.be(false);
              expect(data.vendorResponse.referralCode).to.be.a('string');
              expect(data.vendorResponse.referralCode).to.be("");
              expect(data.vendorResponse.riskTolerance).to.be.a('string');
              expect(data.vendorResponse.riskTolerance).to.be("");
              expect(data.vendorResponse.stateProvince).to.be.a('string');
              expect(data.vendorResponse.stateProvince).to.be("");
              expect(data.vendorResponse.status).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.status.description).to.be.a('string');
                expect(data.vendorResponse.status.description).to.be("");
                expect(data.vendorResponse.status.name).to.be.a('string');
                expect(data.vendorResponse.status.name).to.be("");
              expect(data.vendorResponse.termsOfUse).to.be.a('boolean');
              expect(data.vendorResponse.termsOfUse).to.be(false);
              expect(data.vendorResponse.updatedWhen).to.be.a(Date);
              expect(data.vendorResponse.updatedWhen).to.be(new Date());
              expect(data.vendorResponse.usCitizen).to.be.a('boolean');
              expect(data.vendorResponse.usCitizen).to.be(false);
              expect(data.vendorResponse.userNoteQty).to.be.a('number');
              expect(data.vendorResponse.userNoteQty).to.be(0);
              expect(data.vendorResponse.userType).to.be.a(HydrogenIntegrationApi.ExpandedProperty);
                    expect(data.vendorResponse.userType.description).to.be.a('string');
                expect(data.vendorResponse.userType.description).to.be("");
                expect(data.vendorResponse.userType.name).to.be.a('string');
                expect(data.vendorResponse.userType.name).to.be("");
              expect(data.vendorResponse.username).to.be.a('string');
              expect(data.vendorResponse.username).to.be("");
              expect(data.vendorResponse.wlpId).to.be.a('string');
              expect(data.vendorResponse.wlpId).to.be("");
              expect(data.vendorResponse.zipPostalCode).to.be.a('number');
              expect(data.vendorResponse.zipPostalCode).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
