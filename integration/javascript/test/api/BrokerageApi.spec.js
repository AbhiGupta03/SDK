/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.BrokerageApi();
  });

  describe('(package)', function() {
    describe('BrokerageApi', function() {
      describe('cancelOrderUsingPut', function() {
        it('should call cancelOrderUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelOrderUsingPut call
          /*
          var nucleusOrderId = "nucleusOrderId_example";

          instance.cancelOrderUsingPut(nucleusOrderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBankLinkUsingPost1', function() {
        it('should call createBankLinkUsingPost1 successfully', function(done) {
          // TODO: uncomment, update parameter values for createBankLinkUsingPost1 call and complete the assertions
          /*
          var brokerageBankLinkCO = new HydrogenIntegrationApi.BrokerageBankLinkCO();
          brokerageBankLinkCO.nucleusBankLinkId = """00000000-0000-0000-0000-000000000000";

          instance.createBankLinkUsingPost1(brokerageBankLinkCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageBankLinkVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(Object);
            expect(data.vendorRequestData).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBrokerageAccountUsingPost', function() {
        it('should call createBrokerageAccountUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBrokerageAccountUsingPost call and complete the assertions
          /*
          var brokerageAccountCO = new HydrogenIntegrationApi.BrokerageAccountCO();
          brokerageAccountCO.nucleusAccountId = """00000000-0000-0000-0000-000000000000";
          brokerageAccountCO.nucleusDocumentIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.createBrokerageAccountUsingPost(brokerageAccountCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageAccountVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusAccountId).to.be.a('string');
            expect(data.nucleusAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBrokerageClientUsingPost', function() {
        it('should call createBrokerageClientUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBrokerageClientUsingPost call and complete the assertions
          /*
          var clientCO = new HydrogenIntegrationApi.BrokerageClientCO();
          clientCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          clientCO.nucleusDocumentIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.createBrokerageClientUsingPost(clientCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageCreateClientVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDepositUsingPost', function() {
        it('should call createDepositUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createDepositUsingPost call and complete the assertions
          /*
          var brokerageDepositCO = new HydrogenIntegrationApi.BrokerageDepositCO();
          brokerageDepositCO.nucleusFundingId = """00000000-0000-0000-0000-000000000000";

          instance.createDepositUsingPost(brokerageDepositCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageDepositVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDocumentUsingPost', function() {
        it('should call createDocumentUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createDocumentUsingPost call and complete the assertions
          /*
          var documentCO = new HydrogenIntegrationApi.BrokerageDocumentCO();
          documentCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          documentCO.nucleusDocumentId = """00000000-0000-0000-0000-000000000000";

          instance.createDocumentUsingPost(documentCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageDocumentVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusDocumentId).to.be.a('string');
            expect(data.nucleusDocumentId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrderUsingPost', function() {
        it('should call createOrderUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrderUsingPost call and complete the assertions
          /*
          var brokerageOrderCO = new HydrogenIntegrationApi.BrokerageOrderCO();
          brokerageOrderCO.nucleusOrderId = """00000000-0000-0000-0000-000000000000";

          instance.createOrderUsingPost(brokerageOrderCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageOrderVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusOrderId).to.be.a('string');
            expect(data.nucleusOrderId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.orderStatusId).to.be.a('string');
            expect(data.orderStatusId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createWithdrawalUsingPost', function() {
        it('should call createWithdrawalUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createWithdrawalUsingPost call and complete the assertions
          /*
          var brokerageWithdrawalCO = new HydrogenIntegrationApi.BrokerageWithdrawalCO();
          brokerageWithdrawalCO.nucleusFundingId = """00000000-0000-0000-0000-000000000000";

          instance.createWithdrawalUsingPost(brokerageWithdrawalCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageWithdrawalVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBankLinkUsingDelete1', function() {
        it('should call deleteBankLinkUsingDelete1 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBankLinkUsingDelete1 call
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.deleteBankLinkUsingDelete1(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBalanceUsingGet1', function() {
        it('should call getBalanceUsingGet1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getBalanceUsingGet1 call and complete the assertions
          /*
          var nucleusPortfolioId = "nucleusPortfolioId_example";

          instance.getBalanceUsingGet1(nucleusPortfolioId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageBalanceVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusAssetSizesPosted;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.PortfolioAssetSizeLog);
                expect(data.accountId).to.be.a('string');
                expect(data.accountId).to.be("11c28dade-8679-4df5-9b9d-c508d04fcb0c");
                expect(data.assetSize).to.be.a('number');
                expect(data.assetSize).to.be(100.0);
                expect(data.assetSizeAvailable).to.be.a('number');
                expect(data.assetSizeAvailable).to.be(100.0);
                expect(data.assetSizePending).to.be.a('number');
                expect(data.assetSizePending).to.be(100.0);
                expect(data.cashFlow).to.be.a('number');
                expect(data.cashFlow).to.be(100.0);
                expect(data.createDate).to.be.a(Date);
                expect(data.createDate).to.be(new Date());
                expect(data.currencyCode).to.be.a('string');
                expect(data.currencyCode).to.be("USD");
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(2018-11-29T14:48:38.000+0000);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.modelId).to.be.a('string');
                expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
                expect(data.portfolioId).to.be.a('string');
                expect(data.portfolioId).to.be("c34794e9-f927-468b-b47e-ea17c3d533c5");
                expect(data.secondaryId).to.be.a('string');
                expect(data.secondaryId).to.be("");
                expect(data.updateDate).to.be.a(Date);
                expect(data.updateDate).to.be(new Date());

                      }
            }
            expect(data.nucleusPortfolioId).to.be.a('string');
            expect(data.nucleusPortfolioId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBankLinkUsingGet1', function() {
        it('should call getBankLinkUsingGet1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getBankLinkUsingGet1 call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.getBankLinkUsingGet1(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageBankLinkVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(Object);
            expect(data.vendorRequestData).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBrokerageAccountStatementUsingGet', function() {
        it('should call getBrokerageAccountStatementUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getBrokerageAccountStatementUsingGet call and complete the assertions
          /*
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var nucleusAccountId = "nucleusAccountId_example";
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var statementType = "statementType_example";

          instance.getBrokerageAccountStatementUsingGet(endDate, nucleusAccountId, startDate, statementType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageStatementVO);
            expect(data.nucleusAccountId).to.be.a('string');
            expect(data.nucleusAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.statements).to.be.a(Object);
            expect(data.statements).to.be();
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDocumentUsingGet', function() {
        it('should call getDocumentUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getDocumentUsingGet call and complete the assertions
          /*
          var nucleusDocumentId = "nucleusDocumentId_example";

          instance.getDocumentUsingGet(nucleusDocumentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageDocumentVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusDocumentId).to.be.a('string');
            expect(data.nucleusDocumentId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHoldingPerformanceUsingGet', function() {
        it('should call getHoldingPerformanceUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getHoldingPerformanceUsingGet call and complete the assertions
          /*
          var nucleusPortfolioId = "nucleusPortfolioId_example";

          instance.getHoldingPerformanceUsingGet(nucleusPortfolioId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokeragePerformanceVO);
            expect(data.holdingsPerformance).to.be.a(Object);
            expect(data.holdingsPerformance).to.be();
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusPortfolioId).to.be.a('string');
            expect(data.nucleusPortfolioId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHoldingUsingGet', function() {
        it('should call getHoldingUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getHoldingUsingGet call and complete the assertions
          /*
          var nucleusPortfolioId = "nucleusPortfolioId_example";

          instance.getHoldingUsingGet(nucleusPortfolioId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageHoldingVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusHoldingsPosted).to.be.a(Object);
            expect(data.nucleusHoldingsPosted).to.be();
            expect(data.nucleusPortfolioId).to.be.a('string');
            expect(data.nucleusPortfolioId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderUsingGet', function() {
        it('should call getOrderUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderUsingGet call and complete the assertions
          /*
          var nucleusOrderId = "nucleusOrderId_example";

          instance.getOrderUsingGet(nucleusOrderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageOrderVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusOrderId).to.be.a('string');
            expect(data.nucleusOrderId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.orderStatusId).to.be.a('string');
            expect(data.orderStatusId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSecuritiesUsingGet', function() {
        it('should call getSecuritiesUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getSecuritiesUsingGet call and complete the assertions
          /*
          var vendorName = "vendorName_example";
          var opts = {};
          opts.getFundamentals = false;
          opts.nucleusSecurityId = "nucleusSecurityId_example";

          instance.getSecuritiesUsingGet(vendorName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageSecuritiesVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTransactionsUsingGet', function() {
        it('should call getTransactionsUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getTransactionsUsingGet call and complete the assertions
          /*
          var drivewealthResponse = new HydrogenIntegrationApi.GetTransactionsResponse();
          drivewealthResponse.transactions = [new HydrogenIntegrationApi.Transaction()];
          drivewealthResponse.transactions[0].accountAmount = 0.0;
          drivewealthResponse.transactions[0].accountBalance = 0.0;
          drivewealthResponse.transactions[0].accountType = "";
          drivewealthResponse.transactions[0].comment = "";
          drivewealthResponse.transactions[0].dividend = new HydrogenIntegrationApi.Dividend();
          drivewealthResponse.transactions[0].dividend.amountPerShare = 0.0;
          drivewealthResponse.transactions[0].dividend.taxCode = "";
          drivewealthResponse.transactions[0].dividend.type = "";
          drivewealthResponse.transactions[0].dividendTax = new HydrogenIntegrationApi.DividendTax();
          drivewealthResponse.transactions[0].dividendTax.rate = 0.0;
          drivewealthResponse.transactions[0].dividendTax.type = "";
          drivewealthResponse.transactions[0].dnb = false;
          drivewealthResponse.transactions[0].feeBase = 0.0;
          drivewealthResponse.transactions[0].feeExchange = 0.0;
          drivewealthResponse.transactions[0].feeSec = 0.0;
          drivewealthResponse.transactions[0].feeTaf = 0.0;
          drivewealthResponse.transactions[0].feeXtraShares = 0.0;
          drivewealthResponse.transactions[0].fillPx = 0.0;
          drivewealthResponse.transactions[0].fillQty = 0.0;
          drivewealthResponse.transactions[0].finTranId = "";
          drivewealthResponse.transactions[0].finTranTypeId = "";
          drivewealthResponse.transactions[0].instrument = new HydrogenIntegrationApi.Instrument();
          drivewealthResponse.transactions[0].instrument.id = """00000000-0000-0000-0000-000000000000";
          drivewealthResponse.transactions[0].instrument.name = "";
          drivewealthResponse.transactions[0].instrument.symbol = "";
          drivewealthResponse.transactions[0].mergerAcquisition = new HydrogenIntegrationApi.MergerAcquisition();
          drivewealthResponse.transactions[0].mergerAcquisition.acquiree = new HydrogenIntegrationApi.Acquiree();
          drivewealthResponse.transactions[0].mergerAcquisition.acquiree.id = "";
          drivewealthResponse.transactions[0].mergerAcquisition.acquiree.name = "";
          drivewealthResponse.transactions[0].mergerAcquisition.acquiree.symbol = "";
          drivewealthResponse.transactions[0].mergerAcquisition.acquirer = new HydrogenIntegrationApi.Acquirer();
          drivewealthResponse.transactions[0].mergerAcquisition.acquirer.id = "";
          drivewealthResponse.transactions[0].mergerAcquisition.acquirer.name = "";
          drivewealthResponse.transactions[0].mergerAcquisition.acquirer.symbol = "";
          drivewealthResponse.transactions[0].mergerAcquisition.type = "";
          drivewealthResponse.transactions[0].orderId = "";
          drivewealthResponse.transactions[0].positionDelta = 0.0;
          drivewealthResponse.transactions[0].systemAmount = 0.0;
          drivewealthResponse.transactions[0].tranWhen = new Date();
          var endDate = new Date("2013-10-20");
          var nucleusPortfolioId = "nucleusPortfolioId_example";
          var startDate = new Date("2013-10-20");

          instance.getTransactionsUsingGet(drivewealthResponse, endDate, nucleusPortfolioId, startDate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageTransactionVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusPortfolioId).to.be.a('string');
            expect(data.nucleusPortfolioId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusTransactionsPosted).to.be.a(Object);
            expect(data.nucleusTransactionsPosted).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBankLinkUsingPut1', function() {
        it('should call updateBankLinkUsingPut1 successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBankLinkUsingPut1 call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.updateBankLinkUsingPut1(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageBankLinkVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(Object);
            expect(data.vendorRequestData).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBrokerageClientUsingPut', function() {
        it('should call updateBrokerageClientUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBrokerageClientUsingPut call and complete the assertions
          /*
          var clientCO = new HydrogenIntegrationApi.BrokerageClientCO();
          clientCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          clientCO.nucleusDocumentIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.updateBrokerageClientUsingPut(clientCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BrokerageUpdateClientVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(Object);
            expect(data.vendorRequestData).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
