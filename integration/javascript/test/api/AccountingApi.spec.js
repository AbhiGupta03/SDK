/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.AccountingApi();
  });

  describe('(package)', function() {
    describe('AccountingApi', function() {
      describe('createOrUpdateCustomer', function() {
        it('should call createOrUpdateCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrUpdateCustomer call and complete the assertions
          /*
          var nucleusClientId = "nucleusClientId_example";

          instance.createOrUpdateCustomer(nucleusClientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AccountingFinalResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusCustomerRevenues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerRevenueResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.CustomerRevenue);
                      expect(data.body.accountingMethod).to.be.a('string');
                  expect(data.body.accountingMethod).to.be("cash");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body._date).to.be.a(Date);
                  expect(data.body._date).to.be(2020-03-18);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.revenue).to.be.a('number');
                  expect(data.body.revenue).to.be(10.0);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusCustomers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Customer);
                      {
                    let dataCtr = data.body.address;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.CustomerAddress);
                      expect(data.addressLine1).to.be.a('string');
                      expect(data.addressLine1).to.be("Apt 404B");
                      expect(data.addressLine2).to.be.a('string');
                      expect(data.addressLine2).to.be("Example Street");
                      expect(data.city).to.be.a('string');
                      expect(data.city).to.be("New York");
                      expect(data.country).to.be.a('string');
                      expect(data.country).to.be("US");
                      expect(data.postalcode).to.be.a('string');
                      expect(data.postalcode).to.be("10001");
                      expect(data.state).to.be.a('string');
                      expect(data.state).to.be("CA");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("Home");
      
                            }
                  }
                  expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body.companyName).to.be.a('string');
                  expect(data.body.companyName).to.be("hydrogen");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("zgzIeci1iCzGYuqwNiFM");
                  expect(data.body.firstName).to.be.a('string');
                  expect(data.body.firstName).to.be("firstname");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.identificationNumber).to.be.a('string');
                  expect(data.body.identificationNumber).to.be("vAh1e9nuzp5NHmM6derx");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.lastName).to.be.a('string');
                  expect(data.body.lastName).to.be("lastName");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("Completed");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.nucleusFinancialStatement).to.be.a(HydrogenIntegrationApi.AccountingStatsResponseVO);
                  expect(data.nucleusFinancialStatement.body).to.be.a(HydrogenIntegrationApi.FinancialStatement);
                    expect(data.nucleusFinancialStatement.body.accountingMethod).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.accountingMethod).to.be("cash");
                expect(data.nucleusFinancialStatement.body.clientId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusFinancialStatement.body.createDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.createDate).to.be(new Date());
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be("USD");
                expect(data.nucleusFinancialStatement.body.id).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.nucleusFinancialStatement.body.periodLength).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodLength).to.be("annual");
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be(3);
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be(1);
                expect(data.nucleusFinancialStatement.body.periodType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodType).to.be("calendar");
                expect(data.nucleusFinancialStatement.body.periodYear).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodYear).to.be(2020);
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be("");
                expect(data.nucleusFinancialStatement.body.statementDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.statementDate).to.be(2018-01-09'T'12:00:00);
                expect(data.nucleusFinancialStatement.body.statementType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.statementType).to.be("balance_sheet");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.stats;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenIntegrationApi.Stat);
                    expect(data.statName).to.be.a('string');
                    expect(data.statName).to.be("total_expenses");
                    expect(data.statValue).to.be.a('number');
                    expect(data.statValue).to.be(23.9);
    
                          }
                }
                expect(data.nucleusFinancialStatement.body.updateDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.updateDate).to.be(new Date());
              expect(data.nucleusFinancialStatement.statusCode).to.be.a('number');
              expect(data.nucleusFinancialStatement.statusCode).to.be(0);
            {
              let dataCtr = data.nucleusInvoicePayments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoicePaymentResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.InvoicePayment);
                      expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceId).to.be.a('string');
                  expect(data.body.invoiceId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.paymentAmount).to.be.a('number');
                  expect(data.body.paymentAmount).to.be(100.0);
                  expect(data.body.paymentDate).to.be.a(Date);
                  expect(data.body.paymentDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoiceResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Invoice);
                      expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("5cc48294-5f28-41f2-8eb4-898e83932327");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.department).to.be.a('string');
                  expect(data.body.department).to.be("invoice department");
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("invoice description");
                  expect(data.body.documentId).to.be.a('string');
                  expect(data.body.documentId).to.be("ffec4069-f3bd-46f0-bf62-c7c77b400e37");
                  expect(data.body.dueDate).to.be.a(Date);
                  expect(data.body.dueDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceDate).to.be.a(Date);
                  expect(data.body.invoiceDate).to.be(2020-03-18);
                  expect(data.body.invoiceName).to.be.a('string');
                  expect(data.body.invoiceName).to.be("Uber invoice");
                  expect(data.body.invoiceNumber).to.be.a('string');
                  expect(data.body.invoiceNumber).to.be("2334889");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  {
                    let dataCtr = data.body.lineItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.LineItems);
                      expect(data.amount).to.be.a('number');
                      expect(data.amount).to.be(23.9);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("USD");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("description");
                      expect(data.lineItemId).to.be.a('string');
                      expect(data.lineItemId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(23.9);
                      expect(data.rate).to.be.a('number');
                      expect(data.rate).to.be(23.9);
                      expect(data.subtotal).to.be.a('number');
                      expect(data.subtotal).to.be(2345.0);
                      expect(data.tax).to.be.a('number');
                      expect(data.tax).to.be(2345.0);
      
                            }
                  }
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.paymentInstructions).to.be.a('string');
                  expect(data.body.paymentInstructions).to.be("payment instructions");
                  expect(data.body.paymentTerms).to.be.a('string');
                  expect(data.body.paymentTerms).to.be("payment terms");
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("2020-03-18T18:17:23.579+0000");
                  expect(data.body.totalAmount).to.be.a('number');
                  expect(data.body.totalAmount).to.be(12.0);
                  expect(data.body.totalDiscount).to.be.a('number');
                  expect(data.body.totalDiscount).to.be(10000.0);
                  expect(data.body.totalDue).to.be.a('number');
                  expect(data.body.totalDue).to.be(10000.0);
                  expect(data.body.totalSubtotal).to.be.a('number');
                  expect(data.body.totalSubtotal).to.be(10000.0);
                  expect(data.body.totalTax).to.be.a('number');
                  expect(data.body.totalTax).to.be(10000.0);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrUpdateCustomerRevenue', function() {
        it('should call createOrUpdateCustomerRevenue successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrUpdateCustomerRevenue call and complete the assertions
          /*
          var nucleusCustomerId = "nucleusCustomerId_example";
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var opts = {};
          opts.accountingMethod = "accrual";
          opts.endDate = new Date("null");

          instance.createOrUpdateCustomerRevenue(nucleusCustomerId, startDate, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AccountingFinalResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusCustomerRevenues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerRevenueResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.CustomerRevenue);
                      expect(data.body.accountingMethod).to.be.a('string');
                  expect(data.body.accountingMethod).to.be("cash");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body._date).to.be.a(Date);
                  expect(data.body._date).to.be(2020-03-18);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.revenue).to.be.a('number');
                  expect(data.body.revenue).to.be(10.0);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusCustomers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Customer);
                      {
                    let dataCtr = data.body.address;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.CustomerAddress);
                      expect(data.addressLine1).to.be.a('string');
                      expect(data.addressLine1).to.be("Apt 404B");
                      expect(data.addressLine2).to.be.a('string');
                      expect(data.addressLine2).to.be("Example Street");
                      expect(data.city).to.be.a('string');
                      expect(data.city).to.be("New York");
                      expect(data.country).to.be.a('string');
                      expect(data.country).to.be("US");
                      expect(data.postalcode).to.be.a('string');
                      expect(data.postalcode).to.be("10001");
                      expect(data.state).to.be.a('string');
                      expect(data.state).to.be("CA");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("Home");
      
                            }
                  }
                  expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body.companyName).to.be.a('string');
                  expect(data.body.companyName).to.be("hydrogen");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("zgzIeci1iCzGYuqwNiFM");
                  expect(data.body.firstName).to.be.a('string');
                  expect(data.body.firstName).to.be("firstname");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.identificationNumber).to.be.a('string');
                  expect(data.body.identificationNumber).to.be("vAh1e9nuzp5NHmM6derx");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.lastName).to.be.a('string');
                  expect(data.body.lastName).to.be("lastName");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("Completed");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.nucleusFinancialStatement).to.be.a(HydrogenIntegrationApi.AccountingStatsResponseVO);
                  expect(data.nucleusFinancialStatement.body).to.be.a(HydrogenIntegrationApi.FinancialStatement);
                    expect(data.nucleusFinancialStatement.body.accountingMethod).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.accountingMethod).to.be("cash");
                expect(data.nucleusFinancialStatement.body.clientId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusFinancialStatement.body.createDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.createDate).to.be(new Date());
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be("USD");
                expect(data.nucleusFinancialStatement.body.id).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.nucleusFinancialStatement.body.periodLength).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodLength).to.be("annual");
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be(3);
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be(1);
                expect(data.nucleusFinancialStatement.body.periodType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodType).to.be("calendar");
                expect(data.nucleusFinancialStatement.body.periodYear).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodYear).to.be(2020);
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be("");
                expect(data.nucleusFinancialStatement.body.statementDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.statementDate).to.be(2018-01-09'T'12:00:00);
                expect(data.nucleusFinancialStatement.body.statementType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.statementType).to.be("balance_sheet");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.stats;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenIntegrationApi.Stat);
                    expect(data.statName).to.be.a('string');
                    expect(data.statName).to.be("total_expenses");
                    expect(data.statValue).to.be.a('number');
                    expect(data.statValue).to.be(23.9);
    
                          }
                }
                expect(data.nucleusFinancialStatement.body.updateDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.updateDate).to.be(new Date());
              expect(data.nucleusFinancialStatement.statusCode).to.be.a('number');
              expect(data.nucleusFinancialStatement.statusCode).to.be(0);
            {
              let dataCtr = data.nucleusInvoicePayments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoicePaymentResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.InvoicePayment);
                      expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceId).to.be.a('string');
                  expect(data.body.invoiceId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.paymentAmount).to.be.a('number');
                  expect(data.body.paymentAmount).to.be(100.0);
                  expect(data.body.paymentDate).to.be.a(Date);
                  expect(data.body.paymentDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoiceResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Invoice);
                      expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("5cc48294-5f28-41f2-8eb4-898e83932327");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.department).to.be.a('string');
                  expect(data.body.department).to.be("invoice department");
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("invoice description");
                  expect(data.body.documentId).to.be.a('string');
                  expect(data.body.documentId).to.be("ffec4069-f3bd-46f0-bf62-c7c77b400e37");
                  expect(data.body.dueDate).to.be.a(Date);
                  expect(data.body.dueDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceDate).to.be.a(Date);
                  expect(data.body.invoiceDate).to.be(2020-03-18);
                  expect(data.body.invoiceName).to.be.a('string');
                  expect(data.body.invoiceName).to.be("Uber invoice");
                  expect(data.body.invoiceNumber).to.be.a('string');
                  expect(data.body.invoiceNumber).to.be("2334889");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  {
                    let dataCtr = data.body.lineItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.LineItems);
                      expect(data.amount).to.be.a('number');
                      expect(data.amount).to.be(23.9);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("USD");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("description");
                      expect(data.lineItemId).to.be.a('string');
                      expect(data.lineItemId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(23.9);
                      expect(data.rate).to.be.a('number');
                      expect(data.rate).to.be(23.9);
                      expect(data.subtotal).to.be.a('number');
                      expect(data.subtotal).to.be(2345.0);
                      expect(data.tax).to.be.a('number');
                      expect(data.tax).to.be(2345.0);
      
                            }
                  }
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.paymentInstructions).to.be.a('string');
                  expect(data.body.paymentInstructions).to.be("payment instructions");
                  expect(data.body.paymentTerms).to.be.a('string');
                  expect(data.body.paymentTerms).to.be("payment terms");
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("2020-03-18T18:17:23.579+0000");
                  expect(data.body.totalAmount).to.be.a('number');
                  expect(data.body.totalAmount).to.be(12.0);
                  expect(data.body.totalDiscount).to.be.a('number');
                  expect(data.body.totalDiscount).to.be(10000.0);
                  expect(data.body.totalDue).to.be.a('number');
                  expect(data.body.totalDue).to.be(10000.0);
                  expect(data.body.totalSubtotal).to.be.a('number');
                  expect(data.body.totalSubtotal).to.be(10000.0);
                  expect(data.body.totalTax).to.be.a('number');
                  expect(data.body.totalTax).to.be(10000.0);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrUpdateInvoicePayment', function() {
        it('should call createOrUpdateInvoicePayment successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrUpdateInvoicePayment call and complete the assertions
          /*
          var nucleusInvoiceId = "nucleusInvoiceId_example";

          instance.createOrUpdateInvoicePayment(nucleusInvoiceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AccountingFinalResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusCustomerRevenues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerRevenueResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.CustomerRevenue);
                      expect(data.body.accountingMethod).to.be.a('string');
                  expect(data.body.accountingMethod).to.be("cash");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body._date).to.be.a(Date);
                  expect(data.body._date).to.be(2020-03-18);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.revenue).to.be.a('number');
                  expect(data.body.revenue).to.be(10.0);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusCustomers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Customer);
                      {
                    let dataCtr = data.body.address;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.CustomerAddress);
                      expect(data.addressLine1).to.be.a('string');
                      expect(data.addressLine1).to.be("Apt 404B");
                      expect(data.addressLine2).to.be.a('string');
                      expect(data.addressLine2).to.be("Example Street");
                      expect(data.city).to.be.a('string');
                      expect(data.city).to.be("New York");
                      expect(data.country).to.be.a('string');
                      expect(data.country).to.be("US");
                      expect(data.postalcode).to.be.a('string');
                      expect(data.postalcode).to.be("10001");
                      expect(data.state).to.be.a('string');
                      expect(data.state).to.be("CA");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("Home");
      
                            }
                  }
                  expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body.companyName).to.be.a('string');
                  expect(data.body.companyName).to.be("hydrogen");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("zgzIeci1iCzGYuqwNiFM");
                  expect(data.body.firstName).to.be.a('string');
                  expect(data.body.firstName).to.be("firstname");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.identificationNumber).to.be.a('string');
                  expect(data.body.identificationNumber).to.be("vAh1e9nuzp5NHmM6derx");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.lastName).to.be.a('string');
                  expect(data.body.lastName).to.be("lastName");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("Completed");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.nucleusFinancialStatement).to.be.a(HydrogenIntegrationApi.AccountingStatsResponseVO);
                  expect(data.nucleusFinancialStatement.body).to.be.a(HydrogenIntegrationApi.FinancialStatement);
                    expect(data.nucleusFinancialStatement.body.accountingMethod).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.accountingMethod).to.be("cash");
                expect(data.nucleusFinancialStatement.body.clientId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusFinancialStatement.body.createDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.createDate).to.be(new Date());
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be("USD");
                expect(data.nucleusFinancialStatement.body.id).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.nucleusFinancialStatement.body.periodLength).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodLength).to.be("annual");
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be(3);
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be(1);
                expect(data.nucleusFinancialStatement.body.periodType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodType).to.be("calendar");
                expect(data.nucleusFinancialStatement.body.periodYear).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodYear).to.be(2020);
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be("");
                expect(data.nucleusFinancialStatement.body.statementDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.statementDate).to.be(2018-01-09'T'12:00:00);
                expect(data.nucleusFinancialStatement.body.statementType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.statementType).to.be("balance_sheet");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.stats;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenIntegrationApi.Stat);
                    expect(data.statName).to.be.a('string');
                    expect(data.statName).to.be("total_expenses");
                    expect(data.statValue).to.be.a('number');
                    expect(data.statValue).to.be(23.9);
    
                          }
                }
                expect(data.nucleusFinancialStatement.body.updateDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.updateDate).to.be(new Date());
              expect(data.nucleusFinancialStatement.statusCode).to.be.a('number');
              expect(data.nucleusFinancialStatement.statusCode).to.be(0);
            {
              let dataCtr = data.nucleusInvoicePayments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoicePaymentResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.InvoicePayment);
                      expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceId).to.be.a('string');
                  expect(data.body.invoiceId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.paymentAmount).to.be.a('number');
                  expect(data.body.paymentAmount).to.be(100.0);
                  expect(data.body.paymentDate).to.be.a(Date);
                  expect(data.body.paymentDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoiceResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Invoice);
                      expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("5cc48294-5f28-41f2-8eb4-898e83932327");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.department).to.be.a('string');
                  expect(data.body.department).to.be("invoice department");
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("invoice description");
                  expect(data.body.documentId).to.be.a('string');
                  expect(data.body.documentId).to.be("ffec4069-f3bd-46f0-bf62-c7c77b400e37");
                  expect(data.body.dueDate).to.be.a(Date);
                  expect(data.body.dueDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceDate).to.be.a(Date);
                  expect(data.body.invoiceDate).to.be(2020-03-18);
                  expect(data.body.invoiceName).to.be.a('string');
                  expect(data.body.invoiceName).to.be("Uber invoice");
                  expect(data.body.invoiceNumber).to.be.a('string');
                  expect(data.body.invoiceNumber).to.be("2334889");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  {
                    let dataCtr = data.body.lineItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.LineItems);
                      expect(data.amount).to.be.a('number');
                      expect(data.amount).to.be(23.9);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("USD");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("description");
                      expect(data.lineItemId).to.be.a('string');
                      expect(data.lineItemId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(23.9);
                      expect(data.rate).to.be.a('number');
                      expect(data.rate).to.be(23.9);
                      expect(data.subtotal).to.be.a('number');
                      expect(data.subtotal).to.be(2345.0);
                      expect(data.tax).to.be.a('number');
                      expect(data.tax).to.be(2345.0);
      
                            }
                  }
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.paymentInstructions).to.be.a('string');
                  expect(data.body.paymentInstructions).to.be("payment instructions");
                  expect(data.body.paymentTerms).to.be.a('string');
                  expect(data.body.paymentTerms).to.be("payment terms");
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("2020-03-18T18:17:23.579+0000");
                  expect(data.body.totalAmount).to.be.a('number');
                  expect(data.body.totalAmount).to.be(12.0);
                  expect(data.body.totalDiscount).to.be.a('number');
                  expect(data.body.totalDiscount).to.be(10000.0);
                  expect(data.body.totalDue).to.be.a('number');
                  expect(data.body.totalDue).to.be(10000.0);
                  expect(data.body.totalSubtotal).to.be.a('number');
                  expect(data.body.totalSubtotal).to.be(10000.0);
                  expect(data.body.totalTax).to.be.a('number');
                  expect(data.body.totalTax).to.be(10000.0);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrUpdateInvoices', function() {
        it('should call createOrUpdateInvoices successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrUpdateInvoices call and complete the assertions
          /*
          var nucleusCustomerId = "nucleusCustomerId_example";
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var opts = {};
          opts.endDate = new Date("null");

          instance.createOrUpdateInvoices(nucleusCustomerId, startDate, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AccountingFinalResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusCustomerRevenues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerRevenueResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.CustomerRevenue);
                      expect(data.body.accountingMethod).to.be.a('string');
                  expect(data.body.accountingMethod).to.be("cash");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body._date).to.be.a(Date);
                  expect(data.body._date).to.be(2020-03-18);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.revenue).to.be.a('number');
                  expect(data.body.revenue).to.be(10.0);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusCustomers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Customer);
                      {
                    let dataCtr = data.body.address;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.CustomerAddress);
                      expect(data.addressLine1).to.be.a('string');
                      expect(data.addressLine1).to.be("Apt 404B");
                      expect(data.addressLine2).to.be.a('string');
                      expect(data.addressLine2).to.be("Example Street");
                      expect(data.city).to.be.a('string');
                      expect(data.city).to.be("New York");
                      expect(data.country).to.be.a('string');
                      expect(data.country).to.be("US");
                      expect(data.postalcode).to.be.a('string');
                      expect(data.postalcode).to.be("10001");
                      expect(data.state).to.be.a('string');
                      expect(data.state).to.be("CA");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("Home");
      
                            }
                  }
                  expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body.companyName).to.be.a('string');
                  expect(data.body.companyName).to.be("hydrogen");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("zgzIeci1iCzGYuqwNiFM");
                  expect(data.body.firstName).to.be.a('string');
                  expect(data.body.firstName).to.be("firstname");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.identificationNumber).to.be.a('string');
                  expect(data.body.identificationNumber).to.be("vAh1e9nuzp5NHmM6derx");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.lastName).to.be.a('string');
                  expect(data.body.lastName).to.be("lastName");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("Completed");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.nucleusFinancialStatement).to.be.a(HydrogenIntegrationApi.AccountingStatsResponseVO);
                  expect(data.nucleusFinancialStatement.body).to.be.a(HydrogenIntegrationApi.FinancialStatement);
                    expect(data.nucleusFinancialStatement.body.accountingMethod).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.accountingMethod).to.be("cash");
                expect(data.nucleusFinancialStatement.body.clientId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusFinancialStatement.body.createDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.createDate).to.be(new Date());
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be("USD");
                expect(data.nucleusFinancialStatement.body.id).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.nucleusFinancialStatement.body.periodLength).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodLength).to.be("annual");
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be(3);
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be(1);
                expect(data.nucleusFinancialStatement.body.periodType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodType).to.be("calendar");
                expect(data.nucleusFinancialStatement.body.periodYear).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodYear).to.be(2020);
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be("");
                expect(data.nucleusFinancialStatement.body.statementDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.statementDate).to.be(2018-01-09'T'12:00:00);
                expect(data.nucleusFinancialStatement.body.statementType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.statementType).to.be("balance_sheet");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.stats;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenIntegrationApi.Stat);
                    expect(data.statName).to.be.a('string');
                    expect(data.statName).to.be("total_expenses");
                    expect(data.statValue).to.be.a('number');
                    expect(data.statValue).to.be(23.9);
    
                          }
                }
                expect(data.nucleusFinancialStatement.body.updateDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.updateDate).to.be(new Date());
              expect(data.nucleusFinancialStatement.statusCode).to.be.a('number');
              expect(data.nucleusFinancialStatement.statusCode).to.be(0);
            {
              let dataCtr = data.nucleusInvoicePayments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoicePaymentResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.InvoicePayment);
                      expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceId).to.be.a('string');
                  expect(data.body.invoiceId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.paymentAmount).to.be.a('number');
                  expect(data.body.paymentAmount).to.be(100.0);
                  expect(data.body.paymentDate).to.be.a(Date);
                  expect(data.body.paymentDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoiceResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Invoice);
                      expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("5cc48294-5f28-41f2-8eb4-898e83932327");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.department).to.be.a('string');
                  expect(data.body.department).to.be("invoice department");
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("invoice description");
                  expect(data.body.documentId).to.be.a('string');
                  expect(data.body.documentId).to.be("ffec4069-f3bd-46f0-bf62-c7c77b400e37");
                  expect(data.body.dueDate).to.be.a(Date);
                  expect(data.body.dueDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceDate).to.be.a(Date);
                  expect(data.body.invoiceDate).to.be(2020-03-18);
                  expect(data.body.invoiceName).to.be.a('string');
                  expect(data.body.invoiceName).to.be("Uber invoice");
                  expect(data.body.invoiceNumber).to.be.a('string');
                  expect(data.body.invoiceNumber).to.be("2334889");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  {
                    let dataCtr = data.body.lineItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.LineItems);
                      expect(data.amount).to.be.a('number');
                      expect(data.amount).to.be(23.9);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("USD");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("description");
                      expect(data.lineItemId).to.be.a('string');
                      expect(data.lineItemId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(23.9);
                      expect(data.rate).to.be.a('number');
                      expect(data.rate).to.be(23.9);
                      expect(data.subtotal).to.be.a('number');
                      expect(data.subtotal).to.be(2345.0);
                      expect(data.tax).to.be.a('number');
                      expect(data.tax).to.be(2345.0);
      
                            }
                  }
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.paymentInstructions).to.be.a('string');
                  expect(data.body.paymentInstructions).to.be("payment instructions");
                  expect(data.body.paymentTerms).to.be.a('string');
                  expect(data.body.paymentTerms).to.be("payment terms");
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("2020-03-18T18:17:23.579+0000");
                  expect(data.body.totalAmount).to.be.a('number');
                  expect(data.body.totalAmount).to.be(12.0);
                  expect(data.body.totalDiscount).to.be.a('number');
                  expect(data.body.totalDiscount).to.be(10000.0);
                  expect(data.body.totalDue).to.be.a('number');
                  expect(data.body.totalDue).to.be(10000.0);
                  expect(data.body.totalSubtotal).to.be.a('number');
                  expect(data.body.totalSubtotal).to.be(10000.0);
                  expect(data.body.totalTax).to.be.a('number');
                  expect(data.body.totalTax).to.be(10000.0);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAccountingVendorAccessConfigIsActiveById', function() {
        it('should call deleteAccountingVendorAccessConfigIsActiveById successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAccountingVendorAccessConfigIsActiveById call
          /*
          var id = "id_example";

          instance.deleteAccountingVendorAccessConfigIsActiveById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAccountingStats', function() {
        it('should call getAccountingStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getAccountingStats call and complete the assertions
          /*
          var opts = {};
          opts.accountingMethod = "accrual";
          opts.nucleusClientId = "nucleusClientId_example";
          opts.periodLength = "periodLength_example";
          opts.periodMonth = 56;
          opts.periodQuarter = 56;
          opts.periodType = "periodType_example";
          opts.periodYear = 56;
          opts.report = "report_example";
          opts.statementDate = new Date("2013-10-20T19:20:30+01:00");

          instance.getAccountingStats(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AccountingFinalResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusCustomerRevenues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerRevenueResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.CustomerRevenue);
                      expect(data.body.accountingMethod).to.be.a('string');
                  expect(data.body.accountingMethod).to.be("cash");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body._date).to.be.a(Date);
                  expect(data.body._date).to.be(2020-03-18);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.revenue).to.be.a('number');
                  expect(data.body.revenue).to.be(10.0);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusCustomers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Customer);
                      {
                    let dataCtr = data.body.address;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.CustomerAddress);
                      expect(data.addressLine1).to.be.a('string');
                      expect(data.addressLine1).to.be("Apt 404B");
                      expect(data.addressLine2).to.be.a('string');
                      expect(data.addressLine2).to.be("Example Street");
                      expect(data.city).to.be.a('string');
                      expect(data.city).to.be("New York");
                      expect(data.country).to.be.a('string');
                      expect(data.country).to.be("US");
                      expect(data.postalcode).to.be.a('string');
                      expect(data.postalcode).to.be("10001");
                      expect(data.state).to.be.a('string');
                      expect(data.state).to.be("CA");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("Home");
      
                            }
                  }
                  expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body.companyName).to.be.a('string');
                  expect(data.body.companyName).to.be("hydrogen");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("zgzIeci1iCzGYuqwNiFM");
                  expect(data.body.firstName).to.be.a('string');
                  expect(data.body.firstName).to.be("firstname");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.identificationNumber).to.be.a('string');
                  expect(data.body.identificationNumber).to.be("vAh1e9nuzp5NHmM6derx");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.lastName).to.be.a('string');
                  expect(data.body.lastName).to.be("lastName");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("Completed");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.nucleusFinancialStatement).to.be.a(HydrogenIntegrationApi.AccountingStatsResponseVO);
                  expect(data.nucleusFinancialStatement.body).to.be.a(HydrogenIntegrationApi.FinancialStatement);
                    expect(data.nucleusFinancialStatement.body.accountingMethod).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.accountingMethod).to.be("cash");
                expect(data.nucleusFinancialStatement.body.clientId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusFinancialStatement.body.createDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.createDate).to.be(new Date());
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be("USD");
                expect(data.nucleusFinancialStatement.body.id).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.nucleusFinancialStatement.body.periodLength).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodLength).to.be("annual");
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be(3);
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be(1);
                expect(data.nucleusFinancialStatement.body.periodType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodType).to.be("calendar");
                expect(data.nucleusFinancialStatement.body.periodYear).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodYear).to.be(2020);
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be("");
                expect(data.nucleusFinancialStatement.body.statementDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.statementDate).to.be(2018-01-09'T'12:00:00);
                expect(data.nucleusFinancialStatement.body.statementType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.statementType).to.be("balance_sheet");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.stats;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenIntegrationApi.Stat);
                    expect(data.statName).to.be.a('string');
                    expect(data.statName).to.be("total_expenses");
                    expect(data.statValue).to.be.a('number');
                    expect(data.statValue).to.be(23.9);
    
                          }
                }
                expect(data.nucleusFinancialStatement.body.updateDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.updateDate).to.be(new Date());
              expect(data.nucleusFinancialStatement.statusCode).to.be.a('number');
              expect(data.nucleusFinancialStatement.statusCode).to.be(0);
            {
              let dataCtr = data.nucleusInvoicePayments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoicePaymentResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.InvoicePayment);
                      expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceId).to.be.a('string');
                  expect(data.body.invoiceId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.paymentAmount).to.be.a('number');
                  expect(data.body.paymentAmount).to.be(100.0);
                  expect(data.body.paymentDate).to.be.a(Date);
                  expect(data.body.paymentDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoiceResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Invoice);
                      expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("5cc48294-5f28-41f2-8eb4-898e83932327");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.department).to.be.a('string');
                  expect(data.body.department).to.be("invoice department");
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("invoice description");
                  expect(data.body.documentId).to.be.a('string');
                  expect(data.body.documentId).to.be("ffec4069-f3bd-46f0-bf62-c7c77b400e37");
                  expect(data.body.dueDate).to.be.a(Date);
                  expect(data.body.dueDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceDate).to.be.a(Date);
                  expect(data.body.invoiceDate).to.be(2020-03-18);
                  expect(data.body.invoiceName).to.be.a('string');
                  expect(data.body.invoiceName).to.be("Uber invoice");
                  expect(data.body.invoiceNumber).to.be.a('string');
                  expect(data.body.invoiceNumber).to.be("2334889");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  {
                    let dataCtr = data.body.lineItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.LineItems);
                      expect(data.amount).to.be.a('number');
                      expect(data.amount).to.be(23.9);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("USD");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("description");
                      expect(data.lineItemId).to.be.a('string');
                      expect(data.lineItemId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(23.9);
                      expect(data.rate).to.be.a('number');
                      expect(data.rate).to.be(23.9);
                      expect(data.subtotal).to.be.a('number');
                      expect(data.subtotal).to.be(2345.0);
                      expect(data.tax).to.be.a('number');
                      expect(data.tax).to.be(2345.0);
      
                            }
                  }
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.paymentInstructions).to.be.a('string');
                  expect(data.body.paymentInstructions).to.be("payment instructions");
                  expect(data.body.paymentTerms).to.be.a('string');
                  expect(data.body.paymentTerms).to.be("payment terms");
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("2020-03-18T18:17:23.579+0000");
                  expect(data.body.totalAmount).to.be.a('number');
                  expect(data.body.totalAmount).to.be(12.0);
                  expect(data.body.totalDiscount).to.be.a('number');
                  expect(data.body.totalDiscount).to.be(10000.0);
                  expect(data.body.totalDue).to.be.a('number');
                  expect(data.body.totalDue).to.be(10000.0);
                  expect(data.body.totalSubtotal).to.be.a('number');
                  expect(data.body.totalSubtotal).to.be(10000.0);
                  expect(data.body.totalTax).to.be.a('number');
                  expect(data.body.totalTax).to.be(10000.0);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAccountingVendorInfoUsingClientId', function() {
        it('should call getAccountingVendorInfoUsingClientId successfully', function(done) {
          // TODO: uncomment, update parameter values for getAccountingVendorInfoUsingClientId call and complete the assertions
          /*
          var nucleusClientId = "nucleusClientId_example";

          instance.getAccountingVendorInfoUsingClientId(nucleusClientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.VendorAccessConfigVO);
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("5236b981-d632-4e4c-b2b9-c6f1ccc74b72");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("Xero");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAccountingVendorAccessConfigIsActiveById', function() {
        it('should call updateAccountingVendorAccessConfigIsActiveById successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAccountingVendorAccessConfigIsActiveById call and complete the assertions
          /*
          var id = "id_example";
          var isActive = true;

          instance.updateAccountingVendorAccessConfigIsActiveById(id, isActive, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.VendorAccessConfigVO);
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("5236b981-d632-4e4c-b2b9-c6f1ccc74b72");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("Xero");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCustomer', function() {
        it('should call updateCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCustomer call and complete the assertions
          /*
          var nucleusCustomerId = "nucleusCustomerId_example";

          instance.updateCustomer(nucleusCustomerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AccountingFinalResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusCustomerRevenues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerRevenueResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.CustomerRevenue);
                      expect(data.body.accountingMethod).to.be.a('string');
                  expect(data.body.accountingMethod).to.be("cash");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body._date).to.be.a(Date);
                  expect(data.body._date).to.be(2020-03-18);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.revenue).to.be.a('number');
                  expect(data.body.revenue).to.be(10.0);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusCustomers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Customer);
                      {
                    let dataCtr = data.body.address;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.CustomerAddress);
                      expect(data.addressLine1).to.be.a('string');
                      expect(data.addressLine1).to.be("Apt 404B");
                      expect(data.addressLine2).to.be.a('string');
                      expect(data.addressLine2).to.be("Example Street");
                      expect(data.city).to.be.a('string');
                      expect(data.city).to.be("New York");
                      expect(data.country).to.be.a('string');
                      expect(data.country).to.be("US");
                      expect(data.postalcode).to.be.a('string');
                      expect(data.postalcode).to.be("10001");
                      expect(data.state).to.be.a('string');
                      expect(data.state).to.be("CA");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("Home");
      
                            }
                  }
                  expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body.companyName).to.be.a('string');
                  expect(data.body.companyName).to.be("hydrogen");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("zgzIeci1iCzGYuqwNiFM");
                  expect(data.body.firstName).to.be.a('string');
                  expect(data.body.firstName).to.be("firstname");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.identificationNumber).to.be.a('string');
                  expect(data.body.identificationNumber).to.be("vAh1e9nuzp5NHmM6derx");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.lastName).to.be.a('string');
                  expect(data.body.lastName).to.be("lastName");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("Completed");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.nucleusFinancialStatement).to.be.a(HydrogenIntegrationApi.AccountingStatsResponseVO);
                  expect(data.nucleusFinancialStatement.body).to.be.a(HydrogenIntegrationApi.FinancialStatement);
                    expect(data.nucleusFinancialStatement.body.accountingMethod).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.accountingMethod).to.be("cash");
                expect(data.nucleusFinancialStatement.body.clientId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusFinancialStatement.body.createDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.createDate).to.be(new Date());
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be("USD");
                expect(data.nucleusFinancialStatement.body.id).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.nucleusFinancialStatement.body.periodLength).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodLength).to.be("annual");
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be(3);
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be(1);
                expect(data.nucleusFinancialStatement.body.periodType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodType).to.be("calendar");
                expect(data.nucleusFinancialStatement.body.periodYear).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodYear).to.be(2020);
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be("");
                expect(data.nucleusFinancialStatement.body.statementDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.statementDate).to.be(2018-01-09'T'12:00:00);
                expect(data.nucleusFinancialStatement.body.statementType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.statementType).to.be("balance_sheet");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.stats;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenIntegrationApi.Stat);
                    expect(data.statName).to.be.a('string');
                    expect(data.statName).to.be("total_expenses");
                    expect(data.statValue).to.be.a('number');
                    expect(data.statValue).to.be(23.9);
    
                          }
                }
                expect(data.nucleusFinancialStatement.body.updateDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.updateDate).to.be(new Date());
              expect(data.nucleusFinancialStatement.statusCode).to.be.a('number');
              expect(data.nucleusFinancialStatement.statusCode).to.be(0);
            {
              let dataCtr = data.nucleusInvoicePayments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoicePaymentResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.InvoicePayment);
                      expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceId).to.be.a('string');
                  expect(data.body.invoiceId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.paymentAmount).to.be.a('number');
                  expect(data.body.paymentAmount).to.be(100.0);
                  expect(data.body.paymentDate).to.be.a(Date);
                  expect(data.body.paymentDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoiceResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Invoice);
                      expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("5cc48294-5f28-41f2-8eb4-898e83932327");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.department).to.be.a('string');
                  expect(data.body.department).to.be("invoice department");
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("invoice description");
                  expect(data.body.documentId).to.be.a('string');
                  expect(data.body.documentId).to.be("ffec4069-f3bd-46f0-bf62-c7c77b400e37");
                  expect(data.body.dueDate).to.be.a(Date);
                  expect(data.body.dueDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceDate).to.be.a(Date);
                  expect(data.body.invoiceDate).to.be(2020-03-18);
                  expect(data.body.invoiceName).to.be.a('string');
                  expect(data.body.invoiceName).to.be("Uber invoice");
                  expect(data.body.invoiceNumber).to.be.a('string');
                  expect(data.body.invoiceNumber).to.be("2334889");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  {
                    let dataCtr = data.body.lineItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.LineItems);
                      expect(data.amount).to.be.a('number');
                      expect(data.amount).to.be(23.9);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("USD");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("description");
                      expect(data.lineItemId).to.be.a('string');
                      expect(data.lineItemId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(23.9);
                      expect(data.rate).to.be.a('number');
                      expect(data.rate).to.be(23.9);
                      expect(data.subtotal).to.be.a('number');
                      expect(data.subtotal).to.be(2345.0);
                      expect(data.tax).to.be.a('number');
                      expect(data.tax).to.be(2345.0);
      
                            }
                  }
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.paymentInstructions).to.be.a('string');
                  expect(data.body.paymentInstructions).to.be("payment instructions");
                  expect(data.body.paymentTerms).to.be.a('string');
                  expect(data.body.paymentTerms).to.be("payment terms");
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("2020-03-18T18:17:23.579+0000");
                  expect(data.body.totalAmount).to.be.a('number');
                  expect(data.body.totalAmount).to.be(12.0);
                  expect(data.body.totalDiscount).to.be.a('number');
                  expect(data.body.totalDiscount).to.be(10000.0);
                  expect(data.body.totalDue).to.be.a('number');
                  expect(data.body.totalDue).to.be(10000.0);
                  expect(data.body.totalSubtotal).to.be.a('number');
                  expect(data.body.totalSubtotal).to.be(10000.0);
                  expect(data.body.totalTax).to.be.a('number');
                  expect(data.body.totalTax).to.be(10000.0);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateInvoice', function() {
        it('should call updateInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for updateInvoice call and complete the assertions
          /*
          var nucleusInvoiceId = "nucleusInvoiceId_example";

          instance.updateInvoice(nucleusInvoiceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AccountingFinalResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusCustomerRevenues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerRevenueResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.CustomerRevenue);
                      expect(data.body.accountingMethod).to.be.a('string');
                  expect(data.body.accountingMethod).to.be("cash");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body._date).to.be.a(Date);
                  expect(data.body._date).to.be(2020-03-18);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.revenue).to.be.a('number');
                  expect(data.body.revenue).to.be(10.0);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusCustomers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingCustomerResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Customer);
                      {
                    let dataCtr = data.body.address;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.CustomerAddress);
                      expect(data.addressLine1).to.be.a('string');
                      expect(data.addressLine1).to.be("Apt 404B");
                      expect(data.addressLine2).to.be.a('string');
                      expect(data.addressLine2).to.be("Example Street");
                      expect(data.city).to.be.a('string');
                      expect(data.city).to.be("New York");
                      expect(data.country).to.be.a('string');
                      expect(data.country).to.be("US");
                      expect(data.postalcode).to.be.a('string');
                      expect(data.postalcode).to.be("10001");
                      expect(data.state).to.be.a('string');
                      expect(data.state).to.be("CA");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("Home");
      
                            }
                  }
                  expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("50d76212-0fcd-4d36-8633-e4a52cbcb79f");
                  expect(data.body.companyName).to.be.a('string');
                  expect(data.body.companyName).to.be("hydrogen");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("zgzIeci1iCzGYuqwNiFM");
                  expect(data.body.firstName).to.be.a('string');
                  expect(data.body.firstName).to.be("firstname");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.identificationNumber).to.be.a('string');
                  expect(data.body.identificationNumber).to.be("vAh1e9nuzp5NHmM6derx");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.lastName).to.be.a('string');
                  expect(data.body.lastName).to.be("lastName");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("Completed");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.nucleusFinancialStatement).to.be.a(HydrogenIntegrationApi.AccountingStatsResponseVO);
                  expect(data.nucleusFinancialStatement.body).to.be.a(HydrogenIntegrationApi.FinancialStatement);
                    expect(data.nucleusFinancialStatement.body.accountingMethod).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.accountingMethod).to.be("cash");
                expect(data.nucleusFinancialStatement.body.clientId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusFinancialStatement.body.createDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.createDate).to.be(new Date());
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.currencyCode).to.be("USD");
                expect(data.nucleusFinancialStatement.body.id).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.nucleusFinancialStatement.body.periodLength).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodLength).to.be("annual");
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodMonth).to.be(3);
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodQuarter).to.be(1);
                expect(data.nucleusFinancialStatement.body.periodType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.periodType).to.be("calendar");
                expect(data.nucleusFinancialStatement.body.periodYear).to.be.a('number');
                expect(data.nucleusFinancialStatement.body.periodYear).to.be(2020);
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.secondaryId).to.be("");
                expect(data.nucleusFinancialStatement.body.statementDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.statementDate).to.be(2018-01-09'T'12:00:00);
                expect(data.nucleusFinancialStatement.body.statementType).to.be.a('string');
                expect(data.nucleusFinancialStatement.body.statementType).to.be("balance_sheet");
                {
                  let dataCtr = data.nucleusFinancialStatement.body.stats;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenIntegrationApi.Stat);
                    expect(data.statName).to.be.a('string');
                    expect(data.statName).to.be("total_expenses");
                    expect(data.statValue).to.be.a('number');
                    expect(data.statValue).to.be(23.9);
    
                          }
                }
                expect(data.nucleusFinancialStatement.body.updateDate).to.be.a(Date);
                expect(data.nucleusFinancialStatement.body.updateDate).to.be(new Date());
              expect(data.nucleusFinancialStatement.statusCode).to.be.a('number');
              expect(data.nucleusFinancialStatement.statusCode).to.be(0);
            {
              let dataCtr = data.nucleusInvoicePayments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoicePaymentResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.InvoicePayment);
                      expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceId).to.be.a('string');
                  expect(data.body.invoiceId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.paymentAmount).to.be.a('number');
                  expect(data.body.paymentAmount).to.be(100.0);
                  expect(data.body.paymentDate).to.be.a(Date);
                  expect(data.body.paymentDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AccountingInvoiceResponseVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.Invoice);
                      expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("5cc48294-5f28-41f2-8eb4-898e83932327");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.customerId).to.be.a('string');
                  expect(data.body.customerId).to.be("14566616-6846-4090-beae-5b1568b82370");
                  expect(data.body.department).to.be.a('string');
                  expect(data.body.department).to.be("invoice department");
                  expect(data.body.description).to.be.a('string');
                  expect(data.body.description).to.be("invoice description");
                  expect(data.body.documentId).to.be.a('string');
                  expect(data.body.documentId).to.be("ffec4069-f3bd-46f0-bf62-c7c77b400e37");
                  expect(data.body.dueDate).to.be.a(Date);
                  expect(data.body.dueDate).to.be(2020-03-18T18:17:23.579+0000);
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.invoiceDate).to.be.a(Date);
                  expect(data.body.invoiceDate).to.be(2020-03-18);
                  expect(data.body.invoiceName).to.be.a('string');
                  expect(data.body.invoiceName).to.be("Uber invoice");
                  expect(data.body.invoiceNumber).to.be.a('string');
                  expect(data.body.invoiceNumber).to.be("2334889");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  {
                    let dataCtr = data.body.lineItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HydrogenIntegrationApi.LineItems);
                      expect(data.amount).to.be.a('number');
                      expect(data.amount).to.be(23.9);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("USD");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("description");
                      expect(data.lineItemId).to.be.a('string');
                      expect(data.lineItemId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(23.9);
                      expect(data.rate).to.be.a('number');
                      expect(data.rate).to.be(23.9);
                      expect(data.subtotal).to.be.a('number');
                      expect(data.subtotal).to.be(2345.0);
                      expect(data.tax).to.be.a('number');
                      expect(data.tax).to.be(2345.0);
      
                            }
                  }
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.paymentInstructions).to.be.a('string');
                  expect(data.body.paymentInstructions).to.be("payment instructions");
                  expect(data.body.paymentTerms).to.be.a('string');
                  expect(data.body.paymentTerms).to.be("payment terms");
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("2020-03-18T18:17:23.579+0000");
                  expect(data.body.totalAmount).to.be.a('number');
                  expect(data.body.totalAmount).to.be(12.0);
                  expect(data.body.totalDiscount).to.be.a('number');
                  expect(data.body.totalDiscount).to.be(10000.0);
                  expect(data.body.totalDue).to.be.a('number');
                  expect(data.body.totalDue).to.be(10000.0);
                  expect(data.body.totalSubtotal).to.be.a('number');
                  expect(data.body.totalSubtotal).to.be(10000.0);
                  expect(data.body.totalTax).to.be.a('number');
                  expect(data.body.totalTax).to.be(10000.0);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
