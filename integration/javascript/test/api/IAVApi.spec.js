/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.IAVApi();
  });

  describe('(package)', function() {
    describe('IAVApi', function() {
      describe('createIAVUsingPost', function() {
        it('should call createIAVUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createIAVUsingPost call and complete the assertions
          /*
          var iavRequestCO = new HydrogenIntegrationApi.IavRequestCO();
          iavRequestCO.authToken = "";
          iavRequestCO.isCash = false;
          iavRequestCO.nucleusAccountId = """00000000-0000-0000-0000-000000000000";
          iavRequestCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          iavRequestCO.nucleusTransferFields = new HydrogenIntegrationApi.NucleusTransferFieldsCO();
          iavRequestCO.nucleusTransferFields.nucleusAccountTypeId = """00000000-0000-0000-0000-000000000000";
          iavRequestCO.nucleusTransferFields.nucleusTransferAllCash = false;
          iavRequestCO.product = "";
          iavRequestCO.vendorRequest = new HydrogenIntegrationApi.IavVendorRequestCO();
          iavRequestCO.vendorRequest.accessToken = "";
          iavRequestCO.vendorRequest.itemId = "";
          iavRequestCO.vendorRequest.memberId = "";

          instance.createIAVUsingPost(iavRequestCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.IavResponseVo);
            expect(data.aggregation).to.be.a(HydrogenIntegrationApi.IavAggregationResponseVo);
                  expect(data.aggregation.message).to.be.a('string');
              expect(data.aggregation.message).to.be("");
              expect(data.aggregation.response).to.be.a(Object);
              expect(data.aggregation.response).to.be();
            expect(data.bankLink).to.be.a(HydrogenIntegrationApi.IavBankLinkResponseVo);
                  expect(data.bankLink.message).to.be.a('string');
              expect(data.bankLink.message).to.be("");
              {
                let dataCtr = data.bankLink.response;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.BankLinkResponseInternalObjectVO);
                  expect(data.nucleusBankLink).to.be.a(HydrogenIntegrationApi.BankLink);
                        expect(data.nucleusBankLink.accountId).to.be.a('string');
                    expect(data.nucleusBankLink.accountId).to.be("1c28dade-8679-4df5-9b9d-c508d04fcb0c");
                    expect(data.nucleusBankLink.availableBalance).to.be.a('number');
                    expect(data.nucleusBankLink.availableBalance).to.be(1000.0);
                    expect(data.nucleusBankLink.balance).to.be.a('number');
                    expect(data.nucleusBankLink.balance).to.be(1000.12);
                    expect(data.nucleusBankLink.bankAccountHolder).to.be.a('string');
                    expect(data.nucleusBankLink.bankAccountHolder).to.be("XYZ");
                    expect(data.nucleusBankLink.bankAccountName).to.be.a('string');
                    expect(data.nucleusBankLink.bankAccountName).to.be("XYZ");
                    expect(data.nucleusBankLink.bankAccountNumber).to.be.a('string');
                    expect(data.nucleusBankLink.bankAccountNumber).to.be("566788991");
                    expect(data.nucleusBankLink.clientId).to.be.a('string');
                    expect(data.nucleusBankLink.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                    expect(data.nucleusBankLink.createDate).to.be.a(Date);
                    expect(data.nucleusBankLink.createDate).to.be(new Date());
                    expect(data.nucleusBankLink.currencyCode).to.be.a('string');
                    expect(data.nucleusBankLink.currencyCode).to.be("USD");
                    expect(data.nucleusBankLink.id).to.be.a('string');
                    expect(data.nucleusBankLink.id).to.be("""00000000-0000-0000-0000-000000000000");
                    expect(data.nucleusBankLink.isActive).to.be.a('boolean');
                    expect(data.nucleusBankLink.isActive).to.be(true);
                    expect(data.nucleusBankLink.isDefault).to.be.a('boolean');
                    expect(data.nucleusBankLink.isDefault).to.be(true);
                    expect(data.nucleusBankLink.isLinkVerified).to.be.a('boolean');
                    expect(data.nucleusBankLink.isLinkVerified).to.be(true);
                    expect(data.nucleusBankLink.linkVerifiedDate).to.be.a(Date);
                    expect(data.nucleusBankLink.linkVerifiedDate).to.be(2017-11-01);
                    expect(data.nucleusBankLink.mask).to.be.a('string');
                    expect(data.nucleusBankLink.mask).to.be("ABC");
                    {
                      let dataCtr = data.nucleusBankLink.metadata;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.nucleusBankLink.name).to.be.a('string');
                    expect(data.nucleusBankLink.name).to.be("xyz");
                    expect(data.nucleusBankLink.routing).to.be.a('string');
                    expect(data.nucleusBankLink.routing).to.be("091000022");
                    expect(data.nucleusBankLink.routingWire).to.be.a('string');
                    expect(data.nucleusBankLink.routingWire).to.be("routing_wire");
                    expect(data.nucleusBankLink.secondaryId).to.be.a('string');
                    expect(data.nucleusBankLink.secondaryId).to.be("");
                    expect(data.nucleusBankLink.type).to.be.a('string');
                    expect(data.nucleusBankLink.type).to.be("saving");
                    expect(data.nucleusBankLink.updateDate).to.be.a(Date);
                    expect(data.nucleusBankLink.updateDate).to.be(new Date());
                  expect(data.statusCode).to.be.a('number');
                  expect(data.statusCode).to.be(0);
  
                        }
              }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIAVUsingGet', function() {
        it('should call getIAVUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getIAVUsingGet call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.getIAVUsingGet(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.IavResponseVo);
            expect(data.aggregation).to.be.a(HydrogenIntegrationApi.IavAggregationResponseVo);
                  expect(data.aggregation.message).to.be.a('string');
              expect(data.aggregation.message).to.be("");
              expect(data.aggregation.response).to.be.a(Object);
              expect(data.aggregation.response).to.be();
            expect(data.bankLink).to.be.a(HydrogenIntegrationApi.IavBankLinkResponseVo);
                  expect(data.bankLink.message).to.be.a('string');
              expect(data.bankLink.message).to.be("");
              {
                let dataCtr = data.bankLink.response;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.BankLinkResponseInternalObjectVO);
                  expect(data.nucleusBankLink).to.be.a(HydrogenIntegrationApi.BankLink);
                        expect(data.nucleusBankLink.accountId).to.be.a('string');
                    expect(data.nucleusBankLink.accountId).to.be("1c28dade-8679-4df5-9b9d-c508d04fcb0c");
                    expect(data.nucleusBankLink.availableBalance).to.be.a('number');
                    expect(data.nucleusBankLink.availableBalance).to.be(1000.0);
                    expect(data.nucleusBankLink.balance).to.be.a('number');
                    expect(data.nucleusBankLink.balance).to.be(1000.12);
                    expect(data.nucleusBankLink.bankAccountHolder).to.be.a('string');
                    expect(data.nucleusBankLink.bankAccountHolder).to.be("XYZ");
                    expect(data.nucleusBankLink.bankAccountName).to.be.a('string');
                    expect(data.nucleusBankLink.bankAccountName).to.be("XYZ");
                    expect(data.nucleusBankLink.bankAccountNumber).to.be.a('string');
                    expect(data.nucleusBankLink.bankAccountNumber).to.be("566788991");
                    expect(data.nucleusBankLink.clientId).to.be.a('string');
                    expect(data.nucleusBankLink.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                    expect(data.nucleusBankLink.createDate).to.be.a(Date);
                    expect(data.nucleusBankLink.createDate).to.be(new Date());
                    expect(data.nucleusBankLink.currencyCode).to.be.a('string');
                    expect(data.nucleusBankLink.currencyCode).to.be("USD");
                    expect(data.nucleusBankLink.id).to.be.a('string');
                    expect(data.nucleusBankLink.id).to.be("""00000000-0000-0000-0000-000000000000");
                    expect(data.nucleusBankLink.isActive).to.be.a('boolean');
                    expect(data.nucleusBankLink.isActive).to.be(true);
                    expect(data.nucleusBankLink.isDefault).to.be.a('boolean');
                    expect(data.nucleusBankLink.isDefault).to.be(true);
                    expect(data.nucleusBankLink.isLinkVerified).to.be.a('boolean');
                    expect(data.nucleusBankLink.isLinkVerified).to.be(true);
                    expect(data.nucleusBankLink.linkVerifiedDate).to.be.a(Date);
                    expect(data.nucleusBankLink.linkVerifiedDate).to.be(2017-11-01);
                    expect(data.nucleusBankLink.mask).to.be.a('string');
                    expect(data.nucleusBankLink.mask).to.be("ABC");
                    {
                      let dataCtr = data.nucleusBankLink.metadata;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.nucleusBankLink.name).to.be.a('string');
                    expect(data.nucleusBankLink.name).to.be("xyz");
                    expect(data.nucleusBankLink.routing).to.be.a('string');
                    expect(data.nucleusBankLink.routing).to.be("091000022");
                    expect(data.nucleusBankLink.routingWire).to.be.a('string');
                    expect(data.nucleusBankLink.routingWire).to.be("routing_wire");
                    expect(data.nucleusBankLink.secondaryId).to.be.a('string');
                    expect(data.nucleusBankLink.secondaryId).to.be("");
                    expect(data.nucleusBankLink.type).to.be.a('string');
                    expect(data.nucleusBankLink.type).to.be("saving");
                    expect(data.nucleusBankLink.updateDate).to.be.a(Date);
                    expect(data.nucleusBankLink.updateDate).to.be(new Date());
                  expect(data.statusCode).to.be.a('number');
                  expect(data.statusCode).to.be(0);
  
                        }
              }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
