/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.WireApi();
  });

  describe('(package)', function() {
    describe('WireApi', function() {
      describe('cancelWireTransferUsingDelete', function() {
        it('should call cancelWireTransferUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelWireTransferUsingDelete call and complete the assertions
          /*
          var nucleusFundingId = "nucleusFundingId_example";

          instance.cancelWireTransferUsingDelete(nucleusFundingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.WireTransferResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequest).to.be.a(Object);
            expect(data.vendorRequest).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBankLinkUsingPost3', function() {
        it('should call createBankLinkUsingPost3 successfully', function(done) {
          // TODO: uncomment, update parameter values for createBankLinkUsingPost3 call and complete the assertions
          /*
          var request = new HydrogenIntegrationApi.WireBankLinkRequestCO();
          request.nucleusBankLinkId = """00000000-0000-0000-0000-000000000000";
          request.vendorRequest = ;

          instance.createBankLinkUsingPost3(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.WireBankLinkResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                  expect(data.vendorRequestData.bankAccountName).to.be.a('string');
              expect(data.vendorRequestData.bankAccountName).to.be("");
              expect(data.vendorRequestData.name).to.be.a('string');
              expect(data.vendorRequestData.name).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBankLinkUsingDelete3', function() {
        it('should call deleteBankLinkUsingDelete3 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBankLinkUsingDelete3 call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.deleteBankLinkUsingDelete3(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.WireBankLinkResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                  expect(data.vendorRequestData.bankAccountName).to.be.a('string');
              expect(data.vendorRequestData.bankAccountName).to.be("");
              expect(data.vendorRequestData.name).to.be.a('string');
              expect(data.vendorRequestData.name).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBankLinkUsingGet3', function() {
        it('should call getBankLinkUsingGet3 successfully', function(done) {
          // TODO: uncomment, update parameter values for getBankLinkUsingGet3 call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.getBankLinkUsingGet3(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.WireBankLinkResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                  expect(data.vendorRequestData.bankAccountName).to.be.a('string');
              expect(data.vendorRequestData.bankAccountName).to.be("");
              expect(data.vendorRequestData.name).to.be.a('string');
              expect(data.vendorRequestData.name).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getClientBankLinksUsingGet2', function() {
        it('should call getClientBankLinksUsingGet2 successfully', function(done) {
          // TODO: uncomment, update parameter values for getClientBankLinksUsingGet2 call and complete the assertions
          /*
          var nucleusClientId = "nucleusClientId_example";

          instance.getClientBankLinksUsingGet2(nucleusClientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.WireBankLinkResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusBankLinkId).to.be.a('string');
              expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.nucleusClientId).to.be.a('string');
              expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                    expect(data.vendorRequestData.bankAccountName).to.be.a('string');
                expect(data.vendorRequestData.bankAccountName).to.be("");
                expect(data.vendorRequestData.name).to.be.a('string');
                expect(data.vendorRequestData.name).to.be("");
              expect(data.vendorResponse).to.be.a(Object);
              expect(data.vendorResponse).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getListOfWireTransfersUsingGet', function() {
        it('should call getListOfWireTransfersUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getListOfWireTransfersUsingGet call and complete the assertions
          /*
          var nucleusClientId = "nucleusClientId_example";

          instance.getListOfWireTransfersUsingGet(nucleusClientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.WireTransferResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusFundingId).to.be.a('string');
              expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.vendorRequest).to.be.a(Object);
              expect(data.vendorRequest).to.be();
              expect(data.vendorResponse).to.be.a(Object);
              expect(data.vendorResponse).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWireTransferUsingGet', function() {
        it('should call getWireTransferUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getWireTransferUsingGet call and complete the assertions
          /*
          var nucleusFundingId = "nucleusFundingId_example";

          instance.getWireTransferUsingGet(nucleusFundingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.WireTransferResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequest).to.be.a(Object);
            expect(data.vendorRequest).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitWireTransferUsingPost', function() {
        it('should call submitWireTransferUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for submitWireTransferUsingPost call and complete the assertions
          /*
          var transferRequest = new HydrogenIntegrationApi.WireTransferRequestCO();
          transferRequest.nucleusFundingId = """00000000-0000-0000-0000-000000000000";
          transferRequest.vendorRequest = ;

          instance.submitWireTransferUsingPost(transferRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.WireTransferResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequest).to.be.a(Object);
            expect(data.vendorRequest).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBankLinkUsingPut3', function() {
        it('should call updateBankLinkUsingPut3 successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBankLinkUsingPut3 call and complete the assertions
          /*
          var nucleusBankLinkId = "nucleusBankLinkId_example";

          instance.updateBankLinkUsingPut3(nucleusBankLinkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.WireBankLinkResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBankLinkId).to.be.a('string');
            expect(data.nucleusBankLinkId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BankLinkVendorDataVO);
                  expect(data.vendorRequestData.bankAccountName).to.be.a('string');
              expect(data.vendorRequestData.bankAccountName).to.be("");
              expect(data.vendorRequestData.name).to.be.a('string');
              expect(data.vendorRequestData.name).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
