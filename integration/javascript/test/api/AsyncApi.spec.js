/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.AsyncApi();
  });

  describe('(package)', function() {
    describe('AsyncApi', function() {
      describe('getAsyncData', function() {
        it('should call getAsyncData successfully', function(done) {
          // TODO: uncomment, update parameter values for getAsyncData call and complete the assertions
          /*
          var id = "id_example";
          var integrationType = "integrationType_example";
          var service = "service_example";

          instance.getAsyncData(id, integrationType, service, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AsyncTransaction);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAsyncData1', function() {
        it('should call getAsyncData1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getAsyncData1 call and complete the assertions
          /*
          var id = "id_example";
          var integrationType = "integrationType_example";
          var service = "service_example";

          instance.getAsyncData1(id, integrationType, service, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AsyncTransaction);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAsyncData2', function() {
        it('should call getAsyncData2 successfully', function(done) {
          // TODO: uncomment, update parameter values for getAsyncData2 call and complete the assertions
          /*
          var data = new HydrogenIntegrationApi.JsonNode();
          data._array = false;
          data.bigDecimal = false;
          data.bigInteger = false;
          data.binary = false;
          data._boolean = false;
          data.containerNode = false;
          data._double = false;
          data._float = false;
          data.floatingPointNumber = false;
          data._int = false;
          data.integralNumber = false;
          data._long = false;
          data.missingNode = false;
          data.nodeType = "ARRAY";
          data._null = false;
          data._number = false;
          data._object = false;
          data.pojo = false;
          data._short = false;
          data.textual = false;
          data.valueNode = false;
          var integrationType = "integrationType_example";
          var service = "service_example";

          instance.getAsyncData2(data, integrationType, service, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AsyncTransaction);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAsyncStatus', function() {
        it('should call getAsyncStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getAsyncStatus call and complete the assertions
          /*
          var id = "id_example";

          instance.getAsyncStatus(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AsyncTransactionVO);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
