/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.AggregationApi();
  });

  describe('(package)', function() {
    describe('AggregationApi', function() {
      describe('createAggregationAccountUsingPost', function() {
        it('should call createAggregationAccountUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createAggregationAccountUsingPost call and complete the assertions
          /*
          var aggregationRequestObject = new HydrogenIntegrationApi.AggregationRequestObject();
          aggregationRequestObject.nucleusAggregationAccountId = """00000000-0000-0000-0000-000000000000";
          aggregationRequestObject.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          aggregationRequestObject.product = "";
          aggregationRequestObject.vendorConfigId = "";
          aggregationRequestObject.vendorRequest = new HydrogenIntegrationApi.AggregationVendorRequestCO();
          aggregationRequestObject.vendorRequest.itemId = "";
          aggregationRequestObject.vendorRequest.memberId = "";
          aggregationRequestObject.vendorRequest.nucleusAccountId = """00000000-0000-0000-0000-000000000000";

          instance.createAggregationAccountUsingPost(aggregationRequestObject, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountsResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusAggregationAccountId).to.be.a('string');
            expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            {
              let dataCtr = data.nucleusAggregationAccounts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountResponseInternalObjectVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.AggregationAccount);
                      expect(data.body.accountHolder).to.be.a('string');
                  expect(data.body.accountHolder).to.be("");
                  expect(data.body.accountName).to.be.a('string');
                  expect(data.body.accountName).to.be("Bank Gold Checking");
                  expect(data.body.bankLinkId).to.be.a('string');
                  expect(data.body.bankLinkId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                  expect(data.body.category).to.be.a('string');
                  expect(data.body.category).to.be("Bank Account");
                  expect(data.body.clientId).to.be.a('string');
                  expect(data.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(new Date());
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.financialOfferId).to.be.a('string');
                  expect(data.body.financialOfferId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.body.institutionName).to.be.a('string');
                  expect(data.body.institutionName).to.be("Citywide Bank");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.isAsset).to.be.a('boolean');
                  expect(data.body.isAsset).to.be(true);
                  expect(data.body.isBusiness).to.be.a('boolean');
                  expect(data.body.isBusiness).to.be(false);
                  expect(data.body.isCash).to.be.a('boolean');
                  expect(data.body.isCash).to.be(true);
                  expect(data.body.isInvestment).to.be.a('boolean');
                  expect(data.body.isInvestment).to.be(false);
                  expect(data.body.isLinkVerified).to.be.a('boolean');
                  expect(data.body.isLinkVerified).to.be(true);
                  expect(data.body.isManual).to.be.a('boolean');
                  expect(data.body.isManual).to.be(false);
                  expect(data.body.mask).to.be.a('string');
                  expect(data.body.mask).to.be("");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("");
                  expect(data.body.subcategory).to.be.a('string');
                  expect(data.body.subcategory).to.be("Checking Account");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(new Date());
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createPropertyValueUsingPost', function() {
        it('should call createPropertyValueUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createPropertyValueUsingPost call and complete the assertions
          /*
          var aggregationRequestObject = new HydrogenIntegrationApi.AggregationRequestObject();
          aggregationRequestObject.nucleusAggregationAccountId = """00000000-0000-0000-0000-000000000000";
          aggregationRequestObject.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          aggregationRequestObject.product = "";
          aggregationRequestObject.vendorConfigId = "";
          aggregationRequestObject.vendorRequest = new HydrogenIntegrationApi.AggregationVendorRequestCO();
          aggregationRequestObject.vendorRequest.itemId = "";
          aggregationRequestObject.vendorRequest.memberId = "";
          aggregationRequestObject.vendorRequest.nucleusAccountId = """00000000-0000-0000-0000-000000000000";

          instance.createPropertyValueUsingPost(aggregationRequestObject, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.PropertyValueResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.product).to.be.a('string');
            expect(data.product).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(HydrogenIntegrationApi.ZillowPropertyVendorResponseVO);
                  expect(data.vendorResponse.currency).to.be.a('string');
              expect(data.vendorResponse.currency).to.be("");
              expect(data.vendorResponse.link).to.be.a('string');
              expect(data.vendorResponse.link).to.be("");
              expect(data.vendorResponse.text).to.be.a('string');
              expect(data.vendorResponse.text).to.be("");
              expect(data.vendorResponse.zestimate).to.be.a('string');
              expect(data.vendorResponse.zestimate).to.be("");
              expect(data.vendorResponse.zpid).to.be.a('string');
              expect(data.vendorResponse.zpid).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAggregationAccountUsingDelete', function() {
        it('should call deleteAggregationAccountUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAggregationAccountUsingDelete call
          /*
          var nucleusAggregationAccountId = "nucleusAggregationAccountId_example";

          instance.deleteAggregationAccountUsingDelete(nucleusAggregationAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAggregationAccountAllUsingGet', function() {
        it('should call getAggregationAccountAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getAggregationAccountAllUsingGet call and complete the assertions
          /*
          var aggregationAccountIdList = ["aggregationAccountIdList_example"];

          instance.getAggregationAccountAllUsingGet(aggregationAccountIdList, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusAggregationAccount).to.be.a(HydrogenIntegrationApi.AggregationAccountResponseInternalObjectVO);
                    expect(data.nucleusAggregationAccount.body).to.be.a(HydrogenIntegrationApi.AggregationAccount);
                      expect(data.nucleusAggregationAccount.body.accountHolder).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.accountHolder).to.be("");
                  expect(data.nucleusAggregationAccount.body.accountName).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.accountName).to.be("Bank Gold Checking");
                  expect(data.nucleusAggregationAccount.body.bankLinkId).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.bankLinkId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                  expect(data.nucleusAggregationAccount.body.category).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.category).to.be("Bank Account");
                  expect(data.nucleusAggregationAccount.body.clientId).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                  expect(data.nucleusAggregationAccount.body.createDate).to.be.a(Date);
                  expect(data.nucleusAggregationAccount.body.createDate).to.be(new Date());
                  expect(data.nucleusAggregationAccount.body.currencyCode).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.currencyCode).to.be("USD");
                  expect(data.nucleusAggregationAccount.body.financialOfferId).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.financialOfferId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                  expect(data.nucleusAggregationAccount.body.id).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.nucleusAggregationAccount.body.institutionName).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.institutionName).to.be("Citywide Bank");
                  expect(data.nucleusAggregationAccount.body.isActive).to.be.a('boolean');
                  expect(data.nucleusAggregationAccount.body.isActive).to.be(true);
                  expect(data.nucleusAggregationAccount.body.isAsset).to.be.a('boolean');
                  expect(data.nucleusAggregationAccount.body.isAsset).to.be(true);
                  expect(data.nucleusAggregationAccount.body.isBusiness).to.be.a('boolean');
                  expect(data.nucleusAggregationAccount.body.isBusiness).to.be(false);
                  expect(data.nucleusAggregationAccount.body.isCash).to.be.a('boolean');
                  expect(data.nucleusAggregationAccount.body.isCash).to.be(true);
                  expect(data.nucleusAggregationAccount.body.isInvestment).to.be.a('boolean');
                  expect(data.nucleusAggregationAccount.body.isInvestment).to.be(false);
                  expect(data.nucleusAggregationAccount.body.isLinkVerified).to.be.a('boolean');
                  expect(data.nucleusAggregationAccount.body.isLinkVerified).to.be(true);
                  expect(data.nucleusAggregationAccount.body.isManual).to.be.a('boolean');
                  expect(data.nucleusAggregationAccount.body.isManual).to.be(false);
                  expect(data.nucleusAggregationAccount.body.mask).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.mask).to.be("");
                  {
                    let dataCtr = data.nucleusAggregationAccount.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.nucleusAggregationAccount.body.secondaryId).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.secondaryId).to.be("");
                  expect(data.nucleusAggregationAccount.body.subcategory).to.be.a('string');
                  expect(data.nucleusAggregationAccount.body.subcategory).to.be("Checking Account");
                  expect(data.nucleusAggregationAccount.body.updateDate).to.be.a(Date);
                  expect(data.nucleusAggregationAccount.body.updateDate).to.be(new Date());
                expect(data.nucleusAggregationAccount.statusCode).to.be.a('number');
                expect(data.nucleusAggregationAccount.statusCode).to.be(0);
              expect(data.nucleusAggregationAccountId).to.be.a('string');
              expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAggregationAccountBalanceAllUsingGet', function() {
        it('should call getAggregationAccountBalanceAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getAggregationAccountBalanceAllUsingGet call and complete the assertions
          /*
          var aggregationAccountIdList = ["aggregationAccountIdList_example"];

          instance.getAggregationAccountBalanceAllUsingGet(aggregationAccountIdList, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountBalanceResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusAggregationAccountId).to.be.a('string');
              expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.nucleusBalancePosted).to.be.a(HydrogenIntegrationApi.AggregationAccountBalance);
                    expect(data.nucleusBalancePosted.aggregationAccountId).to.be.a('string');
                expect(data.nucleusBalancePosted.aggregationAccountId).to.be("2feae367-77be-4613-9cd0-f62fd5b3cff9");
                expect(data.nucleusBalancePosted.availableBalance).to.be.a('number');
                expect(data.nucleusBalancePosted.availableBalance).to.be(10000.0);
                expect(data.nucleusBalancePosted.availableCredit).to.be.a('number');
                expect(data.nucleusBalancePosted.availableCredit).to.be(10000.0);
                expect(data.nucleusBalancePosted.balance).to.be.a('number');
                expect(data.nucleusBalancePosted.balance).to.be(9000.0);
                expect(data.nucleusBalancePosted.balanceTimeStamp).to.be.a(Date);
                expect(data.nucleusBalancePosted.balanceTimeStamp).to.be(2018-11-29T14:48:38.000+0000);
                expect(data.nucleusBalancePosted.createDate).to.be.a(Date);
                expect(data.nucleusBalancePosted.createDate).to.be(2017-01-05T00:00:00.000+0000);
                expect(data.nucleusBalancePosted.currencyCode).to.be.a('string');
                expect(data.nucleusBalancePosted.currencyCode).to.be("USD");
                expect(data.nucleusBalancePosted.id).to.be.a('string');
                expect(data.nucleusBalancePosted.id).to.be("1feae367-77be-4613-9cd0-f62fd5b3cff2");
                expect(data.nucleusBalancePosted.isActive).to.be.a('boolean');
                expect(data.nucleusBalancePosted.isActive).to.be(true);
                expect(data.nucleusBalancePosted.secondaryId).to.be.a('string');
                expect(data.nucleusBalancePosted.secondaryId).to.be("7289243787238");
                expect(data.nucleusBalancePosted.updateDate).to.be.a(Date);
                expect(data.nucleusBalancePosted.updateDate).to.be(2017-01-05T00:00:00.000+0000);
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAggregationAccountBalanceUsingGet', function() {
        it('should call getAggregationAccountBalanceUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getAggregationAccountBalanceUsingGet call and complete the assertions
          /*
          var nucleusAggregationAccountId = "nucleusAggregationAccountId_example";

          instance.getAggregationAccountBalanceUsingGet(nucleusAggregationAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountBalanceResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusAggregationAccountId).to.be.a('string');
            expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusBalancePosted).to.be.a(HydrogenIntegrationApi.AggregationAccountBalance);
                  expect(data.nucleusBalancePosted.aggregationAccountId).to.be.a('string');
              expect(data.nucleusBalancePosted.aggregationAccountId).to.be("2feae367-77be-4613-9cd0-f62fd5b3cff9");
              expect(data.nucleusBalancePosted.availableBalance).to.be.a('number');
              expect(data.nucleusBalancePosted.availableBalance).to.be(10000.0);
              expect(data.nucleusBalancePosted.availableCredit).to.be.a('number');
              expect(data.nucleusBalancePosted.availableCredit).to.be(10000.0);
              expect(data.nucleusBalancePosted.balance).to.be.a('number');
              expect(data.nucleusBalancePosted.balance).to.be(9000.0);
              expect(data.nucleusBalancePosted.balanceTimeStamp).to.be.a(Date);
              expect(data.nucleusBalancePosted.balanceTimeStamp).to.be(2018-11-29T14:48:38.000+0000);
              expect(data.nucleusBalancePosted.createDate).to.be.a(Date);
              expect(data.nucleusBalancePosted.createDate).to.be(2017-01-05T00:00:00.000+0000);
              expect(data.nucleusBalancePosted.currencyCode).to.be.a('string');
              expect(data.nucleusBalancePosted.currencyCode).to.be("USD");
              expect(data.nucleusBalancePosted.id).to.be.a('string');
              expect(data.nucleusBalancePosted.id).to.be("1feae367-77be-4613-9cd0-f62fd5b3cff2");
              expect(data.nucleusBalancePosted.isActive).to.be.a('boolean');
              expect(data.nucleusBalancePosted.isActive).to.be(true);
              expect(data.nucleusBalancePosted.secondaryId).to.be.a('string');
              expect(data.nucleusBalancePosted.secondaryId).to.be("7289243787238");
              expect(data.nucleusBalancePosted.updateDate).to.be.a(Date);
              expect(data.nucleusBalancePosted.updateDate).to.be(2017-01-05T00:00:00.000+0000);
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAggregationAccountHoldingAllUsingGet', function() {
        it('should call getAggregationAccountHoldingAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getAggregationAccountHoldingAllUsingGet call and complete the assertions
          /*
          var aggregationAccountIdList = ["aggregationAccountIdList_example"];

          instance.getAggregationAccountHoldingAllUsingGet(aggregationAccountIdList, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountHoldingResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusAggregationAccountId).to.be.a('string');
              expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
              {
                let dataCtr = data.nucleusHoldingsPosted;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountHoldingResponseInternalObjectVO);
                  expect(data.body).to.be.a(HydrogenIntegrationApi.AggregationAccountHolding);
                        expect(data.body.aggregationAccountId).to.be.a('string');
                    expect(data.body.aggregationAccountId).to.be("2feae367-77be-4613-9cd0-f62fd5b3cff9");
                    expect(data.body.amount).to.be.a('number');
                    expect(data.body.amount).to.be(0.0);
                    expect(data.body.assetClass).to.be.a('string');
                    expect(data.body.assetClass).to.be("");
                    expect(data.body.costBasis).to.be.a('number');
                    expect(data.body.costBasis).to.be(0.0);
                    expect(data.body.createDate).to.be.a(Date);
                    expect(data.body.createDate).to.be(2017-01-05T00:00:00.000+0000);
                    expect(data.body.currencyCode).to.be.a('string');
                    expect(data.body.currencyCode).to.be("");
                    expect(data.body.cusip).to.be.a('string');
                    expect(data.body.cusip).to.be("");
                    expect(data.body.exchange).to.be.a('string');
                    expect(data.body.exchange).to.be("");
                    expect(data.body.holdingDate).to.be.a(Date);
                    expect(data.body.holdingDate).to.be(2018-06-28T18:17:23.579+0000);
                    expect(data.body.holdingType).to.be.a('string');
                    expect(data.body.holdingType).to.be("");
                    expect(data.body.id).to.be.a('string');
                    expect(data.body.id).to.be("1feae367-77be-4613-9cd0-f62fd5b3cff2");
                    expect(data.body.isActive).to.be.a('boolean');
                    expect(data.body.isActive).to.be(true);
                    expect(data.body.isin).to.be.a('string');
                    expect(data.body.isin).to.be("xyz");
                    {
                      let dataCtr = data.body.metadata;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.body.price).to.be.a('number');
                    expect(data.body.price).to.be(0.0);
                    expect(data.body.secondaryId).to.be.a('string');
                    expect(data.body.secondaryId).to.be("7289243787238");
                    expect(data.body.shares).to.be.a('number');
                    expect(data.body.shares).to.be(0.0);
                    expect(data.body.ticker).to.be.a('string');
                    expect(data.body.ticker).to.be("");
                    expect(data.body.tickerName).to.be.a('string');
                    expect(data.body.tickerName).to.be("");
                    expect(data.body.updateDate).to.be.a(Date);
                    expect(data.body.updateDate).to.be(2017-01-05T00:00:00.000+0000);
                  expect(data.statusCode).to.be.a('number');
                  expect(data.statusCode).to.be(0);
  
                        }
              }
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAggregationAccountHoldingUsingGet', function() {
        it('should call getAggregationAccountHoldingUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getAggregationAccountHoldingUsingGet call and complete the assertions
          /*
          var nucleusAggregationAccountId = "nucleusAggregationAccountId_example";

          instance.getAggregationAccountHoldingUsingGet(nucleusAggregationAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountHoldingResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusAggregationAccountId).to.be.a('string');
            expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            {
              let dataCtr = data.nucleusHoldingsPosted;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountHoldingResponseInternalObjectVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.AggregationAccountHolding);
                      expect(data.body.aggregationAccountId).to.be.a('string');
                  expect(data.body.aggregationAccountId).to.be("2feae367-77be-4613-9cd0-f62fd5b3cff9");
                  expect(data.body.amount).to.be.a('number');
                  expect(data.body.amount).to.be(0.0);
                  expect(data.body.assetClass).to.be.a('string');
                  expect(data.body.assetClass).to.be("");
                  expect(data.body.costBasis).to.be.a('number');
                  expect(data.body.costBasis).to.be(0.0);
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(2017-01-05T00:00:00.000+0000);
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("");
                  expect(data.body.cusip).to.be.a('string');
                  expect(data.body.cusip).to.be("");
                  expect(data.body.exchange).to.be.a('string');
                  expect(data.body.exchange).to.be("");
                  expect(data.body.holdingDate).to.be.a(Date);
                  expect(data.body.holdingDate).to.be(2018-06-28T18:17:23.579+0000);
                  expect(data.body.holdingType).to.be.a('string');
                  expect(data.body.holdingType).to.be("");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("1feae367-77be-4613-9cd0-f62fd5b3cff2");
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.isin).to.be.a('string');
                  expect(data.body.isin).to.be("xyz");
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.price).to.be.a('number');
                  expect(data.body.price).to.be(0.0);
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("7289243787238");
                  expect(data.body.shares).to.be.a('number');
                  expect(data.body.shares).to.be(0.0);
                  expect(data.body.ticker).to.be.a('string');
                  expect(data.body.ticker).to.be("");
                  expect(data.body.tickerName).to.be.a('string');
                  expect(data.body.tickerName).to.be("");
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(2017-01-05T00:00:00.000+0000);
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAggregationAccountTransactionAllUsingGet', function() {
        it('should call getAggregationAccountTransactionAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getAggregationAccountTransactionAllUsingGet call and complete the assertions
          /*
          var aggregationAccountIdList = ["aggregationAccountIdList_example"];

          instance.getAggregationAccountTransactionAllUsingGet(aggregationAccountIdList, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountTransactionResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusAggregationAccountId).to.be.a('string');
              expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
              {
                let dataCtr = data.nucleusTransactionsCanceled;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountTransactionResponseInternalObjectVO);
                  expect(data.body).to.be.a(HydrogenIntegrationApi.AggregationAccountTransaction);
                        expect(data.body.aggregationAccountId).to.be.a('string');
                    expect(data.body.aggregationAccountId).to.be("2feae367-77be-4613-9cd0-f62fd5b3cff9");
                    expect(data.body.bankCredit).to.be.a(HydrogenIntegrationApi.BankCredit);
                          expect(data.body.bankCredit.amount).to.be.a('number');
                      expect(data.body.bankCredit.amount).to.be(30.89);
                      expect(data.body.bankCredit.category).to.be.a('string');
                      expect(data.body.bankCredit.category).to.be("category");
                      expect(data.body.bankCredit.description).to.be.a('string');
                      expect(data.body.bankCredit.description).to.be("description");
                      expect(data.body.bankCredit.location).to.be.a(HydrogenIntegrationApi.Location);
                            expect(data.body.bankCredit.location.addressLine1).to.be.a('string');
                        expect(data.body.bankCredit.location.addressLine1).to.be("Apt 404B");
                        expect(data.body.bankCredit.location.addressLine2).to.be.a('string');
                        expect(data.body.bankCredit.location.addressLine2).to.be("Example Street");
                        expect(data.body.bankCredit.location.city).to.be.a('string');
                        expect(data.body.bankCredit.location.city).to.be("New York");
                        expect(data.body.bankCredit.location.country).to.be.a('string');
                        expect(data.body.bankCredit.location.country).to.be("US");
                        expect(data.body.bankCredit.location.latitude).to.be.a('number');
                        expect(data.body.bankCredit.location.latitude).to.be(23.9);
                        expect(data.body.bankCredit.location.longitude).to.be.a('number');
                        expect(data.body.bankCredit.location.longitude).to.be(23.9);
                        expect(data.body.bankCredit.location.postalcode).to.be.a('string');
                        expect(data.body.bankCredit.location.postalcode).to.be("10001");
                        expect(data.body.bankCredit.location.state).to.be.a('string');
                        expect(data.body.bankCredit.location.state).to.be("CA");
                      expect(data.body.bankCredit.memo).to.be.a('string');
                      expect(data.body.bankCredit.memo).to.be("memo");
                      expect(data.body.bankCredit.merchant).to.be.a('string');
                      expect(data.body.bankCredit.merchant).to.be("merchant");
                      expect(data.body.bankCredit.subcategory).to.be.a('string');
                      expect(data.body.bankCredit.subcategory).to.be("subcategory");
                      expect(data.body.bankCredit.transactionType).to.be.a('string');
                      expect(data.body.bankCredit.transactionType).to.be("Credit");
                    expect(data.body.cash).to.be.a(HydrogenIntegrationApi.Cash);
                          expect(data.body.cash.amount).to.be.a('number');
                      expect(data.body.cash.amount).to.be(30.89);
                      expect(data.body.cash.name).to.be.a('string');
                      expect(data.body.cash.name).to.be("name");
                      expect(data.body.cash.transactionType).to.be.a('string');
                      expect(data.body.cash.transactionType).to.be("deposit");
                    expect(data.body.createDate).to.be.a(Date);
                    expect(data.body.createDate).to.be(2017-01-05T00:00:00.000+0000);
                    expect(data.body.currencyCode).to.be.a('string');
                    expect(data.body.currencyCode).to.be("USD");
                    expect(data.body.id).to.be.a('string');
                    expect(data.body.id).to.be("1feae367-77be-4613-9cd0-f62fd5b3cff2");
                    expect(data.body.investment).to.be.a(HydrogenIntegrationApi.Investment);
                          expect(data.body.investment.fee).to.be.a('number');
                      expect(data.body.investment.fee).to.be(2345.0);
                      expect(data.body.investment.investmentType).to.be.a('string');
                      expect(data.body.investment.investmentType).to.be("investmentType");
                      expect(data.body.investment.price).to.be.a('number');
                      expect(data.body.investment.price).to.be(23.9);
                      expect(data.body.investment.quantity).to.be.a('number');
                      expect(data.body.investment.quantity).to.be(33.9);
                      expect(data.body.investment.settleDate).to.be.a(Date);
                      expect(data.body.investment.settleDate).to.be(2018-06-28T18:17:23.579+0000);
                      expect(data.body.investment.ticker).to.be.a('string');
                      expect(data.body.investment.ticker).to.be("ticker");
                      expect(data.body.investment.tickerName).to.be.a('string');
                      expect(data.body.investment.tickerName).to.be("tickerName");
                      expect(data.body.investment.tradeSignal).to.be.a('string');
                      expect(data.body.investment.tradeSignal).to.be("tradeSignal");
                      expect(data.body.investment.value).to.be.a('number');
                      expect(data.body.investment.value).to.be(2345.0);
                    expect(data.body.isActive).to.be.a('boolean');
                    expect(data.body.isActive).to.be(true);
                    expect(data.body.isExcludedAnalysis).to.be.a('boolean');
                    expect(data.body.isExcludedAnalysis).to.be(false);
                    expect(data.body.isFee).to.be.a('boolean');
                    expect(data.body.isFee).to.be(false);
                    expect(data.body.isRecurring).to.be.a('boolean');
                    expect(data.body.isRecurring).to.be(false);
                    expect(data.body.isTransfer).to.be.a('boolean');
                    expect(data.body.isTransfer).to.be(false);
                    {
                      let dataCtr = data.body.metadata;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.body.secondaryId).to.be.a('string');
                    expect(data.body.secondaryId).to.be("7289243787238");
                    expect(data.body.status).to.be.a('string');
                    expect(data.body.status).to.be("active");
                    expect(data.body.transactionDate).to.be.a(Date);
                    expect(data.body.transactionDate).to.be(2018-06-28T18:17:23.579+0000);
                    expect(data.body.updateDate).to.be.a(Date);
                    expect(data.body.updateDate).to.be(2017-01-05T00:00:00.000+0000);
                  expect(data.statusCode).to.be.a('number');
                  expect(data.statusCode).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.nucleusTransactionsPosted;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountTransactionResponseInternalObjectVO);
                  expect(data.body).to.be.a(HydrogenIntegrationApi.AggregationAccountTransaction);
                        expect(data.body.aggregationAccountId).to.be.a('string');
                    expect(data.body.aggregationAccountId).to.be("2feae367-77be-4613-9cd0-f62fd5b3cff9");
                    expect(data.body.bankCredit).to.be.a(HydrogenIntegrationApi.BankCredit);
                          expect(data.body.bankCredit.amount).to.be.a('number');
                      expect(data.body.bankCredit.amount).to.be(30.89);
                      expect(data.body.bankCredit.category).to.be.a('string');
                      expect(data.body.bankCredit.category).to.be("category");
                      expect(data.body.bankCredit.description).to.be.a('string');
                      expect(data.body.bankCredit.description).to.be("description");
                      expect(data.body.bankCredit.location).to.be.a(HydrogenIntegrationApi.Location);
                            expect(data.body.bankCredit.location.addressLine1).to.be.a('string');
                        expect(data.body.bankCredit.location.addressLine1).to.be("Apt 404B");
                        expect(data.body.bankCredit.location.addressLine2).to.be.a('string');
                        expect(data.body.bankCredit.location.addressLine2).to.be("Example Street");
                        expect(data.body.bankCredit.location.city).to.be.a('string');
                        expect(data.body.bankCredit.location.city).to.be("New York");
                        expect(data.body.bankCredit.location.country).to.be.a('string');
                        expect(data.body.bankCredit.location.country).to.be("US");
                        expect(data.body.bankCredit.location.latitude).to.be.a('number');
                        expect(data.body.bankCredit.location.latitude).to.be(23.9);
                        expect(data.body.bankCredit.location.longitude).to.be.a('number');
                        expect(data.body.bankCredit.location.longitude).to.be(23.9);
                        expect(data.body.bankCredit.location.postalcode).to.be.a('string');
                        expect(data.body.bankCredit.location.postalcode).to.be("10001");
                        expect(data.body.bankCredit.location.state).to.be.a('string');
                        expect(data.body.bankCredit.location.state).to.be("CA");
                      expect(data.body.bankCredit.memo).to.be.a('string');
                      expect(data.body.bankCredit.memo).to.be("memo");
                      expect(data.body.bankCredit.merchant).to.be.a('string');
                      expect(data.body.bankCredit.merchant).to.be("merchant");
                      expect(data.body.bankCredit.subcategory).to.be.a('string');
                      expect(data.body.bankCredit.subcategory).to.be("subcategory");
                      expect(data.body.bankCredit.transactionType).to.be.a('string');
                      expect(data.body.bankCredit.transactionType).to.be("Credit");
                    expect(data.body.cash).to.be.a(HydrogenIntegrationApi.Cash);
                          expect(data.body.cash.amount).to.be.a('number');
                      expect(data.body.cash.amount).to.be(30.89);
                      expect(data.body.cash.name).to.be.a('string');
                      expect(data.body.cash.name).to.be("name");
                      expect(data.body.cash.transactionType).to.be.a('string');
                      expect(data.body.cash.transactionType).to.be("deposit");
                    expect(data.body.createDate).to.be.a(Date);
                    expect(data.body.createDate).to.be(2017-01-05T00:00:00.000+0000);
                    expect(data.body.currencyCode).to.be.a('string');
                    expect(data.body.currencyCode).to.be("USD");
                    expect(data.body.id).to.be.a('string');
                    expect(data.body.id).to.be("1feae367-77be-4613-9cd0-f62fd5b3cff2");
                    expect(data.body.investment).to.be.a(HydrogenIntegrationApi.Investment);
                          expect(data.body.investment.fee).to.be.a('number');
                      expect(data.body.investment.fee).to.be(2345.0);
                      expect(data.body.investment.investmentType).to.be.a('string');
                      expect(data.body.investment.investmentType).to.be("investmentType");
                      expect(data.body.investment.price).to.be.a('number');
                      expect(data.body.investment.price).to.be(23.9);
                      expect(data.body.investment.quantity).to.be.a('number');
                      expect(data.body.investment.quantity).to.be(33.9);
                      expect(data.body.investment.settleDate).to.be.a(Date);
                      expect(data.body.investment.settleDate).to.be(2018-06-28T18:17:23.579+0000);
                      expect(data.body.investment.ticker).to.be.a('string');
                      expect(data.body.investment.ticker).to.be("ticker");
                      expect(data.body.investment.tickerName).to.be.a('string');
                      expect(data.body.investment.tickerName).to.be("tickerName");
                      expect(data.body.investment.tradeSignal).to.be.a('string');
                      expect(data.body.investment.tradeSignal).to.be("tradeSignal");
                      expect(data.body.investment.value).to.be.a('number');
                      expect(data.body.investment.value).to.be(2345.0);
                    expect(data.body.isActive).to.be.a('boolean');
                    expect(data.body.isActive).to.be(true);
                    expect(data.body.isExcludedAnalysis).to.be.a('boolean');
                    expect(data.body.isExcludedAnalysis).to.be(false);
                    expect(data.body.isFee).to.be.a('boolean');
                    expect(data.body.isFee).to.be(false);
                    expect(data.body.isRecurring).to.be.a('boolean');
                    expect(data.body.isRecurring).to.be(false);
                    expect(data.body.isTransfer).to.be.a('boolean');
                    expect(data.body.isTransfer).to.be(false);
                    {
                      let dataCtr = data.body.metadata;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.body.secondaryId).to.be.a('string');
                    expect(data.body.secondaryId).to.be("7289243787238");
                    expect(data.body.status).to.be.a('string');
                    expect(data.body.status).to.be("active");
                    expect(data.body.transactionDate).to.be.a(Date);
                    expect(data.body.transactionDate).to.be(2018-06-28T18:17:23.579+0000);
                    expect(data.body.updateDate).to.be.a(Date);
                    expect(data.body.updateDate).to.be(2017-01-05T00:00:00.000+0000);
                  expect(data.statusCode).to.be.a('number');
                  expect(data.statusCode).to.be(0);
  
                        }
              }
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAggregationAccountTransactionUsingGet', function() {
        it('should call getAggregationAccountTransactionUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getAggregationAccountTransactionUsingGet call and complete the assertions
          /*
          var nucleusAggregationAccountId = "nucleusAggregationAccountId_example";

          instance.getAggregationAccountTransactionUsingGet(nucleusAggregationAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountTransactionResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusAggregationAccountId).to.be.a('string');
            expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            {
              let dataCtr = data.nucleusTransactionsCanceled;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountTransactionResponseInternalObjectVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.AggregationAccountTransaction);
                      expect(data.body.aggregationAccountId).to.be.a('string');
                  expect(data.body.aggregationAccountId).to.be("2feae367-77be-4613-9cd0-f62fd5b3cff9");
                  expect(data.body.bankCredit).to.be.a(HydrogenIntegrationApi.BankCredit);
                        expect(data.body.bankCredit.amount).to.be.a('number');
                    expect(data.body.bankCredit.amount).to.be(30.89);
                    expect(data.body.bankCredit.category).to.be.a('string');
                    expect(data.body.bankCredit.category).to.be("category");
                    expect(data.body.bankCredit.description).to.be.a('string');
                    expect(data.body.bankCredit.description).to.be("description");
                    expect(data.body.bankCredit.location).to.be.a(HydrogenIntegrationApi.Location);
                          expect(data.body.bankCredit.location.addressLine1).to.be.a('string');
                      expect(data.body.bankCredit.location.addressLine1).to.be("Apt 404B");
                      expect(data.body.bankCredit.location.addressLine2).to.be.a('string');
                      expect(data.body.bankCredit.location.addressLine2).to.be("Example Street");
                      expect(data.body.bankCredit.location.city).to.be.a('string');
                      expect(data.body.bankCredit.location.city).to.be("New York");
                      expect(data.body.bankCredit.location.country).to.be.a('string');
                      expect(data.body.bankCredit.location.country).to.be("US");
                      expect(data.body.bankCredit.location.latitude).to.be.a('number');
                      expect(data.body.bankCredit.location.latitude).to.be(23.9);
                      expect(data.body.bankCredit.location.longitude).to.be.a('number');
                      expect(data.body.bankCredit.location.longitude).to.be(23.9);
                      expect(data.body.bankCredit.location.postalcode).to.be.a('string');
                      expect(data.body.bankCredit.location.postalcode).to.be("10001");
                      expect(data.body.bankCredit.location.state).to.be.a('string');
                      expect(data.body.bankCredit.location.state).to.be("CA");
                    expect(data.body.bankCredit.memo).to.be.a('string');
                    expect(data.body.bankCredit.memo).to.be("memo");
                    expect(data.body.bankCredit.merchant).to.be.a('string');
                    expect(data.body.bankCredit.merchant).to.be("merchant");
                    expect(data.body.bankCredit.subcategory).to.be.a('string');
                    expect(data.body.bankCredit.subcategory).to.be("subcategory");
                    expect(data.body.bankCredit.transactionType).to.be.a('string');
                    expect(data.body.bankCredit.transactionType).to.be("Credit");
                  expect(data.body.cash).to.be.a(HydrogenIntegrationApi.Cash);
                        expect(data.body.cash.amount).to.be.a('number');
                    expect(data.body.cash.amount).to.be(30.89);
                    expect(data.body.cash.name).to.be.a('string');
                    expect(data.body.cash.name).to.be("name");
                    expect(data.body.cash.transactionType).to.be.a('string');
                    expect(data.body.cash.transactionType).to.be("deposit");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(2017-01-05T00:00:00.000+0000);
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("1feae367-77be-4613-9cd0-f62fd5b3cff2");
                  expect(data.body.investment).to.be.a(HydrogenIntegrationApi.Investment);
                        expect(data.body.investment.fee).to.be.a('number');
                    expect(data.body.investment.fee).to.be(2345.0);
                    expect(data.body.investment.investmentType).to.be.a('string');
                    expect(data.body.investment.investmentType).to.be("investmentType");
                    expect(data.body.investment.price).to.be.a('number');
                    expect(data.body.investment.price).to.be(23.9);
                    expect(data.body.investment.quantity).to.be.a('number');
                    expect(data.body.investment.quantity).to.be(33.9);
                    expect(data.body.investment.settleDate).to.be.a(Date);
                    expect(data.body.investment.settleDate).to.be(2018-06-28T18:17:23.579+0000);
                    expect(data.body.investment.ticker).to.be.a('string');
                    expect(data.body.investment.ticker).to.be("ticker");
                    expect(data.body.investment.tickerName).to.be.a('string');
                    expect(data.body.investment.tickerName).to.be("tickerName");
                    expect(data.body.investment.tradeSignal).to.be.a('string');
                    expect(data.body.investment.tradeSignal).to.be("tradeSignal");
                    expect(data.body.investment.value).to.be.a('number');
                    expect(data.body.investment.value).to.be(2345.0);
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.isExcludedAnalysis).to.be.a('boolean');
                  expect(data.body.isExcludedAnalysis).to.be(false);
                  expect(data.body.isFee).to.be.a('boolean');
                  expect(data.body.isFee).to.be(false);
                  expect(data.body.isRecurring).to.be.a('boolean');
                  expect(data.body.isRecurring).to.be(false);
                  expect(data.body.isTransfer).to.be.a('boolean');
                  expect(data.body.isTransfer).to.be(false);
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("7289243787238");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("active");
                  expect(data.body.transactionDate).to.be.a(Date);
                  expect(data.body.transactionDate).to.be(2018-06-28T18:17:23.579+0000);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(2017-01-05T00:00:00.000+0000);
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            {
              let dataCtr = data.nucleusTransactionsPosted;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountTransactionResponseInternalObjectVO);
                expect(data.body).to.be.a(HydrogenIntegrationApi.AggregationAccountTransaction);
                      expect(data.body.aggregationAccountId).to.be.a('string');
                  expect(data.body.aggregationAccountId).to.be("2feae367-77be-4613-9cd0-f62fd5b3cff9");
                  expect(data.body.bankCredit).to.be.a(HydrogenIntegrationApi.BankCredit);
                        expect(data.body.bankCredit.amount).to.be.a('number');
                    expect(data.body.bankCredit.amount).to.be(30.89);
                    expect(data.body.bankCredit.category).to.be.a('string');
                    expect(data.body.bankCredit.category).to.be("category");
                    expect(data.body.bankCredit.description).to.be.a('string');
                    expect(data.body.bankCredit.description).to.be("description");
                    expect(data.body.bankCredit.location).to.be.a(HydrogenIntegrationApi.Location);
                          expect(data.body.bankCredit.location.addressLine1).to.be.a('string');
                      expect(data.body.bankCredit.location.addressLine1).to.be("Apt 404B");
                      expect(data.body.bankCredit.location.addressLine2).to.be.a('string');
                      expect(data.body.bankCredit.location.addressLine2).to.be("Example Street");
                      expect(data.body.bankCredit.location.city).to.be.a('string');
                      expect(data.body.bankCredit.location.city).to.be("New York");
                      expect(data.body.bankCredit.location.country).to.be.a('string');
                      expect(data.body.bankCredit.location.country).to.be("US");
                      expect(data.body.bankCredit.location.latitude).to.be.a('number');
                      expect(data.body.bankCredit.location.latitude).to.be(23.9);
                      expect(data.body.bankCredit.location.longitude).to.be.a('number');
                      expect(data.body.bankCredit.location.longitude).to.be(23.9);
                      expect(data.body.bankCredit.location.postalcode).to.be.a('string');
                      expect(data.body.bankCredit.location.postalcode).to.be("10001");
                      expect(data.body.bankCredit.location.state).to.be.a('string');
                      expect(data.body.bankCredit.location.state).to.be("CA");
                    expect(data.body.bankCredit.memo).to.be.a('string');
                    expect(data.body.bankCredit.memo).to.be("memo");
                    expect(data.body.bankCredit.merchant).to.be.a('string');
                    expect(data.body.bankCredit.merchant).to.be("merchant");
                    expect(data.body.bankCredit.subcategory).to.be.a('string');
                    expect(data.body.bankCredit.subcategory).to.be("subcategory");
                    expect(data.body.bankCredit.transactionType).to.be.a('string');
                    expect(data.body.bankCredit.transactionType).to.be("Credit");
                  expect(data.body.cash).to.be.a(HydrogenIntegrationApi.Cash);
                        expect(data.body.cash.amount).to.be.a('number');
                    expect(data.body.cash.amount).to.be(30.89);
                    expect(data.body.cash.name).to.be.a('string');
                    expect(data.body.cash.name).to.be("name");
                    expect(data.body.cash.transactionType).to.be.a('string');
                    expect(data.body.cash.transactionType).to.be("deposit");
                  expect(data.body.createDate).to.be.a(Date);
                  expect(data.body.createDate).to.be(2017-01-05T00:00:00.000+0000);
                  expect(data.body.currencyCode).to.be.a('string');
                  expect(data.body.currencyCode).to.be("USD");
                  expect(data.body.id).to.be.a('string');
                  expect(data.body.id).to.be("1feae367-77be-4613-9cd0-f62fd5b3cff2");
                  expect(data.body.investment).to.be.a(HydrogenIntegrationApi.Investment);
                        expect(data.body.investment.fee).to.be.a('number');
                    expect(data.body.investment.fee).to.be(2345.0);
                    expect(data.body.investment.investmentType).to.be.a('string');
                    expect(data.body.investment.investmentType).to.be("investmentType");
                    expect(data.body.investment.price).to.be.a('number');
                    expect(data.body.investment.price).to.be(23.9);
                    expect(data.body.investment.quantity).to.be.a('number');
                    expect(data.body.investment.quantity).to.be(33.9);
                    expect(data.body.investment.settleDate).to.be.a(Date);
                    expect(data.body.investment.settleDate).to.be(2018-06-28T18:17:23.579+0000);
                    expect(data.body.investment.ticker).to.be.a('string');
                    expect(data.body.investment.ticker).to.be("ticker");
                    expect(data.body.investment.tickerName).to.be.a('string');
                    expect(data.body.investment.tickerName).to.be("tickerName");
                    expect(data.body.investment.tradeSignal).to.be.a('string');
                    expect(data.body.investment.tradeSignal).to.be("tradeSignal");
                    expect(data.body.investment.value).to.be.a('number');
                    expect(data.body.investment.value).to.be(2345.0);
                  expect(data.body.isActive).to.be.a('boolean');
                  expect(data.body.isActive).to.be(true);
                  expect(data.body.isExcludedAnalysis).to.be.a('boolean');
                  expect(data.body.isExcludedAnalysis).to.be(false);
                  expect(data.body.isFee).to.be.a('boolean');
                  expect(data.body.isFee).to.be(false);
                  expect(data.body.isRecurring).to.be.a('boolean');
                  expect(data.body.isRecurring).to.be(false);
                  expect(data.body.isTransfer).to.be.a('boolean');
                  expect(data.body.isTransfer).to.be(false);
                  {
                    let dataCtr = data.body.metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.body.secondaryId).to.be.a('string');
                  expect(data.body.secondaryId).to.be("7289243787238");
                  expect(data.body.status).to.be.a('string');
                  expect(data.body.status).to.be("active");
                  expect(data.body.transactionDate).to.be.a(Date);
                  expect(data.body.transactionDate).to.be(2018-06-28T18:17:23.579+0000);
                  expect(data.body.updateDate).to.be.a(Date);
                  expect(data.body.updateDate).to.be(2017-01-05T00:00:00.000+0000);
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);

                      }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAggregationAccountUsingGet', function() {
        it('should call getAggregationAccountUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getAggregationAccountUsingGet call and complete the assertions
          /*
          var nucleusAggregationAccountId = "nucleusAggregationAccountId_example";

          instance.getAggregationAccountUsingGet(nucleusAggregationAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.AggregationAccountResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusAggregationAccount).to.be.a(HydrogenIntegrationApi.AggregationAccountResponseInternalObjectVO);
                  expect(data.nucleusAggregationAccount.body).to.be.a(HydrogenIntegrationApi.AggregationAccount);
                    expect(data.nucleusAggregationAccount.body.accountHolder).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.accountHolder).to.be("");
                expect(data.nucleusAggregationAccount.body.accountName).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.accountName).to.be("Bank Gold Checking");
                expect(data.nucleusAggregationAccount.body.bankLinkId).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.bankLinkId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusAggregationAccount.body.category).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.category).to.be("Bank Account");
                expect(data.nucleusAggregationAccount.body.clientId).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusAggregationAccount.body.createDate).to.be.a(Date);
                expect(data.nucleusAggregationAccount.body.createDate).to.be(new Date());
                expect(data.nucleusAggregationAccount.body.currencyCode).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.currencyCode).to.be("USD");
                expect(data.nucleusAggregationAccount.body.financialOfferId).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.financialOfferId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.nucleusAggregationAccount.body.id).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.nucleusAggregationAccount.body.institutionName).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.institutionName).to.be("Citywide Bank");
                expect(data.nucleusAggregationAccount.body.isActive).to.be.a('boolean');
                expect(data.nucleusAggregationAccount.body.isActive).to.be(true);
                expect(data.nucleusAggregationAccount.body.isAsset).to.be.a('boolean');
                expect(data.nucleusAggregationAccount.body.isAsset).to.be(true);
                expect(data.nucleusAggregationAccount.body.isBusiness).to.be.a('boolean');
                expect(data.nucleusAggregationAccount.body.isBusiness).to.be(false);
                expect(data.nucleusAggregationAccount.body.isCash).to.be.a('boolean');
                expect(data.nucleusAggregationAccount.body.isCash).to.be(true);
                expect(data.nucleusAggregationAccount.body.isInvestment).to.be.a('boolean');
                expect(data.nucleusAggregationAccount.body.isInvestment).to.be(false);
                expect(data.nucleusAggregationAccount.body.isLinkVerified).to.be.a('boolean');
                expect(data.nucleusAggregationAccount.body.isLinkVerified).to.be(true);
                expect(data.nucleusAggregationAccount.body.isManual).to.be.a('boolean');
                expect(data.nucleusAggregationAccount.body.isManual).to.be(false);
                expect(data.nucleusAggregationAccount.body.mask).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.mask).to.be("");
                {
                  let dataCtr = data.nucleusAggregationAccount.body.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.nucleusAggregationAccount.body.secondaryId).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.secondaryId).to.be("");
                expect(data.nucleusAggregationAccount.body.subcategory).to.be.a('string');
                expect(data.nucleusAggregationAccount.body.subcategory).to.be("Checking Account");
                expect(data.nucleusAggregationAccount.body.updateDate).to.be.a(Date);
                expect(data.nucleusAggregationAccount.body.updateDate).to.be(new Date());
              expect(data.nucleusAggregationAccount.statusCode).to.be.a('number');
              expect(data.nucleusAggregationAccount.statusCode).to.be(0);
            expect(data.nucleusAggregationAccountId).to.be.a('string');
            expect(data.nucleusAggregationAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPropertyValue', function() {
        it('should call getPropertyValue successfully', function(done) {
          // TODO: uncomment, update parameter values for getPropertyValue call and complete the assertions
          /*
          var nucleusAggregationAccountId = "nucleusAggregationAccountId_example";
          var nucleusClientId = "nucleusClientId_example";
          var opts = {};
          opts.product = "atom";

          instance.getPropertyValue(nucleusAggregationAccountId, nucleusClientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.PropertyValueResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.product).to.be.a('string');
            expect(data.product).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(HydrogenIntegrationApi.ZillowPropertyVendorResponseVO);
                  expect(data.vendorResponse.currency).to.be.a('string');
              expect(data.vendorResponse.currency).to.be("");
              expect(data.vendorResponse.link).to.be.a('string');
              expect(data.vendorResponse.link).to.be("");
              expect(data.vendorResponse.text).to.be.a('string');
              expect(data.vendorResponse.text).to.be("");
              expect(data.vendorResponse.zestimate).to.be.a('string');
              expect(data.vendorResponse.zestimate).to.be("");
              expect(data.vendorResponse.zpid).to.be.a('string');
              expect(data.vendorResponse.zpid).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
