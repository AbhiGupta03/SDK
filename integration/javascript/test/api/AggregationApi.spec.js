/**
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.AggregationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AggregationApi', function() {
    describe('createAggregationAccountUsingPost', function() {
      it('should call createAggregationAccountUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountUsingPost
        //instance.createAggregationAccountUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAggregationAccountUsingDelete', function() {
      it('should call deleteAggregationAccountUsingDelete successfully', function(done) {
        //uncomment below and update the code to test deleteAggregationAccountUsingDelete
        //instance.deleteAggregationAccountUsingDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountAllUsingGet', function() {
      it('should call getAggregationAccountAllUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountAllUsingGet
        //instance.getAggregationAccountAllUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountBalanceAllUsingGet', function() {
      it('should call getAggregationAccountBalanceAllUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountBalanceAllUsingGet
        //instance.getAggregationAccountBalanceAllUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountBalanceUsingGet', function() {
      it('should call getAggregationAccountBalanceUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountBalanceUsingGet
        //instance.getAggregationAccountBalanceUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountHoldingAllUsingGet', function() {
      it('should call getAggregationAccountHoldingAllUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountHoldingAllUsingGet
        //instance.getAggregationAccountHoldingAllUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountHoldingUsingGet', function() {
      it('should call getAggregationAccountHoldingUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountHoldingUsingGet
        //instance.getAggregationAccountHoldingUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountTransactionAllUsingGet', function() {
      it('should call getAggregationAccountTransactionAllUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountTransactionAllUsingGet
        //instance.getAggregationAccountTransactionAllUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountTransactionUsingGet', function() {
      it('should call getAggregationAccountTransactionUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountTransactionUsingGet
        //instance.getAggregationAccountTransactionUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountUsingGet', function() {
      it('should call getAggregationAccountUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountUsingGet
        //instance.getAggregationAccountUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPropertyValue', function() {
      it('should call getPropertyValue successfully', function(done) {
        //uncomment below and update the code to test getPropertyValue
        //instance.getPropertyValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
