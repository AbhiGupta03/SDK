/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.BaasApi();
  });

  describe('(package)', function() {
    describe('BaasApi', function() {
      describe('createBaasAccountUsingPost', function() {
        it('should call createBaasAccountUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBaasAccountUsingPost call and complete the assertions
          /*
          var baasAccountCO = new HydrogenIntegrationApi.BaasAccountCO();
          baasAccountCO.nucleusAccountId = """00000000-0000-0000-0000-000000000000";
          baasAccountCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";

          instance.createBaasAccountUsingPost(baasAccountCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaasAccountVO);
            expect(data.accountNumber).to.be.a('string');
            expect(data.accountNumber).to.be("");
            expect(data.accountStatus).to.be.a('string');
            expect(data.accountStatus).to.be("");
            expect(data.accountType).to.be.a('string');
            expect(data.accountType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusAccountId).to.be.a('string');
            expect(data.nucleusAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a(Object);
            expect(data.vendorName).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBaasClientUsingPost', function() {
        it('should call createBaasClientUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBaasClientUsingPost call and complete the assertions
          /*
          var baasClientCO = new HydrogenIntegrationApi.BaasClientCO();
          baasClientCO.electronDocumentId = ["""00000000-0000-0000-0000-000000000000"];
          baasClientCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";

          instance.createBaasClientUsingPost(baasClientCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaasClientVO);
            {
              let dataCtr = data.electronDocumentId;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("""00000000-0000-0000-0000-000000000000");
              }
            }
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a(Object);
            expect(data.vendorName).to.be();
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BaasClientVendorDataVO);
                  {
                let dataCtr = data.vendorRequestData.addresses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.Address);
                  expect(data.addressLine1).to.be.a('string');
                  expect(data.addressLine1).to.be("");
                  expect(data.addressLine2).to.be.a('string');
                  expect(data.addressLine2).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.country).to.be.a('string');
                  expect(data.country).to.be("");
                  expect(data.isPrimary).to.be.a('boolean');
                  expect(data.isPrimary).to.be(false);
                  expect(data.postalcode).to.be.a('string');
                  expect(data.postalcode).to.be("");
                  expect(data.state).to.be.a('string');
                  expect(data.state).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("HOME");
  
                        }
              }
              expect(data.vendorRequestData.backupWithHoldingPercent).to.be.a('boolean');
              expect(data.vendorRequestData.backupWithHoldingPercent).to.be(false);
              expect(data.vendorRequestData.countryOfCitizenship).to.be.a('string');
              expect(data.vendorRequestData.countryOfCitizenship).to.be("");
              expect(data.vendorRequestData.dateOfBirth).to.be.a(Date);
              expect(data.vendorRequestData.dateOfBirth).to.be(new Date());
              expect(data.vendorRequestData.email).to.be.a('string');
              expect(data.vendorRequestData.email).to.be("");
              expect(data.vendorRequestData.firstName).to.be.a('string');
              expect(data.vendorRequestData.firstName).to.be("");
              expect(data.vendorRequestData.gender).to.be.a('string');
              expect(data.vendorRequestData.gender).to.be("M");
              expect(data.vendorRequestData.identificationNumber).to.be.a('string');
              expect(data.vendorRequestData.identificationNumber).to.be("");
              expect(data.vendorRequestData.identificationNumberType).to.be.a('string');
              expect(data.vendorRequestData.identificationNumberType).to.be("");
              {
                let dataCtr = data.vendorRequestData.identifications;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.Identification);
                  expect(data.countryOfIssue).to.be.a('string');
                  expect(data.countryOfIssue).to.be("");
                  expect(data.docNumber).to.be.a('string');
                  expect(data.docNumber).to.be("");
                  expect(data.docType).to.be.a('string');
                  expect(data.docType).to.be("");
                  expect(data.expiryDate).to.be.a(Date);
                  expect(data.expiryDate).to.be(new Date());
                  expect(data.issueDate).to.be.a(Date);
                  expect(data.issueDate).to.be(new Date());
                  expect(data.issuingAuthority).to.be.a('string');
                  expect(data.issuingAuthority).to.be("");
                  expect(data.stateOfIssue).to.be.a('string');
                  expect(data.stateOfIssue).to.be("");
  
                        }
              }
              expect(data.vendorRequestData.lastName).to.be.a('string');
              expect(data.vendorRequestData.lastName).to.be("");
              {
                let dataCtr = data.vendorRequestData.metadata;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.vendorRequestData.middleName).to.be.a('string');
              expect(data.vendorRequestData.middleName).to.be("");
              expect(data.vendorRequestData.phoneNumber).to.be.a('string');
              expect(data.vendorRequestData.phoneNumber).to.be("");
              expect(data.vendorRequestData.politicallyExposedPerson).to.be.a(HydrogenIntegrationApi.PoliticallyExposedPersonDTO);
                    expect(data.vendorRequestData.politicallyExposedPerson.association).to.be.a('string');
                expect(data.vendorRequestData.politicallyExposedPerson.association).to.be("");
                expect(data.vendorRequestData.politicallyExposedPerson.exposed).to.be.a('boolean');
                expect(data.vendorRequestData.politicallyExposedPerson.exposed).to.be(false);
                expect(data.vendorRequestData.politicallyExposedPerson.name).to.be.a('string');
                expect(data.vendorRequestData.politicallyExposedPerson.name).to.be("");
                expect(data.vendorRequestData.politicallyExposedPerson.position).to.be.a('string');
                expect(data.vendorRequestData.politicallyExposedPerson.position).to.be("");
              expect(data.vendorRequestData.regO).to.be.a('boolean');
              expect(data.vendorRequestData.regO).to.be(false);
              expect(data.vendorRequestData.suffix).to.be.a('string');
              expect(data.vendorRequestData.suffix).to.be("");
              expect(data.vendorRequestData.title).to.be.a('string');
              expect(data.vendorRequestData.title).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBaasSubAccountUsingPost', function() {
        it('should call createBaasSubAccountUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBaasSubAccountUsingPost call and complete the assertions
          /*
          var baasSubAccountCO = new HydrogenIntegrationApi.BaasSubAccountCO();
          baasSubAccountCO.nucleusPortfolioId = """00000000-0000-0000-0000-000000000000";

          instance.createBaasSubAccountUsingPost(baasSubAccountCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaasSubAccountVO);
            expect(data.accountNumber).to.be.a('string');
            expect(data.accountNumber).to.be("");
            expect(data.accountStatus).to.be.a('string');
            expect(data.accountStatus).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusPortfolioId).to.be.a('string');
            expect(data.nucleusPortfolioId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a(Object);
            expect(data.vendorName).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaasAccountStatementUsingGet', function() {
        it('should call getBaasAccountStatementUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaasAccountStatementUsingGet call and complete the assertions
          /*
          var endDate = new Date("2013-10-20");
          var nucleusAccountId = "nucleusAccountId_example";
          var startDate = new Date("2013-10-20");
          var opts = {};
          opts.statementType = "statementType_example";

          instance.getBaasAccountStatementUsingGet(endDate, nucleusAccountId, startDate, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaasStatementsVO);
            expect(data.nucleusAccountId).to.be.a('string');
            expect(data.nucleusAccountId).to.be("""00000000-0000-0000-0000-000000000000");
            {
              let dataCtr = data.statements;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenIntegrationApi.BaasStatementVO);
                expect(data.statementContent).to.be.a(Object);
                expect(data.statementContent).to.be();
                expect(data.statementContentType).to.be.a('string');
                expect(data.statementContentType).to.be("");
                expect(data.statementDate).to.be.a('string');
                expect(data.statementDate).to.be("");
                expect(data.statementLink).to.be.a('string');
                expect(data.statementLink).to.be("");
                expect(data.statementLinkExpiry).to.be.a('string');
                expect(data.statementLinkExpiry).to.be("");
                expect(data.statementName).to.be.a('string');
                expect(data.statementName).to.be("");

                      }
            }
            expect(data.vendorName).to.be.a(Object);
            expect(data.vendorName).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaasPortfolioBalanceUsingGet', function() {
        it('should call getBaasPortfolioBalanceUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaasPortfolioBalanceUsingGet call and complete the assertions
          /*
          var nucleusPortfolioId = "nucleusPortfolioId_example";
          var opts = {};
          opts.endDate = new Date("2013-10-20");
          opts.startDate = new Date("2013-10-20");

          instance.getBaasPortfolioBalanceUsingGet(nucleusPortfolioId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaasBalanceVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusAssetSizesPosted;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.nucleusAssetSizesUpdated;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.nucleusPortfolioId).to.be.a('string');
            expect(data.nucleusPortfolioId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a(Object);
            expect(data.vendorName).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaasPortfolioTransactionUsingGet', function() {
        it('should call getBaasPortfolioTransactionUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaasPortfolioTransactionUsingGet call and complete the assertions
          /*
          var nucleusPortfolioId = "nucleusPortfolioId_example";
          var opts = {};
          opts.endDate = new Date("2013-10-20");
          opts.startDate = new Date("2013-10-20");

          instance.getBaasPortfolioTransactionUsingGet(nucleusPortfolioId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaasTransactionsVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusPortfolioId).to.be.a('string');
            expect(data.nucleusPortfolioId).to.be("""00000000-0000-0000-0000-000000000000");
            {
              let dataCtr = data.nucleusTransactionsPosted;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.nucleusTransactionsUpdated;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.vendorName).to.be.a(Object);
            expect(data.vendorName).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBaasClientUsingPut', function() {
        it('should call updateBaasClientUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBaasClientUsingPut call and complete the assertions
          /*
          var baasClientCO = new HydrogenIntegrationApi.BaasClientCO();
          baasClientCO.electronDocumentId = ["""00000000-0000-0000-0000-000000000000"];
          baasClientCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";

          instance.updateBaasClientUsingPut(baasClientCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaasClientVO);
            {
              let dataCtr = data.electronDocumentId;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("""00000000-0000-0000-0000-000000000000");
              }
            }
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a(Object);
            expect(data.vendorName).to.be();
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BaasClientVendorDataVO);
                  {
                let dataCtr = data.vendorRequestData.addresses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.Address);
                  expect(data.addressLine1).to.be.a('string');
                  expect(data.addressLine1).to.be("");
                  expect(data.addressLine2).to.be.a('string');
                  expect(data.addressLine2).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.country).to.be.a('string');
                  expect(data.country).to.be("");
                  expect(data.isPrimary).to.be.a('boolean');
                  expect(data.isPrimary).to.be(false);
                  expect(data.postalcode).to.be.a('string');
                  expect(data.postalcode).to.be("");
                  expect(data.state).to.be.a('string');
                  expect(data.state).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("HOME");
  
                        }
              }
              expect(data.vendorRequestData.backupWithHoldingPercent).to.be.a('boolean');
              expect(data.vendorRequestData.backupWithHoldingPercent).to.be(false);
              expect(data.vendorRequestData.countryOfCitizenship).to.be.a('string');
              expect(data.vendorRequestData.countryOfCitizenship).to.be("");
              expect(data.vendorRequestData.dateOfBirth).to.be.a(Date);
              expect(data.vendorRequestData.dateOfBirth).to.be(new Date());
              expect(data.vendorRequestData.email).to.be.a('string');
              expect(data.vendorRequestData.email).to.be("");
              expect(data.vendorRequestData.firstName).to.be.a('string');
              expect(data.vendorRequestData.firstName).to.be("");
              expect(data.vendorRequestData.gender).to.be.a('string');
              expect(data.vendorRequestData.gender).to.be("M");
              expect(data.vendorRequestData.identificationNumber).to.be.a('string');
              expect(data.vendorRequestData.identificationNumber).to.be("");
              expect(data.vendorRequestData.identificationNumberType).to.be.a('string');
              expect(data.vendorRequestData.identificationNumberType).to.be("");
              {
                let dataCtr = data.vendorRequestData.identifications;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.Identification);
                  expect(data.countryOfIssue).to.be.a('string');
                  expect(data.countryOfIssue).to.be("");
                  expect(data.docNumber).to.be.a('string');
                  expect(data.docNumber).to.be("");
                  expect(data.docType).to.be.a('string');
                  expect(data.docType).to.be("");
                  expect(data.expiryDate).to.be.a(Date);
                  expect(data.expiryDate).to.be(new Date());
                  expect(data.issueDate).to.be.a(Date);
                  expect(data.issueDate).to.be(new Date());
                  expect(data.issuingAuthority).to.be.a('string');
                  expect(data.issuingAuthority).to.be("");
                  expect(data.stateOfIssue).to.be.a('string');
                  expect(data.stateOfIssue).to.be("");
  
                        }
              }
              expect(data.vendorRequestData.lastName).to.be.a('string');
              expect(data.vendorRequestData.lastName).to.be("");
              {
                let dataCtr = data.vendorRequestData.metadata;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.vendorRequestData.middleName).to.be.a('string');
              expect(data.vendorRequestData.middleName).to.be("");
              expect(data.vendorRequestData.phoneNumber).to.be.a('string');
              expect(data.vendorRequestData.phoneNumber).to.be("");
              expect(data.vendorRequestData.politicallyExposedPerson).to.be.a(HydrogenIntegrationApi.PoliticallyExposedPersonDTO);
                    expect(data.vendorRequestData.politicallyExposedPerson.association).to.be.a('string');
                expect(data.vendorRequestData.politicallyExposedPerson.association).to.be("");
                expect(data.vendorRequestData.politicallyExposedPerson.exposed).to.be.a('boolean');
                expect(data.vendorRequestData.politicallyExposedPerson.exposed).to.be(false);
                expect(data.vendorRequestData.politicallyExposedPerson.name).to.be.a('string');
                expect(data.vendorRequestData.politicallyExposedPerson.name).to.be("");
                expect(data.vendorRequestData.politicallyExposedPerson.position).to.be.a('string');
                expect(data.vendorRequestData.politicallyExposedPerson.position).to.be("");
              expect(data.vendorRequestData.regO).to.be.a('boolean');
              expect(data.vendorRequestData.regO).to.be(false);
              expect(data.vendorRequestData.suffix).to.be.a('string');
              expect(data.vendorRequestData.suffix).to.be("");
              expect(data.vendorRequestData.title).to.be.a('string');
              expect(data.vendorRequestData.title).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
