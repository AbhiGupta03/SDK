/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.CardApi();
  });

  describe('(package)', function() {
    describe('CardApi', function() {
      describe('createAutoReloadUsingPost', function() {
        it('should call createAutoReloadUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createAutoReloadUsingPost call and complete the assertions
          /*
          var request = new HydrogenIntegrationApi.CardAutoReloadRequestCO();
          request.nucleusBankLinkId = """00000000-0000-0000-0000-000000000000";
          request.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          request.reloadAmount = 0.0;
          request.thresholdAmount = 0.0;

          instance.createAutoReloadUsingPost(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardAutoReloadResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.reloadAmount).to.be.a('number');
            expect(data.reloadAmount).to.be(0.0);
            expect(data.thresholdAmount).to.be.a('number');
            expect(data.thresholdAmount).to.be(0.0);
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardActivateUsingPost', function() {
        it('should call createCardActivateUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardActivateUsingPost call and complete the assertions
          /*
          var activateRequest = new HydrogenIntegrationApi.CardBaseRequestCO();
          activateRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          activateRequest.reason = "";
          activateRequest.vendorRequest = ;

          instance.createCardActivateUsingPost(activateRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardBusinessUsingPost', function() {
        it('should call createCardBusinessUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardBusinessUsingPost call and complete the assertions
          /*
          var cardBusinessRequestCO = new HydrogenIntegrationApi.CardBusinessRequestCO();
          cardBusinessRequestCO.nucleusBusinessId = """00000000-0000-0000-0000-000000000000";

          instance.createCardBusinessUsingPost(cardBusinessRequestCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CreateBusinessResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBusinessId).to.be.a('string');
            expect(data.nucleusBusinessId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardCloseUsingPost', function() {
        it('should call createCardCloseUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardCloseUsingPost call and complete the assertions
          /*
          var closeRequest = new HydrogenIntegrationApi.CardBaseRequestCO();
          closeRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          closeRequest.reason = "";
          closeRequest.vendorRequest = ;

          instance.createCardCloseUsingPost(closeRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardIssueUsingPost', function() {
        it('should call createCardIssueUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardIssueUsingPost call and complete the assertions
          /*
          var issueRequest = new HydrogenIntegrationApi.CardBaseRequestCO();
          issueRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          issueRequest.reason = "";
          issueRequest.vendorRequest = ;

          instance.createCardIssueUsingPost(issueRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardLoadUsingPost', function() {
        it('should call createCardLoadUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardLoadUsingPost call and complete the assertions
          /*
          var loadRequest = new HydrogenIntegrationApi.CardLoadRequestCO();
          loadRequest.nucleusFundingId = """00000000-0000-0000-0000-000000000000";
          loadRequest.reason = "";

          instance.createCardLoadUsingPost(loadRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardLoadUnloadResponseVO);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.cardStatus).to.be.a('string');
            expect(data.cardStatus).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardPinUsingPost', function() {
        it('should call createCardPinUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardPinUsingPost call and complete the assertions
          /*
          var cardPinRequestCO = new HydrogenIntegrationApi.CardPinRequestCO();
          cardPinRequestCO.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          cardPinRequestCO.pin = "";
          cardPinRequestCO.reason = "";
          cardPinRequestCO.vendorRequest = ;

          instance.createCardPinUsingPost(cardPinRequestCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardReactivateUsingPost', function() {
        it('should call createCardReactivateUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardReactivateUsingPost call and complete the assertions
          /*
          var reactivateRequest = new HydrogenIntegrationApi.CardBaseRequestCO();
          reactivateRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          reactivateRequest.reason = "";
          reactivateRequest.vendorRequest = ;

          instance.createCardReactivateUsingPost(reactivateRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardReissueUsingPost', function() {
        it('should call createCardReissueUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardReissueUsingPost call and complete the assertions
          /*
          var request = new HydrogenIntegrationApi.CardBaseRequestCO();
          request.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          request.reason = "";
          request.vendorRequest = ;

          instance.createCardReissueUsingPost(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardReplaceUsingPost', function() {
        it('should call createCardReplaceUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardReplaceUsingPost call and complete the assertions
          /*
          var request = new HydrogenIntegrationApi.CardBaseRequestCO();
          request.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          request.reason = "";
          request.vendorRequest = ;

          instance.createCardReplaceUsingPost(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardReplaceResponseVO);
            expect(data.cardStatus).to.be.a('string');
            expect(data.cardStatus).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.newNucleusCardId).to.be.a('string');
            expect(data.newNucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.replacedNucleusCardId).to.be.a('string');
            expect(data.replacedNucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardSpendingControlUsingPost', function() {
        it('should call createCardSpendingControlUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardSpendingControlUsingPost call and complete the assertions
          /*
          var request = new HydrogenIntegrationApi.CardSpendingControlRequestCO();
          request.nucleusSpendingControlId = """00000000-0000-0000-0000-000000000000";

          instance.createCardSpendingControlUsingPost(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardSpendingControlResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusSpendingControlId).to.be.a('string');
            expect(data.nucleusSpendingControlId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.SpendingControlVendorRequestDataVO);
                  expect(data.vendorRequestData.clientId).to.be.a('string');
              expect(data.vendorRequestData.clientId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorRequestData.controlScope).to.be.a('string');
              expect(data.vendorRequestData.controlScope).to.be("");
              expect(data.vendorRequestData.controlType).to.be.a('string');
              expect(data.vendorRequestData.controlType).to.be("");
              {
                let dataCtr = data.vendorRequestData.controlValues;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.vendorRequestData.currencyCode).to.be.a('string');
              expect(data.vendorRequestData.currencyCode).to.be("");
              expect(data.vendorRequestData.description).to.be.a('string');
              expect(data.vendorRequestData.description).to.be("");
              expect(data.vendorRequestData.frequencyUnit).to.be.a('string');
              expect(data.vendorRequestData.frequencyUnit).to.be("");
              expect(data.vendorRequestData.isActive).to.be.a('boolean');
              expect(data.vendorRequestData.isActive).to.be(false);
              expect(data.vendorRequestData.limitValue).to.be.a('number');
              expect(data.vendorRequestData.limitValue).to.be(0.0);
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardSuspendUsingPost', function() {
        it('should call createCardSuspendUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardSuspendUsingPost call and complete the assertions
          /*
          var suspendRequest = new HydrogenIntegrationApi.CardBaseRequestCO();
          suspendRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          suspendRequest.reason = "";
          suspendRequest.vendorRequest = ;

          instance.createCardSuspendUsingPost(suspendRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardTokenUsingPost', function() {
        it('should call createCardTokenUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardTokenUsingPost call and complete the assertions
          /*
          var tokenizeRequest = new HydrogenIntegrationApi.CardTokenRequestCO();
          tokenizeRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          tokenizeRequest.reason = "";
          tokenizeRequest.vendorRequest = ;
          tokenizeRequest.wallet = "google";

          instance.createCardTokenUsingPost(tokenizeRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardTokenResponseVO);
            expect(data.applePayload).to.be.a(HydrogenIntegrationApi.ApplePayload);
                  expect(data.applePayload.activationData).to.be.a('string');
              expect(data.applePayload.activationData).to.be("");
              expect(data.applePayload.encryptedPassData).to.be.a('string');
              expect(data.applePayload.encryptedPassData).to.be("");
              expect(data.applePayload.ephemeralPublicKey).to.be.a('string');
              expect(data.applePayload.ephemeralPublicKey).to.be("");
            expect(data.googlePayload).to.be.a(HydrogenIntegrationApi.GooglePayload);
                  expect(data.googlePayload.issuerPayload).to.be.a('string');
              expect(data.googlePayload.issuerPayload).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.samsungPayload).to.be.a(HydrogenIntegrationApi.SamsungPayload);
                  expect(data.samsungPayload.issuerPayload).to.be.a('string');
              expect(data.samsungPayload.issuerPayload).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();
            expect(data.wallet).to.be.a('string');
            expect(data.wallet).to.be("google");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardUnloadUsingPost', function() {
        it('should call createCardUnloadUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardUnloadUsingPost call and complete the assertions
          /*
          var reloadRequest = new HydrogenIntegrationApi.CardUnloadRequestCO();
          reloadRequest.nucleusFundingId = """00000000-0000-0000-0000-000000000000";
          reloadRequest.reason = "";

          instance.createCardUnloadUsingPost(reloadRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardLoadUnloadResponseVO);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.cardStatus).to.be.a('string');
            expect(data.cardStatus).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createClientCardUsingPost', function() {
        it('should call createClientCardUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createClientCardUsingPost call and complete the assertions
          /*
          var cardClientRequestCO = new HydrogenIntegrationApi.CardClientRequestCO();
          cardClientRequestCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          cardClientRequestCO.vendorRequest = {key: ""};

          instance.createClientCardUsingPost(cardClientRequestCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CreateCardClientResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardBalanceUsingGet', function() {
        it('should call getCardBalanceUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getCardBalanceUsingGet call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.endDate = new Date("2013-10-20");
          opts.startDate = new Date("2013-10-20");

          instance.getCardBalanceUsingGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardBalanceResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.nucleusAssetSizesPosted;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.nucleusAssetSizesUpdated;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardImage', function() {
        it('should call getCardImage successfully', function(done) {
          // TODO: uncomment, update parameter values for getCardImage call and complete the assertions
          /*
          var cardId = "cardId_example";

          instance.getCardImage(cardId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.GetCardImageResponseVO);
            expect(data.imageUrl).to.be.a('string');
            expect(data.imageUrl).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardPciDetails', function() {
        it('should call getCardPciDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getCardPciDetails call and complete the assertions
          /*
          var cardId = "cardId_example";

          instance.getCardPciDetails(cardId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.GetCardPciDetailsResponseVO);
            expect(data.cvv).to.be.a('string');
            expect(data.cvv).to.be("");
            expect(data.expiryDate).to.be.a('string');
            expect(data.expiryDate).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.pan).to.be.a('string');
            expect(data.pan).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardReserveAccountDetailsUsingGet', function() {
        it('should call getCardReserveAccountDetailsUsingGet successfully', function(done) {
          // TODO: uncomment getCardReserveAccountDetailsUsingGet call and complete the assertions
          /*

          instance.getCardReserveAccountDetailsUsingGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardReserveAccountResponseVO);
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(0.0);
            expect(data.balanceAvailable).to.be.a('number');
            expect(data.balanceAvailable).to.be(0.0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.overdraftLimit).to.be.a('number');
            expect(data.overdraftLimit).to.be(0.0);
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardStatementUsingGet', function() {
        it('should call getCardStatementUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getCardStatementUsingGet call and complete the assertions
          /*
          var cardId = "cardId_example";
          var opts = {};
          opts.endDate = new Date("2013-10-20");
          opts.startDate = new Date("2013-10-20");

          instance.getCardStatementUsingGet(cardId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.GetCardStatementResponseVO);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.endingBalance).to.be.a('number');
            expect(data.endingBalance).to.be(0.0);
            expect(data.initialBalance).to.be.a('number');
            expect(data.initialBalance).to.be(0.0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            {
              let dataCtr = data.transactions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardTokenUsingToken', function() {
        it('should call getCardTokenUsingToken successfully', function(done) {
          // TODO: uncomment, update parameter values for getCardTokenUsingToken call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.deviceId = "deviceId_example";
          opts.deviceType = "deviceType_example";
          opts.wallet = "wallet_example";

          instance.getCardTokenUsingToken(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.GetCardTokenResponseVO);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.nucleusCardId).to.be.a('string');
              expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.panReference).to.be.a('string');
              expect(data.panReference).to.be("");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("");
              expect(data.tokenReference).to.be.a('string');
              expect(data.tokenReference).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.vendorResponse).to.be.a(Object);
              expect(data.vendorResponse).to.be();
              expect(data.wallet).to.be.a('string');
              expect(data.wallet).to.be("google");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardTransactionUsingGet', function() {
        it('should call getCardTransactionUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getCardTransactionUsingGet call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.endDate = new Date("2013-10-20");
          opts.startDate = new Date("2013-10-20");

          instance.getCardTransactionUsingGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardTransactionResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            {
              let dataCtr = data.nucleusTransactionsPosted;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.nucleusTransactionsUpdated;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardUsingGet', function() {
        it('should call getCardUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getCardUsingGet call and complete the assertions
          /*
          var id = "id_example";

          instance.getCardUsingGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCardBusinessUsingPut', function() {
        it('should call updateCardBusinessUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCardBusinessUsingPut call and complete the assertions
          /*
          var nucleusBusinessId = "nucleusBusinessId_example";

          instance.updateCardBusinessUsingPut(nucleusBusinessId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.UpdateBusinessResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusBusinessId).to.be.a('string');
            expect(data.nucleusBusinessId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.BusinessVendorRequestDataVO);
                  {
                let dataCtr = data.vendorRequestData.businessAddresses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.BusinessAddress);
                  expect(data.addressLine1).to.be.a('string');
                  expect(data.addressLine1).to.be("123 Main Street Room 22");
                  expect(data.addressLine2).to.be.a('string');
                  expect(data.addressLine2).to.be("University Dorm");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("New York");
                  expect(data.country).to.be.a('string');
                  expect(data.country).to.be("US");
                  expect(data.isPrimary).to.be.a('boolean');
                  expect(data.isPrimary).to.be(true);
                  expect(data.postalcode).to.be.a('string');
                  expect(data.postalcode).to.be("123123123");
                  expect(data.state).to.be.a('string');
                  expect(data.state).to.be("NY");
  
                        }
              }
              expect(data.vendorRequestData.dbaName).to.be.a('string');
              expect(data.vendorRequestData.dbaName).to.be("");
              expect(data.vendorRequestData.email).to.be.a('string');
              expect(data.vendorRequestData.email).to.be("");
              expect(data.vendorRequestData.identificationNumber).to.be.a('string');
              expect(data.vendorRequestData.identificationNumber).to.be("");
              expect(data.vendorRequestData.identificationNumberType).to.be.a('string');
              expect(data.vendorRequestData.identificationNumberType).to.be("");
              expect(data.vendorRequestData.incorporationDate).to.be.a(Date);
              expect(data.vendorRequestData.incorporationDate).to.be(new Date());
              expect(data.vendorRequestData.incorporationState).to.be.a('string');
              expect(data.vendorRequestData.incorporationState).to.be("");
              expect(data.vendorRequestData.isPublic).to.be.a('boolean');
              expect(data.vendorRequestData.isPublic).to.be(false);
              expect(data.vendorRequestData.legalName).to.be.a('string');
              expect(data.vendorRequestData.legalName).to.be("");
              expect(data.vendorRequestData.legalStructure).to.be.a('string');
              expect(data.vendorRequestData.legalStructure).to.be("");
              {
                let dataCtr = data.vendorRequestData.metadata;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.vendorRequestData.owners;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.Ownership);
                  expect(data.client).to.be.a(HydrogenIntegrationApi.ClientVendorRequestDataVO);
                        {
                      let dataCtr = data.client.addresses;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(HydrogenIntegrationApi.Address);
                        expect(data.addressLine1).to.be.a('string');
                        expect(data.addressLine1).to.be("");
                        expect(data.addressLine2).to.be.a('string');
                        expect(data.addressLine2).to.be("");
                        expect(data.city).to.be.a('string');
                        expect(data.city).to.be("");
                        expect(data.country).to.be.a('string');
                        expect(data.country).to.be("");
                        expect(data.isPrimary).to.be.a('boolean');
                        expect(data.isPrimary).to.be(false);
                        expect(data.postalcode).to.be.a('string');
                        expect(data.postalcode).to.be("");
                        expect(data.state).to.be.a('string');
                        expect(data.state).to.be("");
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("HOME");
        
                              }
                    }
                    expect(data.client.businessName).to.be.a('string');
                    expect(data.client.businessName).to.be("");
                    expect(data.client.countryOfCitizenship).to.be.a('string');
                    expect(data.client.countryOfCitizenship).to.be("");
                    expect(data.client.dateOfBirth).to.be.a(Date);
                    expect(data.client.dateOfBirth).to.be(new Date());
                    expect(data.client.email).to.be.a('string');
                    expect(data.client.email).to.be("");
                    expect(data.client.firstName).to.be.a('string');
                    expect(data.client.firstName).to.be("");
                    expect(data.client.gender).to.be.a('string');
                    expect(data.client.gender).to.be("");
                    expect(data.client.identificationNumber).to.be.a('string');
                    expect(data.client.identificationNumber).to.be("");
                    expect(data.client.identificationNumberType).to.be.a('string');
                    expect(data.client.identificationNumberType).to.be("");
                    {
                      let dataCtr = data.client.identifications;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(HydrogenIntegrationApi.Identification);
                        expect(data.countryOfIssue).to.be.a('string');
                        expect(data.countryOfIssue).to.be("");
                        expect(data.docNumber).to.be.a('string');
                        expect(data.docNumber).to.be("");
                        expect(data.docType).to.be.a('string');
                        expect(data.docType).to.be("");
                        expect(data.expiryDate).to.be.a(Date);
                        expect(data.expiryDate).to.be(new Date());
                        expect(data.issueDate).to.be.a(Date);
                        expect(data.issueDate).to.be(new Date());
                        expect(data.issuingAuthority).to.be.a('string');
                        expect(data.issuingAuthority).to.be("");
                        expect(data.stateOfIssue).to.be.a('string');
                        expect(data.stateOfIssue).to.be("");
        
                              }
                    }
                    expect(data.client.lastName).to.be.a('string');
                    expect(data.client.lastName).to.be("");
                    {
                      let dataCtr = data.client.metadata;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.client.middleName).to.be.a('string');
                    expect(data.client.middleName).to.be("");
                    expect(data.client.phoneNumber).to.be.a('string');
                    expect(data.client.phoneNumber).to.be("");
                    expect(data.client.politicallyExposedPerson).to.be.a(HydrogenIntegrationApi.PoliticallyExposedPersonDTO);
                          expect(data.client.politicallyExposedPerson.association).to.be.a('string');
                      expect(data.client.politicallyExposedPerson.association).to.be("");
                      expect(data.client.politicallyExposedPerson.exposed).to.be.a('boolean');
                      expect(data.client.politicallyExposedPerson.exposed).to.be(false);
                      expect(data.client.politicallyExposedPerson.name).to.be.a('string');
                      expect(data.client.politicallyExposedPerson.name).to.be("");
                      expect(data.client.politicallyExposedPerson.position).to.be.a('string');
                      expect(data.client.politicallyExposedPerson.position).to.be("");
                    expect(data.client.prefix).to.be.a('string');
                    expect(data.client.prefix).to.be("");
                    expect(data.client.suffix).to.be.a('string');
                    expect(data.client.suffix).to.be("");
                    expect(data.client.title).to.be.a('string');
                    expect(data.client.title).to.be("");
                  expect(data.role).to.be.a('string');
                  expect(data.role).to.be("");
  
                        }
              }
              expect(data.vendorRequestData.phoneNumber).to.be.a('string');
              expect(data.vendorRequestData.phoneNumber).to.be("");
              expect(data.vendorRequestData.ticker).to.be.a('string');
              expect(data.vendorRequestData.ticker).to.be("");
              expect(data.vendorRequestData.website).to.be.a('string');
              expect(data.vendorRequestData.website).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCardPinUsingPost', function() {
        it('should call updateCardPinUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCardPinUsingPost call and complete the assertions
          /*
          var cardPinRequestCO = new HydrogenIntegrationApi.CardUpdatePinRequestCO();
          cardPinRequestCO.currentPin = "";
          cardPinRequestCO.newPin = "";
          cardPinRequestCO.reason = "";
          cardPinRequestCO.vendorRequest = ;
          var id = "id_example";

          instance.updateCardPinUsingPost(cardPinRequestCO, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCardSpendingControlUsingPut', function() {
        it('should call updateCardSpendingControlUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCardSpendingControlUsingPut call and complete the assertions
          /*
          var nucleusSpendingControlId = "nucleusSpendingControlId_example";

          instance.updateCardSpendingControlUsingPut(nucleusSpendingControlId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.CardSpendingControlResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusSpendingControlId).to.be.a('string');
            expect(data.nucleusSpendingControlId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.SpendingControlVendorRequestDataVO);
                  expect(data.vendorRequestData.clientId).to.be.a('string');
              expect(data.vendorRequestData.clientId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorRequestData.controlScope).to.be.a('string');
              expect(data.vendorRequestData.controlScope).to.be("");
              expect(data.vendorRequestData.controlType).to.be.a('string');
              expect(data.vendorRequestData.controlType).to.be("");
              {
                let dataCtr = data.vendorRequestData.controlValues;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.vendorRequestData.currencyCode).to.be.a('string');
              expect(data.vendorRequestData.currencyCode).to.be("");
              expect(data.vendorRequestData.description).to.be.a('string');
              expect(data.vendorRequestData.description).to.be("");
              expect(data.vendorRequestData.frequencyUnit).to.be.a('string');
              expect(data.vendorRequestData.frequencyUnit).to.be("");
              expect(data.vendorRequestData.isActive).to.be.a('boolean');
              expect(data.vendorRequestData.isActive).to.be(false);
              expect(data.vendorRequestData.limitValue).to.be.a('number');
              expect(data.vendorRequestData.limitValue).to.be(0.0);
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCardUsingPut', function() {
        it('should call updateCardUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCardUsingPut call and complete the assertions
          /*
          var id = "id_example";

          instance.updateCardUsingPut(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateClientCardUsingPut', function() {
        it('should call updateClientCardUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateClientCardUsingPut call and complete the assertions
          /*
          var id = "id_example";

          instance.updateClientCardUsingPut(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.UpdateCardClientResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(Object);
            expect(data.vendorRequestData).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('verifyCardPinUsingPost', function() {
        it('should call verifyCardPinUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for verifyCardPinUsingPost call and complete the assertions
          /*
          var cardPinRequestCO = new HydrogenIntegrationApi.CardPinRequestCO();
          cardPinRequestCO.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          cardPinRequestCO.pin = "";
          cardPinRequestCO.reason = "";
          cardPinRequestCO.vendorRequest = ;

          instance.verifyCardPinUsingPost(cardPinRequestCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
