/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.KYCApi();
  });

  describe('(package)', function() {
    describe('KYCApi', function() {
      describe('createKYCUsingPost', function() {
        it('should call createKYCUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createKYCUsingPost call and complete the assertions
          /*
          var authorization = "authorization_example";
          var kycRequestCO = new HydrogenIntegrationApi.KycRequestCO();
          kycRequestCO.authToken = "";
          kycRequestCO.docType = "";
          kycRequestCO.electronDocumentId = "";
          kycRequestCO.kycType = "";
          kycRequestCO.metadata = [new HydrogenIntegrationApi.Mapstringobject()];
          kycRequestCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          kycRequestCO.product = "";

          instance.createKYCUsingPost(authorization, kycRequestCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.KycResponseVo);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.electronDocumentId).to.be.a('string');
            expect(data.electronDocumentId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.kycStatus).to.be.a('string');
            expect(data.kycStatus).to.be("");
            expect(data.kycType).to.be.a('string');
            expect(data.kycType).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.product).to.be.a('string');
            expect(data.product).to.be("");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.KycVendorRequestDataVO);
                  {
                let dataCtr = data.vendorRequestData.address;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HydrogenIntegrationApi.ClientAddress);
                  expect(data.addressLine1).to.be.a('string');
                  expect(data.addressLine1).to.be("Apt 404B");
                  expect(data.addressLine2).to.be.a('string');
                  expect(data.addressLine2).to.be("Example Street");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("Sample City");
                  expect(data.country).to.be.a('string');
                  expect(data.country).to.be("");
                  expect(data.isPrimary).to.be.a('boolean');
                  expect(data.isPrimary).to.be(false);
                  expect(data.postalcode).to.be.a('string');
                  expect(data.postalcode).to.be("");
                  expect(data.state).to.be.a('string');
                  expect(data.state).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("HOME");
  
                        }
              }
              expect(data.vendorRequestData.countryOfResidence).to.be.a('string');
              expect(data.vendorRequestData.countryOfResidence).to.be("");
              expect(data.vendorRequestData.dateOfBirth).to.be.a(Date);
              expect(data.vendorRequestData.dateOfBirth).to.be(new Date());
              expect(data.vendorRequestData.electronDocumentId).to.be.a('string');
              expect(data.vendorRequestData.electronDocumentId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorRequestData.email).to.be.a('string');
              expect(data.vendorRequestData.email).to.be("");
              expect(data.vendorRequestData.firstName).to.be.a('string');
              expect(data.vendorRequestData.firstName).to.be("");
              expect(data.vendorRequestData.gender).to.be.a('string');
              expect(data.vendorRequestData.gender).to.be("");
              expect(data.vendorRequestData.identificationNumber).to.be.a('string');
              expect(data.vendorRequestData.identificationNumber).to.be("");
              expect(data.vendorRequestData.identificationNumberType).to.be.a('string');
              expect(data.vendorRequestData.identificationNumberType).to.be("");
              expect(data.vendorRequestData.lastName).to.be.a('string');
              expect(data.vendorRequestData.lastName).to.be("");
              expect(data.vendorRequestData.metadata).to.be.a(Object);
              expect(data.vendorRequestData.metadata).to.be();
              expect(data.vendorRequestData.middleName).to.be.a('string');
              expect(data.vendorRequestData.middleName).to.be("");
              expect(data.vendorRequestData.phoneNumber).to.be.a('string');
              expect(data.vendorRequestData.phoneNumber).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getKYCStatusUsingGet', function() {
        it('should call getKYCStatusUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getKYCStatusUsingGet call and complete the assertions
          /*
          var authorization = "authorization_example";
          var nucleusClientId = "nucleusClientId_example";
          var opts = {};
          opts.getLatest = false;
          opts.kycType = "all";
          opts.product = "atom";

          instance.getKYCStatusUsingGet(authorization, nucleusClientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenIntegrationApi.KycResponseVo);
              expect(data.createDate).to.be.a(Date);
              expect(data.createDate).to.be(new Date());
              expect(data.electronDocumentId).to.be.a('string');
              expect(data.electronDocumentId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.kycStatus).to.be.a('string');
              expect(data.kycStatus).to.be("");
              expect(data.kycType).to.be.a('string');
              expect(data.kycType).to.be("");
              expect(data.nucleusClientId).to.be.a('string');
              expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.product).to.be.a('string');
              expect(data.product).to.be("");
              expect(data.updateDate).to.be.a(Date);
              expect(data.updateDate).to.be(new Date());
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.vendorRequestData).to.be.a(HydrogenIntegrationApi.KycVendorRequestDataVO);
                    {
                  let dataCtr = data.vendorRequestData.address;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenIntegrationApi.ClientAddress);
                    expect(data.addressLine1).to.be.a('string');
                    expect(data.addressLine1).to.be("Apt 404B");
                    expect(data.addressLine2).to.be.a('string');
                    expect(data.addressLine2).to.be("Example Street");
                    expect(data.city).to.be.a('string');
                    expect(data.city).to.be("Sample City");
                    expect(data.country).to.be.a('string');
                    expect(data.country).to.be("");
                    expect(data.isPrimary).to.be.a('boolean');
                    expect(data.isPrimary).to.be(false);
                    expect(data.postalcode).to.be.a('string');
                    expect(data.postalcode).to.be("");
                    expect(data.state).to.be.a('string');
                    expect(data.state).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("HOME");
    
                          }
                }
                expect(data.vendorRequestData.countryOfResidence).to.be.a('string');
                expect(data.vendorRequestData.countryOfResidence).to.be("");
                expect(data.vendorRequestData.dateOfBirth).to.be.a(Date);
                expect(data.vendorRequestData.dateOfBirth).to.be(new Date());
                expect(data.vendorRequestData.electronDocumentId).to.be.a('string');
                expect(data.vendorRequestData.electronDocumentId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.vendorRequestData.email).to.be.a('string');
                expect(data.vendorRequestData.email).to.be("");
                expect(data.vendorRequestData.firstName).to.be.a('string');
                expect(data.vendorRequestData.firstName).to.be("");
                expect(data.vendorRequestData.gender).to.be.a('string');
                expect(data.vendorRequestData.gender).to.be("");
                expect(data.vendorRequestData.identificationNumber).to.be.a('string');
                expect(data.vendorRequestData.identificationNumber).to.be("");
                expect(data.vendorRequestData.identificationNumberType).to.be.a('string');
                expect(data.vendorRequestData.identificationNumberType).to.be("");
                expect(data.vendorRequestData.lastName).to.be.a('string');
                expect(data.vendorRequestData.lastName).to.be("");
                expect(data.vendorRequestData.metadata).to.be.a(Object);
                expect(data.vendorRequestData.metadata).to.be();
                expect(data.vendorRequestData.middleName).to.be.a('string');
                expect(data.vendorRequestData.middleName).to.be("");
                expect(data.vendorRequestData.phoneNumber).to.be.a('string');
                expect(data.vendorRequestData.phoneNumber).to.be("");
              expect(data.vendorResponse).to.be.a(Object);
              expect(data.vendorResponse).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
