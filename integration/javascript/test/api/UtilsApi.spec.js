/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenIntegrationApi.UtilsApi();
  });

  describe('(package)', function() {
    describe('UtilsApi', function() {
      describe('createTokenExchangeUsingPost', function() {
        it('should call createTokenExchangeUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createTokenExchangeUsingPost call and complete the assertions
          /*
          var exchangeTokenCO = new HydrogenIntegrationApi.ExchangeTokenCO();
          exchangeTokenCO.integrationType = "";
          exchangeTokenCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          exchangeTokenCO.product = "";
          exchangeTokenCO.tenantId = """00000000-0000-0000-0000-000000000000";
          exchangeTokenCO.vendorName = "";
          exchangeTokenCO.vendorRequest = ;

          instance.createTokenExchangeUsingPost(exchangeTokenCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.ExchangePublicTokenVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.product).to.be.a('string');
            expect(data.product).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(HydrogenIntegrationApi.IavTokenExchangeVendorResponseVO);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUserUsingPost', function() {
        it('should call createUserUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createUserUsingPost call and complete the assertions
          /*
          var createUserRequest = new HydrogenIntegrationApi.CreateUserRequest();
          createUserRequest.integrationType = "";
          createUserRequest.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          createUserRequest.product = "";
          createUserRequest.tenantId = """00000000-0000-0000-0000-000000000000";
          createUserRequest.vendorName = "";
          createUserRequest.vendorRequest = ;

          instance.createUserUsingPost(createUserRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.UserResponseVO);
            expect(data.integrationType).to.be.a('string');
            expect(data.integrationType).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.product).to.be.a('string');
            expect(data.product).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(HydrogenIntegrationApi.UserResponseInterface);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWidgetLinkUsingGet', function() {
        it('should call getWidgetLinkUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getWidgetLinkUsingGet call and complete the assertions
          /*
          var nucleusClientId = "nucleusClientId_example";
          var opts = {};
          opts.isMobileWebview = false;
          opts.mode = "aggregation";
          opts.vendorName = "vendorName_example";

          instance.getWidgetLinkUsingGet(nucleusClientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenIntegrationApi.WidgetUrlVO);
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.widgetUrl).to.be.a('string');
            expect(data.widgetUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
