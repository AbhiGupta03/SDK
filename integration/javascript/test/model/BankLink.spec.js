/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BankLink', function() {
      beforeEach(function() {
        instance = new HydrogenIntegrationApi.BankLink();
      });

      it('should create an instance of BankLink', function() {
        // TODO: update the code to test BankLink
        expect(instance).to.be.a(HydrogenIntegrationApi.BankLink);
      });

      it('should have the property accountId (base name: "account_id")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property availableBalance (base name: "available_balance")', function() {
        // TODO: update the code to test the property availableBalance
        expect(instance).to.have.property('availableBalance');
        // expect(instance.availableBalance).to.be(expectedValueLiteral);
      });

      it('should have the property balance (base name: "balance")', function() {
        // TODO: update the code to test the property balance
        expect(instance).to.have.property('balance');
        // expect(instance.balance).to.be(expectedValueLiteral);
      });

      it('should have the property bankAccountHolder (base name: "bank_account_holder")', function() {
        // TODO: update the code to test the property bankAccountHolder
        expect(instance).to.have.property('bankAccountHolder');
        // expect(instance.bankAccountHolder).to.be(expectedValueLiteral);
      });

      it('should have the property bankAccountName (base name: "bank_account_name")', function() {
        // TODO: update the code to test the property bankAccountName
        expect(instance).to.have.property('bankAccountName');
        // expect(instance.bankAccountName).to.be(expectedValueLiteral);
      });

      it('should have the property bankAccountNumber (base name: "bank_account_number")', function() {
        // TODO: update the code to test the property bankAccountNumber
        expect(instance).to.have.property('bankAccountNumber');
        // expect(instance.bankAccountNumber).to.be(expectedValueLiteral);
      });

      it('should have the property clientId (base name: "client_id")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "create_date")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "currency_code")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "is_active")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property isDefault (base name: "is_default")', function() {
        // TODO: update the code to test the property isDefault
        expect(instance).to.have.property('isDefault');
        // expect(instance.isDefault).to.be(expectedValueLiteral);
      });

      it('should have the property isLinkVerified (base name: "is_link_verified")', function() {
        // TODO: update the code to test the property isLinkVerified
        expect(instance).to.have.property('isLinkVerified');
        // expect(instance.isLinkVerified).to.be(expectedValueLiteral);
      });

      it('should have the property linkVerifiedDate (base name: "link_verified_date")', function() {
        // TODO: update the code to test the property linkVerifiedDate
        expect(instance).to.have.property('linkVerifiedDate');
        // expect(instance.linkVerifiedDate).to.be(expectedValueLiteral);
      });

      it('should have the property mask (base name: "mask")', function() {
        // TODO: update the code to test the property mask
        expect(instance).to.have.property('mask');
        // expect(instance.mask).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property routing (base name: "routing")', function() {
        // TODO: update the code to test the property routing
        expect(instance).to.have.property('routing');
        // expect(instance.routing).to.be(expectedValueLiteral);
      });

      it('should have the property routingWire (base name: "routing_wire")', function() {
        // TODO: update the code to test the property routingWire
        expect(instance).to.have.property('routingWire');
        // expect(instance.routingWire).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryId (base name: "secondary_id")', function() {
        // TODO: update the code to test the property secondaryId
        expect(instance).to.have.property('secondaryId');
        // expect(instance.secondaryId).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property updateDate (base name: "update_date")', function() {
        // TODO: update the code to test the property updateDate
        expect(instance).to.have.property('updateDate');
        // expect(instance.updateDate).to.be(expectedValueLiteral);
      });

    });
  });

}));
