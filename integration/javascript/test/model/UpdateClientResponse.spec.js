/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UpdateClientResponse', function() {
      beforeEach(function() {
        instance = new HydrogenIntegrationApi.UpdateClientResponse();
      });

      it('should create an instance of UpdateClientResponse', function() {
        // TODO: update the code to test UpdateClientResponse
        expect(instance).to.be.a(HydrogenIntegrationApi.UpdateClientResponse);
      });

      it('should have the property ackCustomerAgreement (base name: "ack_customer_agreement")', function() {
        // TODO: update the code to test the property ackCustomerAgreement
        expect(instance).to.have.property('ackCustomerAgreement');
        // expect(instance.ackCustomerAgreement).to.be(expectedValueLiteral);
      });

      it('should have the property ackDisclosureRule14b (base name: "ack_disclosure_rule14b")', function() {
        // TODO: update the code to test the property ackDisclosureRule14b
        expect(instance).to.have.property('ackDisclosureRule14b');
        // expect(instance.ackDisclosureRule14b).to.be(expectedValueLiteral);
      });

      it('should have the property ackFindersFee (base name: "ack_finders_fee")', function() {
        // TODO: update the code to test the property ackFindersFee
        expect(instance).to.have.property('ackFindersFee');
        // expect(instance.ackFindersFee).to.be(expectedValueLiteral);
      });

      it('should have the property ackForeignFindersFee (base name: "ack_foreign_finders_fee")', function() {
        // TODO: update the code to test the property ackForeignFindersFee
        expect(instance).to.have.property('ackForeignFindersFee');
        // expect(instance.ackForeignFindersFee).to.be(expectedValueLiteral);
      });

      it('should have the property ackJointCustomerAgreement (base name: "ack_joint_customer_agreement")', function() {
        // TODO: update the code to test the property ackJointCustomerAgreement
        expect(instance).to.have.property('ackJointCustomerAgreement');
        // expect(instance.ackJointCustomerAgreement).to.be(expectedValueLiteral);
      });

      it('should have the property ackJointDisclosureRule14b (base name: "ack_joint_disclosure_rule14b")', function() {
        // TODO: update the code to test the property ackJointDisclosureRule14b
        expect(instance).to.have.property('ackJointDisclosureRule14b');
        // expect(instance.ackJointDisclosureRule14b).to.be(expectedValueLiteral);
      });

      it('should have the property ackJointFindersFee (base name: "ack_joint_finders_fee")', function() {
        // TODO: update the code to test the property ackJointFindersFee
        expect(instance).to.have.property('ackJointFindersFee');
        // expect(instance.ackJointFindersFee).to.be(expectedValueLiteral);
      });

      it('should have the property ackJointForeignFindersFee (base name: "ack_joint_foreign_finders_fee")', function() {
        // TODO: update the code to test the property ackJointForeignFindersFee
        expect(instance).to.have.property('ackJointForeignFindersFee');
        // expect(instance.ackJointForeignFindersFee).to.be(expectedValueLiteral);
      });

      it('should have the property ackJointMarketData (base name: "ack_joint_market_data")', function() {
        // TODO: update the code to test the property ackJointMarketData
        expect(instance).to.have.property('ackJointMarketData');
        // expect(instance.ackJointMarketData).to.be(expectedValueLiteral);
      });

      it('should have the property ackMarketData (base name: "ack_market_data")', function() {
        // TODO: update the code to test the property ackMarketData
        expect(instance).to.have.property('ackMarketData');
        // expect(instance.ackMarketData).to.be(expectedValueLiteral);
      });

      it('should have the property ackSignedBy (base name: "ack_signed_by")', function() {
        // TODO: update the code to test the property ackSignedBy
        expect(instance).to.have.property('ackSignedBy');
        // expect(instance.ackSignedBy).to.be(expectedValueLiteral);
      });

      it('should have the property ackSignedWhen (base name: "ack_signed_when")', function() {
        // TODO: update the code to test the property ackSignedWhen
        expect(instance).to.have.property('ackSignedWhen');
        // expect(instance.ackSignedWhen).to.be(expectedValueLiteral);
      });

      it('should have the property addressLine1 (base name: "address_line1")', function() {
        // TODO: update the code to test the property addressLine1
        expect(instance).to.have.property('addressLine1');
        // expect(instance.addressLine1).to.be(expectedValueLiteral);
      });

      it('should have the property addressLine2 (base name: "address_line2")', function() {
        // TODO: update the code to test the property addressLine2
        expect(instance).to.have.property('addressLine2');
        // expect(instance.addressLine2).to.be(expectedValueLiteral);
      });

      it('should have the property addressProofReviewBy (base name: "address_proof_review_by")', function() {
        // TODO: update the code to test the property addressProofReviewBy
        expect(instance).to.have.property('addressProofReviewBy');
        // expect(instance.addressProofReviewBy).to.be(expectedValueLiteral);
      });

      it('should have the property addressProofReviewWhen (base name: "address_proof_review_when")', function() {
        // TODO: update the code to test the property addressProofReviewWhen
        expect(instance).to.have.property('addressProofReviewWhen');
        // expect(instance.addressProofReviewWhen).to.be(expectedValueLiteral);
      });

      it('should have the property annualIncome (base name: "annual_income")', function() {
        // TODO: update the code to test the property annualIncome
        expect(instance).to.have.property('annualIncome');
        // expect(instance.annualIncome).to.be(expectedValueLiteral);
      });

      it('should have the property annualIncomeNumber (base name: "annual_income_number")', function() {
        // TODO: update the code to test the property annualIncomeNumber
        expect(instance).to.have.property('annualIncomeNumber');
        // expect(instance.annualIncomeNumber).to.be(expectedValueLiteral);
      });

      it('should have the property approvedBy (base name: "approved_by")', function() {
        // TODO: update the code to test the property approvedBy
        expect(instance).to.have.property('approvedBy');
        // expect(instance.approvedBy).to.be(expectedValueLiteral);
      });

      it('should have the property approvedWhen (base name: "approved_when")', function() {
        // TODO: update the code to test the property approvedWhen
        expect(instance).to.have.property('approvedWhen');
        // expect(instance.approvedWhen).to.be(expectedValueLiteral);
      });

      it('should have the property avatarUrl (base name: "avatar_url")', function() {
        // TODO: update the code to test the property avatarUrl
        expect(instance).to.have.property('avatarUrl');
        // expect(instance.avatarUrl).to.be(expectedValueLiteral);
      });

      it('should have the property badPasswordCount (base name: "bad_password_count")', function() {
        // TODO: update the code to test the property badPasswordCount
        expect(instance).to.have.property('badPasswordCount');
        // expect(instance.badPasswordCount).to.be(expectedValueLiteral);
      });

      it('should have the property brandAmbassador (base name: "brand_ambassador")', function() {
        // TODO: update the code to test the property brandAmbassador
        expect(instance).to.have.property('brandAmbassador');
        // expect(instance.brandAmbassador).to.be(expectedValueLiteral);
      });

      it('should have the property citizenship (base name: "citizenship")', function() {
        // TODO: update the code to test the property citizenship
        expect(instance).to.have.property('citizenship');
        // expect(instance.citizenship).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property countryId (base name: "country_id")', function() {
        // TODO: update the code to test the property countryId
        expect(instance).to.have.property('countryId');
        // expect(instance.countryId).to.be(expectedValueLiteral);
      });

      it('should have the property createdWhen (base name: "created_when")', function() {
        // TODO: update the code to test the property createdWhen
        expect(instance).to.have.property('createdWhen');
        // expect(instance.createdWhen).to.be(expectedValueLiteral);
      });

      it('should have the property director (base name: "director")', function() {
        // TODO: update the code to test the property director
        expect(instance).to.have.property('director');
        // expect(instance.director).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "display_name")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property dob (base name: "dob")', function() {
        // TODO: update the code to test the property dob
        expect(instance).to.have.property('dob');
        // expect(instance.dob).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property employerBusiness (base name: "employer_business")', function() {
        // TODO: update the code to test the property employerBusiness
        expect(instance).to.have.property('employerBusiness');
        // expect(instance.employerBusiness).to.be(expectedValueLiteral);
      });

      it('should have the property employerCompany (base name: "employer_company")', function() {
        // TODO: update the code to test the property employerCompany
        expect(instance).to.have.property('employerCompany');
        // expect(instance.employerCompany).to.be(expectedValueLiteral);
      });

      it('should have the property employerCountryId (base name: "employer_country_id")', function() {
        // TODO: update the code to test the property employerCountryId
        expect(instance).to.have.property('employerCountryId');
        // expect(instance.employerCountryId).to.be(expectedValueLiteral);
      });

      it('should have the property employerIsBroker (base name: "employer_is_broker")', function() {
        // TODO: update the code to test the property employerIsBroker
        expect(instance).to.have.property('employerIsBroker');
        // expect(instance.employerIsBroker).to.be(expectedValueLiteral);
      });

      it('should have the property employmentStatus (base name: "employment_status")', function() {
        // TODO: update the code to test the property employmentStatus
        expect(instance).to.have.property('employmentStatus');
        // expect(instance.employmentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property employmentYears (base name: "employment_years")', function() {
        // TODO: update the code to test the property employmentYears
        expect(instance).to.have.property('employmentYears');
        // expect(instance.employmentYears).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "first_name")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property idNo (base name: "id_no")', function() {
        // TODO: update the code to test the property idNo
        expect(instance).to.have.property('idNo');
        // expect(instance.idNo).to.be(expectedValueLiteral);
      });

      it('should have the property investmentExperience (base name: "investment_experience")', function() {
        // TODO: update the code to test the property investmentExperience
        expect(instance).to.have.property('investmentExperience');
        // expect(instance.investmentExperience).to.be(expectedValueLiteral);
      });

      it('should have the property investmentObjectives (base name: "investment_objectives")', function() {
        // TODO: update the code to test the property investmentObjectives
        expect(instance).to.have.property('investmentObjectives');
        // expect(instance.investmentObjectives).to.be(expectedValueLiteral);
      });

      it('should have the property kycWhen (base name: "kyc_when")', function() {
        // TODO: update the code to test the property kycWhen
        expect(instance).to.have.property('kycWhen');
        // expect(instance.kycWhen).to.be(expectedValueLiteral);
      });

      it('should have the property languageId (base name: "language_id")', function() {
        // TODO: update the code to test the property languageId
        expect(instance).to.have.property('languageId');
        // expect(instance.languageId).to.be(expectedValueLiteral);
      });

      it('should have the property lastLoginWhen (base name: "last_login_when")', function() {
        // TODO: update the code to test the property lastLoginWhen
        expect(instance).to.have.property('lastLoginWhen');
        // expect(instance.lastLoginWhen).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "last_name")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property marginDefault (base name: "margin_default")', function() {
        // TODO: update the code to test the property marginDefault
        expect(instance).to.have.property('marginDefault');
        // expect(instance.marginDefault).to.be(expectedValueLiteral);
      });

      it('should have the property maritalStatus (base name: "marital_status")', function() {
        // TODO: update the code to test the property maritalStatus
        expect(instance).to.have.property('maritalStatus');
        // expect(instance.maritalStatus).to.be(expectedValueLiteral);
      });

      it('should have the property networthLiquid (base name: "networth_liquid")', function() {
        // TODO: update the code to test the property networthLiquid
        expect(instance).to.have.property('networthLiquid');
        // expect(instance.networthLiquid).to.be(expectedValueLiteral);
      });

      it('should have the property networthTotal (base name: "networth_total")', function() {
        // TODO: update the code to test the property networthTotal
        expect(instance).to.have.property('networthTotal');
        // expect(instance.networthTotal).to.be(expectedValueLiteral);
      });

      it('should have the property ownershipType (base name: "ownership_type")', function() {
        // TODO: update the code to test the property ownershipType
        expect(instance).to.have.property('ownershipType');
        // expect(instance.ownershipType).to.be(expectedValueLiteral);
      });

      it('should have the property parentIb (base name: "parent_ib")', function() {
        // TODO: update the code to test the property parentIb
        expect(instance).to.have.property('parentIb');
        // expect(instance.parentIb).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property pictureReviewBy (base name: "picture_review_by")', function() {
        // TODO: update the code to test the property pictureReviewBy
        expect(instance).to.have.property('pictureReviewBy');
        // expect(instance.pictureReviewBy).to.be(expectedValueLiteral);
      });

      it('should have the property pictureReviewWhen (base name: "picture_review_when")', function() {
        // TODO: update the code to test the property pictureReviewWhen
        expect(instance).to.have.property('pictureReviewWhen');
        // expect(instance.pictureReviewWhen).to.be(expectedValueLiteral);
      });

      it('should have the property politcallyExposed (base name: "politcally_exposed")', function() {
        // TODO: update the code to test the property politcallyExposed
        expect(instance).to.have.property('politcallyExposed');
        // expect(instance.politcallyExposed).to.be(expectedValueLiteral);
      });

      it('should have the property referralCode (base name: "referral_code")', function() {
        // TODO: update the code to test the property referralCode
        expect(instance).to.have.property('referralCode');
        // expect(instance.referralCode).to.be(expectedValueLiteral);
      });

      it('should have the property riskTolerance (base name: "risk_tolerance")', function() {
        // TODO: update the code to test the property riskTolerance
        expect(instance).to.have.property('riskTolerance');
        // expect(instance.riskTolerance).to.be(expectedValueLiteral);
      });

      it('should have the property stateProvince (base name: "state_province")', function() {
        // TODO: update the code to test the property stateProvince
        expect(instance).to.have.property('stateProvince');
        // expect(instance.stateProvince).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property termsOfUse (base name: "terms_of_use")', function() {
        // TODO: update the code to test the property termsOfUse
        expect(instance).to.have.property('termsOfUse');
        // expect(instance.termsOfUse).to.be(expectedValueLiteral);
      });

      it('should have the property updatedWhen (base name: "updated_when")', function() {
        // TODO: update the code to test the property updatedWhen
        expect(instance).to.have.property('updatedWhen');
        // expect(instance.updatedWhen).to.be(expectedValueLiteral);
      });

      it('should have the property usCitizen (base name: "us_citizen")', function() {
        // TODO: update the code to test the property usCitizen
        expect(instance).to.have.property('usCitizen');
        // expect(instance.usCitizen).to.be(expectedValueLiteral);
      });

      it('should have the property userNoteQty (base name: "user_note_qty")', function() {
        // TODO: update the code to test the property userNoteQty
        expect(instance).to.have.property('userNoteQty');
        // expect(instance.userNoteQty).to.be(expectedValueLiteral);
      });

      it('should have the property userType (base name: "user_type")', function() {
        // TODO: update the code to test the property userType
        expect(instance).to.have.property('userType');
        // expect(instance.userType).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

      it('should have the property wlpId (base name: "wlp_id")', function() {
        // TODO: update the code to test the property wlpId
        expect(instance).to.have.property('wlpId');
        // expect(instance.wlpId).to.be(expectedValueLiteral);
      });

      it('should have the property zipPostalCode (base name: "zip_postal_code")', function() {
        // TODO: update the code to test the property zipPostalCode
        expect(instance).to.have.property('zipPostalCode');
        // expect(instance.zipPostalCode).to.be(expectedValueLiteral);
      });

    });
  });

}));
