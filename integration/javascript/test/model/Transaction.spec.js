/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Transaction', function() {
      beforeEach(function() {
        instance = new HydrogenIntegrationApi.Transaction();
      });

      it('should create an instance of Transaction', function() {
        // TODO: update the code to test Transaction
        expect(instance).to.be.a(HydrogenIntegrationApi.Transaction);
      });

      it('should have the property accountAmount (base name: "account_amount")', function() {
        // TODO: update the code to test the property accountAmount
        expect(instance).to.have.property('accountAmount');
        // expect(instance.accountAmount).to.be(expectedValueLiteral);
      });

      it('should have the property accountBalance (base name: "account_balance")', function() {
        // TODO: update the code to test the property accountBalance
        expect(instance).to.have.property('accountBalance');
        // expect(instance.accountBalance).to.be(expectedValueLiteral);
      });

      it('should have the property accountType (base name: "account_type")', function() {
        // TODO: update the code to test the property accountType
        expect(instance).to.have.property('accountType');
        // expect(instance.accountType).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

      it('should have the property dividend (base name: "dividend")', function() {
        // TODO: update the code to test the property dividend
        expect(instance).to.have.property('dividend');
        // expect(instance.dividend).to.be(expectedValueLiteral);
      });

      it('should have the property dividendTax (base name: "dividend_tax")', function() {
        // TODO: update the code to test the property dividendTax
        expect(instance).to.have.property('dividendTax');
        // expect(instance.dividendTax).to.be(expectedValueLiteral);
      });

      it('should have the property dnb (base name: "dnb")', function() {
        // TODO: update the code to test the property dnb
        expect(instance).to.have.property('dnb');
        // expect(instance.dnb).to.be(expectedValueLiteral);
      });

      it('should have the property feeBase (base name: "fee_base")', function() {
        // TODO: update the code to test the property feeBase
        expect(instance).to.have.property('feeBase');
        // expect(instance.feeBase).to.be(expectedValueLiteral);
      });

      it('should have the property feeExchange (base name: "fee_exchange")', function() {
        // TODO: update the code to test the property feeExchange
        expect(instance).to.have.property('feeExchange');
        // expect(instance.feeExchange).to.be(expectedValueLiteral);
      });

      it('should have the property feeSec (base name: "fee_sec")', function() {
        // TODO: update the code to test the property feeSec
        expect(instance).to.have.property('feeSec');
        // expect(instance.feeSec).to.be(expectedValueLiteral);
      });

      it('should have the property feeTaf (base name: "fee_taf")', function() {
        // TODO: update the code to test the property feeTaf
        expect(instance).to.have.property('feeTaf');
        // expect(instance.feeTaf).to.be(expectedValueLiteral);
      });

      it('should have the property feeXtraShares (base name: "fee_xtra_shares")', function() {
        // TODO: update the code to test the property feeXtraShares
        expect(instance).to.have.property('feeXtraShares');
        // expect(instance.feeXtraShares).to.be(expectedValueLiteral);
      });

      it('should have the property fillPx (base name: "fill_px")', function() {
        // TODO: update the code to test the property fillPx
        expect(instance).to.have.property('fillPx');
        // expect(instance.fillPx).to.be(expectedValueLiteral);
      });

      it('should have the property fillQty (base name: "fill_qty")', function() {
        // TODO: update the code to test the property fillQty
        expect(instance).to.have.property('fillQty');
        // expect(instance.fillQty).to.be(expectedValueLiteral);
      });

      it('should have the property finTranId (base name: "fin_tran_id")', function() {
        // TODO: update the code to test the property finTranId
        expect(instance).to.have.property('finTranId');
        // expect(instance.finTranId).to.be(expectedValueLiteral);
      });

      it('should have the property finTranTypeId (base name: "fin_tran_type_id")', function() {
        // TODO: update the code to test the property finTranTypeId
        expect(instance).to.have.property('finTranTypeId');
        // expect(instance.finTranTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property instrument (base name: "instrument")', function() {
        // TODO: update the code to test the property instrument
        expect(instance).to.have.property('instrument');
        // expect(instance.instrument).to.be(expectedValueLiteral);
      });

      it('should have the property mergerAcquisition (base name: "merger_acquisition")', function() {
        // TODO: update the code to test the property mergerAcquisition
        expect(instance).to.have.property('mergerAcquisition');
        // expect(instance.mergerAcquisition).to.be(expectedValueLiteral);
      });

      it('should have the property orderId (base name: "order_id")', function() {
        // TODO: update the code to test the property orderId
        expect(instance).to.have.property('orderId');
        // expect(instance.orderId).to.be(expectedValueLiteral);
      });

      it('should have the property positionDelta (base name: "position_delta")', function() {
        // TODO: update the code to test the property positionDelta
        expect(instance).to.have.property('positionDelta');
        // expect(instance.positionDelta).to.be(expectedValueLiteral);
      });

      it('should have the property systemAmount (base name: "system_amount")', function() {
        // TODO: update the code to test the property systemAmount
        expect(instance).to.have.property('systemAmount');
        // expect(instance.systemAmount).to.be(expectedValueLiteral);
      });

      it('should have the property tranWhen (base name: "tran_when")', function() {
        // TODO: update the code to test the property tranWhen
        expect(instance).to.have.property('tranWhen');
        // expect(instance.tranWhen).to.be(expectedValueLiteral);
      });

    });
  });

}));
