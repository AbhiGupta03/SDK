/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AggregationAccount', function() {
      beforeEach(function() {
        instance = new HydrogenIntegrationApi.AggregationAccount();
      });

      it('should create an instance of AggregationAccount', function() {
        // TODO: update the code to test AggregationAccount
        expect(instance).to.be.a(HydrogenIntegrationApi.AggregationAccount);
      });

      it('should have the property accountHolder (base name: "account_holder")', function() {
        // TODO: update the code to test the property accountHolder
        expect(instance).to.have.property('accountHolder');
        // expect(instance.accountHolder).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "account_name")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property bankLinkId (base name: "bank_link_id")', function() {
        // TODO: update the code to test the property bankLinkId
        expect(instance).to.have.property('bankLinkId');
        // expect(instance.bankLinkId).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property clientId (base name: "client_id")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "create_date")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "currency_code")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property financialOfferId (base name: "financial_offer_id")', function() {
        // TODO: update the code to test the property financialOfferId
        expect(instance).to.have.property('financialOfferId');
        // expect(instance.financialOfferId).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property institutionName (base name: "institution_name")', function() {
        // TODO: update the code to test the property institutionName
        expect(instance).to.have.property('institutionName');
        // expect(instance.institutionName).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "is_active")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property isAsset (base name: "is_asset")', function() {
        // TODO: update the code to test the property isAsset
        expect(instance).to.have.property('isAsset');
        // expect(instance.isAsset).to.be(expectedValueLiteral);
      });

      it('should have the property isBusiness (base name: "is_business")', function() {
        // TODO: update the code to test the property isBusiness
        expect(instance).to.have.property('isBusiness');
        // expect(instance.isBusiness).to.be(expectedValueLiteral);
      });

      it('should have the property isCash (base name: "is_cash")', function() {
        // TODO: update the code to test the property isCash
        expect(instance).to.have.property('isCash');
        // expect(instance.isCash).to.be(expectedValueLiteral);
      });

      it('should have the property isInvestment (base name: "is_investment")', function() {
        // TODO: update the code to test the property isInvestment
        expect(instance).to.have.property('isInvestment');
        // expect(instance.isInvestment).to.be(expectedValueLiteral);
      });

      it('should have the property isLinkVerified (base name: "is_link_verified")', function() {
        // TODO: update the code to test the property isLinkVerified
        expect(instance).to.have.property('isLinkVerified');
        // expect(instance.isLinkVerified).to.be(expectedValueLiteral);
      });

      it('should have the property isManual (base name: "is_manual")', function() {
        // TODO: update the code to test the property isManual
        expect(instance).to.have.property('isManual');
        // expect(instance.isManual).to.be(expectedValueLiteral);
      });

      it('should have the property mask (base name: "mask")', function() {
        // TODO: update the code to test the property mask
        expect(instance).to.have.property('mask');
        // expect(instance.mask).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryId (base name: "secondary_id")', function() {
        // TODO: update the code to test the property secondaryId
        expect(instance).to.have.property('secondaryId');
        // expect(instance.secondaryId).to.be(expectedValueLiteral);
      });

      it('should have the property subcategory (base name: "subcategory")', function() {
        // TODO: update the code to test the property subcategory
        expect(instance).to.have.property('subcategory');
        // expect(instance.subcategory).to.be(expectedValueLiteral);
      });

      it('should have the property updateDate (base name: "update_date")', function() {
        // TODO: update the code to test the property updateDate
        expect(instance).to.have.property('updateDate');
        // expect(instance.updateDate).to.be(expectedValueLiteral);
      });

    });
  });

}));
