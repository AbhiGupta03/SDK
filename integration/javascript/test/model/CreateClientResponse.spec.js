/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateClientResponse', function() {
      beforeEach(function() {
        instance = new HydrogenIntegrationApi.CreateClientResponse();
      });

      it('should create an instance of CreateClientResponse', function() {
        // TODO: update the code to test CreateClientResponse
        expect(instance).to.be.a(HydrogenIntegrationApi.CreateClientResponse);
      });

      it('should have the property createdWhen (base name: "created_when")', function() {
        // TODO: update the code to test the property createdWhen
        expect(instance).to.have.property('createdWhen');
        // expect(instance.createdWhen).to.be(expectedValueLiteral);
      });

      it('should have the property documents (base name: "documents")', function() {
        // TODO: update the code to test the property documents
        expect(instance).to.have.property('documents');
        // expect(instance.documents).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property parentIb (base name: "parent_ib")', function() {
        // TODO: update the code to test the property parentIb
        expect(instance).to.have.property('parentIb');
        // expect(instance.parentIb).to.be(expectedValueLiteral);
      });

      it('should have the property referralCode (base name: "referral_code")', function() {
        // TODO: update the code to test the property referralCode
        expect(instance).to.have.property('referralCode');
        // expect(instance.referralCode).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property updatedWhen (base name: "updated_when")', function() {
        // TODO: update the code to test the property updatedWhen
        expect(instance).to.have.property('updatedWhen');
        // expect(instance.updatedWhen).to.be(expectedValueLiteral);
      });

      it('should have the property userType (base name: "user_type")', function() {
        // TODO: update the code to test the property userType
        expect(instance).to.have.property('userType');
        // expect(instance.userType).to.be(expectedValueLiteral);
      });

      it('should have the property wlpId (base name: "wlp_id")', function() {
        // TODO: update the code to test the property wlpId
        expect(instance).to.have.property('wlpId');
        // expect(instance.wlpId).to.be(expectedValueLiteral);
      });

    });
  });

}));
