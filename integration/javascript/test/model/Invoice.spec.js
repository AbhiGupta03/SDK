/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Invoice', function() {
      beforeEach(function() {
        instance = new HydrogenIntegrationApi.Invoice();
      });

      it('should create an instance of Invoice', function() {
        // TODO: update the code to test Invoice
        expect(instance).to.be.a(HydrogenIntegrationApi.Invoice);
      });

      it('should have the property clientId (base name: "client_id")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "create_date")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "currency_code")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property customerId (base name: "customer_id")', function() {
        // TODO: update the code to test the property customerId
        expect(instance).to.have.property('customerId');
        // expect(instance.customerId).to.be(expectedValueLiteral);
      });

      it('should have the property department (base name: "department")', function() {
        // TODO: update the code to test the property department
        expect(instance).to.have.property('department');
        // expect(instance.department).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property documentId (base name: "document_id")', function() {
        // TODO: update the code to test the property documentId
        expect(instance).to.have.property('documentId');
        // expect(instance.documentId).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "due_date")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceDate (base name: "invoice_date")', function() {
        // TODO: update the code to test the property invoiceDate
        expect(instance).to.have.property('invoiceDate');
        // expect(instance.invoiceDate).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceName (base name: "invoice_name")', function() {
        // TODO: update the code to test the property invoiceName
        expect(instance).to.have.property('invoiceName');
        // expect(instance.invoiceName).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceNumber (base name: "invoice_number")', function() {
        // TODO: update the code to test the property invoiceNumber
        expect(instance).to.have.property('invoiceNumber');
        // expect(instance.invoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "is_active")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property lineItems (base name: "line_items")', function() {
        // TODO: update the code to test the property lineItems
        expect(instance).to.have.property('lineItems');
        // expect(instance.lineItems).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property paymentInstructions (base name: "payment_instructions")', function() {
        // TODO: update the code to test the property paymentInstructions
        expect(instance).to.have.property('paymentInstructions');
        // expect(instance.paymentInstructions).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTerms (base name: "payment_terms")', function() {
        // TODO: update the code to test the property paymentTerms
        expect(instance).to.have.property('paymentTerms');
        // expect(instance.paymentTerms).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryId (base name: "secondary_id")', function() {
        // TODO: update the code to test the property secondaryId
        expect(instance).to.have.property('secondaryId');
        // expect(instance.secondaryId).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "total_amount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property totalDiscount (base name: "total_discount")', function() {
        // TODO: update the code to test the property totalDiscount
        expect(instance).to.have.property('totalDiscount');
        // expect(instance.totalDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property totalDue (base name: "total_due")', function() {
        // TODO: update the code to test the property totalDue
        expect(instance).to.have.property('totalDue');
        // expect(instance.totalDue).to.be(expectedValueLiteral);
      });

      it('should have the property totalSubtotal (base name: "total_subtotal")', function() {
        // TODO: update the code to test the property totalSubtotal
        expect(instance).to.have.property('totalSubtotal');
        // expect(instance.totalSubtotal).to.be(expectedValueLiteral);
      });

      it('should have the property totalTax (base name: "total_tax")', function() {
        // TODO: update the code to test the property totalTax
        expect(instance).to.have.property('totalTax');
        // expect(instance.totalTax).to.be(expectedValueLiteral);
      });

      it('should have the property updateDate (base name: "update_date")', function() {
        // TODO: update the code to test the property updateDate
        expect(instance).to.have.property('updateDate');
        // expect(instance.updateDate).to.be(expectedValueLiteral);
      });

    });
  });

}));
