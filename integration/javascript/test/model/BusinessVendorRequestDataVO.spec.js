/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BusinessVendorRequestDataVO', function() {
      beforeEach(function() {
        instance = new HydrogenIntegrationApi.BusinessVendorRequestDataVO();
      });

      it('should create an instance of BusinessVendorRequestDataVO', function() {
        // TODO: update the code to test BusinessVendorRequestDataVO
        expect(instance).to.be.a(HydrogenIntegrationApi.BusinessVendorRequestDataVO);
      });

      it('should have the property businessAddresses (base name: "business_addresses")', function() {
        // TODO: update the code to test the property businessAddresses
        expect(instance).to.have.property('businessAddresses');
        // expect(instance.businessAddresses).to.be(expectedValueLiteral);
      });

      it('should have the property dbaName (base name: "dba_name")', function() {
        // TODO: update the code to test the property dbaName
        expect(instance).to.have.property('dbaName');
        // expect(instance.dbaName).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property identificationNumber (base name: "identification_number")', function() {
        // TODO: update the code to test the property identificationNumber
        expect(instance).to.have.property('identificationNumber');
        // expect(instance.identificationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property identificationNumberType (base name: "identification_number_type")', function() {
        // TODO: update the code to test the property identificationNumberType
        expect(instance).to.have.property('identificationNumberType');
        // expect(instance.identificationNumberType).to.be(expectedValueLiteral);
      });

      it('should have the property incorporationDate (base name: "incorporation_date")', function() {
        // TODO: update the code to test the property incorporationDate
        expect(instance).to.have.property('incorporationDate');
        // expect(instance.incorporationDate).to.be(expectedValueLiteral);
      });

      it('should have the property incorporationState (base name: "incorporation_state")', function() {
        // TODO: update the code to test the property incorporationState
        expect(instance).to.have.property('incorporationState');
        // expect(instance.incorporationState).to.be(expectedValueLiteral);
      });

      it('should have the property isPublic (base name: "is_public")', function() {
        // TODO: update the code to test the property isPublic
        expect(instance).to.have.property('isPublic');
        // expect(instance.isPublic).to.be(expectedValueLiteral);
      });

      it('should have the property legalName (base name: "legal_name")', function() {
        // TODO: update the code to test the property legalName
        expect(instance).to.have.property('legalName');
        // expect(instance.legalName).to.be(expectedValueLiteral);
      });

      it('should have the property legalStructure (base name: "legal_structure")', function() {
        // TODO: update the code to test the property legalStructure
        expect(instance).to.have.property('legalStructure');
        // expect(instance.legalStructure).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property phoneNumber (base name: "phone_number")', function() {
        // TODO: update the code to test the property phoneNumber
        expect(instance).to.have.property('phoneNumber');
        // expect(instance.phoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property ticker (base name: "ticker")', function() {
        // TODO: update the code to test the property ticker
        expect(instance).to.have.property('ticker');
        // expect(instance.ticker).to.be(expectedValueLiteral);
      });

      it('should have the property website (base name: "website")', function() {
        // TODO: update the code to test the property website
        expect(instance).to.have.property('website');
        // expect(instance.website).to.be(expectedValueLiteral);
      });

    });
  });

}));
