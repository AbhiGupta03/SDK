/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenIntegrationApi);
  }
}(this, function(expect, HydrogenIntegrationApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('KycVendorRequestDataVO', function() {
      beforeEach(function() {
        instance = new HydrogenIntegrationApi.KycVendorRequestDataVO();
      });

      it('should create an instance of KycVendorRequestDataVO', function() {
        // TODO: update the code to test KycVendorRequestDataVO
        expect(instance).to.be.a(HydrogenIntegrationApi.KycVendorRequestDataVO);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property countryOfResidence (base name: "country_of_residence")', function() {
        // TODO: update the code to test the property countryOfResidence
        expect(instance).to.have.property('countryOfResidence');
        // expect(instance.countryOfResidence).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfBirth (base name: "date_of_birth")', function() {
        // TODO: update the code to test the property dateOfBirth
        expect(instance).to.have.property('dateOfBirth');
        // expect(instance.dateOfBirth).to.be(expectedValueLiteral);
      });

      it('should have the property electronDocumentId (base name: "electron_document_id")', function() {
        // TODO: update the code to test the property electronDocumentId
        expect(instance).to.have.property('electronDocumentId');
        // expect(instance.electronDocumentId).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "first_name")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property identificationNumber (base name: "identification_number")', function() {
        // TODO: update the code to test the property identificationNumber
        expect(instance).to.have.property('identificationNumber');
        // expect(instance.identificationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property identificationNumberType (base name: "identification_number_type")', function() {
        // TODO: update the code to test the property identificationNumberType
        expect(instance).to.have.property('identificationNumberType');
        // expect(instance.identificationNumberType).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "last_name")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property middleName (base name: "middle_name")', function() {
        // TODO: update the code to test the property middleName
        expect(instance).to.have.property('middleName');
        // expect(instance.middleName).to.be(expectedValueLiteral);
      });

      it('should have the property phoneNumber (base name: "phone_number")', function() {
        // TODO: update the code to test the property phoneNumber
        expect(instance).to.have.property('phoneNumber');
        // expect(instance.phoneNumber).to.be(expectedValueLiteral);
      });

    });
  });

}));
