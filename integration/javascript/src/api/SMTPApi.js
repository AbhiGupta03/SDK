/**
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Email', 'model/SmtpResponseVO', 'model/SmtpVO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Email'), require('../model/SmtpResponseVO'), require('../model/SmtpVO'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenIntegrationApi) {
      root.HydrogenIntegrationApi = {};
    }
    root.HydrogenIntegrationApi.SMTPApi = factory(root.HydrogenIntegrationApi.ApiClient, root.HydrogenIntegrationApi.Email, root.HydrogenIntegrationApi.SmtpResponseVO, root.HydrogenIntegrationApi.SmtpVO);
  }
}(this, function(ApiClient, Email, SmtpResponseVO, SmtpVO) {
  'use strict';

  /**
   * SMTP service.
   * @module api/SMTPApi
   * @version 1.3.0
   */

  /**
   * Constructs a new SMTPApi. 
   * @alias module:api/SMTPApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSmtpStatus operation.
     * @callback module:api/SMTPApi~getSmtpStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch details for corresponding email_id
     * Fetch details for corresponding email_id
     * @param {String} emailId email_id
     * @param {module:api/SMTPApi~getSmtpStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    this.getSmtpStatus = function(emailId, callback) {
      var postBody = null;

      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling getSmtpStatus");
      }


      var pathParams = {
        'email_id': emailId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Email;

      return this.apiClient.callApi(
        '/smtp/status/{email_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMail operation.
     * @callback module:api/SMTPApi~sendMailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmtpResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Mail to recipient
     * Send Mail to recipient
     * @param {module:model/SmtpVO} smtpVO smtpVO
     * @param {module:api/SMTPApi~sendMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmtpResponseVO}
     */
    this.sendMail = function(smtpVO, callback) {
      var postBody = smtpVO;

      // verify the required parameter 'smtpVO' is set
      if (smtpVO === undefined || smtpVO === null) {
        throw new Error("Missing the required parameter 'smtpVO' when calling sendMail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SmtpResponseVO;

      return this.apiClient.callApi(
        '/smtp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
