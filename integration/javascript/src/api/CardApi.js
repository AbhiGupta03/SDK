/**
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BaseResponseVO', 'model/CardAutoReloadRequestCO', 'model/CardAutoReloadResponseVO', 'model/CardBalanceResponseVO', 'model/CardBaseRequestCO', 'model/CardBusinessRequestCO', 'model/CardClientRequestCO', 'model/CardLoadRequestCO', 'model/CardLoadUnloadResponseVO', 'model/CardPinRequestCO', 'model/CardReplaceResponseVO', 'model/CardReserveAccountResponseVO', 'model/CardReserveTransferRequestCO', 'model/CardReserveTransferResponseVO', 'model/CardSpendingControlRequestCO', 'model/CardSpendingControlResponseVO', 'model/CardTokenRequestCO', 'model/CardTokenResponseVO', 'model/CardTransactionResponseVO', 'model/CardUnloadRequestCO', 'model/CardUpdatePinRequestCO', 'model/CreateBusinessResponseVO', 'model/CreateCardClientResponseVO', 'model/GetCardImageResponseVO', 'model/GetCardPciDetailsResponseVO', 'model/GetCardStatementResponseVO', 'model/GetCardTokenResponseVO', 'model/UpdateBusinessResponseVO', 'model/UpdateCardClientResponseVO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BaseResponseVO'), require('../model/CardAutoReloadRequestCO'), require('../model/CardAutoReloadResponseVO'), require('../model/CardBalanceResponseVO'), require('../model/CardBaseRequestCO'), require('../model/CardBusinessRequestCO'), require('../model/CardClientRequestCO'), require('../model/CardLoadRequestCO'), require('../model/CardLoadUnloadResponseVO'), require('../model/CardPinRequestCO'), require('../model/CardReplaceResponseVO'), require('../model/CardReserveAccountResponseVO'), require('../model/CardReserveTransferRequestCO'), require('../model/CardReserveTransferResponseVO'), require('../model/CardSpendingControlRequestCO'), require('../model/CardSpendingControlResponseVO'), require('../model/CardTokenRequestCO'), require('../model/CardTokenResponseVO'), require('../model/CardTransactionResponseVO'), require('../model/CardUnloadRequestCO'), require('../model/CardUpdatePinRequestCO'), require('../model/CreateBusinessResponseVO'), require('../model/CreateCardClientResponseVO'), require('../model/GetCardImageResponseVO'), require('../model/GetCardPciDetailsResponseVO'), require('../model/GetCardStatementResponseVO'), require('../model/GetCardTokenResponseVO'), require('../model/UpdateBusinessResponseVO'), require('../model/UpdateCardClientResponseVO'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenIntegrationApi) {
      root.HydrogenIntegrationApi = {};
    }
    root.HydrogenIntegrationApi.CardApi = factory(root.HydrogenIntegrationApi.ApiClient, root.HydrogenIntegrationApi.BaseResponseVO, root.HydrogenIntegrationApi.CardAutoReloadRequestCO, root.HydrogenIntegrationApi.CardAutoReloadResponseVO, root.HydrogenIntegrationApi.CardBalanceResponseVO, root.HydrogenIntegrationApi.CardBaseRequestCO, root.HydrogenIntegrationApi.CardBusinessRequestCO, root.HydrogenIntegrationApi.CardClientRequestCO, root.HydrogenIntegrationApi.CardLoadRequestCO, root.HydrogenIntegrationApi.CardLoadUnloadResponseVO, root.HydrogenIntegrationApi.CardPinRequestCO, root.HydrogenIntegrationApi.CardReplaceResponseVO, root.HydrogenIntegrationApi.CardReserveAccountResponseVO, root.HydrogenIntegrationApi.CardReserveTransferRequestCO, root.HydrogenIntegrationApi.CardReserveTransferResponseVO, root.HydrogenIntegrationApi.CardSpendingControlRequestCO, root.HydrogenIntegrationApi.CardSpendingControlResponseVO, root.HydrogenIntegrationApi.CardTokenRequestCO, root.HydrogenIntegrationApi.CardTokenResponseVO, root.HydrogenIntegrationApi.CardTransactionResponseVO, root.HydrogenIntegrationApi.CardUnloadRequestCO, root.HydrogenIntegrationApi.CardUpdatePinRequestCO, root.HydrogenIntegrationApi.CreateBusinessResponseVO, root.HydrogenIntegrationApi.CreateCardClientResponseVO, root.HydrogenIntegrationApi.GetCardImageResponseVO, root.HydrogenIntegrationApi.GetCardPciDetailsResponseVO, root.HydrogenIntegrationApi.GetCardStatementResponseVO, root.HydrogenIntegrationApi.GetCardTokenResponseVO, root.HydrogenIntegrationApi.UpdateBusinessResponseVO, root.HydrogenIntegrationApi.UpdateCardClientResponseVO);
  }
}(this, function(ApiClient, BaseResponseVO, CardAutoReloadRequestCO, CardAutoReloadResponseVO, CardBalanceResponseVO, CardBaseRequestCO, CardBusinessRequestCO, CardClientRequestCO, CardLoadRequestCO, CardLoadUnloadResponseVO, CardPinRequestCO, CardReplaceResponseVO, CardReserveAccountResponseVO, CardReserveTransferRequestCO, CardReserveTransferResponseVO, CardSpendingControlRequestCO, CardSpendingControlResponseVO, CardTokenRequestCO, CardTokenResponseVO, CardTransactionResponseVO, CardUnloadRequestCO, CardUpdatePinRequestCO, CreateBusinessResponseVO, CreateCardClientResponseVO, GetCardImageResponseVO, GetCardPciDetailsResponseVO, GetCardStatementResponseVO, GetCardTokenResponseVO, UpdateBusinessResponseVO, UpdateCardClientResponseVO) {
  'use strict';

  /**
   * Card service.
   * @module api/CardApi
   * @version 1.3.1
   */

  /**
   * Constructs a new CardApi. 
   * @alias module:api/CardApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAutoReloadUsingPost operation.
     * @callback module:api/CardApi~createAutoReloadUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardAutoReloadResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Card auto reload
     * @param {module:model/CardAutoReloadRequestCO} request request
     * @param {module:api/CardApi~createAutoReloadUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardAutoReloadResponseVO}
     */
    this.createAutoReloadUsingPost = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createAutoReloadUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardAutoReloadResponseVO;

      return this.apiClient.callApi(
        '/card/auto_reload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardActivateUsingPost operation.
     * @callback module:api/CardApi~createCardActivateUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate card
     * @param {module:model/CardBaseRequestCO} activateRequest activateRequest
     * @param {module:api/CardApi~createCardActivateUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardActivateUsingPost = function(activateRequest, callback) {
      var postBody = activateRequest;

      // verify the required parameter 'activateRequest' is set
      if (activateRequest === undefined || activateRequest === null) {
        throw new Error("Missing the required parameter 'activateRequest' when calling createCardActivateUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardBusinessUsingPost operation.
     * @callback module:api/CardApi~createCardBusinessUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBusinessResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card business
     * @param {module:model/CardBusinessRequestCO} cardBusinessRequestCO cardBusinessRequestCO
     * @param {module:api/CardApi~createCardBusinessUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBusinessResponseVO}
     */
    this.createCardBusinessUsingPost = function(cardBusinessRequestCO, callback) {
      var postBody = cardBusinessRequestCO;

      // verify the required parameter 'cardBusinessRequestCO' is set
      if (cardBusinessRequestCO === undefined || cardBusinessRequestCO === null) {
        throw new Error("Missing the required parameter 'cardBusinessRequestCO' when calling createCardBusinessUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateBusinessResponseVO;

      return this.apiClient.callApi(
        '/card/business', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardCloseUsingPost operation.
     * @callback module:api/CardApi~createCardCloseUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * close a card
     * @param {module:model/CardBaseRequestCO} closeRequest closeRequest
     * @param {module:api/CardApi~createCardCloseUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardCloseUsingPost = function(closeRequest, callback) {
      var postBody = closeRequest;

      // verify the required parameter 'closeRequest' is set
      if (closeRequest === undefined || closeRequest === null) {
        throw new Error("Missing the required parameter 'closeRequest' when calling createCardCloseUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardIssueUsingPost operation.
     * @callback module:api/CardApi~createCardIssueUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * issue a card
     * @param {module:model/CardBaseRequestCO} issueRequest issueRequest
     * @param {module:api/CardApi~createCardIssueUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardIssueUsingPost = function(issueRequest, callback) {
      var postBody = issueRequest;

      // verify the required parameter 'issueRequest' is set
      if (issueRequest === undefined || issueRequest === null) {
        throw new Error("Missing the required parameter 'issueRequest' when calling createCardIssueUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardLoadUsingPost operation.
     * @callback module:api/CardApi~createCardLoadUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardLoadUnloadResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card load
     * @param {module:model/CardLoadRequestCO} loadRequest loadRequest
     * @param {module:api/CardApi~createCardLoadUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardLoadUnloadResponseVO}
     */
    this.createCardLoadUsingPost = function(loadRequest, callback) {
      var postBody = loadRequest;

      // verify the required parameter 'loadRequest' is set
      if (loadRequest === undefined || loadRequest === null) {
        throw new Error("Missing the required parameter 'loadRequest' when calling createCardLoadUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardLoadUnloadResponseVO;

      return this.apiClient.callApi(
        '/card/load', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardPinUsingPost operation.
     * @callback module:api/CardApi~createCardPinUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pin card
     * @param {module:model/CardPinRequestCO} cardPinRequestCO cardPinRequestCO
     * @param {module:api/CardApi~createCardPinUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardPinUsingPost = function(cardPinRequestCO, callback) {
      var postBody = cardPinRequestCO;

      // verify the required parameter 'cardPinRequestCO' is set
      if (cardPinRequestCO === undefined || cardPinRequestCO === null) {
        throw new Error("Missing the required parameter 'cardPinRequestCO' when calling createCardPinUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/pin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReactivateUsingPost operation.
     * @callback module:api/CardApi~createCardReactivateUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reactivate card
     * @param {module:model/CardBaseRequestCO} reactivateRequest reactivateRequest
     * @param {module:api/CardApi~createCardReactivateUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardReactivateUsingPost = function(reactivateRequest, callback) {
      var postBody = reactivateRequest;

      // verify the required parameter 'reactivateRequest' is set
      if (reactivateRequest === undefined || reactivateRequest === null) {
        throw new Error("Missing the required parameter 'reactivateRequest' when calling createCardReactivateUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReissueUsingPost operation.
     * @callback module:api/CardApi~createCardReissueUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reissue a card
     * @param {module:model/CardBaseRequestCO} request request
     * @param {module:api/CardApi~createCardReissueUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardReissueUsingPost = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createCardReissueUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/reissue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReplaceUsingPost operation.
     * @callback module:api/CardApi~createCardReplaceUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardReplaceResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create card replace
     * @param {module:model/CardBaseRequestCO} request request
     * @param {module:api/CardApi~createCardReplaceUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardReplaceResponseVO}
     */
    this.createCardReplaceUsingPost = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createCardReplaceUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardReplaceResponseVO;

      return this.apiClient.callApi(
        '/card/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReserveTransferUsingPost operation.
     * @callback module:api/CardApi~createCardReserveTransferUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardReserveTransferResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Card reserve transfer
     * @param {module:model/CardReserveTransferRequestCO} request request
     * @param {module:api/CardApi~createCardReserveTransferUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardReserveTransferResponseVO}
     */
    this.createCardReserveTransferUsingPost = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createCardReserveTransferUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardReserveTransferResponseVO;

      return this.apiClient.callApi(
        '/card/reserve_transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardSpendingControlUsingPost operation.
     * @callback module:api/CardApi~createCardSpendingControlUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardSpendingControlResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create card spending control
     * @param {module:model/CardSpendingControlRequestCO} request request
     * @param {module:api/CardApi~createCardSpendingControlUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardSpendingControlResponseVO}
     */
    this.createCardSpendingControlUsingPost = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createCardSpendingControlUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardSpendingControlResponseVO;

      return this.apiClient.callApi(
        '/card/spending_control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardSuspendUsingPost operation.
     * @callback module:api/CardApi~createCardSuspendUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * suspend card
     * @param {module:model/CardBaseRequestCO} suspendRequest suspendRequest
     * @param {module:api/CardApi~createCardSuspendUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardSuspendUsingPost = function(suspendRequest, callback) {
      var postBody = suspendRequest;

      // verify the required parameter 'suspendRequest' is set
      if (suspendRequest === undefined || suspendRequest === null) {
        throw new Error("Missing the required parameter 'suspendRequest' when calling createCardSuspendUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardTokenUsingPost operation.
     * @callback module:api/CardApi~createCardTokenUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardTokenResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * token card
     * @param {module:model/CardTokenRequestCO} tokenizeRequest tokenizeRequest
     * @param {module:api/CardApi~createCardTokenUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardTokenResponseVO}
     */
    this.createCardTokenUsingPost = function(tokenizeRequest, callback) {
      var postBody = tokenizeRequest;

      // verify the required parameter 'tokenizeRequest' is set
      if (tokenizeRequest === undefined || tokenizeRequest === null) {
        throw new Error("Missing the required parameter 'tokenizeRequest' when calling createCardTokenUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardTokenResponseVO;

      return this.apiClient.callApi(
        '/card/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardUnloadUsingPost operation.
     * @callback module:api/CardApi~createCardUnloadUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardLoadUnloadResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card upload
     * @param {module:model/CardUnloadRequestCO} reloadRequest reloadRequest
     * @param {module:api/CardApi~createCardUnloadUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardLoadUnloadResponseVO}
     */
    this.createCardUnloadUsingPost = function(reloadRequest, callback) {
      var postBody = reloadRequest;

      // verify the required parameter 'reloadRequest' is set
      if (reloadRequest === undefined || reloadRequest === null) {
        throw new Error("Missing the required parameter 'reloadRequest' when calling createCardUnloadUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardLoadUnloadResponseVO;

      return this.apiClient.callApi(
        '/card/unload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClientCardUsingPost operation.
     * @callback module:api/CardApi~createClientCardUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCardClientResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card client
     * @param {module:model/CardClientRequestCO} cardClientRequestCO cardClientRequestCO
     * @param {module:api/CardApi~createClientCardUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCardClientResponseVO}
     */
    this.createClientCardUsingPost = function(cardClientRequestCO, callback) {
      var postBody = cardClientRequestCO;

      // verify the required parameter 'cardClientRequestCO' is set
      if (cardClientRequestCO === undefined || cardClientRequestCO === null) {
        throw new Error("Missing the required parameter 'cardClientRequestCO' when calling createClientCardUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateCardClientResponseVO;

      return this.apiClient.callApi(
        '/card/client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessStatusUsingGet operation.
     * @callback module:api/CardApi~getBusinessStatusUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a business status
     * @param {String} nucleusBusinessId nucleus_business_id
     * @param {module:api/CardApi~getBusinessStatusUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.getBusinessStatusUsingGet = function(nucleusBusinessId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusBusinessId' is set
      if (nucleusBusinessId === undefined || nucleusBusinessId === null) {
        throw new Error("Missing the required parameter 'nucleusBusinessId' when calling getBusinessStatusUsingGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nucleus_business_id': nucleusBusinessId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardBalanceUsingGet operation.
     * @callback module:api/CardApi~getCardBalanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardBalanceResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Card Balance
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end_date
     * @param {Date} opts.startDate start_date
     * @param {module:api/CardApi~getCardBalanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardBalanceResponseVO}
     */
    this.getCardBalanceUsingGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCardBalanceUsingGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CardBalanceResponseVO;

      return this.apiClient.callApi(
        '/card/balance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardImage operation.
     * @callback module:api/CardApi~getCardImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCardImageResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get card image
     * @param {String} cardId card_id
     * @param {module:api/CardApi~getCardImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCardImageResponseVO}
     */
    this.getCardImage = function(cardId, callback) {
      var postBody = null;

      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling getCardImage");
      }


      var pathParams = {
        'card_id': cardId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCardImageResponseVO;

      return this.apiClient.callApi(
        '/card/image/{card_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardPciDetails operation.
     * @callback module:api/CardApi~getCardPciDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCardPciDetailsResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get card pci details
     * @param {String} cardId card_id
     * @param {module:api/CardApi~getCardPciDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCardPciDetailsResponseVO}
     */
    this.getCardPciDetails = function(cardId, callback) {
      var postBody = null;

      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling getCardPciDetails");
      }


      var pathParams = {
        'card_id': cardId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCardPciDetailsResponseVO;

      return this.apiClient.callApi(
        '/card/pci_details/{card_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardReserveAccountDetailsUsingGet operation.
     * @callback module:api/CardApi~getCardReserveAccountDetailsUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardReserveAccountResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Card reserve account
     * @param {module:api/CardApi~getCardReserveAccountDetailsUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardReserveAccountResponseVO}
     */
    this.getCardReserveAccountDetailsUsingGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CardReserveAccountResponseVO;

      return this.apiClient.callApi(
        '/card/reserve', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardStatementUsingGet operation.
     * @callback module:api/CardApi~getCardStatementUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCardStatementResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get card statement
     * @param {String} cardId card_id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end_date
     * @param {Date} opts.startDate start_date
     * @param {module:api/CardApi~getCardStatementUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCardStatementResponseVO}
     */
    this.getCardStatementUsingGet = function(cardId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling getCardStatementUsingGet");
      }


      var pathParams = {
        'card_id': cardId
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCardStatementResponseVO;

      return this.apiClient.callApi(
        '/card/statement/{card_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardTokenUsingToken operation.
     * @callback module:api/CardApi~getCardTokenUsingTokenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCardTokenResponseVO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a card token
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {String} opts.deviceId device_id
     * @param {module:model/String} opts.deviceType device_type
     * @param {module:model/String} opts.wallet wallet
     * @param {module:api/CardApi~getCardTokenUsingTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCardTokenResponseVO>}
     */
    this.getCardTokenUsingToken = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCardTokenUsingToken");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'device_id': opts['deviceId'],
        'device_type': opts['deviceType'],
        'wallet': opts['wallet']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCardTokenResponseVO];

      return this.apiClient.callApi(
        '/card/token/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardTransactionUsingGet operation.
     * @callback module:api/CardApi~getCardTransactionUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardTransactionResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a card transaction
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end_date
     * @param {Date} opts.startDate start_date
     * @param {module:api/CardApi~getCardTransactionUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardTransactionResponseVO}
     */
    this.getCardTransactionUsingGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCardTransactionUsingGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CardTransactionResponseVO;

      return this.apiClient.callApi(
        '/card/transaction/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardUsingGet operation.
     * @callback module:api/CardApi~getCardUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a card information
     * @param {String} id id
     * @param {module:api/CardApi~getCardUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.getCardUsingGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCardUsingGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardBusinessUsingPut operation.
     * @callback module:api/CardApi~updateCardBusinessUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBusinessResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a card business
     * @param {String} nucleusBusinessId nucleus_business_id
     * @param {module:api/CardApi~updateCardBusinessUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBusinessResponseVO}
     */
    this.updateCardBusinessUsingPut = function(nucleusBusinessId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusBusinessId' is set
      if (nucleusBusinessId === undefined || nucleusBusinessId === null) {
        throw new Error("Missing the required parameter 'nucleusBusinessId' when calling updateCardBusinessUsingPut");
      }


      var pathParams = {
        'nucleus_business_id': nucleusBusinessId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateBusinessResponseVO;

      return this.apiClient.callApi(
        '/card/business/{nucleus_business_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardPinUsingPut operation.
     * @callback module:api/CardApi~updateCardPinUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a pin card
     * @param {module:model/CardUpdatePinRequestCO} cardPinRequestCO cardPinRequestCO
     * @param {String} id id
     * @param {module:api/CardApi~updateCardPinUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.updateCardPinUsingPut = function(cardPinRequestCO, id, callback) {
      var postBody = cardPinRequestCO;

      // verify the required parameter 'cardPinRequestCO' is set
      if (cardPinRequestCO === undefined || cardPinRequestCO === null) {
        throw new Error("Missing the required parameter 'cardPinRequestCO' when calling updateCardPinUsingPut");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCardPinUsingPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/pin/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardSpendingControlUsingPut operation.
     * @callback module:api/CardApi~updateCardSpendingControlUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardSpendingControlResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a card spending control
     * @param {String} nucleusSpendingControlId nucleus_spending_control_id
     * @param {module:api/CardApi~updateCardSpendingControlUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardSpendingControlResponseVO}
     */
    this.updateCardSpendingControlUsingPut = function(nucleusSpendingControlId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusSpendingControlId' is set
      if (nucleusSpendingControlId === undefined || nucleusSpendingControlId === null) {
        throw new Error("Missing the required parameter 'nucleusSpendingControlId' when calling updateCardSpendingControlUsingPut");
      }


      var pathParams = {
        'nucleus_spending_control_id': nucleusSpendingControlId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardSpendingControlResponseVO;

      return this.apiClient.callApi(
        '/card/spending_control/{nucleus_spending_control_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardUsingPut operation.
     * @callback module:api/CardApi~updateCardUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a card information
     * @param {String} id id
     * @param {module:api/CardApi~updateCardUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.updateCardUsingPut = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCardUsingPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientCardUsingPut operation.
     * @callback module:api/CardApi~updateClientCardUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCardClientResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a card client
     * @param {String} id id
     * @param {module:api/CardApi~updateClientCardUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCardClientResponseVO}
     */
    this.updateClientCardUsingPut = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClientCardUsingPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateCardClientResponseVO;

      return this.apiClient.callApi(
        '/card/client/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyCardPinUsingPost operation.
     * @callback module:api/CardApi~verifyCardPinUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verify card pin
     * @param {module:model/CardPinRequestCO} cardPinRequestCO cardPinRequestCO
     * @param {module:api/CardApi~verifyCardPinUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.verifyCardPinUsingPost = function(cardPinRequestCO, callback) {
      var postBody = cardPinRequestCO;

      // verify the required parameter 'cardPinRequestCO' is set
      if (cardPinRequestCO === undefined || cardPinRequestCO === null) {
        throw new Error("Missing the required parameter 'cardPinRequestCO' when calling verifyCardPinUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/pin/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
