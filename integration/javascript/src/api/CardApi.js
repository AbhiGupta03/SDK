/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BaseResponseVO', 'model/CardBalanceResponseVO', 'model/CardBaseRequestCO', 'model/CardClientRequestCO', 'model/CardClientResponseVO', 'model/CardPinRequestCO', 'model/CardReloadRequestCO', 'model/CardReloadUnloadResponseVO', 'model/CardTokenRequestCO', 'model/CardTokenResponseVO', 'model/CardTransactionResponseVO', 'model/CardTransferRequestCO', 'model/CardTransferResponseVO', 'model/CardUnloadRequestCO', 'model/GetCardTokenResponseVO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BaseResponseVO'), require('../model/CardBalanceResponseVO'), require('../model/CardBaseRequestCO'), require('../model/CardClientRequestCO'), require('../model/CardClientResponseVO'), require('../model/CardPinRequestCO'), require('../model/CardReloadRequestCO'), require('../model/CardReloadUnloadResponseVO'), require('../model/CardTokenRequestCO'), require('../model/CardTokenResponseVO'), require('../model/CardTransactionResponseVO'), require('../model/CardTransferRequestCO'), require('../model/CardTransferResponseVO'), require('../model/CardUnloadRequestCO'), require('../model/GetCardTokenResponseVO'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenIntegrationApi) {
      root.HydrogenIntegrationApi = {};
    }
    root.HydrogenIntegrationApi.CardApi = factory(root.HydrogenIntegrationApi.ApiClient, root.HydrogenIntegrationApi.BaseResponseVO, root.HydrogenIntegrationApi.CardBalanceResponseVO, root.HydrogenIntegrationApi.CardBaseRequestCO, root.HydrogenIntegrationApi.CardClientRequestCO, root.HydrogenIntegrationApi.CardClientResponseVO, root.HydrogenIntegrationApi.CardPinRequestCO, root.HydrogenIntegrationApi.CardReloadRequestCO, root.HydrogenIntegrationApi.CardReloadUnloadResponseVO, root.HydrogenIntegrationApi.CardTokenRequestCO, root.HydrogenIntegrationApi.CardTokenResponseVO, root.HydrogenIntegrationApi.CardTransactionResponseVO, root.HydrogenIntegrationApi.CardTransferRequestCO, root.HydrogenIntegrationApi.CardTransferResponseVO, root.HydrogenIntegrationApi.CardUnloadRequestCO, root.HydrogenIntegrationApi.GetCardTokenResponseVO);
  }
}(this, function(ApiClient, BaseResponseVO, CardBalanceResponseVO, CardBaseRequestCO, CardClientRequestCO, CardClientResponseVO, CardPinRequestCO, CardReloadRequestCO, CardReloadUnloadResponseVO, CardTokenRequestCO, CardTokenResponseVO, CardTransactionResponseVO, CardTransferRequestCO, CardTransferResponseVO, CardUnloadRequestCO, GetCardTokenResponseVO) {
  'use strict';

  /**
   * Card service.
   * @module api/CardApi
   * @version 1.2.1
   */

  /**
   * Constructs a new CardApi. 
   * @alias module:api/CardApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCardActivateUsingPost operation.
     * @callback module:api/CardApi~createCardActivateUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate card
     * @param {module:model/CardBaseRequestCO} activateRequest activateRequest
     * @param {module:api/CardApi~createCardActivateUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardActivateUsingPost = function(activateRequest, callback) {
      var postBody = activateRequest;

      // verify the required parameter 'activateRequest' is set
      if (activateRequest === undefined || activateRequest === null) {
        throw new Error("Missing the required parameter 'activateRequest' when calling createCardActivateUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/activate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardCloseUsingPost operation.
     * @callback module:api/CardApi~createCardCloseUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * close a card
     * @param {module:model/CardBaseRequestCO} closeRequest closeRequest
     * @param {module:api/CardApi~createCardCloseUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardCloseUsingPost = function(closeRequest, callback) {
      var postBody = closeRequest;

      // verify the required parameter 'closeRequest' is set
      if (closeRequest === undefined || closeRequest === null) {
        throw new Error("Missing the required parameter 'closeRequest' when calling createCardCloseUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/close', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardIssueUsingPost operation.
     * @callback module:api/CardApi~createCardIssueUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * issue a card
     * @param {module:model/CardBaseRequestCO} issueRequest issueRequest
     * @param {module:api/CardApi~createCardIssueUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardIssueUsingPost = function(issueRequest, callback) {
      var postBody = issueRequest;

      // verify the required parameter 'issueRequest' is set
      if (issueRequest === undefined || issueRequest === null) {
        throw new Error("Missing the required parameter 'issueRequest' when calling createCardIssueUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/issue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardPinUsingPost operation.
     * @callback module:api/CardApi~createCardPinUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pin card
     * @param {module:model/CardPinRequestCO} cardPinRequestCO cardPinRequestCO
     * @param {module:api/CardApi~createCardPinUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardPinUsingPost = function(cardPinRequestCO, callback) {
      var postBody = cardPinRequestCO;

      // verify the required parameter 'cardPinRequestCO' is set
      if (cardPinRequestCO === undefined || cardPinRequestCO === null) {
        throw new Error("Missing the required parameter 'cardPinRequestCO' when calling createCardPinUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReactivateUsingPost operation.
     * @callback module:api/CardApi~createCardReactivateUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reactivate card
     * @param {module:model/CardBaseRequestCO} reactivateRequest reactivateRequest
     * @param {module:api/CardApi~createCardReactivateUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardReactivateUsingPost = function(reactivateRequest, callback) {
      var postBody = reactivateRequest;

      // verify the required parameter 'reactivateRequest' is set
      if (reactivateRequest === undefined || reactivateRequest === null) {
        throw new Error("Missing the required parameter 'reactivateRequest' when calling createCardReactivateUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/reactivate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReissueUsingPost operation.
     * @callback module:api/CardApi~createCardReissueUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reissue a card
     * @param {module:model/CardBaseRequestCO} request request
     * @param {module:api/CardApi~createCardReissueUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardReissueUsingPost = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createCardReissueUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/reissue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReloadUsingPost operation.
     * @callback module:api/CardApi~createCardReloadUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardReloadUnloadResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card reload
     * @param {module:model/CardReloadRequestCO} reloadRequest reloadRequest
     * @param {module:api/CardApi~createCardReloadUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardReloadUnloadResponseVO}
     */
    this.createCardReloadUsingPost = function(reloadRequest, callback) {
      var postBody = reloadRequest;

      // verify the required parameter 'reloadRequest' is set
      if (reloadRequest === undefined || reloadRequest === null) {
        throw new Error("Missing the required parameter 'reloadRequest' when calling createCardReloadUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardReloadUnloadResponseVO;

      return this.apiClient.callApi(
        '/card/reload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardSuspendUsingPost operation.
     * @callback module:api/CardApi~createCardSuspendUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * suspend card
     * @param {module:model/CardBaseRequestCO} suspendRequest suspendRequest
     * @param {module:api/CardApi~createCardSuspendUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardSuspendUsingPost = function(suspendRequest, callback) {
      var postBody = suspendRequest;

      // verify the required parameter 'suspendRequest' is set
      if (suspendRequest === undefined || suspendRequest === null) {
        throw new Error("Missing the required parameter 'suspendRequest' when calling createCardSuspendUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/suspend', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardTokenUsingPost operation.
     * @callback module:api/CardApi~createCardTokenUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardTokenResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * token card
     * @param {module:model/CardTokenRequestCO} tokenizeRequest tokenizeRequest
     * @param {module:api/CardApi~createCardTokenUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardTokenResponseVO}
     */
    this.createCardTokenUsingPost = function(tokenizeRequest, callback) {
      var postBody = tokenizeRequest;

      // verify the required parameter 'tokenizeRequest' is set
      if (tokenizeRequest === undefined || tokenizeRequest === null) {
        throw new Error("Missing the required parameter 'tokenizeRequest' when calling createCardTokenUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardTokenResponseVO;

      return this.apiClient.callApi(
        '/card/token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardTransferUsingPost operation.
     * @callback module:api/CardApi~createCardTransferUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardTransferResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Card transfer
     * @param {module:model/CardTransferRequestCO} transferRequest transferRequest
     * @param {module:api/CardApi~createCardTransferUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardTransferResponseVO}
     */
    this.createCardTransferUsingPost = function(transferRequest, callback) {
      var postBody = transferRequest;

      // verify the required parameter 'transferRequest' is set
      if (transferRequest === undefined || transferRequest === null) {
        throw new Error("Missing the required parameter 'transferRequest' when calling createCardTransferUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardTransferResponseVO;

      return this.apiClient.callApi(
        '/card/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardUnloadUsingPost operation.
     * @callback module:api/CardApi~createCardUnloadUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardReloadUnloadResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card upload
     * @param {module:model/CardUnloadRequestCO} reloadRequest reloadRequest
     * @param {module:api/CardApi~createCardUnloadUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardReloadUnloadResponseVO}
     */
    this.createCardUnloadUsingPost = function(reloadRequest, callback) {
      var postBody = reloadRequest;

      // verify the required parameter 'reloadRequest' is set
      if (reloadRequest === undefined || reloadRequest === null) {
        throw new Error("Missing the required parameter 'reloadRequest' when calling createCardUnloadUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardReloadUnloadResponseVO;

      return this.apiClient.callApi(
        '/card/unload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClientCardUsingPost operation.
     * @callback module:api/CardApi~createClientCardUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardClientResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card client
     * @param {module:model/CardClientRequestCO} cardClientRequestCO cardClientRequestCO
     * @param {module:api/CardApi~createClientCardUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardClientResponseVO}
     */
    this.createClientCardUsingPost = function(cardClientRequestCO, callback) {
      var postBody = cardClientRequestCO;

      // verify the required parameter 'cardClientRequestCO' is set
      if (cardClientRequestCO === undefined || cardClientRequestCO === null) {
        throw new Error("Missing the required parameter 'cardClientRequestCO' when calling createClientCardUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardClientResponseVO;

      return this.apiClient.callApi(
        '/card/client', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardBalanceUsingGet operation.
     * @callback module:api/CardApi~getCardBalanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardBalanceResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Card Balance
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end_date
     * @param {Date} opts.startDate start_date
     * @param {module:api/CardApi~getCardBalanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardBalanceResponseVO}
     */
    this.getCardBalanceUsingGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCardBalanceUsingGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'start_date': opts['startDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CardBalanceResponseVO;

      return this.apiClient.callApi(
        '/card/balance/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardTokenUsingToken operation.
     * @callback module:api/CardApi~getCardTokenUsingTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCardTokenResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a card token
     * @param {String} id id
     * @param {module:api/CardApi~getCardTokenUsingTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCardTokenResponseVO}
     */
    this.getCardTokenUsingToken = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCardTokenUsingToken");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCardTokenResponseVO;

      return this.apiClient.callApi(
        '/card/token/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardTransactionUsingGet operation.
     * @callback module:api/CardApi~getCardTransactionUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardTransactionResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a card transaction
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end_date
     * @param {Date} opts.startDate start_date
     * @param {module:api/CardApi~getCardTransactionUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardTransactionResponseVO}
     */
    this.getCardTransactionUsingGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCardTransactionUsingGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'start_date': opts['startDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CardTransactionResponseVO;

      return this.apiClient.callApi(
        '/card/transaction/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardUsingGet operation.
     * @callback module:api/CardApi~getCardUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a card information
     * @param {String} id id
     * @param {module:api/CardApi~getCardUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.getCardUsingGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCardUsingGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardPinUsingPost operation.
     * @callback module:api/CardApi~updateCardPinUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a pin card
     * @param {module:model/CardPinRequestCO} cardPinRequestCO cardPinRequestCO
     * @param {String} id id
     * @param {module:api/CardApi~updateCardPinUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.updateCardPinUsingPost = function(cardPinRequestCO, id, callback) {
      var postBody = cardPinRequestCO;

      // verify the required parameter 'cardPinRequestCO' is set
      if (cardPinRequestCO === undefined || cardPinRequestCO === null) {
        throw new Error("Missing the required parameter 'cardPinRequestCO' when calling updateCardPinUsingPost");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCardPinUsingPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/pin/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardUsingPut operation.
     * @callback module:api/CardApi~updateCardUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a card information
     * @param {String} id id
     * @param {module:api/CardApi~updateCardUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.updateCardUsingPut = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCardUsingPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
