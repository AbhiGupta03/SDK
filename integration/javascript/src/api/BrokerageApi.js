/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BrokerageAccountCO', 'model/BrokerageAccountVO', 'model/BrokerageBalanceVO', 'model/BrokerageBankLinkCO', 'model/BrokerageBankLinkVO', 'model/BrokerageClientCO', 'model/BrokerageCreateClientVO', 'model/BrokerageDepositCO', 'model/BrokerageDepositVO', 'model/BrokerageDocumentCO', 'model/BrokerageDocumentVO', 'model/BrokerageHoldingVO', 'model/BrokerageOrderCO', 'model/BrokerageOrderVO', 'model/BrokeragePerformanceVO', 'model/BrokerageSecuritiesVO', 'model/BrokerageStatementVO', 'model/BrokerageTransactionVO', 'model/BrokerageUpdateClientVO', 'model/BrokerageWithdrawalCO', 'model/BrokerageWithdrawalVO', 'model/GetTransactionsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BrokerageAccountCO'), require('../model/BrokerageAccountVO'), require('../model/BrokerageBalanceVO'), require('../model/BrokerageBankLinkCO'), require('../model/BrokerageBankLinkVO'), require('../model/BrokerageClientCO'), require('../model/BrokerageCreateClientVO'), require('../model/BrokerageDepositCO'), require('../model/BrokerageDepositVO'), require('../model/BrokerageDocumentCO'), require('../model/BrokerageDocumentVO'), require('../model/BrokerageHoldingVO'), require('../model/BrokerageOrderCO'), require('../model/BrokerageOrderVO'), require('../model/BrokeragePerformanceVO'), require('../model/BrokerageSecuritiesVO'), require('../model/BrokerageStatementVO'), require('../model/BrokerageTransactionVO'), require('../model/BrokerageUpdateClientVO'), require('../model/BrokerageWithdrawalCO'), require('../model/BrokerageWithdrawalVO'), require('../model/GetTransactionsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenIntegrationApi) {
      root.HydrogenIntegrationApi = {};
    }
    root.HydrogenIntegrationApi.BrokerageApi = factory(root.HydrogenIntegrationApi.ApiClient, root.HydrogenIntegrationApi.BrokerageAccountCO, root.HydrogenIntegrationApi.BrokerageAccountVO, root.HydrogenIntegrationApi.BrokerageBalanceVO, root.HydrogenIntegrationApi.BrokerageBankLinkCO, root.HydrogenIntegrationApi.BrokerageBankLinkVO, root.HydrogenIntegrationApi.BrokerageClientCO, root.HydrogenIntegrationApi.BrokerageCreateClientVO, root.HydrogenIntegrationApi.BrokerageDepositCO, root.HydrogenIntegrationApi.BrokerageDepositVO, root.HydrogenIntegrationApi.BrokerageDocumentCO, root.HydrogenIntegrationApi.BrokerageDocumentVO, root.HydrogenIntegrationApi.BrokerageHoldingVO, root.HydrogenIntegrationApi.BrokerageOrderCO, root.HydrogenIntegrationApi.BrokerageOrderVO, root.HydrogenIntegrationApi.BrokeragePerformanceVO, root.HydrogenIntegrationApi.BrokerageSecuritiesVO, root.HydrogenIntegrationApi.BrokerageStatementVO, root.HydrogenIntegrationApi.BrokerageTransactionVO, root.HydrogenIntegrationApi.BrokerageUpdateClientVO, root.HydrogenIntegrationApi.BrokerageWithdrawalCO, root.HydrogenIntegrationApi.BrokerageWithdrawalVO, root.HydrogenIntegrationApi.GetTransactionsResponse);
  }
}(this, function(ApiClient, BrokerageAccountCO, BrokerageAccountVO, BrokerageBalanceVO, BrokerageBankLinkCO, BrokerageBankLinkVO, BrokerageClientCO, BrokerageCreateClientVO, BrokerageDepositCO, BrokerageDepositVO, BrokerageDocumentCO, BrokerageDocumentVO, BrokerageHoldingVO, BrokerageOrderCO, BrokerageOrderVO, BrokeragePerformanceVO, BrokerageSecuritiesVO, BrokerageStatementVO, BrokerageTransactionVO, BrokerageUpdateClientVO, BrokerageWithdrawalCO, BrokerageWithdrawalVO, GetTransactionsResponse) {
  'use strict';

  /**
   * Brokerage service.
   * @module api/BrokerageApi
   * @version 1.2.1
   */

  /**
   * Constructs a new BrokerageApi. 
   * @alias module:api/BrokerageApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelOrderUsingPut operation.
     * @callback module:api/BrokerageApi~cancelOrderUsingPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an Order
     * @param {String} nucleusOrderId nucleus_order_id
     * @param {module:api/BrokerageApi~cancelOrderUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cancelOrderUsingPut = function(nucleusOrderId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusOrderId' is set
      if (nucleusOrderId === undefined || nucleusOrderId === null) {
        throw new Error("Missing the required parameter 'nucleusOrderId' when calling cancelOrderUsingPut");
      }


      var pathParams = {
        'nucleus_order_id': nucleusOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/brokerage/order/{nucleus_order_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBankLinkUsingPost1 operation.
     * @callback module:api/BrokerageApi~createBankLinkUsingPost1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageBankLinkVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Bank Link
     * @param {module:model/BrokerageBankLinkCO} brokerageBankLinkCO brokerageBankLinkCO
     * @param {module:api/BrokerageApi~createBankLinkUsingPost1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageBankLinkVO}
     */
    this.createBankLinkUsingPost1 = function(brokerageBankLinkCO, callback) {
      var postBody = brokerageBankLinkCO;

      // verify the required parameter 'brokerageBankLinkCO' is set
      if (brokerageBankLinkCO === undefined || brokerageBankLinkCO === null) {
        throw new Error("Missing the required parameter 'brokerageBankLinkCO' when calling createBankLinkUsingPost1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageBankLinkVO;

      return this.apiClient.callApi(
        '/brokerage/bank_link', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBrokerageAccountUsingPost operation.
     * @callback module:api/BrokerageApi~createBrokerageAccountUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageAccountVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Brokerage account
     * @param {module:model/BrokerageAccountCO} brokerageAccountCO brokerageAccountCO
     * @param {module:api/BrokerageApi~createBrokerageAccountUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageAccountVO}
     */
    this.createBrokerageAccountUsingPost = function(brokerageAccountCO, callback) {
      var postBody = brokerageAccountCO;

      // verify the required parameter 'brokerageAccountCO' is set
      if (brokerageAccountCO === undefined || brokerageAccountCO === null) {
        throw new Error("Missing the required parameter 'brokerageAccountCO' when calling createBrokerageAccountUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageAccountVO;

      return this.apiClient.callApi(
        '/brokerage/account', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBrokerageClientUsingPost operation.
     * @callback module:api/BrokerageApi~createBrokerageClientUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageCreateClientVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Brokerage Client
     * @param {module:model/BrokerageClientCO} clientCO clientCO
     * @param {module:api/BrokerageApi~createBrokerageClientUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageCreateClientVO}
     */
    this.createBrokerageClientUsingPost = function(clientCO, callback) {
      var postBody = clientCO;

      // verify the required parameter 'clientCO' is set
      if (clientCO === undefined || clientCO === null) {
        throw new Error("Missing the required parameter 'clientCO' when calling createBrokerageClientUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageCreateClientVO;

      return this.apiClient.callApi(
        '/brokerage/client', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDepositUsingPost operation.
     * @callback module:api/BrokerageApi~createDepositUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageDepositVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deposit
     * @param {module:model/BrokerageDepositCO} brokerageDepositCO brokerageDepositCO
     * @param {module:api/BrokerageApi~createDepositUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageDepositVO}
     */
    this.createDepositUsingPost = function(brokerageDepositCO, callback) {
      var postBody = brokerageDepositCO;

      // verify the required parameter 'brokerageDepositCO' is set
      if (brokerageDepositCO === undefined || brokerageDepositCO === null) {
        throw new Error("Missing the required parameter 'brokerageDepositCO' when calling createDepositUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageDepositVO;

      return this.apiClient.callApi(
        '/brokerage/deposit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDocumentUsingPost operation.
     * @callback module:api/BrokerageApi~createDocumentUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageDocumentVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Brokerage document
     * @param {module:model/BrokerageDocumentCO} documentCO documentCO
     * @param {module:api/BrokerageApi~createDocumentUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageDocumentVO}
     */
    this.createDocumentUsingPost = function(documentCO, callback) {
      var postBody = documentCO;

      // verify the required parameter 'documentCO' is set
      if (documentCO === undefined || documentCO === null) {
        throw new Error("Missing the required parameter 'documentCO' when calling createDocumentUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageDocumentVO;

      return this.apiClient.callApi(
        '/brokerage/document', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderUsingPost operation.
     * @callback module:api/BrokerageApi~createOrderUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageOrderVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Order
     * @param {module:model/BrokerageOrderCO} brokerageOrderCO brokerageOrderCO
     * @param {module:api/BrokerageApi~createOrderUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageOrderVO}
     */
    this.createOrderUsingPost = function(brokerageOrderCO, callback) {
      var postBody = brokerageOrderCO;

      // verify the required parameter 'brokerageOrderCO' is set
      if (brokerageOrderCO === undefined || brokerageOrderCO === null) {
        throw new Error("Missing the required parameter 'brokerageOrderCO' when calling createOrderUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageOrderVO;

      return this.apiClient.callApi(
        '/brokerage/order', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createWithdrawalUsingPost operation.
     * @callback module:api/BrokerageApi~createWithdrawalUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageWithdrawalVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a withdrawal
     * @param {module:model/BrokerageWithdrawalCO} brokerageWithdrawalCO brokerageWithdrawalCO
     * @param {module:api/BrokerageApi~createWithdrawalUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageWithdrawalVO}
     */
    this.createWithdrawalUsingPost = function(brokerageWithdrawalCO, callback) {
      var postBody = brokerageWithdrawalCO;

      // verify the required parameter 'brokerageWithdrawalCO' is set
      if (brokerageWithdrawalCO === undefined || brokerageWithdrawalCO === null) {
        throw new Error("Missing the required parameter 'brokerageWithdrawalCO' when calling createWithdrawalUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageWithdrawalVO;

      return this.apiClient.callApi(
        '/brokerage/withdrawal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankLinkUsingDelete1 operation.
     * @callback module:api/BrokerageApi~deleteBankLinkUsingDelete1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Bank Link
     * @param {String} nucleusBankLinkId nucleus_bank_link_id
     * @param {module:api/BrokerageApi~deleteBankLinkUsingDelete1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBankLinkUsingDelete1 = function(nucleusBankLinkId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusBankLinkId' is set
      if (nucleusBankLinkId === undefined || nucleusBankLinkId === null) {
        throw new Error("Missing the required parameter 'nucleusBankLinkId' when calling deleteBankLinkUsingDelete1");
      }


      var pathParams = {
        'nucleus_bank_link_id': nucleusBankLinkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/brokerage/bank_link/{nucleus_bank_link_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceUsingGet1 operation.
     * @callback module:api/BrokerageApi~getBalanceUsingGet1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageBalanceVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account balance
     * @param {String} nucleusPortfolioId nucleus_portfolio_id
     * @param {module:api/BrokerageApi~getBalanceUsingGet1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageBalanceVO}
     */
    this.getBalanceUsingGet1 = function(nucleusPortfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusPortfolioId' is set
      if (nucleusPortfolioId === undefined || nucleusPortfolioId === null) {
        throw new Error("Missing the required parameter 'nucleusPortfolioId' when calling getBalanceUsingGet1");
      }


      var pathParams = {
        'nucleus_portfolio_id': nucleusPortfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokerageBalanceVO;

      return this.apiClient.callApi(
        '/brokerage/balance/{nucleus_portfolio_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankLinkUsingGet1 operation.
     * @callback module:api/BrokerageApi~getBankLinkUsingGet1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageBankLinkVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Bank Link
     * @param {String} nucleusBankLinkId nucleus_bank_link_id
     * @param {module:api/BrokerageApi~getBankLinkUsingGet1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageBankLinkVO}
     */
    this.getBankLinkUsingGet1 = function(nucleusBankLinkId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusBankLinkId' is set
      if (nucleusBankLinkId === undefined || nucleusBankLinkId === null) {
        throw new Error("Missing the required parameter 'nucleusBankLinkId' when calling getBankLinkUsingGet1");
      }


      var pathParams = {
        'nucleus_bank_link_id': nucleusBankLinkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokerageBankLinkVO;

      return this.apiClient.callApi(
        '/brokerage/bank_link/{nucleus_bank_link_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrokerageAccountStatementUsingGet operation.
     * @callback module:api/BrokerageApi~getBrokerageAccountStatementUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageStatementVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Brokerage account statement
     * @param {Date} endDate end_date
     * @param {String} nucleusAccountId nucleus_account_id
     * @param {Date} startDate start_date
     * @param {String} statementType statement_type
     * @param {module:api/BrokerageApi~getBrokerageAccountStatementUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageStatementVO}
     */
    this.getBrokerageAccountStatementUsingGet = function(endDate, nucleusAccountId, startDate, statementType, callback) {
      var postBody = null;

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getBrokerageAccountStatementUsingGet");
      }

      // verify the required parameter 'nucleusAccountId' is set
      if (nucleusAccountId === undefined || nucleusAccountId === null) {
        throw new Error("Missing the required parameter 'nucleusAccountId' when calling getBrokerageAccountStatementUsingGet");
      }

      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getBrokerageAccountStatementUsingGet");
      }

      // verify the required parameter 'statementType' is set
      if (statementType === undefined || statementType === null) {
        throw new Error("Missing the required parameter 'statementType' when calling getBrokerageAccountStatementUsingGet");
      }


      var pathParams = {
        'nucleus_account_id': nucleusAccountId
      };
      var queryParams = {
        'end_date': endDate,
        'start_date': startDate,
        'statement_type': statementType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokerageStatementVO;

      return this.apiClient.callApi(
        '/brokerage/statement/{nucleus_account_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentUsingGet operation.
     * @callback module:api/BrokerageApi~getDocumentUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageDocumentVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Brokerage document
     * @param {String} nucleusDocumentId nucleus_document_id
     * @param {module:api/BrokerageApi~getDocumentUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageDocumentVO}
     */
    this.getDocumentUsingGet = function(nucleusDocumentId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusDocumentId' is set
      if (nucleusDocumentId === undefined || nucleusDocumentId === null) {
        throw new Error("Missing the required parameter 'nucleusDocumentId' when calling getDocumentUsingGet");
      }


      var pathParams = {
        'nucleus_document_id': nucleusDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokerageDocumentVO;

      return this.apiClient.callApi(
        '/brokerage/document/{nucleus_document_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHoldingPerformanceUsingGet operation.
     * @callback module:api/BrokerageApi~getHoldingPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokeragePerformanceVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get portfolio holding performance
     * @param {String} nucleusPortfolioId nucleus_portfolio_id
     * @param {module:api/BrokerageApi~getHoldingPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokeragePerformanceVO}
     */
    this.getHoldingPerformanceUsingGet = function(nucleusPortfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusPortfolioId' is set
      if (nucleusPortfolioId === undefined || nucleusPortfolioId === null) {
        throw new Error("Missing the required parameter 'nucleusPortfolioId' when calling getHoldingPerformanceUsingGet");
      }


      var pathParams = {
        'nucleus_portfolio_id': nucleusPortfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokeragePerformanceVO;

      return this.apiClient.callApi(
        '/brokerage/holding/performance/{nucleus_portfolio_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHoldingUsingGet operation.
     * @callback module:api/BrokerageApi~getHoldingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageHoldingVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get portfolio holdings
     * @param {String} nucleusPortfolioId nucleus_portfolio_id
     * @param {module:api/BrokerageApi~getHoldingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageHoldingVO}
     */
    this.getHoldingUsingGet = function(nucleusPortfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusPortfolioId' is set
      if (nucleusPortfolioId === undefined || nucleusPortfolioId === null) {
        throw new Error("Missing the required parameter 'nucleusPortfolioId' when calling getHoldingUsingGet");
      }


      var pathParams = {
        'nucleus_portfolio_id': nucleusPortfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokerageHoldingVO;

      return this.apiClient.callApi(
        '/brokerage/holding/{nucleus_portfolio_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderUsingGet operation.
     * @callback module:api/BrokerageApi~getOrderUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageOrderVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Order
     * @param {String} nucleusOrderId nucleus_order_id
     * @param {module:api/BrokerageApi~getOrderUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageOrderVO}
     */
    this.getOrderUsingGet = function(nucleusOrderId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusOrderId' is set
      if (nucleusOrderId === undefined || nucleusOrderId === null) {
        throw new Error("Missing the required parameter 'nucleusOrderId' when calling getOrderUsingGet");
      }


      var pathParams = {
        'nucleus_order_id': nucleusOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokerageOrderVO;

      return this.apiClient.callApi(
        '/brokerage/order/{nucleus_order_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecuritiesUsingGet operation.
     * @callback module:api/BrokerageApi~getSecuritiesUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageSecuritiesVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get securities information
     * @param {String} vendorName vendor_name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.getFundamentals get_fundamentals (default to false)
     * @param {String} opts.nucleusSecurityId nucleus_security_id
     * @param {module:api/BrokerageApi~getSecuritiesUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageSecuritiesVO}
     */
    this.getSecuritiesUsingGet = function(vendorName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vendorName' is set
      if (vendorName === undefined || vendorName === null) {
        throw new Error("Missing the required parameter 'vendorName' when calling getSecuritiesUsingGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'get_fundamentals': opts['getFundamentals'],
        'nucleus_security_id': opts['nucleusSecurityId'],
        'vendor_name': vendorName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokerageSecuritiesVO;

      return this.apiClient.callApi(
        '/brokerage/securities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionsUsingGet operation.
     * @callback module:api/BrokerageApi~getTransactionsUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageTransactionVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account transactions
     * @param {module:model/GetTransactionsResponse} drivewealthResponse drivewealthResponse
     * @param {Date} endDate end_date
     * @param {String} nucleusPortfolioId nucleus_portfolio_id
     * @param {Date} startDate start_date
     * @param {module:api/BrokerageApi~getTransactionsUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageTransactionVO}
     */
    this.getTransactionsUsingGet = function(drivewealthResponse, endDate, nucleusPortfolioId, startDate, callback) {
      var postBody = drivewealthResponse;

      // verify the required parameter 'drivewealthResponse' is set
      if (drivewealthResponse === undefined || drivewealthResponse === null) {
        throw new Error("Missing the required parameter 'drivewealthResponse' when calling getTransactionsUsingGet");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getTransactionsUsingGet");
      }

      // verify the required parameter 'nucleusPortfolioId' is set
      if (nucleusPortfolioId === undefined || nucleusPortfolioId === null) {
        throw new Error("Missing the required parameter 'nucleusPortfolioId' when calling getTransactionsUsingGet");
      }

      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getTransactionsUsingGet");
      }


      var pathParams = {
        'nucleus_portfolio_id': nucleusPortfolioId
      };
      var queryParams = {
        'end_date': endDate,
        'start_date': startDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BrokerageTransactionVO;

      return this.apiClient.callApi(
        '/brokerage/transaction/{nucleus_portfolio_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankLinkUsingPut1 operation.
     * @callback module:api/BrokerageApi~updateBankLinkUsingPut1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageBankLinkVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Bank Link
     * @param {String} nucleusBankLinkId nucleus_bank_link_id
     * @param {module:api/BrokerageApi~updateBankLinkUsingPut1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageBankLinkVO}
     */
    this.updateBankLinkUsingPut1 = function(nucleusBankLinkId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusBankLinkId' is set
      if (nucleusBankLinkId === undefined || nucleusBankLinkId === null) {
        throw new Error("Missing the required parameter 'nucleusBankLinkId' when calling updateBankLinkUsingPut1");
      }


      var pathParams = {
        'nucleus_bank_link_id': nucleusBankLinkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageBankLinkVO;

      return this.apiClient.callApi(
        '/brokerage/bank_link/{nucleus_bank_link_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrokerageClientUsingPut operation.
     * @callback module:api/BrokerageApi~updateBrokerageClientUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerageUpdateClientVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Brokerage client
     * @param {module:model/BrokerageClientCO} clientCO clientCO
     * @param {module:api/BrokerageApi~updateBrokerageClientUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerageUpdateClientVO}
     */
    this.updateBrokerageClientUsingPut = function(clientCO, callback) {
      var postBody = clientCO;

      // verify the required parameter 'clientCO' is set
      if (clientCO === undefined || clientCO === null) {
        throw new Error("Missing the required parameter 'clientCO' when calling updateBrokerageClientUsingPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BrokerageUpdateClientVO;

      return this.apiClient.callApi(
        '/brokerage/client', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
