/**
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateUserRequest', 'model/ExchangePublicTokenVO', 'model/ExchangeTokenCO', 'model/Pageobject', 'model/UserResponseVO', 'model/WidgetUrlVO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateUserRequest'), require('../model/ExchangePublicTokenVO'), require('../model/ExchangeTokenCO'), require('../model/Pageobject'), require('../model/UserResponseVO'), require('../model/WidgetUrlVO'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenIntegrationApi) {
      root.HydrogenIntegrationApi = {};
    }
    root.HydrogenIntegrationApi.UtilsApi = factory(root.HydrogenIntegrationApi.ApiClient, root.HydrogenIntegrationApi.CreateUserRequest, root.HydrogenIntegrationApi.ExchangePublicTokenVO, root.HydrogenIntegrationApi.ExchangeTokenCO, root.HydrogenIntegrationApi.Pageobject, root.HydrogenIntegrationApi.UserResponseVO, root.HydrogenIntegrationApi.WidgetUrlVO);
  }
}(this, function(ApiClient, CreateUserRequest, ExchangePublicTokenVO, ExchangeTokenCO, Pageobject, UserResponseVO, WidgetUrlVO) {
  'use strict';

  /**
   * Utils service.
   * @module api/UtilsApi
   * @version 1.3.1
   */

  /**
   * Constructs a new UtilsApi. 
   * @alias module:api/UtilsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createTokenExchangeUsingPost operation.
     * @callback module:api/UtilsApi~createTokenExchangeUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExchangePublicTokenVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve token based on certain vendor specific value
     * Retrieve the token.
     * @param {module:model/ExchangeTokenCO} exchangeTokenCO exchangeTokenCO
     * @param {module:api/UtilsApi~createTokenExchangeUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExchangePublicTokenVO}
     */
    this.createTokenExchangeUsingPost = function(exchangeTokenCO, callback) {
      var postBody = exchangeTokenCO;

      // verify the required parameter 'exchangeTokenCO' is set
      if (exchangeTokenCO === undefined || exchangeTokenCO === null) {
        throw new Error("Missing the required parameter 'exchangeTokenCO' when calling createTokenExchangeUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExchangePublicTokenVO;

      return this.apiClient.callApi(
        '/token_exchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserUsingPost operation.
     * @callback module:api/UtilsApi~createUserUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user in vendor
     * Create user in vendor.
     * @param {module:model/CreateUserRequest} createUserRequest createUserRequest
     * @param {module:api/UtilsApi~createUserUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponseVO}
     */
    this.createUserUsingPost = function(createUserRequest, callback) {
      var postBody = createUserRequest;

      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUserUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponseVO;

      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditLogAllUsingGet operation.
     * @callback module:api/UtilsApi~getAuditLogAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pageobject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gel all audit log
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {Date} opts.endDate end_date (default to null)
     * @param {String} opts.event event
     * @param {String} opts.integrationType integration_type
     * @param {Boolean} opts.isRequest is_request (default to false)
     * @param {String} opts.nucleusAggregationAccountId nucleus_aggregation_account_id
     * @param {String} opts.nucleusClientId nucleus_client_id
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {String} opts.requestType request_type
     * @param {Number} opts.size size (default to 25)
     * @param {Date} opts.startDate start_date (default to null)
     * @param {String} opts.vendorName vendor_name
     * @param {module:api/UtilsApi~getAuditLogAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pageobject}
     */
    this.getAuditLogAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'end_date': opts['endDate'],
        'event': opts['event'],
        'integration_type': opts['integrationType'],
        'is_request': opts['isRequest'],
        'nucleus_aggregation_account_id': opts['nucleusAggregationAccountId'],
        'nucleus_client_id': opts['nucleusClientId'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'request_type': opts['requestType'],
        'size': opts['size'],
        'start_date': opts['startDate'],
        'vendor_name': opts['vendorName']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Pageobject;

      return this.apiClient.callApi(
        '/audit_log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgetLinkUsingGet operation.
     * @callback module:api/UtilsApi~getWidgetLinkUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetUrlVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve widget link
     * Retrieve the widget link.
     * @param {String} nucleusId nucleus_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isBusiness is_business (default to false)
     * @param {Boolean} opts.isMobileWebview is_mobile_webview (default to false)
     * @param {String} opts.memberId member_id
     * @param {Number} opts.messageVersion message_version
     * @param {String} opts.mode mode (default to aggregation)
     * @param {String} opts.nucleusAggregationAccountId nucleus_aggregation_account_id
     * @param {String} opts.nucleusBankLinkId nucleus_bank_link_id
     * @param {String} opts.vendorName vendor_name
     * @param {Boolean} opts.waitForFullAggregation wait_for_full_aggregation (default to true)
     * @param {String} opts.webviewUrlScheme webview_url_scheme
     * @param {module:api/UtilsApi~getWidgetLinkUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetUrlVO}
     */
    this.getWidgetLinkUsingGet = function(nucleusId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nucleusClientId' is set
      if (nucleusId === undefined || nucleusId === null) {
        throw new Error("Missing the required parameter 'nucleusId' when calling getWidgetLinkUsingGet");
      }


      var pathParams = {
        'nucleus_id': nucleusId
      };
      var queryParams = {
        'is_business': opts['isBusiness'],
        'is_mobile_webview': opts['isMobileWebview'],
        'member_id': opts['memberId'],
        'message_version': opts['messageVersion'],
        'mode': opts['mode'],
        'nucleus_aggregation_account_id': opts['nucleusAggregationAccountId'],
        'nucleus_bank_link_id': opts['nucleusBankLinkId'],
        'vendor_name': opts['vendorName'],
        'wait_for_full_aggregation': opts['waitForFullAggregation'],
        'webview_url_scheme': opts['webviewUrlScheme']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = WidgetUrlVO;

      return this.apiClient.callApi(
        '/widget_link/{nucleus_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
