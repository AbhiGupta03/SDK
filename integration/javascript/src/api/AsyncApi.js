/**
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncTransaction', 'model/AsyncTransactionVO', 'model/JsonNode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncTransaction'), require('../model/AsyncTransactionVO'), require('../model/JsonNode'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenIntegrationApi) {
      root.HydrogenIntegrationApi = {};
    }
    root.HydrogenIntegrationApi.AsyncApi = factory(root.HydrogenIntegrationApi.ApiClient, root.HydrogenIntegrationApi.AsyncTransaction, root.HydrogenIntegrationApi.AsyncTransactionVO, root.HydrogenIntegrationApi.JsonNode);
  }
}(this, function(ApiClient, AsyncTransaction, AsyncTransactionVO, JsonNode) {
  'use strict';

  /**
   * Async service.
   * @module api/AsyncApi
   * @version 1.3.1
   */

  /**
   * Constructs a new AsyncApi. 
   * @alias module:api/AsyncApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAsyncData operation.
     * @callback module:api/AsyncApi~getAsyncDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create async transaction for GET endpoints for bulk data
     * Create async transaction for GET endpoints for bulk data
     * @param {String} integrationType String integration_type
     * @param {String} service String service
     * @param {module:api/AsyncApi~getAsyncDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncTransaction}
     */
    this.getAsyncData = function(integrationType, service, callback) {
      var postBody = null;

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling getAsyncData");
      }

      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getAsyncData");
      }


      var pathParams = {
        'integration_type': integrationType,
        'service': service
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AsyncTransaction;

      return this.apiClient.callApi(
        '/async/{integration_type}/{service}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAsyncDataBulkUsingPost operation.
     * @callback module:api/AsyncApi~getAsyncDataBulkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create async transaction for POST endpoints for bulk data
     * Create async transaction for POST endpoints for bulk data
     * @param {module:model/JsonNode} data data
     * @param {String} integrationType String integration_type
     * @param {String} service String service
     * @param {module:api/AsyncApi~getAsyncDataBulkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncTransaction}
     */
    this.getAsyncDataBulkUsingPost = function(data, integrationType, service, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling getAsyncDataBulkUsingPost");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling getAsyncDataBulkUsingPost");
      }

      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getAsyncDataBulkUsingPost");
      }


      var pathParams = {
        'integration_type': integrationType,
        'service': service
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTransaction;

      return this.apiClient.callApi(
        '/async/{integration_type}/{service}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAsyncDataById operation.
     * @callback module:api/AsyncApi~getAsyncDataByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create async transaction for GET endpoints for bulk data
     * Create async transaction for GET endpoints for bulk data
     * @param {String} id UUID id
     * @param {String} integrationType String integration_type
     * @param {String} service String service
     * @param {module:api/AsyncApi~getAsyncDataByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncTransaction}
     */
    this.getAsyncDataById = function(id, integrationType, service, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAsyncDataById");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling getAsyncDataById");
      }

      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getAsyncDataById");
      }


      var pathParams = {
        'id': id,
        'integration_type': integrationType,
        'service': service
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AsyncTransaction;

      return this.apiClient.callApi(
        '/async/{integration_type}/{service}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAsyncStatus operation.
     * @callback module:api/AsyncApi~getAsyncStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncTransactionVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Status of async transaction created through GET/POST endpoints
     * Get Status of async transaction created through GET/POST endpoints
     * @param {String} id UUID Async Transaction Id
     * @param {module:api/AsyncApi~getAsyncStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncTransactionVO}
     */
    this.getAsyncStatus = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAsyncStatus");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AsyncTransactionVO;

      return this.apiClient.callApi(
        '/async/status/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
