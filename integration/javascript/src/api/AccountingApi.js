/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountingFinalResponseVO', 'model/VendorAccessConfigVO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountingFinalResponseVO'), require('../model/VendorAccessConfigVO'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenIntegrationApi) {
      root.HydrogenIntegrationApi = {};
    }
    root.HydrogenIntegrationApi.AccountingApi = factory(root.HydrogenIntegrationApi.ApiClient, root.HydrogenIntegrationApi.AccountingFinalResponseVO, root.HydrogenIntegrationApi.VendorAccessConfigVO);
  }
}(this, function(ApiClient, AccountingFinalResponseVO, VendorAccessConfigVO) {
  'use strict';

  /**
   * Accounting service.
   * @module api/AccountingApi
   * @version 1.2.1
   */

  /**
   * Constructs a new AccountingApi. 
   * @alias module:api/AccountingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createOrUpdateCustomer operation.
     * @callback module:api/AccountingApi~createOrUpdateCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountingFinalResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     * Update/Create all customers in Nucleus for a given nucleus_client_id
     * @param {String} nucleusClientId nucleus_client_id
     * @param {module:api/AccountingApi~createOrUpdateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountingFinalResponseVO}
     */
    this.createOrUpdateCustomer = function(nucleusClientId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusClientId' is set
      if (nucleusClientId === undefined || nucleusClientId === null) {
        throw new Error("Missing the required parameter 'nucleusClientId' when calling createOrUpdateCustomer");
      }


      var pathParams = {
      };
      var queryParams = {
        'nucleus_client_id': nucleusClientId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountingFinalResponseVO;

      return this.apiClient.callApi(
        '/accounting/customer', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrUpdateCustomerRevenue operation.
     * @callback module:api/AccountingApi~createOrUpdateCustomerRevenueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountingFinalResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     * Update/Create all customers revenue in Nucleus for a given nucleus_customer_id
     * @param {String} nucleusCustomerId nucleus_customer_id
     * @param {Date} startDate start_date
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountingMethod accounting_method (default to accrual)
     * @param {Date} opts.endDate end_date (default to null)
     * @param {module:api/AccountingApi~createOrUpdateCustomerRevenueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountingFinalResponseVO}
     */
    this.createOrUpdateCustomerRevenue = function(nucleusCustomerId, startDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nucleusCustomerId' is set
      if (nucleusCustomerId === undefined || nucleusCustomerId === null) {
        throw new Error("Missing the required parameter 'nucleusCustomerId' when calling createOrUpdateCustomerRevenue");
      }

      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling createOrUpdateCustomerRevenue");
      }


      var pathParams = {
        'nucleus_customer_id': nucleusCustomerId
      };
      var queryParams = {
        'accounting_method': opts['accountingMethod'],
        'end_date': opts['endDate'],
        'start_date': startDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountingFinalResponseVO;

      return this.apiClient.callApi(
        '/accounting/customer_revenue/{nucleus_customer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrUpdateInvoicePayment operation.
     * @callback module:api/AccountingApi~createOrUpdateInvoicePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountingFinalResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     * Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
     * @param {String} nucleusInvoiceId nucleus_invoice_id
     * @param {module:api/AccountingApi~createOrUpdateInvoicePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountingFinalResponseVO}
     */
    this.createOrUpdateInvoicePayment = function(nucleusInvoiceId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusInvoiceId' is set
      if (nucleusInvoiceId === undefined || nucleusInvoiceId === null) {
        throw new Error("Missing the required parameter 'nucleusInvoiceId' when calling createOrUpdateInvoicePayment");
      }


      var pathParams = {
        'nucleus_invoice_id': nucleusInvoiceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountingFinalResponseVO;

      return this.apiClient.callApi(
        '/accounting/invoice_payment/{nucleus_invoice_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrUpdateInvoices operation.
     * @callback module:api/AccountingApi~createOrUpdateInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountingFinalResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     * Update/Create all invoices in Nucleus for a given nucleus_client_id
     * @param {String} nucleusCustomerId nucleus_customer_id
     * @param {Date} startDate start_date
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end_date (default to null)
     * @param {module:api/AccountingApi~createOrUpdateInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountingFinalResponseVO}
     */
    this.createOrUpdateInvoices = function(nucleusCustomerId, startDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nucleusCustomerId' is set
      if (nucleusCustomerId === undefined || nucleusCustomerId === null) {
        throw new Error("Missing the required parameter 'nucleusCustomerId' when calling createOrUpdateInvoices");
      }

      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling createOrUpdateInvoices");
      }


      var pathParams = {
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'nucleus_customer_id': nucleusCustomerId,
        'start_date': startDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountingFinalResponseVO;

      return this.apiClient.callApi(
        '/accounting/invoice', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountingVendorAccessConfigIsActiveById operation.
     * @callback module:api/AccountingApi~deleteAccountingVendorAccessConfigIsActiveByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently delete relation with particular accounting vendor.
     * Permanently delete relation with particular accounting vendor.
     * @param {String} id id
     * @param {module:api/AccountingApi~deleteAccountingVendorAccessConfigIsActiveByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountingVendorAccessConfigIsActiveById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAccountingVendorAccessConfigIsActiveById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounting/vendor/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountingStats operation.
     * @callback module:api/AccountingApi~getAccountingStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountingFinalResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get accounting stats from financial statements at the vendor for the business provided
     * Get accounting stats from financial statements at the vendor for the business provided
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountingMethod accounting_method (default to accrual)
     * @param {String} opts.nucleusClientId nucleus_client_id
     * @param {String} opts.periodLength period_length
     * @param {Number} opts.periodMonth period_month
     * @param {Number} opts.periodQuarter period_quarter
     * @param {String} opts.periodType period_type
     * @param {Number} opts.periodYear period_year
     * @param {String} opts.report report
     * @param {Date} opts.statementDate statement_date
     * @param {module:api/AccountingApi~getAccountingStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountingFinalResponseVO}
     */
    this.getAccountingStats = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'accounting_method': opts['accountingMethod'],
        'nucleus_client_id': opts['nucleusClientId'],
        'period_length': opts['periodLength'],
        'period_month': opts['periodMonth'],
        'period_quarter': opts['periodQuarter'],
        'period_type': opts['periodType'],
        'period_year': opts['periodYear'],
        'report': opts['report'],
        'statement_date': opts['statementDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountingFinalResponseVO;

      return this.apiClient.callApi(
        '/accounting/report', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountingVendorInfoUsingClientId operation.
     * @callback module:api/AccountingApi~getAccountingVendorInfoUsingClientIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VendorAccessConfigVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Accounting Vendor Config
     * Get Accounting vendor config information with its status.
     * @param {String} nucleusClientId nucleus_client_id
     * @param {module:api/AccountingApi~getAccountingVendorInfoUsingClientIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VendorAccessConfigVO}
     */
    this.getAccountingVendorInfoUsingClientId = function(nucleusClientId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusClientId' is set
      if (nucleusClientId === undefined || nucleusClientId === null) {
        throw new Error("Missing the required parameter 'nucleusClientId' when calling getAccountingVendorInfoUsingClientId");
      }


      var pathParams = {
        'nucleus_client_id': nucleusClientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = VendorAccessConfigVO;

      return this.apiClient.callApi(
        '/accounting/vendor/{nucleus_client_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountingVendorAccessConfigIsActiveById operation.
     * @callback module:api/AccountingApi~updateAccountingVendorAccessConfigIsActiveByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VendorAccessConfigVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable/Disable relation with particular accounting vendor.
     * Enable/Disable link with particular accounting vendor.
     * @param {String} id id
     * @param {Boolean} isActive is_active
     * @param {module:api/AccountingApi~updateAccountingVendorAccessConfigIsActiveByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VendorAccessConfigVO}
     */
    this.updateAccountingVendorAccessConfigIsActiveById = function(id, isActive, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAccountingVendorAccessConfigIsActiveById");
      }

      // verify the required parameter 'isActive' is set
      if (isActive === undefined || isActive === null) {
        throw new Error("Missing the required parameter 'isActive' when calling updateAccountingVendorAccessConfigIsActiveById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'is_active': isActive,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = VendorAccessConfigVO;

      return this.apiClient.callApi(
        '/accounting/vendor/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomer operation.
     * @callback module:api/AccountingApi~updateCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountingFinalResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update customer in Nucleus for a given nucleus_customer_id
     * Update customer in Nucleus for a given nucleus_customer_id
     * @param {String} nucleusCustomerId nucleus_customer_id
     * @param {module:api/AccountingApi~updateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountingFinalResponseVO}
     */
    this.updateCustomer = function(nucleusCustomerId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusCustomerId' is set
      if (nucleusCustomerId === undefined || nucleusCustomerId === null) {
        throw new Error("Missing the required parameter 'nucleusCustomerId' when calling updateCustomer");
      }


      var pathParams = {
        'nucleus_customer_id': nucleusCustomerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountingFinalResponseVO;

      return this.apiClient.callApi(
        '/accounting/customer/{nucleus_customer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInvoice operation.
     * @callback module:api/AccountingApi~updateInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountingFinalResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update invoice in Nucleus for a given nucleus_invoice_id
     * Update invoice in Nucleus for a given nucleus_invoice_id
     * @param {String} nucleusInvoiceId nucleus_invoice_id
     * @param {module:api/AccountingApi~updateInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountingFinalResponseVO}
     */
    this.updateInvoice = function(nucleusInvoiceId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusInvoiceId' is set
      if (nucleusInvoiceId === undefined || nucleusInvoiceId === null) {
        throw new Error("Missing the required parameter 'nucleusInvoiceId' when calling updateInvoice");
      }


      var pathParams = {
        'nucleus_invoice_id': nucleusInvoiceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountingFinalResponseVO;

      return this.apiClient.callApi(
        '/accounting/invoice/{nucleus_invoice_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
