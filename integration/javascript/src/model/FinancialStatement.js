/*
 * Hydrogen Integration API
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Stat'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Stat'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenIntegrationApi) {
      root.HydrogenIntegrationApi = {};
    }
    root.HydrogenIntegrationApi.FinancialStatement = factory(root.HydrogenIntegrationApi.ApiClient, root.HydrogenIntegrationApi.Stat);
  }
}(this, function(ApiClient, Stat) {
  'use strict';

  /**
   * The FinancialStatement model module.
   * @module model/FinancialStatement
   * @version 1.2.1
   */

  /**
   * Constructs a new <code>FinancialStatement</code>.
   * FinancialStatement Object
   * @alias module:model/FinancialStatement
   * @class
   * @param accountingMethod {String} accounting_method
   * @param currencyCode {String} currencyCode
   * @param statementDate {Date} statementDate
   * @param statementType {String} statement_type
   */
  var exports = function(accountingMethod, currencyCode, statementDate, statementType) {
    this.accountingMethod = accountingMethod;
    this.currencyCode = currencyCode;
    this.statementDate = statementDate;
    this.statementType = statementType;
  };

  /**
   * Constructs a <code>FinancialStatement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FinancialStatement} obj Optional instance to populate.
   * @return {module:model/FinancialStatement} The populated <code>FinancialStatement</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('accounting_method'))
        obj.accountingMethod = ApiClient.convertToType(data['accounting_method'], 'String');
      if (data.hasOwnProperty('client_id'))
        obj.clientId = ApiClient.convertToType(data['client_id'], 'String');
      if (data.hasOwnProperty('create_date'))
        obj.createDate = ApiClient.convertToType(data['create_date'], 'Date');
      if (data.hasOwnProperty('currency_code'))
        obj.currencyCode = ApiClient.convertToType(data['currency_code'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], {'String': 'String'});
      if (data.hasOwnProperty('period_length'))
        obj.periodLength = ApiClient.convertToType(data['period_length'], 'String');
      if (data.hasOwnProperty('period_month'))
        obj.periodMonth = ApiClient.convertToType(data['period_month'], 'Number');
      if (data.hasOwnProperty('period_quarter'))
        obj.periodQuarter = ApiClient.convertToType(data['period_quarter'], 'Number');
      if (data.hasOwnProperty('period_type'))
        obj.periodType = ApiClient.convertToType(data['period_type'], 'String');
      if (data.hasOwnProperty('period_year'))
        obj.periodYear = ApiClient.convertToType(data['period_year'], 'Number');
      if (data.hasOwnProperty('secondary_id'))
        obj.secondaryId = ApiClient.convertToType(data['secondary_id'], 'String');
      if (data.hasOwnProperty('statement_date'))
        obj.statementDate = ApiClient.convertToType(data['statement_date'], 'Date');
      if (data.hasOwnProperty('statement_type'))
        obj.statementType = ApiClient.convertToType(data['statement_type'], 'String');
      if (data.hasOwnProperty('stats'))
        obj.stats = ApiClient.convertToType(data['stats'], [Stat]);
      if (data.hasOwnProperty('update_date'))
        obj.updateDate = ApiClient.convertToType(data['update_date'], 'Date');
    }
    return obj;
  }

  /**
   * accounting_method
   * @member {String} accountingMethod
   */
  exports.prototype.accountingMethod = undefined;

  /**
   * clientId
   * @member {String} clientId
   */
  exports.prototype.clientId = undefined;

  /**
   * @member {Date} createDate
   */
  exports.prototype.createDate = undefined;

  /**
   * currencyCode
   * @member {String} currencyCode
   */
  exports.prototype.currencyCode = undefined;

  /**
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * @member {Object.<String, String>} metadata
   */
  exports.prototype.metadata = undefined;

  /**
   * periodLength
   * @member {String} periodLength
   */
  exports.prototype.periodLength = undefined;

  /**
   * periodMonth
   * @member {Number} periodMonth
   */
  exports.prototype.periodMonth = undefined;

  /**
   * periodQuarter
   * @member {Number} periodQuarter
   */
  exports.prototype.periodQuarter = undefined;

  /**
   * periodType
   * @member {String} periodType
   */
  exports.prototype.periodType = undefined;

  /**
   * periodYear
   * @member {Number} periodYear
   */
  exports.prototype.periodYear = undefined;

  /**
   * @member {String} secondaryId
   */
  exports.prototype.secondaryId = undefined;

  /**
   * statementDate
   * @member {Date} statementDate
   */
  exports.prototype.statementDate = undefined;

  /**
   * statement_type
   * @member {String} statementType
   */
  exports.prototype.statementType = undefined;

  /**
   * stats
   * @member {Array.<module:model/Stat>} stats
   */
  exports.prototype.stats = undefined;

  /**
   * @member {Date} updateDate
   */
  exports.prototype.updateDate = undefined;


  return exports;

}));
