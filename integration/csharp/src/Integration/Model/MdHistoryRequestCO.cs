/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// MdHistoryRequestCO
    /// </summary>
    [DataContract]
    public partial class MdHistoryRequestCO :  IEquatable<MdHistoryRequestCO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MdHistoryRequestCO" /> class.
        /// </summary>
        /// <param name="endDate">endDate.</param>
        /// <param name="nucleusSecurityId">nucleusSecurityId.</param>
        /// <param name="product">product.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="ticker">ticker.</param>
        public MdHistoryRequestCO(DateTime? endDate = default(DateTime?), List<Guid?> nucleusSecurityId = default(List<Guid?>), string product = default(string), DateTime? startDate = default(DateTime?), List<string> ticker = default(List<string>))
        {
            this.EndDate = endDate;
            this.NucleusSecurityId = nucleusSecurityId;
            this.Product = product;
            this.StartDate = startDate;
            this.Ticker = ticker;
        }
        
        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets NucleusSecurityId
        /// </summary>
        [DataMember(Name="nucleus_security_id", EmitDefaultValue=false)]
        public List<Guid?> NucleusSecurityId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public List<string> Ticker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MdHistoryRequestCO {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  NucleusSecurityId: ").Append(NucleusSecurityId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MdHistoryRequestCO);
        }

        /// <summary>
        /// Returns true if MdHistoryRequestCO instances are equal
        /// </summary>
        /// <param name="input">Instance of MdHistoryRequestCO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MdHistoryRequestCO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.NucleusSecurityId == input.NucleusSecurityId ||
                    this.NucleusSecurityId != null &&
                    this.NucleusSecurityId.SequenceEqual(input.NucleusSecurityId)
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    this.Ticker != null &&
                    this.Ticker.SequenceEqual(input.Ticker)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.NucleusSecurityId != null)
                    hashCode = hashCode * 59 + this.NucleusSecurityId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
