/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// ApplePayload
    /// </summary>
    [DataContract]
    public partial class ApplePayload :  IEquatable<ApplePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplePayload" /> class.
        /// </summary>
        /// <param name="activationData">activationData.</param>
        /// <param name="encryptedPassData">encryptedPassData.</param>
        /// <param name="ephemeralPublicKey">ephemeralPublicKey.</param>
        public ApplePayload(string activationData = default(string), string encryptedPassData = default(string), string ephemeralPublicKey = default(string))
        {
            this.ActivationData = activationData;
            this.EncryptedPassData = encryptedPassData;
            this.EphemeralPublicKey = ephemeralPublicKey;
        }
        
        /// <summary>
        /// Gets or Sets ActivationData
        /// </summary>
        [DataMember(Name="activation_data", EmitDefaultValue=false)]
        public string ActivationData { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedPassData
        /// </summary>
        [DataMember(Name="encrypted_pass_data", EmitDefaultValue=false)]
        public string EncryptedPassData { get; set; }

        /// <summary>
        /// Gets or Sets EphemeralPublicKey
        /// </summary>
        [DataMember(Name="ephemeral_public_key", EmitDefaultValue=false)]
        public string EphemeralPublicKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplePayload {\n");
            sb.Append("  ActivationData: ").Append(ActivationData).Append("\n");
            sb.Append("  EncryptedPassData: ").Append(EncryptedPassData).Append("\n");
            sb.Append("  EphemeralPublicKey: ").Append(EphemeralPublicKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplePayload);
        }

        /// <summary>
        /// Returns true if ApplePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivationData == input.ActivationData ||
                    (this.ActivationData != null &&
                    this.ActivationData.Equals(input.ActivationData))
                ) && 
                (
                    this.EncryptedPassData == input.EncryptedPassData ||
                    (this.EncryptedPassData != null &&
                    this.EncryptedPassData.Equals(input.EncryptedPassData))
                ) && 
                (
                    this.EphemeralPublicKey == input.EphemeralPublicKey ||
                    (this.EphemeralPublicKey != null &&
                    this.EphemeralPublicKey.Equals(input.EphemeralPublicKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivationData != null)
                    hashCode = hashCode * 59 + this.ActivationData.GetHashCode();
                if (this.EncryptedPassData != null)
                    hashCode = hashCode * 59 + this.EncryptedPassData.GetHashCode();
                if (this.EphemeralPublicKey != null)
                    hashCode = hashCode * 59 + this.EphemeralPublicKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
