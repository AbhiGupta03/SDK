/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// KycRequestCO
    /// </summary>
    [DataContract]
    public partial class KycRequestCO :  IEquatable<KycRequestCO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KycRequestCO" /> class.
        /// </summary>
        /// <param name="authToken">authToken.</param>
        /// <param name="docType">docType.</param>
        /// <param name="kycType">kycType.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="nucleusBusinessId">nucleusBusinessId.</param>
        /// <param name="nucleusClientId">nucleusClientId.</param>
        /// <param name="nucleusDocumentId">nucleusDocumentId.</param>
        /// <param name="product">product.</param>
        /// <param name="vendorRequest">vendorRequest.</param>
        public KycRequestCO(string authToken = default(string), string docType = default(string), string kycType = default(string), List<Mapstringobject> metadata = default(List<Mapstringobject>), Guid? nucleusBusinessId = default(Guid?), Guid? nucleusClientId = default(Guid?), string nucleusDocumentId = default(string), string product = default(string), Object vendorRequest = default(Object))
        {
            this.AuthToken = authToken;
            this.DocType = docType;
            this.KycType = kycType;
            this.Metadata = metadata;
            this.NucleusBusinessId = nucleusBusinessId;
            this.NucleusClientId = nucleusClientId;
            this.NucleusDocumentId = nucleusDocumentId;
            this.Product = product;
            this.VendorRequest = vendorRequest;
        }
        
        /// <summary>
        /// Gets or Sets AuthToken
        /// </summary>
        [DataMember(Name="auth_token", EmitDefaultValue=false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Gets or Sets DocType
        /// </summary>
        [DataMember(Name="doc_type", EmitDefaultValue=false)]
        public string DocType { get; set; }

        /// <summary>
        /// Gets or Sets KycType
        /// </summary>
        [DataMember(Name="kyc_type", EmitDefaultValue=false)]
        public string KycType { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public List<Mapstringobject> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets NucleusBusinessId
        /// </summary>
        [DataMember(Name="nucleus_business_id", EmitDefaultValue=false)]
        public Guid? NucleusBusinessId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusClientId
        /// </summary>
        [DataMember(Name="nucleus_client_id", EmitDefaultValue=false)]
        public Guid? NucleusClientId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusDocumentId
        /// </summary>
        [DataMember(Name="nucleus_document_id", EmitDefaultValue=false)]
        public string NucleusDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// Gets or Sets VendorRequest
        /// </summary>
        [DataMember(Name="vendor_request", EmitDefaultValue=false)]
        public Object VendorRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KycRequestCO {\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  KycType: ").Append(KycType).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  NucleusBusinessId: ").Append(NucleusBusinessId).Append("\n");
            sb.Append("  NucleusClientId: ").Append(NucleusClientId).Append("\n");
            sb.Append("  NucleusDocumentId: ").Append(NucleusDocumentId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  VendorRequest: ").Append(VendorRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KycRequestCO);
        }

        /// <summary>
        /// Returns true if KycRequestCO instances are equal
        /// </summary>
        /// <param name="input">Instance of KycRequestCO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KycRequestCO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                ) && 
                (
                    this.DocType == input.DocType ||
                    (this.DocType != null &&
                    this.DocType.Equals(input.DocType))
                ) && 
                (
                    this.KycType == input.KycType ||
                    (this.KycType != null &&
                    this.KycType.Equals(input.KycType))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.NucleusBusinessId == input.NucleusBusinessId ||
                    (this.NucleusBusinessId != null &&
                    this.NucleusBusinessId.Equals(input.NucleusBusinessId))
                ) && 
                (
                    this.NucleusClientId == input.NucleusClientId ||
                    (this.NucleusClientId != null &&
                    this.NucleusClientId.Equals(input.NucleusClientId))
                ) && 
                (
                    this.NucleusDocumentId == input.NucleusDocumentId ||
                    (this.NucleusDocumentId != null &&
                    this.NucleusDocumentId.Equals(input.NucleusDocumentId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.VendorRequest == input.VendorRequest ||
                    (this.VendorRequest != null &&
                    this.VendorRequest.Equals(input.VendorRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthToken != null)
                    hashCode = hashCode * 59 + this.AuthToken.GetHashCode();
                if (this.DocType != null)
                    hashCode = hashCode * 59 + this.DocType.GetHashCode();
                if (this.KycType != null)
                    hashCode = hashCode * 59 + this.KycType.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.NucleusBusinessId != null)
                    hashCode = hashCode * 59 + this.NucleusBusinessId.GetHashCode();
                if (this.NucleusClientId != null)
                    hashCode = hashCode * 59 + this.NucleusClientId.GetHashCode();
                if (this.NucleusDocumentId != null)
                    hashCode = hashCode * 59 + this.NucleusDocumentId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.VendorRequest != null)
                    hashCode = hashCode * 59 + this.VendorRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
