/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// Transaction
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="accountAmount">accountAmount.</param>
        /// <param name="accountBalance">accountBalance.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="comment">comment.</param>
        /// <param name="dividend">dividend.</param>
        /// <param name="dividendTax">dividendTax.</param>
        /// <param name="dnb">dnb.</param>
        /// <param name="feeBase">feeBase.</param>
        /// <param name="feeExchange">feeExchange.</param>
        /// <param name="feeSec">feeSec.</param>
        /// <param name="feeTaf">feeTaf.</param>
        /// <param name="feeXtraShares">feeXtraShares.</param>
        /// <param name="fillPx">fillPx.</param>
        /// <param name="fillQty">fillQty.</param>
        /// <param name="finTranId">finTranId.</param>
        /// <param name="finTranTypeId">finTranTypeId.</param>
        /// <param name="instrument">instrument.</param>
        /// <param name="mergerAcquisition">mergerAcquisition.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="positionDelta">positionDelta.</param>
        /// <param name="systemAmount">systemAmount.</param>
        /// <param name="tranWhen">tranWhen.</param>
        public Transaction(double? accountAmount = default(double?), double? accountBalance = default(double?), string accountType = default(string), string comment = default(string), Dividend dividend = default(Dividend), DividendTax dividendTax = default(DividendTax), bool? dnb = default(bool?), double? feeBase = default(double?), double? feeExchange = default(double?), double? feeSec = default(double?), double? feeTaf = default(double?), double? feeXtraShares = default(double?), double? fillPx = default(double?), double? fillQty = default(double?), string finTranId = default(string), string finTranTypeId = default(string), Instrument instrument = default(Instrument), MergerAcquisition mergerAcquisition = default(MergerAcquisition), string orderId = default(string), double? positionDelta = default(double?), double? systemAmount = default(double?), DateTime? tranWhen = default(DateTime?))
        {
            this.AccountAmount = accountAmount;
            this.AccountBalance = accountBalance;
            this.AccountType = accountType;
            this.Comment = comment;
            this.Dividend = dividend;
            this.DividendTax = dividendTax;
            this.Dnb = dnb;
            this.FeeBase = feeBase;
            this.FeeExchange = feeExchange;
            this.FeeSec = feeSec;
            this.FeeTaf = feeTaf;
            this.FeeXtraShares = feeXtraShares;
            this.FillPx = fillPx;
            this.FillQty = fillQty;
            this.FinTranId = finTranId;
            this.FinTranTypeId = finTranTypeId;
            this.Instrument = instrument;
            this.MergerAcquisition = mergerAcquisition;
            this.OrderId = orderId;
            this.PositionDelta = positionDelta;
            this.SystemAmount = systemAmount;
            this.TranWhen = tranWhen;
        }
        
        /// <summary>
        /// Gets or Sets AccountAmount
        /// </summary>
        [DataMember(Name="account_amount", EmitDefaultValue=false)]
        public double? AccountAmount { get; set; }

        /// <summary>
        /// Gets or Sets AccountBalance
        /// </summary>
        [DataMember(Name="account_balance", EmitDefaultValue=false)]
        public double? AccountBalance { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="account_type", EmitDefaultValue=false)]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Dividend
        /// </summary>
        [DataMember(Name="dividend", EmitDefaultValue=false)]
        public Dividend Dividend { get; set; }

        /// <summary>
        /// Gets or Sets DividendTax
        /// </summary>
        [DataMember(Name="dividend_tax", EmitDefaultValue=false)]
        public DividendTax DividendTax { get; set; }

        /// <summary>
        /// Gets or Sets Dnb
        /// </summary>
        [DataMember(Name="dnb", EmitDefaultValue=false)]
        public bool? Dnb { get; set; }

        /// <summary>
        /// Gets or Sets FeeBase
        /// </summary>
        [DataMember(Name="fee_base", EmitDefaultValue=false)]
        public double? FeeBase { get; set; }

        /// <summary>
        /// Gets or Sets FeeExchange
        /// </summary>
        [DataMember(Name="fee_exchange", EmitDefaultValue=false)]
        public double? FeeExchange { get; set; }

        /// <summary>
        /// Gets or Sets FeeSec
        /// </summary>
        [DataMember(Name="fee_sec", EmitDefaultValue=false)]
        public double? FeeSec { get; set; }

        /// <summary>
        /// Gets or Sets FeeTaf
        /// </summary>
        [DataMember(Name="fee_taf", EmitDefaultValue=false)]
        public double? FeeTaf { get; set; }

        /// <summary>
        /// Gets or Sets FeeXtraShares
        /// </summary>
        [DataMember(Name="fee_xtra_shares", EmitDefaultValue=false)]
        public double? FeeXtraShares { get; set; }

        /// <summary>
        /// Gets or Sets FillPx
        /// </summary>
        [DataMember(Name="fill_px", EmitDefaultValue=false)]
        public double? FillPx { get; set; }

        /// <summary>
        /// Gets or Sets FillQty
        /// </summary>
        [DataMember(Name="fill_qty", EmitDefaultValue=false)]
        public double? FillQty { get; set; }

        /// <summary>
        /// Gets or Sets FinTranId
        /// </summary>
        [DataMember(Name="fin_tran_id", EmitDefaultValue=false)]
        public string FinTranId { get; set; }

        /// <summary>
        /// Gets or Sets FinTranTypeId
        /// </summary>
        [DataMember(Name="fin_tran_type_id", EmitDefaultValue=false)]
        public string FinTranTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name="instrument", EmitDefaultValue=false)]
        public Instrument Instrument { get; set; }

        /// <summary>
        /// Gets or Sets MergerAcquisition
        /// </summary>
        [DataMember(Name="merger_acquisition", EmitDefaultValue=false)]
        public MergerAcquisition MergerAcquisition { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PositionDelta
        /// </summary>
        [DataMember(Name="position_delta", EmitDefaultValue=false)]
        public double? PositionDelta { get; set; }

        /// <summary>
        /// Gets or Sets SystemAmount
        /// </summary>
        [DataMember(Name="system_amount", EmitDefaultValue=false)]
        public double? SystemAmount { get; set; }

        /// <summary>
        /// Gets or Sets TranWhen
        /// </summary>
        [DataMember(Name="tran_when", EmitDefaultValue=false)]
        public DateTime? TranWhen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  AccountAmount: ").Append(AccountAmount).Append("\n");
            sb.Append("  AccountBalance: ").Append(AccountBalance).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Dividend: ").Append(Dividend).Append("\n");
            sb.Append("  DividendTax: ").Append(DividendTax).Append("\n");
            sb.Append("  Dnb: ").Append(Dnb).Append("\n");
            sb.Append("  FeeBase: ").Append(FeeBase).Append("\n");
            sb.Append("  FeeExchange: ").Append(FeeExchange).Append("\n");
            sb.Append("  FeeSec: ").Append(FeeSec).Append("\n");
            sb.Append("  FeeTaf: ").Append(FeeTaf).Append("\n");
            sb.Append("  FeeXtraShares: ").Append(FeeXtraShares).Append("\n");
            sb.Append("  FillPx: ").Append(FillPx).Append("\n");
            sb.Append("  FillQty: ").Append(FillQty).Append("\n");
            sb.Append("  FinTranId: ").Append(FinTranId).Append("\n");
            sb.Append("  FinTranTypeId: ").Append(FinTranTypeId).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  MergerAcquisition: ").Append(MergerAcquisition).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PositionDelta: ").Append(PositionDelta).Append("\n");
            sb.Append("  SystemAmount: ").Append(SystemAmount).Append("\n");
            sb.Append("  TranWhen: ").Append(TranWhen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountAmount == input.AccountAmount ||
                    (this.AccountAmount != null &&
                    this.AccountAmount.Equals(input.AccountAmount))
                ) && 
                (
                    this.AccountBalance == input.AccountBalance ||
                    (this.AccountBalance != null &&
                    this.AccountBalance.Equals(input.AccountBalance))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Dividend == input.Dividend ||
                    (this.Dividend != null &&
                    this.Dividend.Equals(input.Dividend))
                ) && 
                (
                    this.DividendTax == input.DividendTax ||
                    (this.DividendTax != null &&
                    this.DividendTax.Equals(input.DividendTax))
                ) && 
                (
                    this.Dnb == input.Dnb ||
                    (this.Dnb != null &&
                    this.Dnb.Equals(input.Dnb))
                ) && 
                (
                    this.FeeBase == input.FeeBase ||
                    (this.FeeBase != null &&
                    this.FeeBase.Equals(input.FeeBase))
                ) && 
                (
                    this.FeeExchange == input.FeeExchange ||
                    (this.FeeExchange != null &&
                    this.FeeExchange.Equals(input.FeeExchange))
                ) && 
                (
                    this.FeeSec == input.FeeSec ||
                    (this.FeeSec != null &&
                    this.FeeSec.Equals(input.FeeSec))
                ) && 
                (
                    this.FeeTaf == input.FeeTaf ||
                    (this.FeeTaf != null &&
                    this.FeeTaf.Equals(input.FeeTaf))
                ) && 
                (
                    this.FeeXtraShares == input.FeeXtraShares ||
                    (this.FeeXtraShares != null &&
                    this.FeeXtraShares.Equals(input.FeeXtraShares))
                ) && 
                (
                    this.FillPx == input.FillPx ||
                    (this.FillPx != null &&
                    this.FillPx.Equals(input.FillPx))
                ) && 
                (
                    this.FillQty == input.FillQty ||
                    (this.FillQty != null &&
                    this.FillQty.Equals(input.FillQty))
                ) && 
                (
                    this.FinTranId == input.FinTranId ||
                    (this.FinTranId != null &&
                    this.FinTranId.Equals(input.FinTranId))
                ) && 
                (
                    this.FinTranTypeId == input.FinTranTypeId ||
                    (this.FinTranTypeId != null &&
                    this.FinTranTypeId.Equals(input.FinTranTypeId))
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) && 
                (
                    this.MergerAcquisition == input.MergerAcquisition ||
                    (this.MergerAcquisition != null &&
                    this.MergerAcquisition.Equals(input.MergerAcquisition))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PositionDelta == input.PositionDelta ||
                    (this.PositionDelta != null &&
                    this.PositionDelta.Equals(input.PositionDelta))
                ) && 
                (
                    this.SystemAmount == input.SystemAmount ||
                    (this.SystemAmount != null &&
                    this.SystemAmount.Equals(input.SystemAmount))
                ) && 
                (
                    this.TranWhen == input.TranWhen ||
                    (this.TranWhen != null &&
                    this.TranWhen.Equals(input.TranWhen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountAmount != null)
                    hashCode = hashCode * 59 + this.AccountAmount.GetHashCode();
                if (this.AccountBalance != null)
                    hashCode = hashCode * 59 + this.AccountBalance.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Dividend != null)
                    hashCode = hashCode * 59 + this.Dividend.GetHashCode();
                if (this.DividendTax != null)
                    hashCode = hashCode * 59 + this.DividendTax.GetHashCode();
                if (this.Dnb != null)
                    hashCode = hashCode * 59 + this.Dnb.GetHashCode();
                if (this.FeeBase != null)
                    hashCode = hashCode * 59 + this.FeeBase.GetHashCode();
                if (this.FeeExchange != null)
                    hashCode = hashCode * 59 + this.FeeExchange.GetHashCode();
                if (this.FeeSec != null)
                    hashCode = hashCode * 59 + this.FeeSec.GetHashCode();
                if (this.FeeTaf != null)
                    hashCode = hashCode * 59 + this.FeeTaf.GetHashCode();
                if (this.FeeXtraShares != null)
                    hashCode = hashCode * 59 + this.FeeXtraShares.GetHashCode();
                if (this.FillPx != null)
                    hashCode = hashCode * 59 + this.FillPx.GetHashCode();
                if (this.FillQty != null)
                    hashCode = hashCode * 59 + this.FillQty.GetHashCode();
                if (this.FinTranId != null)
                    hashCode = hashCode * 59 + this.FinTranId.GetHashCode();
                if (this.FinTranTypeId != null)
                    hashCode = hashCode * 59 + this.FinTranTypeId.GetHashCode();
                if (this.Instrument != null)
                    hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                if (this.MergerAcquisition != null)
                    hashCode = hashCode * 59 + this.MergerAcquisition.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PositionDelta != null)
                    hashCode = hashCode * 59 + this.PositionDelta.GetHashCode();
                if (this.SystemAmount != null)
                    hashCode = hashCode * 59 + this.SystemAmount.GetHashCode();
                if (this.TranWhen != null)
                    hashCode = hashCode * 59 + this.TranWhen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
