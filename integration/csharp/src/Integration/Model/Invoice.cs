/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// Invoice Object
    /// </summary>
    [DataContract]
    public partial class Invoice :  IEquatable<Invoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Invoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="businessId">businessId.</param>
        /// <param name="clientId">client_id.</param>
        /// <param name="contactId">contact_id (required).</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="currencyCode">currency_code (required).</param>
        /// <param name="department">department.</param>
        /// <param name="description">description.</param>
        /// <param name="documentId">document_id.</param>
        /// <param name="dueDate">due_date (required).</param>
        /// <param name="id">id.</param>
        /// <param name="invoiceDate">invoice_date (required).</param>
        /// <param name="invoiceName">invoice_name.</param>
        /// <param name="invoiceNumber">invoice_number (required).</param>
        /// <param name="isActive">is_active.</param>
        /// <param name="isBill">is_bill.</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="paymentInstructions">paymentInstructions.</param>
        /// <param name="paymentTerms">paymentTerms.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="status">status.</param>
        /// <param name="totalAmount">totalAmount (required).</param>
        /// <param name="totalDiscount">totalDiscount.</param>
        /// <param name="totalDue">totalDue.</param>
        /// <param name="totalSubtotal">totalSubtotal.</param>
        /// <param name="totalTax">totalTax.</param>
        /// <param name="updateDate">updateDate.</param>
        public Invoice(Guid? businessId = default(Guid?), Guid? clientId = default(Guid?), Guid? contactId = default(Guid?), DateTime? createDate = default(DateTime?), string currencyCode = default(string), string department = default(string), string description = default(string), Guid? documentId = default(Guid?), DateTime? dueDate = default(DateTime?), Guid? id = default(Guid?), DateTime? invoiceDate = default(DateTime?), string invoiceName = default(string), string invoiceNumber = default(string), bool? isActive = default(bool?), bool? isBill = default(bool?), List<LineItems> lineItems = default(List<LineItems>), string paymentInstructions = default(string), string paymentTerms = default(string), string secondaryId = default(string), string status = default(string), double? totalAmount = default(double?), double? totalDiscount = default(double?), double? totalDue = default(double?), double? totalSubtotal = default(double?), double? totalTax = default(double?), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "contactId" is required (not null)
            if (contactId == null)
            {
                throw new InvalidDataException("contactId is a required property for Invoice and cannot be null");
            }
            else
            {
                this.ContactId = contactId;
            }
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for Invoice and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            // to ensure "dueDate" is required (not null)
            if (dueDate == null)
            {
                throw new InvalidDataException("dueDate is a required property for Invoice and cannot be null");
            }
            else
            {
                this.DueDate = dueDate;
            }
            // to ensure "invoiceDate" is required (not null)
            if (invoiceDate == null)
            {
                throw new InvalidDataException("invoiceDate is a required property for Invoice and cannot be null");
            }
            else
            {
                this.InvoiceDate = invoiceDate;
            }
            // to ensure "invoiceNumber" is required (not null)
            if (invoiceNumber == null)
            {
                throw new InvalidDataException("invoiceNumber is a required property for Invoice and cannot be null");
            }
            else
            {
                this.InvoiceNumber = invoiceNumber;
            }
            // to ensure "totalAmount" is required (not null)
            if (totalAmount == null)
            {
                throw new InvalidDataException("totalAmount is a required property for Invoice and cannot be null");
            }
            else
            {
                this.TotalAmount = totalAmount;
            }
            this.BusinessId = businessId;
            this.ClientId = clientId;
            this.CreateDate = createDate;
            this.Department = department;
            this.Description = description;
            this.DocumentId = documentId;
            this.Id = id;
            this.InvoiceName = invoiceName;
            this.IsActive = isActive;
            this.IsBill = isBill;
            this.LineItems = lineItems;
            this.PaymentInstructions = paymentInstructions;
            this.PaymentTerms = paymentTerms;
            this.SecondaryId = secondaryId;
            this.Status = status;
            this.TotalDiscount = totalDiscount;
            this.TotalDue = totalDue;
            this.TotalSubtotal = totalSubtotal;
            this.TotalTax = totalTax;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// businessId
        /// </summary>
        /// <value>businessId</value>
        [DataMember(Name="business_id", EmitDefaultValue=false)]
        public Guid? BusinessId { get; set; }

        /// <summary>
        /// client_id
        /// </summary>
        /// <value>client_id</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// contact_id
        /// </summary>
        /// <value>contact_id</value>
        [DataMember(Name="contact_id", EmitDefaultValue=false)]
        public Guid? ContactId { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// currency_code
        /// </summary>
        /// <value>currency_code</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// department
        /// </summary>
        /// <value>department</value>
        [DataMember(Name="department", EmitDefaultValue=false)]
        public string Department { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// document_id
        /// </summary>
        /// <value>document_id</value>
        [DataMember(Name="document_id", EmitDefaultValue=false)]
        public Guid? DocumentId { get; set; }

        /// <summary>
        /// due_date
        /// </summary>
        /// <value>due_date</value>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// invoice_date
        /// </summary>
        /// <value>invoice_date</value>
        [DataMember(Name="invoice_date", EmitDefaultValue=false)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// invoice_name
        /// </summary>
        /// <value>invoice_name</value>
        [DataMember(Name="invoice_name", EmitDefaultValue=false)]
        public string InvoiceName { get; set; }

        /// <summary>
        /// invoice_number
        /// </summary>
        /// <value>invoice_number</value>
        [DataMember(Name="invoice_number", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// is_active
        /// </summary>
        /// <value>is_active</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// is_bill
        /// </summary>
        /// <value>is_bill</value>
        [DataMember(Name="is_bill", EmitDefaultValue=false)]
        public bool? IsBill { get; set; }

        /// <summary>
        /// lineItems
        /// </summary>
        /// <value>lineItems</value>
        [DataMember(Name="line_items", EmitDefaultValue=false)]
        public List<LineItems> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; private set; }

        /// <summary>
        /// paymentInstructions
        /// </summary>
        /// <value>paymentInstructions</value>
        [DataMember(Name="payment_instructions", EmitDefaultValue=false)]
        public string PaymentInstructions { get; set; }

        /// <summary>
        /// paymentTerms
        /// </summary>
        /// <value>paymentTerms</value>
        [DataMember(Name="payment_terms", EmitDefaultValue=false)]
        public string PaymentTerms { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// totalAmount
        /// </summary>
        /// <value>totalAmount</value>
        [DataMember(Name="total_amount", EmitDefaultValue=false)]
        public double? TotalAmount { get; set; }

        /// <summary>
        /// totalDiscount
        /// </summary>
        /// <value>totalDiscount</value>
        [DataMember(Name="total_discount", EmitDefaultValue=false)]
        public double? TotalDiscount { get; set; }

        /// <summary>
        /// totalDue
        /// </summary>
        /// <value>totalDue</value>
        [DataMember(Name="total_due", EmitDefaultValue=false)]
        public double? TotalDue { get; set; }

        /// <summary>
        /// totalSubtotal
        /// </summary>
        /// <value>totalSubtotal</value>
        [DataMember(Name="total_subtotal", EmitDefaultValue=false)]
        public double? TotalSubtotal { get; set; }

        /// <summary>
        /// totalTax
        /// </summary>
        /// <value>totalTax</value>
        [DataMember(Name="total_tax", EmitDefaultValue=false)]
        public double? TotalTax { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceName: ").Append(InvoiceName).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsBill: ").Append(IsBill).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PaymentInstructions: ").Append(PaymentInstructions).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  TotalDue: ").Append(TotalDue).Append("\n");
            sb.Append("  TotalSubtotal: ").Append(TotalSubtotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Invoice);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="input">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusinessId == input.BusinessId ||
                    (this.BusinessId != null &&
                    this.BusinessId.Equals(input.BusinessId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.InvoiceName == input.InvoiceName ||
                    (this.InvoiceName != null &&
                    this.InvoiceName.Equals(input.InvoiceName))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsBill == input.IsBill ||
                    (this.IsBill != null &&
                    this.IsBill.Equals(input.IsBill))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.PaymentInstructions == input.PaymentInstructions ||
                    (this.PaymentInstructions != null &&
                    this.PaymentInstructions.Equals(input.PaymentInstructions))
                ) && 
                (
                    this.PaymentTerms == input.PaymentTerms ||
                    (this.PaymentTerms != null &&
                    this.PaymentTerms.Equals(input.PaymentTerms))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TotalDiscount == input.TotalDiscount ||
                    (this.TotalDiscount != null &&
                    this.TotalDiscount.Equals(input.TotalDiscount))
                ) && 
                (
                    this.TotalDue == input.TotalDue ||
                    (this.TotalDue != null &&
                    this.TotalDue.Equals(input.TotalDue))
                ) && 
                (
                    this.TotalSubtotal == input.TotalSubtotal ||
                    (this.TotalSubtotal != null &&
                    this.TotalSubtotal.Equals(input.TotalSubtotal))
                ) && 
                (
                    this.TotalTax == input.TotalTax ||
                    (this.TotalTax != null &&
                    this.TotalTax.Equals(input.TotalTax))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessId != null)
                    hashCode = hashCode * 59 + this.BusinessId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.InvoiceName != null)
                    hashCode = hashCode * 59 + this.InvoiceName.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsBill != null)
                    hashCode = hashCode * 59 + this.IsBill.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.PaymentInstructions != null)
                    hashCode = hashCode * 59 + this.PaymentInstructions.GetHashCode();
                if (this.PaymentTerms != null)
                    hashCode = hashCode * 59 + this.PaymentTerms.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.TotalDiscount != null)
                    hashCode = hashCode * 59 + this.TotalDiscount.GetHashCode();
                if (this.TotalDue != null)
                    hashCode = hashCode * 59 + this.TotalDue.GetHashCode();
                if (this.TotalSubtotal != null)
                    hashCode = hashCode * 59 + this.TotalSubtotal.GetHashCode();
                if (this.TotalTax != null)
                    hashCode = hashCode * 59 + this.TotalTax.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
