/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// Balances Object
    /// </summary>
    [DataContract]
    public partial class Balances :  IEquatable<Balances>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Balances" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="payableOutstanding">payableOutstanding.</param>
        /// <param name="payableOverdue">payableOverdue.</param>
        /// <param name="receivableOutstanding">receivableOutstanding.</param>
        /// <param name="receivableOverdue">receivableOverdue.</param>
        public Balances(string currencyCode = default(string), double? payableOutstanding = default(double?), double? payableOverdue = default(double?), double? receivableOutstanding = default(double?), double? receivableOverdue = default(double?))
        {
            this.CurrencyCode = currencyCode;
            this.PayableOutstanding = payableOutstanding;
            this.PayableOverdue = payableOverdue;
            this.ReceivableOutstanding = receivableOutstanding;
            this.ReceivableOverdue = receivableOverdue;
        }
        
        /// <summary>
        /// currencyCode
        /// </summary>
        /// <value>currencyCode</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// payableOutstanding
        /// </summary>
        /// <value>payableOutstanding</value>
        [DataMember(Name="payable_outstanding", EmitDefaultValue=false)]
        public double? PayableOutstanding { get; set; }

        /// <summary>
        /// payableOverdue
        /// </summary>
        /// <value>payableOverdue</value>
        [DataMember(Name="payable_overdue", EmitDefaultValue=false)]
        public double? PayableOverdue { get; set; }

        /// <summary>
        /// receivableOutstanding
        /// </summary>
        /// <value>receivableOutstanding</value>
        [DataMember(Name="receivable_outstanding", EmitDefaultValue=false)]
        public double? ReceivableOutstanding { get; set; }

        /// <summary>
        /// receivableOverdue
        /// </summary>
        /// <value>receivableOverdue</value>
        [DataMember(Name="receivable_overdue", EmitDefaultValue=false)]
        public double? ReceivableOverdue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balances {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  PayableOutstanding: ").Append(PayableOutstanding).Append("\n");
            sb.Append("  PayableOverdue: ").Append(PayableOverdue).Append("\n");
            sb.Append("  ReceivableOutstanding: ").Append(ReceivableOutstanding).Append("\n");
            sb.Append("  ReceivableOverdue: ").Append(ReceivableOverdue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Balances);
        }

        /// <summary>
        /// Returns true if Balances instances are equal
        /// </summary>
        /// <param name="input">Instance of Balances to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balances input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.PayableOutstanding == input.PayableOutstanding ||
                    (this.PayableOutstanding != null &&
                    this.PayableOutstanding.Equals(input.PayableOutstanding))
                ) && 
                (
                    this.PayableOverdue == input.PayableOverdue ||
                    (this.PayableOverdue != null &&
                    this.PayableOverdue.Equals(input.PayableOverdue))
                ) && 
                (
                    this.ReceivableOutstanding == input.ReceivableOutstanding ||
                    (this.ReceivableOutstanding != null &&
                    this.ReceivableOutstanding.Equals(input.ReceivableOutstanding))
                ) && 
                (
                    this.ReceivableOverdue == input.ReceivableOverdue ||
                    (this.ReceivableOverdue != null &&
                    this.ReceivableOverdue.Equals(input.ReceivableOverdue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.PayableOutstanding != null)
                    hashCode = hashCode * 59 + this.PayableOutstanding.GetHashCode();
                if (this.PayableOverdue != null)
                    hashCode = hashCode * 59 + this.PayableOverdue.GetHashCode();
                if (this.ReceivableOutstanding != null)
                    hashCode = hashCode * 59 + this.ReceivableOutstanding.GetHashCode();
                if (this.ReceivableOverdue != null)
                    hashCode = hashCode * 59 + this.ReceivableOverdue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
