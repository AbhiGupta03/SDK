/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// AggregationRequestObject
    /// </summary>
    [DataContract]
    public partial class AggregationRequestObject :  IEquatable<AggregationRequestObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationRequestObject" /> class.
        /// </summary>
        /// <param name="nucleusAggregationAccountId">nucleusAggregationAccountId.</param>
        /// <param name="nucleusBusinessId">nucleusBusinessId.</param>
        /// <param name="nucleusClientId">nucleusClientId.</param>
        /// <param name="product">product.</param>
        /// <param name="vendorConfigId">vendorConfigId.</param>
        /// <param name="vendorRequest">vendorRequest.</param>
        public AggregationRequestObject(Guid? nucleusAggregationAccountId = default(Guid?), Guid? nucleusBusinessId = default(Guid?), Guid? nucleusClientId = default(Guid?), string product = default(string), string vendorConfigId = default(string), AggregationVendorRequestCO vendorRequest = default(AggregationVendorRequestCO))
        {
            this.NucleusAggregationAccountId = nucleusAggregationAccountId;
            this.NucleusBusinessId = nucleusBusinessId;
            this.NucleusClientId = nucleusClientId;
            this.Product = product;
            this.VendorConfigId = vendorConfigId;
            this.VendorRequest = vendorRequest;
        }
        
        /// <summary>
        /// Gets or Sets NucleusAggregationAccountId
        /// </summary>
        [DataMember(Name="nucleus_aggregation_account_id", EmitDefaultValue=false)]
        public Guid? NucleusAggregationAccountId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusBusinessId
        /// </summary>
        [DataMember(Name="nucleus_business_id", EmitDefaultValue=false)]
        public Guid? NucleusBusinessId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusClientId
        /// </summary>
        [DataMember(Name="nucleus_client_id", EmitDefaultValue=false)]
        public Guid? NucleusClientId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// Gets or Sets VendorConfigId
        /// </summary>
        [DataMember(Name="vendor_config_id", EmitDefaultValue=false)]
        public string VendorConfigId { get; set; }

        /// <summary>
        /// Gets or Sets VendorRequest
        /// </summary>
        [DataMember(Name="vendor_request", EmitDefaultValue=false)]
        public AggregationVendorRequestCO VendorRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregationRequestObject {\n");
            sb.Append("  NucleusAggregationAccountId: ").Append(NucleusAggregationAccountId).Append("\n");
            sb.Append("  NucleusBusinessId: ").Append(NucleusBusinessId).Append("\n");
            sb.Append("  NucleusClientId: ").Append(NucleusClientId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  VendorConfigId: ").Append(VendorConfigId).Append("\n");
            sb.Append("  VendorRequest: ").Append(VendorRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregationRequestObject);
        }

        /// <summary>
        /// Returns true if AggregationRequestObject instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregationRequestObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregationRequestObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NucleusAggregationAccountId == input.NucleusAggregationAccountId ||
                    (this.NucleusAggregationAccountId != null &&
                    this.NucleusAggregationAccountId.Equals(input.NucleusAggregationAccountId))
                ) && 
                (
                    this.NucleusBusinessId == input.NucleusBusinessId ||
                    (this.NucleusBusinessId != null &&
                    this.NucleusBusinessId.Equals(input.NucleusBusinessId))
                ) && 
                (
                    this.NucleusClientId == input.NucleusClientId ||
                    (this.NucleusClientId != null &&
                    this.NucleusClientId.Equals(input.NucleusClientId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.VendorConfigId == input.VendorConfigId ||
                    (this.VendorConfigId != null &&
                    this.VendorConfigId.Equals(input.VendorConfigId))
                ) && 
                (
                    this.VendorRequest == input.VendorRequest ||
                    (this.VendorRequest != null &&
                    this.VendorRequest.Equals(input.VendorRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NucleusAggregationAccountId != null)
                    hashCode = hashCode * 59 + this.NucleusAggregationAccountId.GetHashCode();
                if (this.NucleusBusinessId != null)
                    hashCode = hashCode * 59 + this.NucleusBusinessId.GetHashCode();
                if (this.NucleusClientId != null)
                    hashCode = hashCode * 59 + this.NucleusClientId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.VendorConfigId != null)
                    hashCode = hashCode * 59 + this.VendorConfigId.GetHashCode();
                if (this.VendorRequest != null)
                    hashCode = hashCode * 59 + this.VendorRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
