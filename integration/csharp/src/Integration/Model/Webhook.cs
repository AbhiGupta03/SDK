/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// Webhook Object
    /// </summary>
    [DataContract]
    public partial class Webhook :  IEquatable<Webhook>, IValidatableObject
    {
        /// <summary>
        /// Defines IntegrationService
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntegrationServiceEnum
        {
            
            /// <summary>
            /// Enum Kyc for value: kyc
            /// </summary>
            [EnumMember(Value = "kyc")]
            Kyc = 1,
            
            /// <summary>
            /// Enum Kycstatus for value: kyc_status
            /// </summary>
            [EnumMember(Value = "kyc_status")]
            Kycstatus = 2,
            
            /// <summary>
            /// Enum Asyncaccountingcustomer for value: async_accounting_customer
            /// </summary>
            [EnumMember(Value = "async_accounting_customer")]
            Asyncaccountingcustomer = 3,
            
            /// <summary>
            /// Enum Asyncaccountingsupplier for value: async_accounting_supplier
            /// </summary>
            [EnumMember(Value = "async_accounting_supplier")]
            Asyncaccountingsupplier = 4,
            
            /// <summary>
            /// Enum Asyncaccountingcustomerrevenue for value: async_accounting_customer_revenue
            /// </summary>
            [EnumMember(Value = "async_accounting_customer_revenue")]
            Asyncaccountingcustomerrevenue = 5,
            
            /// <summary>
            /// Enum Asyncaccountinginvoice for value: async_accounting_invoice
            /// </summary>
            [EnumMember(Value = "async_accounting_invoice")]
            Asyncaccountinginvoice = 6,
            
            /// <summary>
            /// Enum Asyncaccountingbill for value: async_accounting_bill
            /// </summary>
            [EnumMember(Value = "async_accounting_bill")]
            Asyncaccountingbill = 7,
            
            /// <summary>
            /// Enum Asyncaccountinginvoicepayment for value: async_accounting_invoice_payment
            /// </summary>
            [EnumMember(Value = "async_accounting_invoice_payment")]
            Asyncaccountinginvoicepayment = 8,
            
            /// <summary>
            /// Enum Asyncaggregationaccount for value: async_aggregation_account
            /// </summary>
            [EnumMember(Value = "async_aggregation_account")]
            Asyncaggregationaccount = 9,
            
            /// <summary>
            /// Enum Asyncaggregationaccounttransaction for value: async_aggregation_account_transaction
            /// </summary>
            [EnumMember(Value = "async_aggregation_account_transaction")]
            Asyncaggregationaccounttransaction = 10,
            
            /// <summary>
            /// Enum Asyncaggregationaccountholding for value: async_aggregation_account_holding
            /// </summary>
            [EnumMember(Value = "async_aggregation_account_holding")]
            Asyncaggregationaccountholding = 11
        }


        /// <summary>
        /// integration_service
        /// </summary>
        /// <value>integration_service</value>
        [DataMember(Name="integration_service", EmitDefaultValue=false)]
        public List<IntegrationServiceEnum> IntegrationService { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Webhook() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="createDate">createDate.</param>
        /// <param name="integrationService">integration_service.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="updateDate">updateDate.</param>
        /// <param name="url">url (required).</param>
        public Webhook(DateTime? createDate = default(DateTime?), List<IntegrationServiceEnum> integrationService = default(List<IntegrationServiceEnum>), bool? isActive = default(bool?), string secondaryId = default(string), DateTime? updateDate = default(DateTime?), string url = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for Webhook and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            this.CreateDate = createDate;
            this.IntegrationService = integrationService;
            this.IsActive = isActive;
            this.SecondaryId = secondaryId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; private set; }


        /// <summary>
        /// isActive
        /// </summary>
        /// <value>isActive</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IntegrationService: ").Append(IntegrationService).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webhook);
        }

        /// <summary>
        /// Returns true if Webhook instances are equal
        /// </summary>
        /// <param name="input">Instance of Webhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IntegrationService == input.IntegrationService ||
                    this.IntegrationService != null &&
                    this.IntegrationService.SequenceEqual(input.IntegrationService)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IntegrationService != null)
                    hashCode = hashCode * 59 + this.IntegrationService.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
