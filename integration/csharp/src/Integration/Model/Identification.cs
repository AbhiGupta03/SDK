/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// Identification
    /// </summary>
    [DataContract]
    public partial class Identification :  IEquatable<Identification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identification" /> class.
        /// </summary>
        /// <param name="countryOfIssue">countryOfIssue.</param>
        /// <param name="docNumber">docNumber.</param>
        /// <param name="docType">docType.</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="issueDate">issueDate.</param>
        /// <param name="issuingAuthority">issuingAuthority.</param>
        /// <param name="stateOfIssue">stateOfIssue.</param>
        public Identification(string countryOfIssue = default(string), string docNumber = default(string), string docType = default(string), DateTime? expiryDate = default(DateTime?), DateTime? issueDate = default(DateTime?), string issuingAuthority = default(string), string stateOfIssue = default(string))
        {
            this.CountryOfIssue = countryOfIssue;
            this.DocNumber = docNumber;
            this.DocType = docType;
            this.ExpiryDate = expiryDate;
            this.IssueDate = issueDate;
            this.IssuingAuthority = issuingAuthority;
            this.StateOfIssue = stateOfIssue;
        }
        
        /// <summary>
        /// Gets or Sets CountryOfIssue
        /// </summary>
        [DataMember(Name="country_of_issue", EmitDefaultValue=false)]
        public string CountryOfIssue { get; set; }

        /// <summary>
        /// Gets or Sets DocNumber
        /// </summary>
        [DataMember(Name="doc_number", EmitDefaultValue=false)]
        public string DocNumber { get; set; }

        /// <summary>
        /// Gets or Sets DocType
        /// </summary>
        [DataMember(Name="doc_type", EmitDefaultValue=false)]
        public string DocType { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name="expiry_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets IssueDate
        /// </summary>
        [DataMember(Name="issue_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IssueDate { get; set; }

        /// <summary>
        /// Gets or Sets IssuingAuthority
        /// </summary>
        [DataMember(Name="issuing_authority", EmitDefaultValue=false)]
        public string IssuingAuthority { get; set; }

        /// <summary>
        /// Gets or Sets StateOfIssue
        /// </summary>
        [DataMember(Name="state_of_issue", EmitDefaultValue=false)]
        public string StateOfIssue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Identification {\n");
            sb.Append("  CountryOfIssue: ").Append(CountryOfIssue).Append("\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  IssuingAuthority: ").Append(IssuingAuthority).Append("\n");
            sb.Append("  StateOfIssue: ").Append(StateOfIssue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identification);
        }

        /// <summary>
        /// Returns true if Identification instances are equal
        /// </summary>
        /// <param name="input">Instance of Identification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryOfIssue == input.CountryOfIssue ||
                    (this.CountryOfIssue != null &&
                    this.CountryOfIssue.Equals(input.CountryOfIssue))
                ) && 
                (
                    this.DocNumber == input.DocNumber ||
                    (this.DocNumber != null &&
                    this.DocNumber.Equals(input.DocNumber))
                ) && 
                (
                    this.DocType == input.DocType ||
                    (this.DocType != null &&
                    this.DocType.Equals(input.DocType))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.IssuingAuthority == input.IssuingAuthority ||
                    (this.IssuingAuthority != null &&
                    this.IssuingAuthority.Equals(input.IssuingAuthority))
                ) && 
                (
                    this.StateOfIssue == input.StateOfIssue ||
                    (this.StateOfIssue != null &&
                    this.StateOfIssue.Equals(input.StateOfIssue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryOfIssue != null)
                    hashCode = hashCode * 59 + this.CountryOfIssue.GetHashCode();
                if (this.DocNumber != null)
                    hashCode = hashCode * 59 + this.DocNumber.GetHashCode();
                if (this.DocType != null)
                    hashCode = hashCode * 59 + this.DocType.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.IssueDate != null)
                    hashCode = hashCode * 59 + this.IssueDate.GetHashCode();
                if (this.IssuingAuthority != null)
                    hashCode = hashCode * 59 + this.IssuingAuthority.GetHashCode();
                if (this.StateOfIssue != null)
                    hashCode = hashCode * 59 + this.StateOfIssue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
