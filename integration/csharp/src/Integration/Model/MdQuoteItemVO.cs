/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// MdQuoteItemVO
    /// </summary>
    [DataContract]
    public partial class MdQuoteItemVO :  IEquatable<MdQuoteItemVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MdQuoteItemVO" /> class.
        /// </summary>
        /// <param name="ask">ask.</param>
        /// <param name="askSize">askSize.</param>
        /// <param name="bid">bid.</param>
        /// <param name="bidSize">bidSize.</param>
        /// <param name="change">change.</param>
        /// <param name="close">close.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="dayRange">dayRange.</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="high">high.</param>
        /// <param name="lastTrade">lastTrade.</param>
        /// <param name="lastTradeTimeStamp">lastTradeTimeStamp.</param>
        /// <param name="low">low.</param>
        /// <param name="marketCap">marketCap.</param>
        /// <param name="nucleusSecurityId">nucleusSecurityId.</param>
        /// <param name="open">open.</param>
        /// <param name="prevClose">prevClose.</param>
        /// <param name="ticker">ticker.</param>
        /// <param name="volume">volume.</param>
        /// <param name="yearRange">yearRange.</param>
        public MdQuoteItemVO(double? ask = default(double?), int? askSize = default(int?), double? bid = default(double?), int? bidSize = default(int?), double? change = default(double?), double? close = default(double?), string currencyCode = default(string), string dayRange = default(string), string exchange = default(string), double? high = default(double?), double? lastTrade = default(double?), DateTime? lastTradeTimeStamp = default(DateTime?), double? low = default(double?), string marketCap = default(string), Guid? nucleusSecurityId = default(Guid?), double? open = default(double?), double? prevClose = default(double?), string ticker = default(string), long? volume = default(long?), string yearRange = default(string))
        {
            this.Ask = ask;
            this.AskSize = askSize;
            this.Bid = bid;
            this.BidSize = bidSize;
            this.Change = change;
            this.Close = close;
            this.CurrencyCode = currencyCode;
            this.DayRange = dayRange;
            this.Exchange = exchange;
            this.High = high;
            this.LastTrade = lastTrade;
            this.LastTradeTimeStamp = lastTradeTimeStamp;
            this.Low = low;
            this.MarketCap = marketCap;
            this.NucleusSecurityId = nucleusSecurityId;
            this.Open = open;
            this.PrevClose = prevClose;
            this.Ticker = ticker;
            this.Volume = volume;
            this.YearRange = yearRange;
        }
        
        /// <summary>
        /// Gets or Sets Ask
        /// </summary>
        [DataMember(Name="ask", EmitDefaultValue=false)]
        public double? Ask { get; set; }

        /// <summary>
        /// Gets or Sets AskSize
        /// </summary>
        [DataMember(Name="ask_size", EmitDefaultValue=false)]
        public int? AskSize { get; set; }

        /// <summary>
        /// Gets or Sets Bid
        /// </summary>
        [DataMember(Name="bid", EmitDefaultValue=false)]
        public double? Bid { get; set; }

        /// <summary>
        /// Gets or Sets BidSize
        /// </summary>
        [DataMember(Name="bid_size", EmitDefaultValue=false)]
        public int? BidSize { get; set; }

        /// <summary>
        /// Gets or Sets Change
        /// </summary>
        [DataMember(Name="change", EmitDefaultValue=false)]
        public double? Change { get; set; }

        /// <summary>
        /// Gets or Sets Close
        /// </summary>
        [DataMember(Name="close", EmitDefaultValue=false)]
        public double? Close { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets DayRange
        /// </summary>
        [DataMember(Name="day_range", EmitDefaultValue=false)]
        public string DayRange { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets High
        /// </summary>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public double? High { get; set; }

        /// <summary>
        /// Gets or Sets LastTrade
        /// </summary>
        [DataMember(Name="last_trade", EmitDefaultValue=false)]
        public double? LastTrade { get; set; }

        /// <summary>
        /// Gets or Sets LastTradeTimeStamp
        /// </summary>
        [DataMember(Name="last_trade_time_stamp", EmitDefaultValue=false)]
        public DateTime? LastTradeTimeStamp { get; set; }

        /// <summary>
        /// Gets or Sets Low
        /// </summary>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public double? Low { get; set; }

        /// <summary>
        /// Gets or Sets MarketCap
        /// </summary>
        [DataMember(Name="market_cap", EmitDefaultValue=false)]
        public string MarketCap { get; set; }

        /// <summary>
        /// Gets or Sets NucleusSecurityId
        /// </summary>
        [DataMember(Name="nucleus_security_id", EmitDefaultValue=false)]
        public Guid? NucleusSecurityId { get; set; }

        /// <summary>
        /// Gets or Sets Open
        /// </summary>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public double? Open { get; set; }

        /// <summary>
        /// Gets or Sets PrevClose
        /// </summary>
        [DataMember(Name="prev_close", EmitDefaultValue=false)]
        public double? PrevClose { get; set; }

        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public long? Volume { get; set; }

        /// <summary>
        /// Gets or Sets YearRange
        /// </summary>
        [DataMember(Name="year_range", EmitDefaultValue=false)]
        public string YearRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MdQuoteItemVO {\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  AskSize: ").Append(AskSize).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  BidSize: ").Append(BidSize).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DayRange: ").Append(DayRange).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  LastTrade: ").Append(LastTrade).Append("\n");
            sb.Append("  LastTradeTimeStamp: ").Append(LastTradeTimeStamp).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  MarketCap: ").Append(MarketCap).Append("\n");
            sb.Append("  NucleusSecurityId: ").Append(NucleusSecurityId).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  PrevClose: ").Append(PrevClose).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  YearRange: ").Append(YearRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MdQuoteItemVO);
        }

        /// <summary>
        /// Returns true if MdQuoteItemVO instances are equal
        /// </summary>
        /// <param name="input">Instance of MdQuoteItemVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MdQuoteItemVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ask == input.Ask ||
                    (this.Ask != null &&
                    this.Ask.Equals(input.Ask))
                ) && 
                (
                    this.AskSize == input.AskSize ||
                    (this.AskSize != null &&
                    this.AskSize.Equals(input.AskSize))
                ) && 
                (
                    this.Bid == input.Bid ||
                    (this.Bid != null &&
                    this.Bid.Equals(input.Bid))
                ) && 
                (
                    this.BidSize == input.BidSize ||
                    (this.BidSize != null &&
                    this.BidSize.Equals(input.BidSize))
                ) && 
                (
                    this.Change == input.Change ||
                    (this.Change != null &&
                    this.Change.Equals(input.Change))
                ) && 
                (
                    this.Close == input.Close ||
                    (this.Close != null &&
                    this.Close.Equals(input.Close))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.DayRange == input.DayRange ||
                    (this.DayRange != null &&
                    this.DayRange.Equals(input.DayRange))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.LastTrade == input.LastTrade ||
                    (this.LastTrade != null &&
                    this.LastTrade.Equals(input.LastTrade))
                ) && 
                (
                    this.LastTradeTimeStamp == input.LastTradeTimeStamp ||
                    (this.LastTradeTimeStamp != null &&
                    this.LastTradeTimeStamp.Equals(input.LastTradeTimeStamp))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.MarketCap == input.MarketCap ||
                    (this.MarketCap != null &&
                    this.MarketCap.Equals(input.MarketCap))
                ) && 
                (
                    this.NucleusSecurityId == input.NucleusSecurityId ||
                    (this.NucleusSecurityId != null &&
                    this.NucleusSecurityId.Equals(input.NucleusSecurityId))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.PrevClose == input.PrevClose ||
                    (this.PrevClose != null &&
                    this.PrevClose.Equals(input.PrevClose))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.YearRange == input.YearRange ||
                    (this.YearRange != null &&
                    this.YearRange.Equals(input.YearRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ask != null)
                    hashCode = hashCode * 59 + this.Ask.GetHashCode();
                if (this.AskSize != null)
                    hashCode = hashCode * 59 + this.AskSize.GetHashCode();
                if (this.Bid != null)
                    hashCode = hashCode * 59 + this.Bid.GetHashCode();
                if (this.BidSize != null)
                    hashCode = hashCode * 59 + this.BidSize.GetHashCode();
                if (this.Change != null)
                    hashCode = hashCode * 59 + this.Change.GetHashCode();
                if (this.Close != null)
                    hashCode = hashCode * 59 + this.Close.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.DayRange != null)
                    hashCode = hashCode * 59 + this.DayRange.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.LastTrade != null)
                    hashCode = hashCode * 59 + this.LastTrade.GetHashCode();
                if (this.LastTradeTimeStamp != null)
                    hashCode = hashCode * 59 + this.LastTradeTimeStamp.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.MarketCap != null)
                    hashCode = hashCode * 59 + this.MarketCap.GetHashCode();
                if (this.NucleusSecurityId != null)
                    hashCode = hashCode * 59 + this.NucleusSecurityId.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.PrevClose != null)
                    hashCode = hashCode * 59 + this.PrevClose.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.YearRange != null)
                    hashCode = hashCode * 59 + this.YearRange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
