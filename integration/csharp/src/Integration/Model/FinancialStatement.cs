/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// FinancialStatement Object
    /// </summary>
    [DataContract]
    public partial class FinancialStatement :  IEquatable<FinancialStatement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialStatement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FinancialStatement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialStatement" /> class.
        /// </summary>
        /// <param name="accountingMethod">accounting_method (required).</param>
        /// <param name="businessId">businessId.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="currencyCode">currencyCode (required).</param>
        /// <param name="id">id.</param>
        /// <param name="periodLength">periodLength.</param>
        /// <param name="periodMonth">periodMonth.</param>
        /// <param name="periodQuarter">periodQuarter.</param>
        /// <param name="periodType">periodType.</param>
        /// <param name="periodYear">periodYear.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="statementDate">statementDate (required).</param>
        /// <param name="statementType">statement_type (required).</param>
        /// <param name="stats">stats.</param>
        /// <param name="updateDate">updateDate.</param>
        public FinancialStatement(string accountingMethod = default(string), Guid? businessId = default(Guid?), Guid? clientId = default(Guid?), DateTime? createDate = default(DateTime?), string currencyCode = default(string), Guid? id = default(Guid?), string periodLength = default(string), int? periodMonth = default(int?), int? periodQuarter = default(int?), string periodType = default(string), int? periodYear = default(int?), string secondaryId = default(string), DateTime? statementDate = default(DateTime?), string statementType = default(string), List<Stat> stats = default(List<Stat>), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "accountingMethod" is required (not null)
            if (accountingMethod == null)
            {
                throw new InvalidDataException("accountingMethod is a required property for FinancialStatement and cannot be null");
            }
            else
            {
                this.AccountingMethod = accountingMethod;
            }
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for FinancialStatement and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            // to ensure "statementDate" is required (not null)
            if (statementDate == null)
            {
                throw new InvalidDataException("statementDate is a required property for FinancialStatement and cannot be null");
            }
            else
            {
                this.StatementDate = statementDate;
            }
            // to ensure "statementType" is required (not null)
            if (statementType == null)
            {
                throw new InvalidDataException("statementType is a required property for FinancialStatement and cannot be null");
            }
            else
            {
                this.StatementType = statementType;
            }
            this.BusinessId = businessId;
            this.ClientId = clientId;
            this.CreateDate = createDate;
            this.Id = id;
            this.PeriodLength = periodLength;
            this.PeriodMonth = periodMonth;
            this.PeriodQuarter = periodQuarter;
            this.PeriodType = periodType;
            this.PeriodYear = periodYear;
            this.SecondaryId = secondaryId;
            this.Stats = stats;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// accounting_method
        /// </summary>
        /// <value>accounting_method</value>
        [DataMember(Name="accounting_method", EmitDefaultValue=false)]
        public string AccountingMethod { get; set; }

        /// <summary>
        /// businessId
        /// </summary>
        /// <value>businessId</value>
        [DataMember(Name="business_id", EmitDefaultValue=false)]
        public Guid? BusinessId { get; set; }

        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// currencyCode
        /// </summary>
        /// <value>currencyCode</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; private set; }

        /// <summary>
        /// periodLength
        /// </summary>
        /// <value>periodLength</value>
        [DataMember(Name="period_length", EmitDefaultValue=false)]
        public string PeriodLength { get; set; }

        /// <summary>
        /// periodMonth
        /// </summary>
        /// <value>periodMonth</value>
        [DataMember(Name="period_month", EmitDefaultValue=false)]
        public int? PeriodMonth { get; set; }

        /// <summary>
        /// periodQuarter
        /// </summary>
        /// <value>periodQuarter</value>
        [DataMember(Name="period_quarter", EmitDefaultValue=false)]
        public int? PeriodQuarter { get; set; }

        /// <summary>
        /// periodType
        /// </summary>
        /// <value>periodType</value>
        [DataMember(Name="period_type", EmitDefaultValue=false)]
        public string PeriodType { get; set; }

        /// <summary>
        /// periodYear
        /// </summary>
        /// <value>periodYear</value>
        [DataMember(Name="period_year", EmitDefaultValue=false)]
        public int? PeriodYear { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// statementDate
        /// </summary>
        /// <value>statementDate</value>
        [DataMember(Name="statement_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StatementDate { get; set; }

        /// <summary>
        /// statement_type
        /// </summary>
        /// <value>statement_type</value>
        [DataMember(Name="statement_type", EmitDefaultValue=false)]
        public string StatementType { get; set; }

        /// <summary>
        /// stats
        /// </summary>
        /// <value>stats</value>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public List<Stat> Stats { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialStatement {\n");
            sb.Append("  AccountingMethod: ").Append(AccountingMethod).Append("\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PeriodLength: ").Append(PeriodLength).Append("\n");
            sb.Append("  PeriodMonth: ").Append(PeriodMonth).Append("\n");
            sb.Append("  PeriodQuarter: ").Append(PeriodQuarter).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  PeriodYear: ").Append(PeriodYear).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  StatementDate: ").Append(StatementDate).Append("\n");
            sb.Append("  StatementType: ").Append(StatementType).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialStatement);
        }

        /// <summary>
        /// Returns true if FinancialStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialStatement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountingMethod == input.AccountingMethod ||
                    (this.AccountingMethod != null &&
                    this.AccountingMethod.Equals(input.AccountingMethod))
                ) && 
                (
                    this.BusinessId == input.BusinessId ||
                    (this.BusinessId != null &&
                    this.BusinessId.Equals(input.BusinessId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.PeriodLength == input.PeriodLength ||
                    (this.PeriodLength != null &&
                    this.PeriodLength.Equals(input.PeriodLength))
                ) && 
                (
                    this.PeriodMonth == input.PeriodMonth ||
                    (this.PeriodMonth != null &&
                    this.PeriodMonth.Equals(input.PeriodMonth))
                ) && 
                (
                    this.PeriodQuarter == input.PeriodQuarter ||
                    (this.PeriodQuarter != null &&
                    this.PeriodQuarter.Equals(input.PeriodQuarter))
                ) && 
                (
                    this.PeriodType == input.PeriodType ||
                    (this.PeriodType != null &&
                    this.PeriodType.Equals(input.PeriodType))
                ) && 
                (
                    this.PeriodYear == input.PeriodYear ||
                    (this.PeriodYear != null &&
                    this.PeriodYear.Equals(input.PeriodYear))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.StatementDate == input.StatementDate ||
                    (this.StatementDate != null &&
                    this.StatementDate.Equals(input.StatementDate))
                ) && 
                (
                    this.StatementType == input.StatementType ||
                    (this.StatementType != null &&
                    this.StatementType.Equals(input.StatementType))
                ) && 
                (
                    this.Stats == input.Stats ||
                    this.Stats != null &&
                    this.Stats.SequenceEqual(input.Stats)
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingMethod != null)
                    hashCode = hashCode * 59 + this.AccountingMethod.GetHashCode();
                if (this.BusinessId != null)
                    hashCode = hashCode * 59 + this.BusinessId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.PeriodLength != null)
                    hashCode = hashCode * 59 + this.PeriodLength.GetHashCode();
                if (this.PeriodMonth != null)
                    hashCode = hashCode * 59 + this.PeriodMonth.GetHashCode();
                if (this.PeriodQuarter != null)
                    hashCode = hashCode * 59 + this.PeriodQuarter.GetHashCode();
                if (this.PeriodType != null)
                    hashCode = hashCode * 59 + this.PeriodType.GetHashCode();
                if (this.PeriodYear != null)
                    hashCode = hashCode * 59 + this.PeriodYear.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.StatementDate != null)
                    hashCode = hashCode * 59 + this.StatementDate.GetHashCode();
                if (this.StatementType != null)
                    hashCode = hashCode * 59 + this.StatementType.GetHashCode();
                if (this.Stats != null)
                    hashCode = hashCode * 59 + this.Stats.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
