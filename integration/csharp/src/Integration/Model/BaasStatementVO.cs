/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// BaasStatementVO
    /// </summary>
    [DataContract]
    public partial class BaasStatementVO :  IEquatable<BaasStatementVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaasStatementVO" /> class.
        /// </summary>
        /// <param name="statementContent">statementContent.</param>
        /// <param name="statementContentType">statementContentType.</param>
        /// <param name="statementDate">statementDate.</param>
        /// <param name="statementLink">statementLink.</param>
        /// <param name="statementLinkExpiry">statementLinkExpiry.</param>
        /// <param name="statementName">statementName.</param>
        public BaasStatementVO(Object statementContent = default(Object), string statementContentType = default(string), string statementDate = default(string), string statementLink = default(string), string statementLinkExpiry = default(string), string statementName = default(string))
        {
            this.StatementContent = statementContent;
            this.StatementContentType = statementContentType;
            this.StatementDate = statementDate;
            this.StatementLink = statementLink;
            this.StatementLinkExpiry = statementLinkExpiry;
            this.StatementName = statementName;
        }
        
        /// <summary>
        /// Gets or Sets StatementContent
        /// </summary>
        [DataMember(Name="statement_content", EmitDefaultValue=false)]
        public Object StatementContent { get; set; }

        /// <summary>
        /// Gets or Sets StatementContentType
        /// </summary>
        [DataMember(Name="statement_content_type", EmitDefaultValue=false)]
        public string StatementContentType { get; set; }

        /// <summary>
        /// Gets or Sets StatementDate
        /// </summary>
        [DataMember(Name="statement_date", EmitDefaultValue=false)]
        public string StatementDate { get; set; }

        /// <summary>
        /// Gets or Sets StatementLink
        /// </summary>
        [DataMember(Name="statement_link", EmitDefaultValue=false)]
        public string StatementLink { get; set; }

        /// <summary>
        /// Gets or Sets StatementLinkExpiry
        /// </summary>
        [DataMember(Name="statement_link_expiry", EmitDefaultValue=false)]
        public string StatementLinkExpiry { get; set; }

        /// <summary>
        /// Gets or Sets StatementName
        /// </summary>
        [DataMember(Name="statement_name", EmitDefaultValue=false)]
        public string StatementName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaasStatementVO {\n");
            sb.Append("  StatementContent: ").Append(StatementContent).Append("\n");
            sb.Append("  StatementContentType: ").Append(StatementContentType).Append("\n");
            sb.Append("  StatementDate: ").Append(StatementDate).Append("\n");
            sb.Append("  StatementLink: ").Append(StatementLink).Append("\n");
            sb.Append("  StatementLinkExpiry: ").Append(StatementLinkExpiry).Append("\n");
            sb.Append("  StatementName: ").Append(StatementName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaasStatementVO);
        }

        /// <summary>
        /// Returns true if BaasStatementVO instances are equal
        /// </summary>
        /// <param name="input">Instance of BaasStatementVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaasStatementVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatementContent == input.StatementContent ||
                    (this.StatementContent != null &&
                    this.StatementContent.Equals(input.StatementContent))
                ) && 
                (
                    this.StatementContentType == input.StatementContentType ||
                    (this.StatementContentType != null &&
                    this.StatementContentType.Equals(input.StatementContentType))
                ) && 
                (
                    this.StatementDate == input.StatementDate ||
                    (this.StatementDate != null &&
                    this.StatementDate.Equals(input.StatementDate))
                ) && 
                (
                    this.StatementLink == input.StatementLink ||
                    (this.StatementLink != null &&
                    this.StatementLink.Equals(input.StatementLink))
                ) && 
                (
                    this.StatementLinkExpiry == input.StatementLinkExpiry ||
                    (this.StatementLinkExpiry != null &&
                    this.StatementLinkExpiry.Equals(input.StatementLinkExpiry))
                ) && 
                (
                    this.StatementName == input.StatementName ||
                    (this.StatementName != null &&
                    this.StatementName.Equals(input.StatementName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatementContent != null)
                    hashCode = hashCode * 59 + this.StatementContent.GetHashCode();
                if (this.StatementContentType != null)
                    hashCode = hashCode * 59 + this.StatementContentType.GetHashCode();
                if (this.StatementDate != null)
                    hashCode = hashCode * 59 + this.StatementDate.GetHashCode();
                if (this.StatementLink != null)
                    hashCode = hashCode * 59 + this.StatementLink.GetHashCode();
                if (this.StatementLinkExpiry != null)
                    hashCode = hashCode * 59 + this.StatementLinkExpiry.GetHashCode();
                if (this.StatementName != null)
                    hashCode = hashCode * 59 + this.StatementName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
