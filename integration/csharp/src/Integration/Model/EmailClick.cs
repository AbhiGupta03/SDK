/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// EmailClick
    /// </summary>
    [DataContract]
    public partial class EmailClick :  IEquatable<EmailClick>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailClick" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailClick() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailClick" /> class.
        /// </summary>
        /// <param name="clickTimestamp">click_timestamp (required).</param>
        /// <param name="email">email.</param>
        /// <param name="id">id.</param>
        /// <param name="url">url (required).</param>
        public EmailClick(DateTime? clickTimestamp = default(DateTime?), Email email = default(Email), Guid? id = default(Guid?), string url = default(string))
        {
            // to ensure "clickTimestamp" is required (not null)
            if (clickTimestamp == null)
            {
                throw new InvalidDataException("clickTimestamp is a required property for EmailClick and cannot be null");
            }
            else
            {
                this.ClickTimestamp = clickTimestamp;
            }
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for EmailClick and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            this.Email = email;
            this.Id = id;
        }
        
        /// <summary>
        /// click_timestamp
        /// </summary>
        /// <value>click_timestamp</value>
        [DataMember(Name="click_timestamp", EmitDefaultValue=false)]
        public DateTime? ClickTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public Email Email { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailClick {\n");
            sb.Append("  ClickTimestamp: ").Append(ClickTimestamp).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailClick);
        }

        /// <summary>
        /// Returns true if EmailClick instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailClick to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailClick input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClickTimestamp == input.ClickTimestamp ||
                    (this.ClickTimestamp != null &&
                    this.ClickTimestamp.Equals(input.ClickTimestamp))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClickTimestamp != null)
                    hashCode = hashCode * 59 + this.ClickTimestamp.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
