/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// SpendingControlVendorRequestDataVO
    /// </summary>
    [DataContract]
    public partial class SpendingControlVendorRequestDataVO :  IEquatable<SpendingControlVendorRequestDataVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingControlVendorRequestDataVO" /> class.
        /// </summary>
        /// <param name="clientId">clientId.</param>
        /// <param name="controlScope">controlScope.</param>
        /// <param name="controlType">controlType.</param>
        /// <param name="controlValues">controlValues.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="description">description.</param>
        /// <param name="frequencyUnit">frequencyUnit.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="limitValue">limitValue.</param>
        public SpendingControlVendorRequestDataVO(Guid? clientId = default(Guid?), string controlScope = default(string), string controlType = default(string), List<string> controlValues = default(List<string>), string currencyCode = default(string), string description = default(string), string frequencyUnit = default(string), bool? isActive = default(bool?), double? limitValue = default(double?))
        {
            this.ClientId = clientId;
            this.ControlScope = controlScope;
            this.ControlType = controlType;
            this.ControlValues = controlValues;
            this.CurrencyCode = currencyCode;
            this.Description = description;
            this.FrequencyUnit = frequencyUnit;
            this.IsActive = isActive;
            this.LimitValue = limitValue;
        }
        
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ControlScope
        /// </summary>
        [DataMember(Name="control_scope", EmitDefaultValue=false)]
        public string ControlScope { get; set; }

        /// <summary>
        /// Gets or Sets ControlType
        /// </summary>
        [DataMember(Name="control_type", EmitDefaultValue=false)]
        public string ControlType { get; set; }

        /// <summary>
        /// Gets or Sets ControlValues
        /// </summary>
        [DataMember(Name="control_values", EmitDefaultValue=false)]
        public List<string> ControlValues { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FrequencyUnit
        /// </summary>
        [DataMember(Name="frequency_unit", EmitDefaultValue=false)]
        public string FrequencyUnit { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LimitValue
        /// </summary>
        [DataMember(Name="limit_value", EmitDefaultValue=false)]
        public double? LimitValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpendingControlVendorRequestDataVO {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ControlScope: ").Append(ControlScope).Append("\n");
            sb.Append("  ControlType: ").Append(ControlType).Append("\n");
            sb.Append("  ControlValues: ").Append(ControlValues).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FrequencyUnit: ").Append(FrequencyUnit).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LimitValue: ").Append(LimitValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpendingControlVendorRequestDataVO);
        }

        /// <summary>
        /// Returns true if SpendingControlVendorRequestDataVO instances are equal
        /// </summary>
        /// <param name="input">Instance of SpendingControlVendorRequestDataVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpendingControlVendorRequestDataVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ControlScope == input.ControlScope ||
                    (this.ControlScope != null &&
                    this.ControlScope.Equals(input.ControlScope))
                ) && 
                (
                    this.ControlType == input.ControlType ||
                    (this.ControlType != null &&
                    this.ControlType.Equals(input.ControlType))
                ) && 
                (
                    this.ControlValues == input.ControlValues ||
                    this.ControlValues != null &&
                    this.ControlValues.SequenceEqual(input.ControlValues)
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FrequencyUnit == input.FrequencyUnit ||
                    (this.FrequencyUnit != null &&
                    this.FrequencyUnit.Equals(input.FrequencyUnit))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.LimitValue == input.LimitValue ||
                    (this.LimitValue != null &&
                    this.LimitValue.Equals(input.LimitValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ControlScope != null)
                    hashCode = hashCode * 59 + this.ControlScope.GetHashCode();
                if (this.ControlType != null)
                    hashCode = hashCode * 59 + this.ControlType.GetHashCode();
                if (this.ControlValues != null)
                    hashCode = hashCode * 59 + this.ControlValues.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FrequencyUnit != null)
                    hashCode = hashCode * 59 + this.FrequencyUnit.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LimitValue != null)
                    hashCode = hashCode * 59 + this.LimitValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
