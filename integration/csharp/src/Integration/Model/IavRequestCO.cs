/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// IavRequestCO
    /// </summary>
    [DataContract]
    public partial class IavRequestCO :  IEquatable<IavRequestCO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IavRequestCO" /> class.
        /// </summary>
        /// <param name="authToken">authToken.</param>
        /// <param name="isCash">isCash.</param>
        /// <param name="nucleusAccountId">nucleusAccountId.</param>
        /// <param name="nucleusBusinessId">nucleusBusinessId.</param>
        /// <param name="nucleusClientId">nucleusClientId.</param>
        /// <param name="nucleusTransferFields">nucleusTransferFields.</param>
        /// <param name="product">product.</param>
        /// <param name="vendorRequest">vendorRequest.</param>
        public IavRequestCO(string authToken = default(string), bool? isCash = default(bool?), Guid? nucleusAccountId = default(Guid?), Guid? nucleusBusinessId = default(Guid?), Guid? nucleusClientId = default(Guid?), NucleusTransferFieldsCO nucleusTransferFields = default(NucleusTransferFieldsCO), string product = default(string), IavVendorRequestCO vendorRequest = default(IavVendorRequestCO))
        {
            this.AuthToken = authToken;
            this.IsCash = isCash;
            this.NucleusAccountId = nucleusAccountId;
            this.NucleusBusinessId = nucleusBusinessId;
            this.NucleusClientId = nucleusClientId;
            this.NucleusTransferFields = nucleusTransferFields;
            this.Product = product;
            this.VendorRequest = vendorRequest;
        }
        
        /// <summary>
        /// Gets or Sets AuthToken
        /// </summary>
        [DataMember(Name="auth_token", EmitDefaultValue=false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Gets or Sets IsCash
        /// </summary>
        [DataMember(Name="is_cash", EmitDefaultValue=false)]
        public bool? IsCash { get; set; }

        /// <summary>
        /// Gets or Sets NucleusAccountId
        /// </summary>
        [DataMember(Name="nucleus_account_id", EmitDefaultValue=false)]
        public Guid? NucleusAccountId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusBusinessId
        /// </summary>
        [DataMember(Name="nucleus_business_id", EmitDefaultValue=false)]
        public Guid? NucleusBusinessId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusClientId
        /// </summary>
        [DataMember(Name="nucleus_client_id", EmitDefaultValue=false)]
        public Guid? NucleusClientId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusTransferFields
        /// </summary>
        [DataMember(Name="nucleus_transfer_fields", EmitDefaultValue=false)]
        public NucleusTransferFieldsCO NucleusTransferFields { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// Gets or Sets VendorRequest
        /// </summary>
        [DataMember(Name="vendor_request", EmitDefaultValue=false)]
        public IavVendorRequestCO VendorRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IavRequestCO {\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  IsCash: ").Append(IsCash).Append("\n");
            sb.Append("  NucleusAccountId: ").Append(NucleusAccountId).Append("\n");
            sb.Append("  NucleusBusinessId: ").Append(NucleusBusinessId).Append("\n");
            sb.Append("  NucleusClientId: ").Append(NucleusClientId).Append("\n");
            sb.Append("  NucleusTransferFields: ").Append(NucleusTransferFields).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  VendorRequest: ").Append(VendorRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IavRequestCO);
        }

        /// <summary>
        /// Returns true if IavRequestCO instances are equal
        /// </summary>
        /// <param name="input">Instance of IavRequestCO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IavRequestCO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                ) && 
                (
                    this.IsCash == input.IsCash ||
                    (this.IsCash != null &&
                    this.IsCash.Equals(input.IsCash))
                ) && 
                (
                    this.NucleusAccountId == input.NucleusAccountId ||
                    (this.NucleusAccountId != null &&
                    this.NucleusAccountId.Equals(input.NucleusAccountId))
                ) && 
                (
                    this.NucleusBusinessId == input.NucleusBusinessId ||
                    (this.NucleusBusinessId != null &&
                    this.NucleusBusinessId.Equals(input.NucleusBusinessId))
                ) && 
                (
                    this.NucleusClientId == input.NucleusClientId ||
                    (this.NucleusClientId != null &&
                    this.NucleusClientId.Equals(input.NucleusClientId))
                ) && 
                (
                    this.NucleusTransferFields == input.NucleusTransferFields ||
                    (this.NucleusTransferFields != null &&
                    this.NucleusTransferFields.Equals(input.NucleusTransferFields))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.VendorRequest == input.VendorRequest ||
                    (this.VendorRequest != null &&
                    this.VendorRequest.Equals(input.VendorRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthToken != null)
                    hashCode = hashCode * 59 + this.AuthToken.GetHashCode();
                if (this.IsCash != null)
                    hashCode = hashCode * 59 + this.IsCash.GetHashCode();
                if (this.NucleusAccountId != null)
                    hashCode = hashCode * 59 + this.NucleusAccountId.GetHashCode();
                if (this.NucleusBusinessId != null)
                    hashCode = hashCode * 59 + this.NucleusBusinessId.GetHashCode();
                if (this.NucleusClientId != null)
                    hashCode = hashCode * 59 + this.NucleusClientId.GetHashCode();
                if (this.NucleusTransferFields != null)
                    hashCode = hashCode * 59 + this.NucleusTransferFields.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.VendorRequest != null)
                    hashCode = hashCode * 59 + this.VendorRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
