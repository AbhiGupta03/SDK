/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// KycResponseVo
    /// </summary>
    [DataContract]
    public partial class KycResponseVo :  IEquatable<KycResponseVo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KycResponseVo" /> class.
        /// </summary>
        /// <param name="createDate">createDate.</param>
        /// <param name="kycStatus">kycStatus.</param>
        /// <param name="kycType">kycType.</param>
        /// <param name="nucleusBusinessId">nucleusBusinessId.</param>
        /// <param name="nucleusClientId">nucleusClientId.</param>
        /// <param name="nucleusDocumentId">nucleusDocumentId.</param>
        /// <param name="product">product.</param>
        /// <param name="updateDate">updateDate.</param>
        /// <param name="vendorName">vendorName.</param>
        /// <param name="vendorRequestData">vendorRequestData.</param>
        /// <param name="vendorResponse">vendorResponse.</param>
        public KycResponseVo(DateTime? createDate = default(DateTime?), string kycStatus = default(string), string kycType = default(string), Guid? nucleusBusinessId = default(Guid?), Guid? nucleusClientId = default(Guid?), Guid? nucleusDocumentId = default(Guid?), string product = default(string), DateTime? updateDate = default(DateTime?), string vendorName = default(string), KycVendorRequestDataVO vendorRequestData = default(KycVendorRequestDataVO), Object vendorResponse = default(Object))
        {
            this.CreateDate = createDate;
            this.KycStatus = kycStatus;
            this.KycType = kycType;
            this.NucleusBusinessId = nucleusBusinessId;
            this.NucleusClientId = nucleusClientId;
            this.NucleusDocumentId = nucleusDocumentId;
            this.Product = product;
            this.UpdateDate = updateDate;
            this.VendorName = vendorName;
            this.VendorRequestData = vendorRequestData;
            this.VendorResponse = vendorResponse;
        }
        
        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets KycStatus
        /// </summary>
        [DataMember(Name="kyc_status", EmitDefaultValue=false)]
        public string KycStatus { get; set; }

        /// <summary>
        /// Gets or Sets KycType
        /// </summary>
        [DataMember(Name="kyc_type", EmitDefaultValue=false)]
        public string KycType { get; set; }

        /// <summary>
        /// Gets or Sets NucleusBusinessId
        /// </summary>
        [DataMember(Name="nucleus_business_id", EmitDefaultValue=false)]
        public Guid? NucleusBusinessId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusClientId
        /// </summary>
        [DataMember(Name="nucleus_client_id", EmitDefaultValue=false)]
        public Guid? NucleusClientId { get; set; }

        /// <summary>
        /// Gets or Sets NucleusDocumentId
        /// </summary>
        [DataMember(Name="nucleus_document_id", EmitDefaultValue=false)]
        public Guid? NucleusDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets VendorName
        /// </summary>
        [DataMember(Name="vendor_name", EmitDefaultValue=false)]
        public string VendorName { get; set; }

        /// <summary>
        /// Gets or Sets VendorRequestData
        /// </summary>
        [DataMember(Name="vendor_request_data", EmitDefaultValue=false)]
        public KycVendorRequestDataVO VendorRequestData { get; set; }

        /// <summary>
        /// Gets or Sets VendorResponse
        /// </summary>
        [DataMember(Name="vendor_response", EmitDefaultValue=false)]
        public Object VendorResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KycResponseVo {\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  KycStatus: ").Append(KycStatus).Append("\n");
            sb.Append("  KycType: ").Append(KycType).Append("\n");
            sb.Append("  NucleusBusinessId: ").Append(NucleusBusinessId).Append("\n");
            sb.Append("  NucleusClientId: ").Append(NucleusClientId).Append("\n");
            sb.Append("  NucleusDocumentId: ").Append(NucleusDocumentId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  VendorRequestData: ").Append(VendorRequestData).Append("\n");
            sb.Append("  VendorResponse: ").Append(VendorResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KycResponseVo);
        }

        /// <summary>
        /// Returns true if KycResponseVo instances are equal
        /// </summary>
        /// <param name="input">Instance of KycResponseVo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KycResponseVo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.KycStatus == input.KycStatus ||
                    (this.KycStatus != null &&
                    this.KycStatus.Equals(input.KycStatus))
                ) && 
                (
                    this.KycType == input.KycType ||
                    (this.KycType != null &&
                    this.KycType.Equals(input.KycType))
                ) && 
                (
                    this.NucleusBusinessId == input.NucleusBusinessId ||
                    (this.NucleusBusinessId != null &&
                    this.NucleusBusinessId.Equals(input.NucleusBusinessId))
                ) && 
                (
                    this.NucleusClientId == input.NucleusClientId ||
                    (this.NucleusClientId != null &&
                    this.NucleusClientId.Equals(input.NucleusClientId))
                ) && 
                (
                    this.NucleusDocumentId == input.NucleusDocumentId ||
                    (this.NucleusDocumentId != null &&
                    this.NucleusDocumentId.Equals(input.NucleusDocumentId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.VendorName == input.VendorName ||
                    (this.VendorName != null &&
                    this.VendorName.Equals(input.VendorName))
                ) && 
                (
                    this.VendorRequestData == input.VendorRequestData ||
                    (this.VendorRequestData != null &&
                    this.VendorRequestData.Equals(input.VendorRequestData))
                ) && 
                (
                    this.VendorResponse == input.VendorResponse ||
                    (this.VendorResponse != null &&
                    this.VendorResponse.Equals(input.VendorResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.KycStatus != null)
                    hashCode = hashCode * 59 + this.KycStatus.GetHashCode();
                if (this.KycType != null)
                    hashCode = hashCode * 59 + this.KycType.GetHashCode();
                if (this.NucleusBusinessId != null)
                    hashCode = hashCode * 59 + this.NucleusBusinessId.GetHashCode();
                if (this.NucleusClientId != null)
                    hashCode = hashCode * 59 + this.NucleusClientId.GetHashCode();
                if (this.NucleusDocumentId != null)
                    hashCode = hashCode * 59 + this.NucleusDocumentId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.VendorName != null)
                    hashCode = hashCode * 59 + this.VendorName.GetHashCode();
                if (this.VendorRequestData != null)
                    hashCode = hashCode * 59 + this.VendorRequestData.GetHashCode();
                if (this.VendorResponse != null)
                    hashCode = hashCode * 59 + this.VendorResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
