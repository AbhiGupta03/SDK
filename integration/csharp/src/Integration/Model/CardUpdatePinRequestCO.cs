/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// CardUpdatePinRequestCO
    /// </summary>
    [DataContract]
    public partial class CardUpdatePinRequestCO :  IEquatable<CardUpdatePinRequestCO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardUpdatePinRequestCO" /> class.
        /// </summary>
        /// <param name="currentPin">currentPin.</param>
        /// <param name="newPin">newPin.</param>
        /// <param name="reason">reason.</param>
        /// <param name="vendorRequest">vendorRequest.</param>
        public CardUpdatePinRequestCO(string currentPin = default(string), string newPin = default(string), string reason = default(string), Object vendorRequest = default(Object))
        {
            this.CurrentPin = currentPin;
            this.NewPin = newPin;
            this.Reason = reason;
            this.VendorRequest = vendorRequest;
        }
        
        /// <summary>
        /// Gets or Sets CurrentPin
        /// </summary>
        [DataMember(Name="current_pin", EmitDefaultValue=false)]
        public string CurrentPin { get; set; }

        /// <summary>
        /// Gets or Sets NewPin
        /// </summary>
        [DataMember(Name="new_pin", EmitDefaultValue=false)]
        public string NewPin { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets VendorRequest
        /// </summary>
        [DataMember(Name="vendor_request", EmitDefaultValue=false)]
        public Object VendorRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardUpdatePinRequestCO {\n");
            sb.Append("  CurrentPin: ").Append(CurrentPin).Append("\n");
            sb.Append("  NewPin: ").Append(NewPin).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  VendorRequest: ").Append(VendorRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardUpdatePinRequestCO);
        }

        /// <summary>
        /// Returns true if CardUpdatePinRequestCO instances are equal
        /// </summary>
        /// <param name="input">Instance of CardUpdatePinRequestCO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardUpdatePinRequestCO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentPin == input.CurrentPin ||
                    (this.CurrentPin != null &&
                    this.CurrentPin.Equals(input.CurrentPin))
                ) && 
                (
                    this.NewPin == input.NewPin ||
                    (this.NewPin != null &&
                    this.NewPin.Equals(input.NewPin))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.VendorRequest == input.VendorRequest ||
                    (this.VendorRequest != null &&
                    this.VendorRequest.Equals(input.VendorRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentPin != null)
                    hashCode = hashCode * 59 + this.CurrentPin.GetHashCode();
                if (this.NewPin != null)
                    hashCode = hashCode * 59 + this.NewPin.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.VendorRequest != null)
                    hashCode = hashCode * 59 + this.VendorRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
