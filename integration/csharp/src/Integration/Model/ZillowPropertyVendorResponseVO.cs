/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// ZillowPropertyVendorResponseVO
    /// </summary>
    [DataContract]
    public partial class ZillowPropertyVendorResponseVO :  IEquatable<ZillowPropertyVendorResponseVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZillowPropertyVendorResponseVO" /> class.
        /// </summary>
        /// <param name="currency">currency.</param>
        /// <param name="link">link.</param>
        /// <param name="text">text.</param>
        /// <param name="zestimate">zestimate.</param>
        /// <param name="zpid">zpid.</param>
        public ZillowPropertyVendorResponseVO(string currency = default(string), string link = default(string), string text = default(string), string zestimate = default(string), string zpid = default(string))
        {
            this.Currency = currency;
            this.Link = link;
            this.Text = text;
            this.Zestimate = zestimate;
            this.Zpid = zpid;
        }
        
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Zestimate
        /// </summary>
        [DataMember(Name="zestimate", EmitDefaultValue=false)]
        public string Zestimate { get; set; }

        /// <summary>
        /// Gets or Sets Zpid
        /// </summary>
        [DataMember(Name="zpid", EmitDefaultValue=false)]
        public string Zpid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZillowPropertyVendorResponseVO {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Zestimate: ").Append(Zestimate).Append("\n");
            sb.Append("  Zpid: ").Append(Zpid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZillowPropertyVendorResponseVO);
        }

        /// <summary>
        /// Returns true if ZillowPropertyVendorResponseVO instances are equal
        /// </summary>
        /// <param name="input">Instance of ZillowPropertyVendorResponseVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZillowPropertyVendorResponseVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Zestimate == input.Zestimate ||
                    (this.Zestimate != null &&
                    this.Zestimate.Equals(input.Zestimate))
                ) && 
                (
                    this.Zpid == input.Zpid ||
                    (this.Zpid != null &&
                    this.Zpid.Equals(input.Zpid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Zestimate != null)
                    hashCode = hashCode * 59 + this.Zestimate.GetHashCode();
                if (this.Zpid != null)
                    hashCode = hashCode * 59 + this.Zpid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
