/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// EmailOpen
    /// </summary>
    [DataContract]
    public partial class EmailOpen :  IEquatable<EmailOpen>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailOpen" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailOpen() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailOpen" /> class.
        /// </summary>
        /// <param name="email">email.</param>
        /// <param name="id">id.</param>
        /// <param name="openTimestamp">open_timestamp (required).</param>
        public EmailOpen(Email email = default(Email), Guid? id = default(Guid?), DateTime? openTimestamp = default(DateTime?))
        {
            // to ensure "openTimestamp" is required (not null)
            if (openTimestamp == null)
            {
                throw new InvalidDataException("openTimestamp is a required property for EmailOpen and cannot be null");
            }
            else
            {
                this.OpenTimestamp = openTimestamp;
            }
            this.Email = email;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public Email Email { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// open_timestamp
        /// </summary>
        /// <value>open_timestamp</value>
        [DataMember(Name="open_timestamp", EmitDefaultValue=false)]
        public DateTime? OpenTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailOpen {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OpenTimestamp: ").Append(OpenTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailOpen);
        }

        /// <summary>
        /// Returns true if EmailOpen instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailOpen to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailOpen input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OpenTimestamp == input.OpenTimestamp ||
                    (this.OpenTimestamp != null &&
                    this.OpenTimestamp.Equals(input.OpenTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OpenTimestamp != null)
                    hashCode = hashCode * 59 + this.OpenTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
