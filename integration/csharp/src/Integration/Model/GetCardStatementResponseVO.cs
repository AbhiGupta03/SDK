/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// GetCardStatementResponseVO
    /// </summary>
    [DataContract]
    public partial class GetCardStatementResponseVO :  IEquatable<GetCardStatementResponseVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCardStatementResponseVO" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="endingBalance">endingBalance.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="initialBalance">initialBalance.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="message">message.</param>
        /// <param name="nucleusCardId">nucleusCardId.</param>
        /// <param name="periodFees">periodFees.</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="vendorName">vendorName.</param>
        /// <param name="vendorResponse">vendorResponse.</param>
        /// <param name="ytdFees">ytdFees.</param>
        public GetCardStatementResponseVO(string currencyCode = default(string), double? endingBalance = default(double?), string firstName = default(string), double? initialBalance = default(double?), string lastName = default(string), string message = default(string), Guid? nucleusCardId = default(Guid?), double? periodFees = default(double?), List<Object> transactions = default(List<Object>), string vendorName = default(string), Object vendorResponse = default(Object), double? ytdFees = default(double?))
        {
            this.CurrencyCode = currencyCode;
            this.EndingBalance = endingBalance;
            this.FirstName = firstName;
            this.InitialBalance = initialBalance;
            this.LastName = lastName;
            this.Message = message;
            this.NucleusCardId = nucleusCardId;
            this.PeriodFees = periodFees;
            this.Transactions = transactions;
            this.VendorName = vendorName;
            this.VendorResponse = vendorResponse;
            this.YtdFees = ytdFees;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets EndingBalance
        /// </summary>
        [DataMember(Name="ending_balance", EmitDefaultValue=false)]
        public double? EndingBalance { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets InitialBalance
        /// </summary>
        [DataMember(Name="initial_balance", EmitDefaultValue=false)]
        public double? InitialBalance { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets NucleusCardId
        /// </summary>
        [DataMember(Name="nucleus_card_id", EmitDefaultValue=false)]
        public Guid? NucleusCardId { get; set; }

        /// <summary>
        /// Gets or Sets PeriodFees
        /// </summary>
        [DataMember(Name="period_fees", EmitDefaultValue=false)]
        public double? PeriodFees { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<Object> Transactions { get; set; }

        /// <summary>
        /// Gets or Sets VendorName
        /// </summary>
        [DataMember(Name="vendor_name", EmitDefaultValue=false)]
        public string VendorName { get; set; }

        /// <summary>
        /// Gets or Sets VendorResponse
        /// </summary>
        [DataMember(Name="vendor_response", EmitDefaultValue=false)]
        public Object VendorResponse { get; set; }

        /// <summary>
        /// Gets or Sets YtdFees
        /// </summary>
        [DataMember(Name="ytd_fees", EmitDefaultValue=false)]
        public double? YtdFees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCardStatementResponseVO {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  EndingBalance: ").Append(EndingBalance).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  InitialBalance: ").Append(InitialBalance).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NucleusCardId: ").Append(NucleusCardId).Append("\n");
            sb.Append("  PeriodFees: ").Append(PeriodFees).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  VendorResponse: ").Append(VendorResponse).Append("\n");
            sb.Append("  YtdFees: ").Append(YtdFees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCardStatementResponseVO);
        }

        /// <summary>
        /// Returns true if GetCardStatementResponseVO instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCardStatementResponseVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCardStatementResponseVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.EndingBalance == input.EndingBalance ||
                    (this.EndingBalance != null &&
                    this.EndingBalance.Equals(input.EndingBalance))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.InitialBalance == input.InitialBalance ||
                    (this.InitialBalance != null &&
                    this.InitialBalance.Equals(input.InitialBalance))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.NucleusCardId == input.NucleusCardId ||
                    (this.NucleusCardId != null &&
                    this.NucleusCardId.Equals(input.NucleusCardId))
                ) && 
                (
                    this.PeriodFees == input.PeriodFees ||
                    (this.PeriodFees != null &&
                    this.PeriodFees.Equals(input.PeriodFees))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.VendorName == input.VendorName ||
                    (this.VendorName != null &&
                    this.VendorName.Equals(input.VendorName))
                ) && 
                (
                    this.VendorResponse == input.VendorResponse ||
                    (this.VendorResponse != null &&
                    this.VendorResponse.Equals(input.VendorResponse))
                ) && 
                (
                    this.YtdFees == input.YtdFees ||
                    (this.YtdFees != null &&
                    this.YtdFees.Equals(input.YtdFees))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.EndingBalance != null)
                    hashCode = hashCode * 59 + this.EndingBalance.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.InitialBalance != null)
                    hashCode = hashCode * 59 + this.InitialBalance.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.NucleusCardId != null)
                    hashCode = hashCode * 59 + this.NucleusCardId.GetHashCode();
                if (this.PeriodFees != null)
                    hashCode = hashCode * 59 + this.PeriodFees.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.VendorName != null)
                    hashCode = hashCode * 59 + this.VendorName.GetHashCode();
                if (this.VendorResponse != null)
                    hashCode = hashCode * 59 + this.VendorResponse.GetHashCode();
                if (this.YtdFees != null)
                    hashCode = hashCode * 59 + this.YtdFees.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
