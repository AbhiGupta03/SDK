/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Integration.Client.SwaggerDateConverter;

namespace Integration.ModelEntity
{
    /// <summary>
    /// MergerAcquisition
    /// </summary>
    [DataContract]
    public partial class MergerAcquisition :  IEquatable<MergerAcquisition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MergerAcquisition" /> class.
        /// </summary>
        /// <param name="acquiree">acquiree.</param>
        /// <param name="acquirer">acquirer.</param>
        /// <param name="type">type.</param>
        public MergerAcquisition(Acquiree acquiree = default(Acquiree), Acquirer acquirer = default(Acquirer), string type = default(string))
        {
            this.Acquiree = acquiree;
            this.Acquirer = acquirer;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets Acquiree
        /// </summary>
        [DataMember(Name="acquiree", EmitDefaultValue=false)]
        public Acquiree Acquiree { get; set; }

        /// <summary>
        /// Gets or Sets Acquirer
        /// </summary>
        [DataMember(Name="acquirer", EmitDefaultValue=false)]
        public Acquirer Acquirer { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MergerAcquisition {\n");
            sb.Append("  Acquiree: ").Append(Acquiree).Append("\n");
            sb.Append("  Acquirer: ").Append(Acquirer).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MergerAcquisition);
        }

        /// <summary>
        /// Returns true if MergerAcquisition instances are equal
        /// </summary>
        /// <param name="input">Instance of MergerAcquisition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MergerAcquisition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acquiree == input.Acquiree ||
                    (this.Acquiree != null &&
                    this.Acquiree.Equals(input.Acquiree))
                ) && 
                (
                    this.Acquirer == input.Acquirer ||
                    (this.Acquirer != null &&
                    this.Acquirer.Equals(input.Acquirer))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acquiree != null)
                    hashCode = hashCode * 59 + this.Acquiree.GetHashCode();
                if (this.Acquirer != null)
                    hashCode = hashCode * 59 + this.Acquirer.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
