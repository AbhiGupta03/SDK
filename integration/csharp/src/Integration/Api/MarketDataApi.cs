/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create historical market data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyRequest">historyRequest</param>
        /// <returns>MdHistoryResponseVO</returns>
        MdHistoryResponseVO CreateMarketDataHistoricalUsingPost (MdHistoryRequestCO historyRequest);

        /// <summary>
        /// Create historical market data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyRequest">historyRequest</param>
        /// <returns>ApiResponse of MdHistoryResponseVO</returns>
        ApiResponse<MdHistoryResponseVO> CreateMarketDataHistoricalUsingPostWithHttpInfo (MdHistoryRequestCO historyRequest);
        /// <summary>
        /// Create quote market data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest">quoteRequest</param>
        /// <returns>MdQuoteResponseVO</returns>
        MdQuoteResponseVO CreateMarketDataQuoteUsingPost (MdQuoteRequestCO quoteRequest);

        /// <summary>
        /// Create quote market data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest">quoteRequest</param>
        /// <returns>ApiResponse of MdQuoteResponseVO</returns>
        ApiResponse<MdQuoteResponseVO> CreateMarketDataQuoteUsingPostWithHttpInfo (MdQuoteRequestCO quoteRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create historical market data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyRequest">historyRequest</param>
        /// <returns>Task of MdHistoryResponseVO</returns>
        System.Threading.Tasks.Task<MdHistoryResponseVO> CreateMarketDataHistoricalUsingPostAsync (MdHistoryRequestCO historyRequest);

        /// <summary>
        /// Create historical market data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyRequest">historyRequest</param>
        /// <returns>Task of ApiResponse (MdHistoryResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MdHistoryResponseVO>> CreateMarketDataHistoricalUsingPostAsyncWithHttpInfo (MdHistoryRequestCO historyRequest);
        /// <summary>
        /// Create quote market data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest">quoteRequest</param>
        /// <returns>Task of MdQuoteResponseVO</returns>
        System.Threading.Tasks.Task<MdQuoteResponseVO> CreateMarketDataQuoteUsingPostAsync (MdQuoteRequestCO quoteRequest);

        /// <summary>
        /// Create quote market data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest">quoteRequest</param>
        /// <returns>Task of ApiResponse (MdQuoteResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MdQuoteResponseVO>> CreateMarketDataQuoteUsingPostAsyncWithHttpInfo (MdQuoteRequestCO quoteRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketDataApi : IMarketDataApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketDataApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketDataApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create historical market data 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyRequest">historyRequest</param>
        /// <returns>MdHistoryResponseVO</returns>
        public MdHistoryResponseVO CreateMarketDataHistoricalUsingPost (MdHistoryRequestCO historyRequest)
        {
             ApiResponse<MdHistoryResponseVO> localVarResponse = CreateMarketDataHistoricalUsingPostWithHttpInfo(historyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create historical market data 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyRequest">historyRequest</param>
        /// <returns>ApiResponse of MdHistoryResponseVO</returns>
        public ApiResponse< MdHistoryResponseVO > CreateMarketDataHistoricalUsingPostWithHttpInfo (MdHistoryRequestCO historyRequest)
        {
            // verify the required parameter 'historyRequest' is set
            if (historyRequest == null)
                throw new ApiException(400, "Missing required parameter 'historyRequest' when calling MarketDataApi->CreateMarketDataHistoricalUsingPost");

            var localVarPath = "/market_data/historical";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (historyRequest != null && historyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMarketDataHistoricalUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MdHistoryResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MdHistoryResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MdHistoryResponseVO)));
        }

        /// <summary>
        /// Create historical market data 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyRequest">historyRequest</param>
        /// <returns>Task of MdHistoryResponseVO</returns>
        public async System.Threading.Tasks.Task<MdHistoryResponseVO> CreateMarketDataHistoricalUsingPostAsync (MdHistoryRequestCO historyRequest)
        {
             ApiResponse<MdHistoryResponseVO> localVarResponse = await CreateMarketDataHistoricalUsingPostAsyncWithHttpInfo(historyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create historical market data 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyRequest">historyRequest</param>
        /// <returns>Task of ApiResponse (MdHistoryResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MdHistoryResponseVO>> CreateMarketDataHistoricalUsingPostAsyncWithHttpInfo (MdHistoryRequestCO historyRequest)
        {
            // verify the required parameter 'historyRequest' is set
            if (historyRequest == null)
                throw new ApiException(400, "Missing required parameter 'historyRequest' when calling MarketDataApi->CreateMarketDataHistoricalUsingPost");

            var localVarPath = "/market_data/historical";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (historyRequest != null && historyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMarketDataHistoricalUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MdHistoryResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MdHistoryResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MdHistoryResponseVO)));
        }

        /// <summary>
        /// Create quote market data 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest">quoteRequest</param>
        /// <returns>MdQuoteResponseVO</returns>
        public MdQuoteResponseVO CreateMarketDataQuoteUsingPost (MdQuoteRequestCO quoteRequest)
        {
             ApiResponse<MdQuoteResponseVO> localVarResponse = CreateMarketDataQuoteUsingPostWithHttpInfo(quoteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create quote market data 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest">quoteRequest</param>
        /// <returns>ApiResponse of MdQuoteResponseVO</returns>
        public ApiResponse< MdQuoteResponseVO > CreateMarketDataQuoteUsingPostWithHttpInfo (MdQuoteRequestCO quoteRequest)
        {
            // verify the required parameter 'quoteRequest' is set
            if (quoteRequest == null)
                throw new ApiException(400, "Missing required parameter 'quoteRequest' when calling MarketDataApi->CreateMarketDataQuoteUsingPost");

            var localVarPath = "/market_data/quote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (quoteRequest != null && quoteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(quoteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = quoteRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMarketDataQuoteUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MdQuoteResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MdQuoteResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MdQuoteResponseVO)));
        }

        /// <summary>
        /// Create quote market data 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest">quoteRequest</param>
        /// <returns>Task of MdQuoteResponseVO</returns>
        public async System.Threading.Tasks.Task<MdQuoteResponseVO> CreateMarketDataQuoteUsingPostAsync (MdQuoteRequestCO quoteRequest)
        {
             ApiResponse<MdQuoteResponseVO> localVarResponse = await CreateMarketDataQuoteUsingPostAsyncWithHttpInfo(quoteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create quote market data 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest">quoteRequest</param>
        /// <returns>Task of ApiResponse (MdQuoteResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MdQuoteResponseVO>> CreateMarketDataQuoteUsingPostAsyncWithHttpInfo (MdQuoteRequestCO quoteRequest)
        {
            // verify the required parameter 'quoteRequest' is set
            if (quoteRequest == null)
                throw new ApiException(400, "Missing required parameter 'quoteRequest' when calling MarketDataApi->CreateMarketDataQuoteUsingPost");

            var localVarPath = "/market_data/quote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (quoteRequest != null && quoteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(quoteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = quoteRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMarketDataQuoteUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MdQuoteResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MdQuoteResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MdQuoteResponseVO)));
        }

    }
}
