/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWireApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel the Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>WireTransferResponseVO</returns>
        WireTransferResponseVO CancelWireTransferUsingDelete (Guid? nucleusFundingId);

        /// <summary>
        /// Cancel the Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of WireTransferResponseVO</returns>
        ApiResponse<WireTransferResponseVO> CancelWireTransferUsingDeleteWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>WireBankLinkResponseVO</returns>
        WireBankLinkResponseVO CreateWireBankLinkUsingPost (WireBankLinkRequestCO request);

        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of WireBankLinkResponseVO</returns>
        ApiResponse<WireBankLinkResponseVO> CreateWireBankLinkUsingPostWithHttpInfo (WireBankLinkRequestCO request);
        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>WireBankLinkResponseVO</returns>
        WireBankLinkResponseVO DeleteWireBankLinkUsingDelete (Guid? nucleusBankLinkId);

        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of WireBankLinkResponseVO</returns>
        ApiResponse<WireBankLinkResponseVO> DeleteWireBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get a list of Wire transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;WireTransferResponseVO&gt;</returns>
        List<WireTransferResponseVO> GetListOfWireTransfersUsingGet (Guid? nucleusClientId);

        /// <summary>
        /// Get a list of Wire transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;WireTransferResponseVO&gt;</returns>
        ApiResponse<List<WireTransferResponseVO>> GetListOfWireTransfersUsingGetWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>WireBankLinkResponseVO</returns>
        WireBankLinkResponseVO GetWireBankLinkUsingGet (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of WireBankLinkResponseVO</returns>
        ApiResponse<WireBankLinkResponseVO> GetWireBankLinkUsingGetWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;WireBankLinkResponseVO&gt;</returns>
        List<WireBankLinkResponseVO> GetWireClientBankLinksUsingGet (Guid? nucleusClientId);

        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;WireBankLinkResponseVO&gt;</returns>
        ApiResponse<List<WireBankLinkResponseVO>> GetWireClientBankLinksUsingGetWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get the Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>WireTransferResponseVO</returns>
        WireTransferResponseVO GetWireTransferUsingGet (Guid? nucleusFundingId);

        /// <summary>
        /// Get the Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of WireTransferResponseVO</returns>
        ApiResponse<WireTransferResponseVO> GetWireTransferUsingGetWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Submit a Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>WireTransferResponseVO</returns>
        WireTransferResponseVO SubmitWireTransferUsingPost (WireTransferRequestCO transferRequest);

        /// <summary>
        /// Submit a Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>ApiResponse of WireTransferResponseVO</returns>
        ApiResponse<WireTransferResponseVO> SubmitWireTransferUsingPostWithHttpInfo (WireTransferRequestCO transferRequest);
        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>WireBankLinkResponseVO</returns>
        WireBankLinkResponseVO UpdateWireBankLinkUsingPut (Guid? nucleusBankLinkId);

        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of WireBankLinkResponseVO</returns>
        ApiResponse<WireBankLinkResponseVO> UpdateWireBankLinkUsingPutWithHttpInfo (Guid? nucleusBankLinkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel the Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of WireTransferResponseVO</returns>
        System.Threading.Tasks.Task<WireTransferResponseVO> CancelWireTransferUsingDeleteAsync (Guid? nucleusFundingId);

        /// <summary>
        /// Cancel the Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (WireTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WireTransferResponseVO>> CancelWireTransferUsingDeleteAsyncWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of WireBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<WireBankLinkResponseVO> CreateWireBankLinkUsingPostAsync (WireBankLinkRequestCO request);

        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (WireBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WireBankLinkResponseVO>> CreateWireBankLinkUsingPostAsyncWithHttpInfo (WireBankLinkRequestCO request);
        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of WireBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<WireBankLinkResponseVO> DeleteWireBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (WireBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WireBankLinkResponseVO>> DeleteWireBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get a list of Wire transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;WireTransferResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<WireTransferResponseVO>> GetListOfWireTransfersUsingGetAsync (Guid? nucleusClientId);

        /// <summary>
        /// Get a list of Wire transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;WireTransferResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WireTransferResponseVO>>> GetListOfWireTransfersUsingGetAsyncWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of WireBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<WireBankLinkResponseVO> GetWireBankLinkUsingGetAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (WireBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WireBankLinkResponseVO>> GetWireBankLinkUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;WireBankLinkResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<WireBankLinkResponseVO>> GetWireClientBankLinksUsingGetAsync (Guid? nucleusClientId);

        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;WireBankLinkResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WireBankLinkResponseVO>>> GetWireClientBankLinksUsingGetAsyncWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get the Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of WireTransferResponseVO</returns>
        System.Threading.Tasks.Task<WireTransferResponseVO> GetWireTransferUsingGetAsync (Guid? nucleusFundingId);

        /// <summary>
        /// Get the Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (WireTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WireTransferResponseVO>> GetWireTransferUsingGetAsyncWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Submit a Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of WireTransferResponseVO</returns>
        System.Threading.Tasks.Task<WireTransferResponseVO> SubmitWireTransferUsingPostAsync (WireTransferRequestCO transferRequest);

        /// <summary>
        /// Submit a Wire transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of ApiResponse (WireTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WireTransferResponseVO>> SubmitWireTransferUsingPostAsyncWithHttpInfo (WireTransferRequestCO transferRequest);
        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of WireBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<WireBankLinkResponseVO> UpdateWireBankLinkUsingPutAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (WireBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WireBankLinkResponseVO>> UpdateWireBankLinkUsingPutAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WireApi : IWireApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WireApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WireApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WireApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WireApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel the Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>WireTransferResponseVO</returns>
        public WireTransferResponseVO CancelWireTransferUsingDelete (Guid? nucleusFundingId)
        {
             ApiResponse<WireTransferResponseVO> localVarResponse = CancelWireTransferUsingDeleteWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of WireTransferResponseVO</returns>
        public ApiResponse< WireTransferResponseVO > CancelWireTransferUsingDeleteWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling WireApi->CancelWireTransferUsingDelete");

            var localVarPath = "/wire/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelWireTransferUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireTransferResponseVO)));
        }

        /// <summary>
        /// Cancel the Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of WireTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<WireTransferResponseVO> CancelWireTransferUsingDeleteAsync (Guid? nucleusFundingId)
        {
             ApiResponse<WireTransferResponseVO> localVarResponse = await CancelWireTransferUsingDeleteAsyncWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel the Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (WireTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WireTransferResponseVO>> CancelWireTransferUsingDeleteAsyncWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling WireApi->CancelWireTransferUsingDelete");

            var localVarPath = "/wire/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelWireTransferUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireTransferResponseVO)));
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>WireBankLinkResponseVO</returns>
        public WireBankLinkResponseVO CreateWireBankLinkUsingPost (WireBankLinkRequestCO request)
        {
             ApiResponse<WireBankLinkResponseVO> localVarResponse = CreateWireBankLinkUsingPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of WireBankLinkResponseVO</returns>
        public ApiResponse< WireBankLinkResponseVO > CreateWireBankLinkUsingPostWithHttpInfo (WireBankLinkRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling WireApi->CreateWireBankLinkUsingPost");

            var localVarPath = "/wire/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWireBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireBankLinkResponseVO)));
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of WireBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<WireBankLinkResponseVO> CreateWireBankLinkUsingPostAsync (WireBankLinkRequestCO request)
        {
             ApiResponse<WireBankLinkResponseVO> localVarResponse = await CreateWireBankLinkUsingPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (WireBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WireBankLinkResponseVO>> CreateWireBankLinkUsingPostAsyncWithHttpInfo (WireBankLinkRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling WireApi->CreateWireBankLinkUsingPost");

            var localVarPath = "/wire/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWireBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireBankLinkResponseVO)));
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>WireBankLinkResponseVO</returns>
        public WireBankLinkResponseVO DeleteWireBankLinkUsingDelete (Guid? nucleusBankLinkId)
        {
             ApiResponse<WireBankLinkResponseVO> localVarResponse = DeleteWireBankLinkUsingDeleteWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of WireBankLinkResponseVO</returns>
        public ApiResponse< WireBankLinkResponseVO > DeleteWireBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling WireApi->DeleteWireBankLinkUsingDelete");

            var localVarPath = "/wire/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWireBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireBankLinkResponseVO)));
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of WireBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<WireBankLinkResponseVO> DeleteWireBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<WireBankLinkResponseVO> localVarResponse = await DeleteWireBankLinkUsingDeleteAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (WireBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WireBankLinkResponseVO>> DeleteWireBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling WireApi->DeleteWireBankLinkUsingDelete");

            var localVarPath = "/wire/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWireBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireBankLinkResponseVO)));
        }

        /// <summary>
        /// Get a list of Wire transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;WireTransferResponseVO&gt;</returns>
        public List<WireTransferResponseVO> GetListOfWireTransfersUsingGet (Guid? nucleusClientId)
        {
             ApiResponse<List<WireTransferResponseVO>> localVarResponse = GetListOfWireTransfersUsingGetWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Wire transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;WireTransferResponseVO&gt;</returns>
        public ApiResponse< List<WireTransferResponseVO> > GetListOfWireTransfersUsingGetWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling WireApi->GetListOfWireTransfersUsingGet");

            var localVarPath = "/wire/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfWireTransfersUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WireTransferResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WireTransferResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WireTransferResponseVO>)));
        }

        /// <summary>
        /// Get a list of Wire transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;WireTransferResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WireTransferResponseVO>> GetListOfWireTransfersUsingGetAsync (Guid? nucleusClientId)
        {
             ApiResponse<List<WireTransferResponseVO>> localVarResponse = await GetListOfWireTransfersUsingGetAsyncWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of Wire transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;WireTransferResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WireTransferResponseVO>>> GetListOfWireTransfersUsingGetAsyncWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling WireApi->GetListOfWireTransfersUsingGet");

            var localVarPath = "/wire/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfWireTransfersUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WireTransferResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WireTransferResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WireTransferResponseVO>)));
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>WireBankLinkResponseVO</returns>
        public WireBankLinkResponseVO GetWireBankLinkUsingGet (Guid? nucleusBankLinkId)
        {
             ApiResponse<WireBankLinkResponseVO> localVarResponse = GetWireBankLinkUsingGetWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of WireBankLinkResponseVO</returns>
        public ApiResponse< WireBankLinkResponseVO > GetWireBankLinkUsingGetWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling WireApi->GetWireBankLinkUsingGet");

            var localVarPath = "/wire/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWireBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireBankLinkResponseVO)));
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of WireBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<WireBankLinkResponseVO> GetWireBankLinkUsingGetAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<WireBankLinkResponseVO> localVarResponse = await GetWireBankLinkUsingGetAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (WireBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WireBankLinkResponseVO>> GetWireBankLinkUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling WireApi->GetWireBankLinkUsingGet");

            var localVarPath = "/wire/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWireBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireBankLinkResponseVO)));
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;WireBankLinkResponseVO&gt;</returns>
        public List<WireBankLinkResponseVO> GetWireClientBankLinksUsingGet (Guid? nucleusClientId)
        {
             ApiResponse<List<WireBankLinkResponseVO>> localVarResponse = GetWireClientBankLinksUsingGetWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;WireBankLinkResponseVO&gt;</returns>
        public ApiResponse< List<WireBankLinkResponseVO> > GetWireClientBankLinksUsingGetWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling WireApi->GetWireClientBankLinksUsingGet");

            var localVarPath = "/wire/bank_link/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWireClientBankLinksUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WireBankLinkResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WireBankLinkResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WireBankLinkResponseVO>)));
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;WireBankLinkResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WireBankLinkResponseVO>> GetWireClientBankLinksUsingGetAsync (Guid? nucleusClientId)
        {
             ApiResponse<List<WireBankLinkResponseVO>> localVarResponse = await GetWireClientBankLinksUsingGetAsyncWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;WireBankLinkResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WireBankLinkResponseVO>>> GetWireClientBankLinksUsingGetAsyncWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling WireApi->GetWireClientBankLinksUsingGet");

            var localVarPath = "/wire/bank_link/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWireClientBankLinksUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WireBankLinkResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WireBankLinkResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WireBankLinkResponseVO>)));
        }

        /// <summary>
        /// Get the Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>WireTransferResponseVO</returns>
        public WireTransferResponseVO GetWireTransferUsingGet (Guid? nucleusFundingId)
        {
             ApiResponse<WireTransferResponseVO> localVarResponse = GetWireTransferUsingGetWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of WireTransferResponseVO</returns>
        public ApiResponse< WireTransferResponseVO > GetWireTransferUsingGetWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling WireApi->GetWireTransferUsingGet");

            var localVarPath = "/wire/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWireTransferUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireTransferResponseVO)));
        }

        /// <summary>
        /// Get the Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of WireTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<WireTransferResponseVO> GetWireTransferUsingGetAsync (Guid? nucleusFundingId)
        {
             ApiResponse<WireTransferResponseVO> localVarResponse = await GetWireTransferUsingGetAsyncWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (WireTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WireTransferResponseVO>> GetWireTransferUsingGetAsyncWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling WireApi->GetWireTransferUsingGet");

            var localVarPath = "/wire/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWireTransferUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireTransferResponseVO)));
        }

        /// <summary>
        /// Submit a Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>WireTransferResponseVO</returns>
        public WireTransferResponseVO SubmitWireTransferUsingPost (WireTransferRequestCO transferRequest)
        {
             ApiResponse<WireTransferResponseVO> localVarResponse = SubmitWireTransferUsingPostWithHttpInfo(transferRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>ApiResponse of WireTransferResponseVO</returns>
        public ApiResponse< WireTransferResponseVO > SubmitWireTransferUsingPostWithHttpInfo (WireTransferRequestCO transferRequest)
        {
            // verify the required parameter 'transferRequest' is set
            if (transferRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferRequest' when calling WireApi->SubmitWireTransferUsingPost");

            var localVarPath = "/wire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferRequest != null && transferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitWireTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireTransferResponseVO)));
        }

        /// <summary>
        /// Submit a Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of WireTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<WireTransferResponseVO> SubmitWireTransferUsingPostAsync (WireTransferRequestCO transferRequest)
        {
             ApiResponse<WireTransferResponseVO> localVarResponse = await SubmitWireTransferUsingPostAsyncWithHttpInfo(transferRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit a Wire transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of ApiResponse (WireTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WireTransferResponseVO>> SubmitWireTransferUsingPostAsyncWithHttpInfo (WireTransferRequestCO transferRequest)
        {
            // verify the required parameter 'transferRequest' is set
            if (transferRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferRequest' when calling WireApi->SubmitWireTransferUsingPost");

            var localVarPath = "/wire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferRequest != null && transferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitWireTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireTransferResponseVO)));
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>WireBankLinkResponseVO</returns>
        public WireBankLinkResponseVO UpdateWireBankLinkUsingPut (Guid? nucleusBankLinkId)
        {
             ApiResponse<WireBankLinkResponseVO> localVarResponse = UpdateWireBankLinkUsingPutWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of WireBankLinkResponseVO</returns>
        public ApiResponse< WireBankLinkResponseVO > UpdateWireBankLinkUsingPutWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling WireApi->UpdateWireBankLinkUsingPut");

            var localVarPath = "/wire/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWireBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireBankLinkResponseVO)));
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of WireBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<WireBankLinkResponseVO> UpdateWireBankLinkUsingPutAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<WireBankLinkResponseVO> localVarResponse = await UpdateWireBankLinkUsingPutAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (WireBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WireBankLinkResponseVO>> UpdateWireBankLinkUsingPutAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling WireApi->UpdateWireBankLinkUsingPut");

            var localVarPath = "/wire/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWireBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WireBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WireBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WireBankLinkResponseVO)));
        }

    }
}
