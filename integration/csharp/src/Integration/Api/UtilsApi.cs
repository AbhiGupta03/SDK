/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtilsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve token based on certain vendor specific value
        /// </summary>
        /// <remarks>
        /// Retrieve the token.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeTokenCO">exchangeTokenCO</param>
        /// <returns>ExchangePublicTokenVO</returns>
        ExchangePublicTokenVO CreateTokenExchangeUsingPost (ExchangeTokenCO exchangeTokenCO);

        /// <summary>
        /// Retrieve token based on certain vendor specific value
        /// </summary>
        /// <remarks>
        /// Retrieve the token.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeTokenCO">exchangeTokenCO</param>
        /// <returns>ApiResponse of ExchangePublicTokenVO</returns>
        ApiResponse<ExchangePublicTokenVO> CreateTokenExchangeUsingPostWithHttpInfo (ExchangeTokenCO exchangeTokenCO);
        /// <summary>
        /// Create user in vendor
        /// </summary>
        /// <remarks>
        /// Create user in vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">createUserRequest</param>
        /// <returns>UserResponseVO</returns>
        UserResponseVO CreateUserUsingPost (CreateUserRequest createUserRequest);

        /// <summary>
        /// Create user in vendor
        /// </summary>
        /// <remarks>
        /// Create user in vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">createUserRequest</param>
        /// <returns>ApiResponse of UserResponseVO</returns>
        ApiResponse<UserResponseVO> CreateUserUsingPostWithHttpInfo (CreateUserRequest createUserRequest);
        /// <summary>
        /// Gel all audit log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="_event">event (optional)</param>
        /// <param name="integrationType">integration_type (optional)</param>
        /// <param name="isRequest">is_request (optional, default to false)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="requestType">request_type (optional)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Pageobject</returns>
        Pageobject GetAuditLogAllUsingGet (bool? ascending = null, DateTime? endDate = null, string _event = null, string integrationType = null, bool? isRequest = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusClientId = null, string orderBy = null, int? page = null, string requestType = null, int? size = null, DateTime? startDate = null, string vendorName = null);

        /// <summary>
        /// Gel all audit log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="_event">event (optional)</param>
        /// <param name="integrationType">integration_type (optional)</param>
        /// <param name="isRequest">is_request (optional, default to false)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="requestType">request_type (optional)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>ApiResponse of Pageobject</returns>
        ApiResponse<Pageobject> GetAuditLogAllUsingGetWithHttpInfo (bool? ascending = null, DateTime? endDate = null, string _event = null, string integrationType = null, bool? isRequest = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusClientId = null, string orderBy = null, int? page = null, string requestType = null, int? size = null, DateTime? startDate = null, string vendorName = null);
        /// <summary>
        /// Retrieve widget link
        /// </summary>
        /// <remarks>
        /// Retrieve the widget link.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusId">nucleus_id</param>
        /// <param name="isBusiness">is_business (optional, default to false)</param>
        /// <param name="isMobileWebview">is_mobile_webview (optional, default to false)</param>
        /// <param name="memberId">member_id (optional)</param>
        /// <param name="messageVersion">message_version (optional)</param>
        /// <param name="mode">mode (optional, default to aggregation)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <param name="waitForFullAggregation">wait_for_full_aggregation (optional, default to true)</param>
        /// <param name="webviewUrlScheme">webview_url_scheme (optional)</param>
        /// <returns>WidgetUrlVO</returns>
        WidgetUrlVO GetWidgetLinkUsingGet (Guid? nucleusId, bool? isBusiness = null, bool? isMobileWebview = null, string memberId = null, decimal? messageVersion = null, string mode = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusBankLinkId = null, string vendorName = null, bool? waitForFullAggregation = null, string webviewUrlScheme = null);

        /// <summary>
        /// Retrieve widget link
        /// </summary>
        /// <remarks>
        /// Retrieve the widget link.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusId">nucleus_id</param>
        /// <param name="isBusiness">is_business (optional, default to false)</param>
        /// <param name="isMobileWebview">is_mobile_webview (optional, default to false)</param>
        /// <param name="memberId">member_id (optional)</param>
        /// <param name="messageVersion">message_version (optional)</param>
        /// <param name="mode">mode (optional, default to aggregation)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <param name="waitForFullAggregation">wait_for_full_aggregation (optional, default to true)</param>
        /// <param name="webviewUrlScheme">webview_url_scheme (optional)</param>
        /// <returns>ApiResponse of WidgetUrlVO</returns>
        ApiResponse<WidgetUrlVO> GetWidgetLinkUsingGetWithHttpInfo (Guid? nucleusId, bool? isBusiness = null, bool? isMobileWebview = null, string memberId = null, decimal? messageVersion = null, string mode = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusBankLinkId = null, string vendorName = null, bool? waitForFullAggregation = null, string webviewUrlScheme = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve token based on certain vendor specific value
        /// </summary>
        /// <remarks>
        /// Retrieve the token.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeTokenCO">exchangeTokenCO</param>
        /// <returns>Task of ExchangePublicTokenVO</returns>
        System.Threading.Tasks.Task<ExchangePublicTokenVO> CreateTokenExchangeUsingPostAsync (ExchangeTokenCO exchangeTokenCO);

        /// <summary>
        /// Retrieve token based on certain vendor specific value
        /// </summary>
        /// <remarks>
        /// Retrieve the token.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeTokenCO">exchangeTokenCO</param>
        /// <returns>Task of ApiResponse (ExchangePublicTokenVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExchangePublicTokenVO>> CreateTokenExchangeUsingPostAsyncWithHttpInfo (ExchangeTokenCO exchangeTokenCO);
        /// <summary>
        /// Create user in vendor
        /// </summary>
        /// <remarks>
        /// Create user in vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">createUserRequest</param>
        /// <returns>Task of UserResponseVO</returns>
        System.Threading.Tasks.Task<UserResponseVO> CreateUserUsingPostAsync (CreateUserRequest createUserRequest);

        /// <summary>
        /// Create user in vendor
        /// </summary>
        /// <remarks>
        /// Create user in vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">createUserRequest</param>
        /// <returns>Task of ApiResponse (UserResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponseVO>> CreateUserUsingPostAsyncWithHttpInfo (CreateUserRequest createUserRequest);
        /// <summary>
        /// Gel all audit log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="_event">event (optional)</param>
        /// <param name="integrationType">integration_type (optional)</param>
        /// <param name="isRequest">is_request (optional, default to false)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="requestType">request_type (optional)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of Pageobject</returns>
        System.Threading.Tasks.Task<Pageobject> GetAuditLogAllUsingGetAsync (bool? ascending = null, DateTime? endDate = null, string _event = null, string integrationType = null, bool? isRequest = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusClientId = null, string orderBy = null, int? page = null, string requestType = null, int? size = null, DateTime? startDate = null, string vendorName = null);

        /// <summary>
        /// Gel all audit log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="_event">event (optional)</param>
        /// <param name="integrationType">integration_type (optional)</param>
        /// <param name="isRequest">is_request (optional, default to false)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="requestType">request_type (optional)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of ApiResponse (Pageobject)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pageobject>> GetAuditLogAllUsingGetAsyncWithHttpInfo (bool? ascending = null, DateTime? endDate = null, string _event = null, string integrationType = null, bool? isRequest = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusClientId = null, string orderBy = null, int? page = null, string requestType = null, int? size = null, DateTime? startDate = null, string vendorName = null);
        /// <summary>
        /// Retrieve widget link
        /// </summary>
        /// <remarks>
        /// Retrieve the widget link.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusId">nucleus_id</param>
        /// <param name="isBusiness">is_business (optional, default to false)</param>
        /// <param name="isMobileWebview">is_mobile_webview (optional, default to false)</param>
        /// <param name="memberId">member_id (optional)</param>
        /// <param name="messageVersion">message_version (optional)</param>
        /// <param name="mode">mode (optional, default to aggregation)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <param name="waitForFullAggregation">wait_for_full_aggregation (optional, default to true)</param>
        /// <param name="webviewUrlScheme">webview_url_scheme (optional)</param>
        /// <returns>Task of WidgetUrlVO</returns>
        System.Threading.Tasks.Task<WidgetUrlVO> GetWidgetLinkUsingGetAsync (Guid? nucleusId, bool? isBusiness = null, bool? isMobileWebview = null, string memberId = null, decimal? messageVersion = null, string mode = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusBankLinkId = null, string vendorName = null, bool? waitForFullAggregation = null, string webviewUrlScheme = null);

        /// <summary>
        /// Retrieve widget link
        /// </summary>
        /// <remarks>
        /// Retrieve the widget link.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusId">nucleus_id</param>
        /// <param name="isBusiness">is_business (optional, default to false)</param>
        /// <param name="isMobileWebview">is_mobile_webview (optional, default to false)</param>
        /// <param name="memberId">member_id (optional)</param>
        /// <param name="messageVersion">message_version (optional)</param>
        /// <param name="mode">mode (optional, default to aggregation)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <param name="waitForFullAggregation">wait_for_full_aggregation (optional, default to true)</param>
        /// <param name="webviewUrlScheme">webview_url_scheme (optional)</param>
        /// <returns>Task of ApiResponse (WidgetUrlVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WidgetUrlVO>> GetWidgetLinkUsingGetAsyncWithHttpInfo (Guid? nucleusId, bool? isBusiness = null, bool? isMobileWebview = null, string memberId = null, decimal? messageVersion = null, string mode = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusBankLinkId = null, string vendorName = null, bool? waitForFullAggregation = null, string webviewUrlScheme = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UtilsApi : IUtilsApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilsApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UtilsApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve token based on certain vendor specific value Retrieve the token.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeTokenCO">exchangeTokenCO</param>
        /// <returns>ExchangePublicTokenVO</returns>
        public ExchangePublicTokenVO CreateTokenExchangeUsingPost (ExchangeTokenCO exchangeTokenCO)
        {
             ApiResponse<ExchangePublicTokenVO> localVarResponse = CreateTokenExchangeUsingPostWithHttpInfo(exchangeTokenCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve token based on certain vendor specific value Retrieve the token.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeTokenCO">exchangeTokenCO</param>
        /// <returns>ApiResponse of ExchangePublicTokenVO</returns>
        public ApiResponse< ExchangePublicTokenVO > CreateTokenExchangeUsingPostWithHttpInfo (ExchangeTokenCO exchangeTokenCO)
        {
            // verify the required parameter 'exchangeTokenCO' is set
            if (exchangeTokenCO == null)
                throw new ApiException(400, "Missing required parameter 'exchangeTokenCO' when calling UtilsApi->CreateTokenExchangeUsingPost");

            var localVarPath = "/token_exchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeTokenCO != null && exchangeTokenCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exchangeTokenCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exchangeTokenCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTokenExchangeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExchangePublicTokenVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExchangePublicTokenVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExchangePublicTokenVO)));
        }

        /// <summary>
        /// Retrieve token based on certain vendor specific value Retrieve the token.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeTokenCO">exchangeTokenCO</param>
        /// <returns>Task of ExchangePublicTokenVO</returns>
        public async System.Threading.Tasks.Task<ExchangePublicTokenVO> CreateTokenExchangeUsingPostAsync (ExchangeTokenCO exchangeTokenCO)
        {
             ApiResponse<ExchangePublicTokenVO> localVarResponse = await CreateTokenExchangeUsingPostAsyncWithHttpInfo(exchangeTokenCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve token based on certain vendor specific value Retrieve the token.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeTokenCO">exchangeTokenCO</param>
        /// <returns>Task of ApiResponse (ExchangePublicTokenVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExchangePublicTokenVO>> CreateTokenExchangeUsingPostAsyncWithHttpInfo (ExchangeTokenCO exchangeTokenCO)
        {
            // verify the required parameter 'exchangeTokenCO' is set
            if (exchangeTokenCO == null)
                throw new ApiException(400, "Missing required parameter 'exchangeTokenCO' when calling UtilsApi->CreateTokenExchangeUsingPost");

            var localVarPath = "/token_exchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeTokenCO != null && exchangeTokenCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exchangeTokenCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exchangeTokenCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTokenExchangeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExchangePublicTokenVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExchangePublicTokenVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExchangePublicTokenVO)));
        }

        /// <summary>
        /// Create user in vendor Create user in vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">createUserRequest</param>
        /// <returns>UserResponseVO</returns>
        public UserResponseVO CreateUserUsingPost (CreateUserRequest createUserRequest)
        {
             ApiResponse<UserResponseVO> localVarResponse = CreateUserUsingPostWithHttpInfo(createUserRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create user in vendor Create user in vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">createUserRequest</param>
        /// <returns>ApiResponse of UserResponseVO</returns>
        public ApiResponse< UserResponseVO > CreateUserUsingPostWithHttpInfo (CreateUserRequest createUserRequest)
        {
            // verify the required parameter 'createUserRequest' is set
            if (createUserRequest == null)
                throw new ApiException(400, "Missing required parameter 'createUserRequest' when calling UtilsApi->CreateUserUsingPost");

            var localVarPath = "/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUserRequest != null && createUserRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponseVO)));
        }

        /// <summary>
        /// Create user in vendor Create user in vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">createUserRequest</param>
        /// <returns>Task of UserResponseVO</returns>
        public async System.Threading.Tasks.Task<UserResponseVO> CreateUserUsingPostAsync (CreateUserRequest createUserRequest)
        {
             ApiResponse<UserResponseVO> localVarResponse = await CreateUserUsingPostAsyncWithHttpInfo(createUserRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create user in vendor Create user in vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">createUserRequest</param>
        /// <returns>Task of ApiResponse (UserResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponseVO>> CreateUserUsingPostAsyncWithHttpInfo (CreateUserRequest createUserRequest)
        {
            // verify the required parameter 'createUserRequest' is set
            if (createUserRequest == null)
                throw new ApiException(400, "Missing required parameter 'createUserRequest' when calling UtilsApi->CreateUserUsingPost");

            var localVarPath = "/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUserRequest != null && createUserRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponseVO)));
        }

        /// <summary>
        /// Gel all audit log 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="_event">event (optional)</param>
        /// <param name="integrationType">integration_type (optional)</param>
        /// <param name="isRequest">is_request (optional, default to false)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="requestType">request_type (optional)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Pageobject</returns>
        public Pageobject GetAuditLogAllUsingGet (bool? ascending = null, DateTime? endDate = null, string _event = null, string integrationType = null, bool? isRequest = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusClientId = null, string orderBy = null, int? page = null, string requestType = null, int? size = null, DateTime? startDate = null, string vendorName = null)
        {
             ApiResponse<Pageobject> localVarResponse = GetAuditLogAllUsingGetWithHttpInfo(ascending, endDate, _event, integrationType, isRequest, nucleusAggregationAccountId, nucleusClientId, orderBy, page, requestType, size, startDate, vendorName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gel all audit log 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="_event">event (optional)</param>
        /// <param name="integrationType">integration_type (optional)</param>
        /// <param name="isRequest">is_request (optional, default to false)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="requestType">request_type (optional)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>ApiResponse of Pageobject</returns>
        public ApiResponse< Pageobject > GetAuditLogAllUsingGetWithHttpInfo (bool? ascending = null, DateTime? endDate = null, string _event = null, string integrationType = null, bool? isRequest = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusClientId = null, string orderBy = null, int? page = null, string requestType = null, int? size = null, DateTime? startDate = null, string vendorName = null)
        {

            var localVarPath = "/audit_log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            if (integrationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integration_type", integrationType)); // query parameter
            if (isRequest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_request", isRequest)); // query parameter
            if (nucleusAggregationAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_aggregation_account_id", nucleusAggregationAccountId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (requestType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "request_type", requestType)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pageobject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pageobject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pageobject)));
        }

        /// <summary>
        /// Gel all audit log 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="_event">event (optional)</param>
        /// <param name="integrationType">integration_type (optional)</param>
        /// <param name="isRequest">is_request (optional, default to false)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="requestType">request_type (optional)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of Pageobject</returns>
        public async System.Threading.Tasks.Task<Pageobject> GetAuditLogAllUsingGetAsync (bool? ascending = null, DateTime? endDate = null, string _event = null, string integrationType = null, bool? isRequest = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusClientId = null, string orderBy = null, int? page = null, string requestType = null, int? size = null, DateTime? startDate = null, string vendorName = null)
        {
             ApiResponse<Pageobject> localVarResponse = await GetAuditLogAllUsingGetAsyncWithHttpInfo(ascending, endDate, _event, integrationType, isRequest, nucleusAggregationAccountId, nucleusClientId, orderBy, page, requestType, size, startDate, vendorName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gel all audit log 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="_event">event (optional)</param>
        /// <param name="integrationType">integration_type (optional)</param>
        /// <param name="isRequest">is_request (optional, default to false)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="requestType">request_type (optional)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of ApiResponse (Pageobject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Pageobject>> GetAuditLogAllUsingGetAsyncWithHttpInfo (bool? ascending = null, DateTime? endDate = null, string _event = null, string integrationType = null, bool? isRequest = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusClientId = null, string orderBy = null, int? page = null, string requestType = null, int? size = null, DateTime? startDate = null, string vendorName = null)
        {

            var localVarPath = "/audit_log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            if (integrationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integration_type", integrationType)); // query parameter
            if (isRequest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_request", isRequest)); // query parameter
            if (nucleusAggregationAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_aggregation_account_id", nucleusAggregationAccountId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (requestType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "request_type", requestType)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pageobject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pageobject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pageobject)));
        }

        /// <summary>
        /// Retrieve widget link Retrieve the widget link.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusId">nucleus_id</param>
        /// <param name="isBusiness">is_business (optional, default to false)</param>
        /// <param name="isMobileWebview">is_mobile_webview (optional, default to false)</param>
        /// <param name="memberId">member_id (optional)</param>
        /// <param name="messageVersion">message_version (optional)</param>
        /// <param name="mode">mode (optional, default to aggregation)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <param name="waitForFullAggregation">wait_for_full_aggregation (optional, default to true)</param>
        /// <param name="webviewUrlScheme">webview_url_scheme (optional)</param>
        /// <returns>WidgetUrlVO</returns>
        public WidgetUrlVO GetWidgetLinkUsingGet (Guid? nucleusId, bool? isBusiness = null, bool? isMobileWebview = null, string memberId = null, decimal? messageVersion = null, string mode = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusBankLinkId = null, string vendorName = null, bool? waitForFullAggregation = null, string webviewUrlScheme = null)
        {
             ApiResponse<WidgetUrlVO> localVarResponse = GetWidgetLinkUsingGetWithHttpInfo(nucleusId, isBusiness, isMobileWebview, memberId, messageVersion, mode, nucleusAggregationAccountId, nucleusBankLinkId, vendorName, waitForFullAggregation, webviewUrlScheme);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve widget link Retrieve the widget link.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusId">nucleus_id</param>
        /// <param name="isBusiness">is_business (optional, default to false)</param>
        /// <param name="isMobileWebview">is_mobile_webview (optional, default to false)</param>
        /// <param name="memberId">member_id (optional)</param>
        /// <param name="messageVersion">message_version (optional)</param>
        /// <param name="mode">mode (optional, default to aggregation)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <param name="waitForFullAggregation">wait_for_full_aggregation (optional, default to true)</param>
        /// <param name="webviewUrlScheme">webview_url_scheme (optional)</param>
        /// <returns>ApiResponse of WidgetUrlVO</returns>
        public ApiResponse< WidgetUrlVO > GetWidgetLinkUsingGetWithHttpInfo (Guid? nucleusId, bool? isBusiness = null, bool? isMobileWebview = null, string memberId = null, decimal? messageVersion = null, string mode = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusBankLinkId = null, string vendorName = null, bool? waitForFullAggregation = null, string webviewUrlScheme = null)
        {
            // verify the required parameter 'nucleusId' is set
            if (nucleusId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusId' when calling UtilsApi->GetWidgetLinkUsingGet");

            var localVarPath = "/widget_link/{nucleus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusId != null) localVarPathParams.Add("nucleus_id", this.Configuration.ApiClient.ParameterToString(nucleusId)); // path parameter
            if (isBusiness != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_business", isBusiness)); // query parameter
            if (isMobileWebview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_mobile_webview", isMobileWebview)); // query parameter
            if (memberId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_id", memberId)); // query parameter
            if (messageVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_version", messageVersion)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (nucleusAggregationAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_aggregation_account_id", nucleusAggregationAccountId)); // query parameter
            if (nucleusBankLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_bank_link_id", nucleusBankLinkId)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter
            if (waitForFullAggregation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait_for_full_aggregation", waitForFullAggregation)); // query parameter
            if (webviewUrlScheme != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "webview_url_scheme", webviewUrlScheme)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWidgetLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WidgetUrlVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WidgetUrlVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WidgetUrlVO)));
        }

        /// <summary>
        /// Retrieve widget link Retrieve the widget link.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusId">nucleus_id</param>
        /// <param name="isBusiness">is_business (optional, default to false)</param>
        /// <param name="isMobileWebview">is_mobile_webview (optional, default to false)</param>
        /// <param name="memberId">member_id (optional)</param>
        /// <param name="messageVersion">message_version (optional)</param>
        /// <param name="mode">mode (optional, default to aggregation)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <param name="waitForFullAggregation">wait_for_full_aggregation (optional, default to true)</param>
        /// <param name="webviewUrlScheme">webview_url_scheme (optional)</param>
        /// <returns>Task of WidgetUrlVO</returns>
        public async System.Threading.Tasks.Task<WidgetUrlVO> GetWidgetLinkUsingGetAsync (Guid? nucleusId, bool? isBusiness = null, bool? isMobileWebview = null, string memberId = null, decimal? messageVersion = null, string mode = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusBankLinkId = null, string vendorName = null, bool? waitForFullAggregation = null, string webviewUrlScheme = null)
        {
             ApiResponse<WidgetUrlVO> localVarResponse = await GetWidgetLinkUsingGetAsyncWithHttpInfo(nucleusId, isBusiness, isMobileWebview, memberId, messageVersion, mode, nucleusAggregationAccountId, nucleusBankLinkId, vendorName, waitForFullAggregation, webviewUrlScheme);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve widget link Retrieve the widget link.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusId">nucleus_id</param>
        /// <param name="isBusiness">is_business (optional, default to false)</param>
        /// <param name="isMobileWebview">is_mobile_webview (optional, default to false)</param>
        /// <param name="memberId">member_id (optional)</param>
        /// <param name="messageVersion">message_version (optional)</param>
        /// <param name="mode">mode (optional, default to aggregation)</param>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id (optional)</param>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <param name="waitForFullAggregation">wait_for_full_aggregation (optional, default to true)</param>
        /// <param name="webviewUrlScheme">webview_url_scheme (optional)</param>
        /// <returns>Task of ApiResponse (WidgetUrlVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WidgetUrlVO>> GetWidgetLinkUsingGetAsyncWithHttpInfo (Guid? nucleusId, bool? isBusiness = null, bool? isMobileWebview = null, string memberId = null, decimal? messageVersion = null, string mode = null, Guid? nucleusAggregationAccountId = null, Guid? nucleusBankLinkId = null, string vendorName = null, bool? waitForFullAggregation = null, string webviewUrlScheme = null)
        {
            // verify the required parameter 'nucleusId' is set
            if (nucleusId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusId' when calling UtilsApi->GetWidgetLinkUsingGet");

            var localVarPath = "/widget_link/{nucleus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusId != null) localVarPathParams.Add("nucleus_id", this.Configuration.ApiClient.ParameterToString(nucleusId)); // path parameter
            if (isBusiness != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_business", isBusiness)); // query parameter
            if (isMobileWebview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_mobile_webview", isMobileWebview)); // query parameter
            if (memberId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_id", memberId)); // query parameter
            if (messageVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_version", messageVersion)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (nucleusAggregationAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_aggregation_account_id", nucleusAggregationAccountId)); // query parameter
            if (nucleusBankLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_bank_link_id", nucleusBankLinkId)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter
            if (waitForFullAggregation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait_for_full_aggregation", waitForFullAggregation)); // query parameter
            if (webviewUrlScheme != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "webview_url_scheme", webviewUrlScheme)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWidgetLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WidgetUrlVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WidgetUrlVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WidgetUrlVO)));
        }

    }
}
