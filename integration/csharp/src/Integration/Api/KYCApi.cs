/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKYCApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Do kyc for the client.
        /// </summary>
        /// <remarks>
        /// Do kyc for the client.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kycRequestCO">kycRequestCO</param>
        /// <returns>KycResponseVo</returns>
        KycResponseVo CreateKYCUsingPost (KycRequestCO kycRequestCO);

        /// <summary>
        /// Do kyc for the client.
        /// </summary>
        /// <remarks>
        /// Do kyc for the client.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kycRequestCO">kycRequestCO</param>
        /// <returns>ApiResponse of KycResponseVo</returns>
        ApiResponse<KycResponseVo> CreateKYCUsingPostWithHttpInfo (KycRequestCO kycRequestCO);
        /// <summary>
        /// Fetch kyc_status for the given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Fetch kyc_status for the given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="kycType">kyc_type (optional, default to all)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>List&lt;KycResponseVo&gt;</returns>
        List<KycResponseVo> GetKYCStatusUsingGet (bool? getLatest = null, string kycType = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null);

        /// <summary>
        /// Fetch kyc_status for the given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Fetch kyc_status for the given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="kycType">kyc_type (optional, default to all)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>ApiResponse of List&lt;KycResponseVo&gt;</returns>
        ApiResponse<List<KycResponseVo>> GetKYCStatusUsingGetWithHttpInfo (bool? getLatest = null, string kycType = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Do kyc for the client.
        /// </summary>
        /// <remarks>
        /// Do kyc for the client.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kycRequestCO">kycRequestCO</param>
        /// <returns>Task of KycResponseVo</returns>
        System.Threading.Tasks.Task<KycResponseVo> CreateKYCUsingPostAsync (KycRequestCO kycRequestCO);

        /// <summary>
        /// Do kyc for the client.
        /// </summary>
        /// <remarks>
        /// Do kyc for the client.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kycRequestCO">kycRequestCO</param>
        /// <returns>Task of ApiResponse (KycResponseVo)</returns>
        System.Threading.Tasks.Task<ApiResponse<KycResponseVo>> CreateKYCUsingPostAsyncWithHttpInfo (KycRequestCO kycRequestCO);
        /// <summary>
        /// Fetch kyc_status for the given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Fetch kyc_status for the given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="kycType">kyc_type (optional, default to all)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>Task of List&lt;KycResponseVo&gt;</returns>
        System.Threading.Tasks.Task<List<KycResponseVo>> GetKYCStatusUsingGetAsync (bool? getLatest = null, string kycType = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null);

        /// <summary>
        /// Fetch kyc_status for the given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Fetch kyc_status for the given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="kycType">kyc_type (optional, default to all)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>Task of ApiResponse (List&lt;KycResponseVo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KycResponseVo>>> GetKYCStatusUsingGetAsyncWithHttpInfo (bool? getLatest = null, string kycType = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KYCApi : IKYCApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KYCApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KYCApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KYCApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KYCApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Do kyc for the client. Do kyc for the client.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kycRequestCO">kycRequestCO</param>
        /// <returns>KycResponseVo</returns>
        public KycResponseVo CreateKYCUsingPost (KycRequestCO kycRequestCO)
        {
             ApiResponse<KycResponseVo> localVarResponse = CreateKYCUsingPostWithHttpInfo(kycRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Do kyc for the client. Do kyc for the client.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kycRequestCO">kycRequestCO</param>
        /// <returns>ApiResponse of KycResponseVo</returns>
        public ApiResponse< KycResponseVo > CreateKYCUsingPostWithHttpInfo (KycRequestCO kycRequestCO)
        {
            // verify the required parameter 'kycRequestCO' is set
            if (kycRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'kycRequestCO' when calling KYCApi->CreateKYCUsingPost");

            var localVarPath = "/kyc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kycRequestCO != null && kycRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(kycRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = kycRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKYCUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KycResponseVo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KycResponseVo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KycResponseVo)));
        }

        /// <summary>
        /// Do kyc for the client. Do kyc for the client.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kycRequestCO">kycRequestCO</param>
        /// <returns>Task of KycResponseVo</returns>
        public async System.Threading.Tasks.Task<KycResponseVo> CreateKYCUsingPostAsync (KycRequestCO kycRequestCO)
        {
             ApiResponse<KycResponseVo> localVarResponse = await CreateKYCUsingPostAsyncWithHttpInfo(kycRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Do kyc for the client. Do kyc for the client.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kycRequestCO">kycRequestCO</param>
        /// <returns>Task of ApiResponse (KycResponseVo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KycResponseVo>> CreateKYCUsingPostAsyncWithHttpInfo (KycRequestCO kycRequestCO)
        {
            // verify the required parameter 'kycRequestCO' is set
            if (kycRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'kycRequestCO' when calling KYCApi->CreateKYCUsingPost");

            var localVarPath = "/kyc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kycRequestCO != null && kycRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(kycRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = kycRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKYCUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KycResponseVo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KycResponseVo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KycResponseVo)));
        }

        /// <summary>
        /// Fetch kyc_status for the given nucleus_client_id Fetch kyc_status for the given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="kycType">kyc_type (optional, default to all)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>List&lt;KycResponseVo&gt;</returns>
        public List<KycResponseVo> GetKYCStatusUsingGet (bool? getLatest = null, string kycType = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null)
        {
             ApiResponse<List<KycResponseVo>> localVarResponse = GetKYCStatusUsingGetWithHttpInfo(getLatest, kycType, nucleusBusinessId, nucleusClientId, product);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch kyc_status for the given nucleus_client_id Fetch kyc_status for the given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="kycType">kyc_type (optional, default to all)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>ApiResponse of List&lt;KycResponseVo&gt;</returns>
        public ApiResponse< List<KycResponseVo> > GetKYCStatusUsingGetWithHttpInfo (bool? getLatest = null, string kycType = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null)
        {

            var localVarPath = "/kyc_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (kycType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "kyc_type", kycType)); // query parameter
            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKYCStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KycResponseVo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KycResponseVo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KycResponseVo>)));
        }

        /// <summary>
        /// Fetch kyc_status for the given nucleus_client_id Fetch kyc_status for the given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="kycType">kyc_type (optional, default to all)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>Task of List&lt;KycResponseVo&gt;</returns>
        public async System.Threading.Tasks.Task<List<KycResponseVo>> GetKYCStatusUsingGetAsync (bool? getLatest = null, string kycType = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null)
        {
             ApiResponse<List<KycResponseVo>> localVarResponse = await GetKYCStatusUsingGetAsyncWithHttpInfo(getLatest, kycType, nucleusBusinessId, nucleusClientId, product);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch kyc_status for the given nucleus_client_id Fetch kyc_status for the given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="kycType">kyc_type (optional, default to all)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>Task of ApiResponse (List&lt;KycResponseVo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KycResponseVo>>> GetKYCStatusUsingGetAsyncWithHttpInfo (bool? getLatest = null, string kycType = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null)
        {

            var localVarPath = "/kyc_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (kycType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "kyc_type", kycType)); // query parameter
            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKYCStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KycResponseVo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KycResponseVo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KycResponseVo>)));
        }

    }
}
