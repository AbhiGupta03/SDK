/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKMSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an secret key
        /// </summary>
        /// <remarks>
        /// Create an secret key.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <returns>KmsConfig</returns>
        KmsConfig CreateKMSUsingPost (KmsConfig kmsConfig);

        /// <summary>
        /// Create an secret key
        /// </summary>
        /// <remarks>
        /// Create an secret key.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <returns>ApiResponse of KmsConfig</returns>
        ApiResponse<KmsConfig> CreateKMSUsingPostWithHttpInfo (KmsConfig kmsConfig);
        /// <summary>
        /// Delete an secret key value
        /// </summary>
        /// <remarks>
        /// Permanently delete an secret key value under a tenant.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns></returns>
        void DeleteKMSUsingDelete (Guid? kmsId);

        /// <summary>
        /// Delete an secret key value
        /// </summary>
        /// <remarks>
        /// Permanently delete an secret key value under a tenant.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteKMSUsingDeleteWithHttpInfo (Guid? kmsId);
        /// <summary>
        /// List all KMS Clients
        /// </summary>
        /// <remarks>
        /// Get details for all clients registered with your business.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageKmsConfig</returns>
        PageKmsConfig GetKMSAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all KMS Clients
        /// </summary>
        /// <remarks>
        /// Get details for all clients registered with your business.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageKmsConfig</returns>
        ApiResponse<PageKmsConfig> GetKMSAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an secret key value
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific value associated with a Secret key.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>KmsConfig</returns>
        KmsConfig GetKMSUsingGet (Guid? kmsId);

        /// <summary>
        /// Retrieve an secret key value
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific value associated with a Secret key.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>ApiResponse of KmsConfig</returns>
        ApiResponse<KmsConfig> GetKMSUsingGetWithHttpInfo (Guid? kmsId);
        /// <summary>
        /// Update an Key Value
        /// </summary>
        /// <remarks>
        /// Update the information for an key value.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <param name="kmsId">kms_id</param>
        /// <returns>KmsConfig</returns>
        KmsConfig UpdateKMSUsingPut (KmsConfig kmsConfig, Guid? kmsId);

        /// <summary>
        /// Update an Key Value
        /// </summary>
        /// <remarks>
        /// Update the information for an key value.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <param name="kmsId">kms_id</param>
        /// <returns>ApiResponse of KmsConfig</returns>
        ApiResponse<KmsConfig> UpdateKMSUsingPutWithHttpInfo (KmsConfig kmsConfig, Guid? kmsId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an secret key
        /// </summary>
        /// <remarks>
        /// Create an secret key.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <returns>Task of KmsConfig</returns>
        System.Threading.Tasks.Task<KmsConfig> CreateKMSUsingPostAsync (KmsConfig kmsConfig);

        /// <summary>
        /// Create an secret key
        /// </summary>
        /// <remarks>
        /// Create an secret key.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <returns>Task of ApiResponse (KmsConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<KmsConfig>> CreateKMSUsingPostAsyncWithHttpInfo (KmsConfig kmsConfig);
        /// <summary>
        /// Delete an secret key value
        /// </summary>
        /// <remarks>
        /// Permanently delete an secret key value under a tenant.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteKMSUsingDeleteAsync (Guid? kmsId);

        /// <summary>
        /// Delete an secret key value
        /// </summary>
        /// <remarks>
        /// Permanently delete an secret key value under a tenant.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKMSUsingDeleteAsyncWithHttpInfo (Guid? kmsId);
        /// <summary>
        /// List all KMS Clients
        /// </summary>
        /// <remarks>
        /// Get details for all clients registered with your business.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageKmsConfig</returns>
        System.Threading.Tasks.Task<PageKmsConfig> GetKMSAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all KMS Clients
        /// </summary>
        /// <remarks>
        /// Get details for all clients registered with your business.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageKmsConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageKmsConfig>> GetKMSAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an secret key value
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific value associated with a Secret key.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>Task of KmsConfig</returns>
        System.Threading.Tasks.Task<KmsConfig> GetKMSUsingGetAsync (Guid? kmsId);

        /// <summary>
        /// Retrieve an secret key value
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific value associated with a Secret key.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>Task of ApiResponse (KmsConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<KmsConfig>> GetKMSUsingGetAsyncWithHttpInfo (Guid? kmsId);
        /// <summary>
        /// Update an Key Value
        /// </summary>
        /// <remarks>
        /// Update the information for an key value.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <param name="kmsId">kms_id</param>
        /// <returns>Task of KmsConfig</returns>
        System.Threading.Tasks.Task<KmsConfig> UpdateKMSUsingPutAsync (KmsConfig kmsConfig, Guid? kmsId);

        /// <summary>
        /// Update an Key Value
        /// </summary>
        /// <remarks>
        /// Update the information for an key value.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <param name="kmsId">kms_id</param>
        /// <returns>Task of ApiResponse (KmsConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<KmsConfig>> UpdateKMSUsingPutAsyncWithHttpInfo (KmsConfig kmsConfig, Guid? kmsId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KMSApi : IKMSApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KMSApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KMSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KMSApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an secret key Create an secret key.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <returns>KmsConfig</returns>
        public KmsConfig CreateKMSUsingPost (KmsConfig kmsConfig)
        {
             ApiResponse<KmsConfig> localVarResponse = CreateKMSUsingPostWithHttpInfo(kmsConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an secret key Create an secret key.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <returns>ApiResponse of KmsConfig</returns>
        public ApiResponse< KmsConfig > CreateKMSUsingPostWithHttpInfo (KmsConfig kmsConfig)
        {
            // verify the required parameter 'kmsConfig' is set
            if (kmsConfig == null)
                throw new ApiException(400, "Missing required parameter 'kmsConfig' when calling KMSApi->CreateKMSUsingPost");

            var localVarPath = "/kms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kmsConfig != null && kmsConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(kmsConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = kmsConfig; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKMSUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KmsConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KmsConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KmsConfig)));
        }

        /// <summary>
        /// Create an secret key Create an secret key.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <returns>Task of KmsConfig</returns>
        public async System.Threading.Tasks.Task<KmsConfig> CreateKMSUsingPostAsync (KmsConfig kmsConfig)
        {
             ApiResponse<KmsConfig> localVarResponse = await CreateKMSUsingPostAsyncWithHttpInfo(kmsConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an secret key Create an secret key.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <returns>Task of ApiResponse (KmsConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KmsConfig>> CreateKMSUsingPostAsyncWithHttpInfo (KmsConfig kmsConfig)
        {
            // verify the required parameter 'kmsConfig' is set
            if (kmsConfig == null)
                throw new ApiException(400, "Missing required parameter 'kmsConfig' when calling KMSApi->CreateKMSUsingPost");

            var localVarPath = "/kms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kmsConfig != null && kmsConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(kmsConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = kmsConfig; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKMSUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KmsConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KmsConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KmsConfig)));
        }

        /// <summary>
        /// Delete an secret key value Permanently delete an secret key value under a tenant.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns></returns>
        public void DeleteKMSUsingDelete (Guid? kmsId)
        {
             DeleteKMSUsingDeleteWithHttpInfo(kmsId);
        }

        /// <summary>
        /// Delete an secret key value Permanently delete an secret key value under a tenant.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteKMSUsingDeleteWithHttpInfo (Guid? kmsId)
        {
            // verify the required parameter 'kmsId' is set
            if (kmsId == null)
                throw new ApiException(400, "Missing required parameter 'kmsId' when calling KMSApi->DeleteKMSUsingDelete");

            var localVarPath = "/kms/{kms_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kmsId != null) localVarPathParams.Add("kms_id", this.Configuration.ApiClient.ParameterToString(kmsId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKMSUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an secret key value Permanently delete an secret key value under a tenant.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteKMSUsingDeleteAsync (Guid? kmsId)
        {
             await DeleteKMSUsingDeleteAsyncWithHttpInfo(kmsId);

        }

        /// <summary>
        /// Delete an secret key value Permanently delete an secret key value under a tenant.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKMSUsingDeleteAsyncWithHttpInfo (Guid? kmsId)
        {
            // verify the required parameter 'kmsId' is set
            if (kmsId == null)
                throw new ApiException(400, "Missing required parameter 'kmsId' when calling KMSApi->DeleteKMSUsingDelete");

            var localVarPath = "/kms/{kms_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kmsId != null) localVarPathParams.Add("kms_id", this.Configuration.ApiClient.ParameterToString(kmsId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKMSUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all KMS Clients Get details for all clients registered with your business.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageKmsConfig</returns>
        public PageKmsConfig GetKMSAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageKmsConfig> localVarResponse = GetKMSAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all KMS Clients Get details for all clients registered with your business.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageKmsConfig</returns>
        public ApiResponse< PageKmsConfig > GetKMSAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/kms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKMSAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageKmsConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageKmsConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageKmsConfig)));
        }

        /// <summary>
        /// List all KMS Clients Get details for all clients registered with your business.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageKmsConfig</returns>
        public async System.Threading.Tasks.Task<PageKmsConfig> GetKMSAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageKmsConfig> localVarResponse = await GetKMSAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all KMS Clients Get details for all clients registered with your business.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageKmsConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageKmsConfig>> GetKMSAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/kms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKMSAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageKmsConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageKmsConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageKmsConfig)));
        }

        /// <summary>
        /// Retrieve an secret key value Retrieve the information for a specific value associated with a Secret key.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>KmsConfig</returns>
        public KmsConfig GetKMSUsingGet (Guid? kmsId)
        {
             ApiResponse<KmsConfig> localVarResponse = GetKMSUsingGetWithHttpInfo(kmsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an secret key value Retrieve the information for a specific value associated with a Secret key.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>ApiResponse of KmsConfig</returns>
        public ApiResponse< KmsConfig > GetKMSUsingGetWithHttpInfo (Guid? kmsId)
        {
            // verify the required parameter 'kmsId' is set
            if (kmsId == null)
                throw new ApiException(400, "Missing required parameter 'kmsId' when calling KMSApi->GetKMSUsingGet");

            var localVarPath = "/kms/{kms_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kmsId != null) localVarPathParams.Add("kms_id", this.Configuration.ApiClient.ParameterToString(kmsId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKMSUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KmsConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KmsConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KmsConfig)));
        }

        /// <summary>
        /// Retrieve an secret key value Retrieve the information for a specific value associated with a Secret key.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>Task of KmsConfig</returns>
        public async System.Threading.Tasks.Task<KmsConfig> GetKMSUsingGetAsync (Guid? kmsId)
        {
             ApiResponse<KmsConfig> localVarResponse = await GetKMSUsingGetAsyncWithHttpInfo(kmsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an secret key value Retrieve the information for a specific value associated with a Secret key.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsId">KMS Id</param>
        /// <returns>Task of ApiResponse (KmsConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KmsConfig>> GetKMSUsingGetAsyncWithHttpInfo (Guid? kmsId)
        {
            // verify the required parameter 'kmsId' is set
            if (kmsId == null)
                throw new ApiException(400, "Missing required parameter 'kmsId' when calling KMSApi->GetKMSUsingGet");

            var localVarPath = "/kms/{kms_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kmsId != null) localVarPathParams.Add("kms_id", this.Configuration.ApiClient.ParameterToString(kmsId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKMSUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KmsConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KmsConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KmsConfig)));
        }

        /// <summary>
        /// Update an Key Value Update the information for an key value.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <param name="kmsId">kms_id</param>
        /// <returns>KmsConfig</returns>
        public KmsConfig UpdateKMSUsingPut (KmsConfig kmsConfig, Guid? kmsId)
        {
             ApiResponse<KmsConfig> localVarResponse = UpdateKMSUsingPutWithHttpInfo(kmsConfig, kmsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Key Value Update the information for an key value.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <param name="kmsId">kms_id</param>
        /// <returns>ApiResponse of KmsConfig</returns>
        public ApiResponse< KmsConfig > UpdateKMSUsingPutWithHttpInfo (KmsConfig kmsConfig, Guid? kmsId)
        {
            // verify the required parameter 'kmsConfig' is set
            if (kmsConfig == null)
                throw new ApiException(400, "Missing required parameter 'kmsConfig' when calling KMSApi->UpdateKMSUsingPut");
            // verify the required parameter 'kmsId' is set
            if (kmsId == null)
                throw new ApiException(400, "Missing required parameter 'kmsId' when calling KMSApi->UpdateKMSUsingPut");

            var localVarPath = "/kms/{kms_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kmsId != null) localVarPathParams.Add("kms_id", this.Configuration.ApiClient.ParameterToString(kmsId)); // path parameter
            if (kmsConfig != null && kmsConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(kmsConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = kmsConfig; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKMSUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KmsConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KmsConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KmsConfig)));
        }

        /// <summary>
        /// Update an Key Value Update the information for an key value.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <param name="kmsId">kms_id</param>
        /// <returns>Task of KmsConfig</returns>
        public async System.Threading.Tasks.Task<KmsConfig> UpdateKMSUsingPutAsync (KmsConfig kmsConfig, Guid? kmsId)
        {
             ApiResponse<KmsConfig> localVarResponse = await UpdateKMSUsingPutAsyncWithHttpInfo(kmsConfig, kmsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Key Value Update the information for an key value.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kmsConfig">kmsConfig</param>
        /// <param name="kmsId">kms_id</param>
        /// <returns>Task of ApiResponse (KmsConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KmsConfig>> UpdateKMSUsingPutAsyncWithHttpInfo (KmsConfig kmsConfig, Guid? kmsId)
        {
            // verify the required parameter 'kmsConfig' is set
            if (kmsConfig == null)
                throw new ApiException(400, "Missing required parameter 'kmsConfig' when calling KMSApi->UpdateKMSUsingPut");
            // verify the required parameter 'kmsId' is set
            if (kmsId == null)
                throw new ApiException(400, "Missing required parameter 'kmsId' when calling KMSApi->UpdateKMSUsingPut");

            var localVarPath = "/kms/{kms_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (kmsId != null) localVarPathParams.Add("kms_id", this.Configuration.ApiClient.ParameterToString(kmsId)); // path parameter
            if (kmsConfig != null && kmsConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(kmsConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = kmsConfig; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKMSUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KmsConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KmsConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KmsConfig)));
        }

    }
}
