/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBaasApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create a Baas account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasAccountCO">baasAccountCO</param>
        /// <returns>BaasAccountVO</returns>
        BaasAccountVO CreateBaasAccountUsingPost (BaasAccountCO baasAccountCO);

        /// <summary>
        /// create a Baas account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasAccountCO">baasAccountCO</param>
        /// <returns>ApiResponse of BaasAccountVO</returns>
        ApiResponse<BaasAccountVO> CreateBaasAccountUsingPostWithHttpInfo (BaasAccountCO baasAccountCO);
        /// <summary>
        /// Create a Baas Business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasBusinessCO">baasBusinessCO</param>
        /// <returns>BaasBusinessVO</returns>
        BaasBusinessVO CreateBaasBusinessUsingPost (CreateBaasBusinessCO baasBusinessCO);

        /// <summary>
        /// Create a Baas Business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasBusinessCO">baasBusinessCO</param>
        /// <returns>ApiResponse of BaasBusinessVO</returns>
        ApiResponse<BaasBusinessVO> CreateBaasBusinessUsingPostWithHttpInfo (CreateBaasBusinessCO baasBusinessCO);
        /// <summary>
        /// Create a Baas Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasClientCO">baasClientCO</param>
        /// <returns>BaasClientVO</returns>
        BaasClientVO CreateBaasClientUsingPost (CreateBaasClientCO baasClientCO);

        /// <summary>
        /// Create a Baas Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasClientCO">baasClientCO</param>
        /// <returns>ApiResponse of BaasClientVO</returns>
        ApiResponse<BaasClientVO> CreateBaasClientUsingPostWithHttpInfo (CreateBaasClientCO baasClientCO);
        /// <summary>
        /// create a Baas subaccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasSubAccountCO">baasSubAccountCO</param>
        /// <returns>BaasSubAccountVO</returns>
        BaasSubAccountVO CreateBaasSubAccountUsingPost (BaasSubAccountCO baasSubAccountCO);

        /// <summary>
        /// create a Baas subaccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasSubAccountCO">baasSubAccountCO</param>
        /// <returns>ApiResponse of BaasSubAccountVO</returns>
        ApiResponse<BaasSubAccountVO> CreateBaasSubAccountUsingPostWithHttpInfo (BaasSubAccountCO baasSubAccountCO);
        /// <summary>
        /// Get a Baas account statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type (optional)</param>
        /// <returns>BaasStatementsVO</returns>
        BaasStatementsVO GetBaasAccountStatementUsingGet (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType = null);

        /// <summary>
        /// Get a Baas account statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type (optional)</param>
        /// <returns>ApiResponse of BaasStatementsVO</returns>
        ApiResponse<BaasStatementsVO> GetBaasAccountStatementUsingGetWithHttpInfo (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType = null);
        /// <summary>
        /// Get a Baas portfolio balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>BaasBalanceVO</returns>
        BaasBalanceVO GetBaasPortfolioBalanceUsingGet (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get a Baas portfolio balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of BaasBalanceVO</returns>
        ApiResponse<BaasBalanceVO> GetBaasPortfolioBalanceUsingGetWithHttpInfo (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get a Baas portfolio transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>BaasTransactionsVO</returns>
        BaasTransactionsVO GetBaasPortfolioTransactionUsingGet (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get a Baas portfolio transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of BaasTransactionsVO</returns>
        ApiResponse<BaasTransactionsVO> GetBaasPortfolioTransactionUsingGetWithHttpInfo (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Update a Baas business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <param name="baasBusinessCO">baasBusinessCO (optional)</param>
        /// <returns>BaasBusinessVO</returns>
        BaasBusinessVO UpdateBaasBusinessUsingPut (Guid? nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO = null);

        /// <summary>
        /// Update a Baas business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <param name="baasBusinessCO">baasBusinessCO (optional)</param>
        /// <returns>ApiResponse of BaasBusinessVO</returns>
        ApiResponse<BaasBusinessVO> UpdateBaasBusinessUsingPutWithHttpInfo (Guid? nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO = null);
        /// <summary>
        /// Update a Baas client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="baasClientCO">baasClientCO (optional)</param>
        /// <returns>BaasClientVO</returns>
        BaasClientVO UpdateBaasClientUsingPut (Guid? nucleusClientId, UpdateBaasClientCO baasClientCO = null);

        /// <summary>
        /// Update a Baas client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="baasClientCO">baasClientCO (optional)</param>
        /// <returns>ApiResponse of BaasClientVO</returns>
        ApiResponse<BaasClientVO> UpdateBaasClientUsingPutWithHttpInfo (Guid? nucleusClientId, UpdateBaasClientCO baasClientCO = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create a Baas account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasAccountCO">baasAccountCO</param>
        /// <returns>Task of BaasAccountVO</returns>
        System.Threading.Tasks.Task<BaasAccountVO> CreateBaasAccountUsingPostAsync (BaasAccountCO baasAccountCO);

        /// <summary>
        /// create a Baas account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasAccountCO">baasAccountCO</param>
        /// <returns>Task of ApiResponse (BaasAccountVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasAccountVO>> CreateBaasAccountUsingPostAsyncWithHttpInfo (BaasAccountCO baasAccountCO);
        /// <summary>
        /// Create a Baas Business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasBusinessCO">baasBusinessCO</param>
        /// <returns>Task of BaasBusinessVO</returns>
        System.Threading.Tasks.Task<BaasBusinessVO> CreateBaasBusinessUsingPostAsync (CreateBaasBusinessCO baasBusinessCO);

        /// <summary>
        /// Create a Baas Business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasBusinessCO">baasBusinessCO</param>
        /// <returns>Task of ApiResponse (BaasBusinessVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasBusinessVO>> CreateBaasBusinessUsingPostAsyncWithHttpInfo (CreateBaasBusinessCO baasBusinessCO);
        /// <summary>
        /// Create a Baas Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasClientCO">baasClientCO</param>
        /// <returns>Task of BaasClientVO</returns>
        System.Threading.Tasks.Task<BaasClientVO> CreateBaasClientUsingPostAsync (CreateBaasClientCO baasClientCO);

        /// <summary>
        /// Create a Baas Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasClientCO">baasClientCO</param>
        /// <returns>Task of ApiResponse (BaasClientVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasClientVO>> CreateBaasClientUsingPostAsyncWithHttpInfo (CreateBaasClientCO baasClientCO);
        /// <summary>
        /// create a Baas subaccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasSubAccountCO">baasSubAccountCO</param>
        /// <returns>Task of BaasSubAccountVO</returns>
        System.Threading.Tasks.Task<BaasSubAccountVO> CreateBaasSubAccountUsingPostAsync (BaasSubAccountCO baasSubAccountCO);

        /// <summary>
        /// create a Baas subaccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasSubAccountCO">baasSubAccountCO</param>
        /// <returns>Task of ApiResponse (BaasSubAccountVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasSubAccountVO>> CreateBaasSubAccountUsingPostAsyncWithHttpInfo (BaasSubAccountCO baasSubAccountCO);
        /// <summary>
        /// Get a Baas account statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type (optional)</param>
        /// <returns>Task of BaasStatementsVO</returns>
        System.Threading.Tasks.Task<BaasStatementsVO> GetBaasAccountStatementUsingGetAsync (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType = null);

        /// <summary>
        /// Get a Baas account statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type (optional)</param>
        /// <returns>Task of ApiResponse (BaasStatementsVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasStatementsVO>> GetBaasAccountStatementUsingGetAsyncWithHttpInfo (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType = null);
        /// <summary>
        /// Get a Baas portfolio balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of BaasBalanceVO</returns>
        System.Threading.Tasks.Task<BaasBalanceVO> GetBaasPortfolioBalanceUsingGetAsync (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get a Baas portfolio balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (BaasBalanceVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasBalanceVO>> GetBaasPortfolioBalanceUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get a Baas portfolio transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of BaasTransactionsVO</returns>
        System.Threading.Tasks.Task<BaasTransactionsVO> GetBaasPortfolioTransactionUsingGetAsync (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get a Baas portfolio transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (BaasTransactionsVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasTransactionsVO>> GetBaasPortfolioTransactionUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Update a Baas business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <param name="baasBusinessCO">baasBusinessCO (optional)</param>
        /// <returns>Task of BaasBusinessVO</returns>
        System.Threading.Tasks.Task<BaasBusinessVO> UpdateBaasBusinessUsingPutAsync (Guid? nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO = null);

        /// <summary>
        /// Update a Baas business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <param name="baasBusinessCO">baasBusinessCO (optional)</param>
        /// <returns>Task of ApiResponse (BaasBusinessVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasBusinessVO>> UpdateBaasBusinessUsingPutAsyncWithHttpInfo (Guid? nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO = null);
        /// <summary>
        /// Update a Baas client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="baasClientCO">baasClientCO (optional)</param>
        /// <returns>Task of BaasClientVO</returns>
        System.Threading.Tasks.Task<BaasClientVO> UpdateBaasClientUsingPutAsync (Guid? nucleusClientId, UpdateBaasClientCO baasClientCO = null);

        /// <summary>
        /// Update a Baas client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="baasClientCO">baasClientCO (optional)</param>
        /// <returns>Task of ApiResponse (BaasClientVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaasClientVO>> UpdateBaasClientUsingPutAsyncWithHttpInfo (Guid? nucleusClientId, UpdateBaasClientCO baasClientCO = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BaasApi : IBaasApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BaasApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BaasApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaasApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BaasApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create a Baas account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasAccountCO">baasAccountCO</param>
        /// <returns>BaasAccountVO</returns>
        public BaasAccountVO CreateBaasAccountUsingPost (BaasAccountCO baasAccountCO)
        {
             ApiResponse<BaasAccountVO> localVarResponse = CreateBaasAccountUsingPostWithHttpInfo(baasAccountCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a Baas account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasAccountCO">baasAccountCO</param>
        /// <returns>ApiResponse of BaasAccountVO</returns>
        public ApiResponse< BaasAccountVO > CreateBaasAccountUsingPostWithHttpInfo (BaasAccountCO baasAccountCO)
        {
            // verify the required parameter 'baasAccountCO' is set
            if (baasAccountCO == null)
                throw new ApiException(400, "Missing required parameter 'baasAccountCO' when calling BaasApi->CreateBaasAccountUsingPost");

            var localVarPath = "/baas/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (baasAccountCO != null && baasAccountCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasAccountCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasAccountCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBaasAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasAccountVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasAccountVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasAccountVO)));
        }

        /// <summary>
        /// create a Baas account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasAccountCO">baasAccountCO</param>
        /// <returns>Task of BaasAccountVO</returns>
        public async System.Threading.Tasks.Task<BaasAccountVO> CreateBaasAccountUsingPostAsync (BaasAccountCO baasAccountCO)
        {
             ApiResponse<BaasAccountVO> localVarResponse = await CreateBaasAccountUsingPostAsyncWithHttpInfo(baasAccountCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a Baas account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasAccountCO">baasAccountCO</param>
        /// <returns>Task of ApiResponse (BaasAccountVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasAccountVO>> CreateBaasAccountUsingPostAsyncWithHttpInfo (BaasAccountCO baasAccountCO)
        {
            // verify the required parameter 'baasAccountCO' is set
            if (baasAccountCO == null)
                throw new ApiException(400, "Missing required parameter 'baasAccountCO' when calling BaasApi->CreateBaasAccountUsingPost");

            var localVarPath = "/baas/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (baasAccountCO != null && baasAccountCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasAccountCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasAccountCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBaasAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasAccountVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasAccountVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasAccountVO)));
        }

        /// <summary>
        /// Create a Baas Business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasBusinessCO">baasBusinessCO</param>
        /// <returns>BaasBusinessVO</returns>
        public BaasBusinessVO CreateBaasBusinessUsingPost (CreateBaasBusinessCO baasBusinessCO)
        {
             ApiResponse<BaasBusinessVO> localVarResponse = CreateBaasBusinessUsingPostWithHttpInfo(baasBusinessCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Baas Business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasBusinessCO">baasBusinessCO</param>
        /// <returns>ApiResponse of BaasBusinessVO</returns>
        public ApiResponse< BaasBusinessVO > CreateBaasBusinessUsingPostWithHttpInfo (CreateBaasBusinessCO baasBusinessCO)
        {
            // verify the required parameter 'baasBusinessCO' is set
            if (baasBusinessCO == null)
                throw new ApiException(400, "Missing required parameter 'baasBusinessCO' when calling BaasApi->CreateBaasBusinessUsingPost");

            var localVarPath = "/baas/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (baasBusinessCO != null && baasBusinessCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasBusinessCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasBusinessCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBaasBusinessUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasBusinessVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasBusinessVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasBusinessVO)));
        }

        /// <summary>
        /// Create a Baas Business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasBusinessCO">baasBusinessCO</param>
        /// <returns>Task of BaasBusinessVO</returns>
        public async System.Threading.Tasks.Task<BaasBusinessVO> CreateBaasBusinessUsingPostAsync (CreateBaasBusinessCO baasBusinessCO)
        {
             ApiResponse<BaasBusinessVO> localVarResponse = await CreateBaasBusinessUsingPostAsyncWithHttpInfo(baasBusinessCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Baas Business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasBusinessCO">baasBusinessCO</param>
        /// <returns>Task of ApiResponse (BaasBusinessVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasBusinessVO>> CreateBaasBusinessUsingPostAsyncWithHttpInfo (CreateBaasBusinessCO baasBusinessCO)
        {
            // verify the required parameter 'baasBusinessCO' is set
            if (baasBusinessCO == null)
                throw new ApiException(400, "Missing required parameter 'baasBusinessCO' when calling BaasApi->CreateBaasBusinessUsingPost");

            var localVarPath = "/baas/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (baasBusinessCO != null && baasBusinessCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasBusinessCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasBusinessCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBaasBusinessUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasBusinessVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasBusinessVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasBusinessVO)));
        }

        /// <summary>
        /// Create a Baas Client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasClientCO">baasClientCO</param>
        /// <returns>BaasClientVO</returns>
        public BaasClientVO CreateBaasClientUsingPost (CreateBaasClientCO baasClientCO)
        {
             ApiResponse<BaasClientVO> localVarResponse = CreateBaasClientUsingPostWithHttpInfo(baasClientCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Baas Client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasClientCO">baasClientCO</param>
        /// <returns>ApiResponse of BaasClientVO</returns>
        public ApiResponse< BaasClientVO > CreateBaasClientUsingPostWithHttpInfo (CreateBaasClientCO baasClientCO)
        {
            // verify the required parameter 'baasClientCO' is set
            if (baasClientCO == null)
                throw new ApiException(400, "Missing required parameter 'baasClientCO' when calling BaasApi->CreateBaasClientUsingPost");

            var localVarPath = "/baas/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (baasClientCO != null && baasClientCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasClientCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasClientCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBaasClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasClientVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasClientVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasClientVO)));
        }

        /// <summary>
        /// Create a Baas Client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasClientCO">baasClientCO</param>
        /// <returns>Task of BaasClientVO</returns>
        public async System.Threading.Tasks.Task<BaasClientVO> CreateBaasClientUsingPostAsync (CreateBaasClientCO baasClientCO)
        {
             ApiResponse<BaasClientVO> localVarResponse = await CreateBaasClientUsingPostAsyncWithHttpInfo(baasClientCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Baas Client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasClientCO">baasClientCO</param>
        /// <returns>Task of ApiResponse (BaasClientVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasClientVO>> CreateBaasClientUsingPostAsyncWithHttpInfo (CreateBaasClientCO baasClientCO)
        {
            // verify the required parameter 'baasClientCO' is set
            if (baasClientCO == null)
                throw new ApiException(400, "Missing required parameter 'baasClientCO' when calling BaasApi->CreateBaasClientUsingPost");

            var localVarPath = "/baas/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (baasClientCO != null && baasClientCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasClientCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasClientCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBaasClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasClientVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasClientVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasClientVO)));
        }

        /// <summary>
        /// create a Baas subaccount 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasSubAccountCO">baasSubAccountCO</param>
        /// <returns>BaasSubAccountVO</returns>
        public BaasSubAccountVO CreateBaasSubAccountUsingPost (BaasSubAccountCO baasSubAccountCO)
        {
             ApiResponse<BaasSubAccountVO> localVarResponse = CreateBaasSubAccountUsingPostWithHttpInfo(baasSubAccountCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a Baas subaccount 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasSubAccountCO">baasSubAccountCO</param>
        /// <returns>ApiResponse of BaasSubAccountVO</returns>
        public ApiResponse< BaasSubAccountVO > CreateBaasSubAccountUsingPostWithHttpInfo (BaasSubAccountCO baasSubAccountCO)
        {
            // verify the required parameter 'baasSubAccountCO' is set
            if (baasSubAccountCO == null)
                throw new ApiException(400, "Missing required parameter 'baasSubAccountCO' when calling BaasApi->CreateBaasSubAccountUsingPost");

            var localVarPath = "/baas/subaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (baasSubAccountCO != null && baasSubAccountCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasSubAccountCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasSubAccountCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBaasSubAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasSubAccountVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasSubAccountVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasSubAccountVO)));
        }

        /// <summary>
        /// create a Baas subaccount 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasSubAccountCO">baasSubAccountCO</param>
        /// <returns>Task of BaasSubAccountVO</returns>
        public async System.Threading.Tasks.Task<BaasSubAccountVO> CreateBaasSubAccountUsingPostAsync (BaasSubAccountCO baasSubAccountCO)
        {
             ApiResponse<BaasSubAccountVO> localVarResponse = await CreateBaasSubAccountUsingPostAsyncWithHttpInfo(baasSubAccountCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a Baas subaccount 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baasSubAccountCO">baasSubAccountCO</param>
        /// <returns>Task of ApiResponse (BaasSubAccountVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasSubAccountVO>> CreateBaasSubAccountUsingPostAsyncWithHttpInfo (BaasSubAccountCO baasSubAccountCO)
        {
            // verify the required parameter 'baasSubAccountCO' is set
            if (baasSubAccountCO == null)
                throw new ApiException(400, "Missing required parameter 'baasSubAccountCO' when calling BaasApi->CreateBaasSubAccountUsingPost");

            var localVarPath = "/baas/subaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (baasSubAccountCO != null && baasSubAccountCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasSubAccountCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasSubAccountCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBaasSubAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasSubAccountVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasSubAccountVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasSubAccountVO)));
        }

        /// <summary>
        /// Get a Baas account statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type (optional)</param>
        /// <returns>BaasStatementsVO</returns>
        public BaasStatementsVO GetBaasAccountStatementUsingGet (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType = null)
        {
             ApiResponse<BaasStatementsVO> localVarResponse = GetBaasAccountStatementUsingGetWithHttpInfo(endDate, nucleusAccountId, startDate, statementType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Baas account statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type (optional)</param>
        /// <returns>ApiResponse of BaasStatementsVO</returns>
        public ApiResponse< BaasStatementsVO > GetBaasAccountStatementUsingGetWithHttpInfo (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType = null)
        {
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling BaasApi->GetBaasAccountStatementUsingGet");
            // verify the required parameter 'nucleusAccountId' is set
            if (nucleusAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAccountId' when calling BaasApi->GetBaasAccountStatementUsingGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling BaasApi->GetBaasAccountStatementUsingGet");

            var localVarPath = "/baas/statement/{nucleus_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusAccountId != null) localVarPathParams.Add("nucleus_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAccountId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (statementType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statement_type", statementType)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBaasAccountStatementUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasStatementsVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasStatementsVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasStatementsVO)));
        }

        /// <summary>
        /// Get a Baas account statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type (optional)</param>
        /// <returns>Task of BaasStatementsVO</returns>
        public async System.Threading.Tasks.Task<BaasStatementsVO> GetBaasAccountStatementUsingGetAsync (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType = null)
        {
             ApiResponse<BaasStatementsVO> localVarResponse = await GetBaasAccountStatementUsingGetAsyncWithHttpInfo(endDate, nucleusAccountId, startDate, statementType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Baas account statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type (optional)</param>
        /// <returns>Task of ApiResponse (BaasStatementsVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasStatementsVO>> GetBaasAccountStatementUsingGetAsyncWithHttpInfo (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType = null)
        {
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling BaasApi->GetBaasAccountStatementUsingGet");
            // verify the required parameter 'nucleusAccountId' is set
            if (nucleusAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAccountId' when calling BaasApi->GetBaasAccountStatementUsingGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling BaasApi->GetBaasAccountStatementUsingGet");

            var localVarPath = "/baas/statement/{nucleus_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusAccountId != null) localVarPathParams.Add("nucleus_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAccountId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (statementType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statement_type", statementType)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBaasAccountStatementUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasStatementsVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasStatementsVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasStatementsVO)));
        }

        /// <summary>
        /// Get a Baas portfolio balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>BaasBalanceVO</returns>
        public BaasBalanceVO GetBaasPortfolioBalanceUsingGet (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<BaasBalanceVO> localVarResponse = GetBaasPortfolioBalanceUsingGetWithHttpInfo(nucleusPortfolioId, endDate, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Baas portfolio balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of BaasBalanceVO</returns>
        public ApiResponse< BaasBalanceVO > GetBaasPortfolioBalanceUsingGetWithHttpInfo (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BaasApi->GetBaasPortfolioBalanceUsingGet");

            var localVarPath = "/baas/balance/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBaasPortfolioBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasBalanceVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasBalanceVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasBalanceVO)));
        }

        /// <summary>
        /// Get a Baas portfolio balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of BaasBalanceVO</returns>
        public async System.Threading.Tasks.Task<BaasBalanceVO> GetBaasPortfolioBalanceUsingGetAsync (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<BaasBalanceVO> localVarResponse = await GetBaasPortfolioBalanceUsingGetAsyncWithHttpInfo(nucleusPortfolioId, endDate, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Baas portfolio balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (BaasBalanceVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasBalanceVO>> GetBaasPortfolioBalanceUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BaasApi->GetBaasPortfolioBalanceUsingGet");

            var localVarPath = "/baas/balance/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBaasPortfolioBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasBalanceVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasBalanceVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasBalanceVO)));
        }

        /// <summary>
        /// Get a Baas portfolio transaction 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>BaasTransactionsVO</returns>
        public BaasTransactionsVO GetBaasPortfolioTransactionUsingGet (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<BaasTransactionsVO> localVarResponse = GetBaasPortfolioTransactionUsingGetWithHttpInfo(nucleusPortfolioId, endDate, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Baas portfolio transaction 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of BaasTransactionsVO</returns>
        public ApiResponse< BaasTransactionsVO > GetBaasPortfolioTransactionUsingGetWithHttpInfo (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BaasApi->GetBaasPortfolioTransactionUsingGet");

            var localVarPath = "/baas/transaction/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBaasPortfolioTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasTransactionsVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasTransactionsVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasTransactionsVO)));
        }

        /// <summary>
        /// Get a Baas portfolio transaction 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of BaasTransactionsVO</returns>
        public async System.Threading.Tasks.Task<BaasTransactionsVO> GetBaasPortfolioTransactionUsingGetAsync (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<BaasTransactionsVO> localVarResponse = await GetBaasPortfolioTransactionUsingGetAsyncWithHttpInfo(nucleusPortfolioId, endDate, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Baas portfolio transaction 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (BaasTransactionsVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasTransactionsVO>> GetBaasPortfolioTransactionUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BaasApi->GetBaasPortfolioTransactionUsingGet");

            var localVarPath = "/baas/transaction/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBaasPortfolioTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasTransactionsVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasTransactionsVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasTransactionsVO)));
        }

        /// <summary>
        /// Update a Baas business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <param name="baasBusinessCO">baasBusinessCO (optional)</param>
        /// <returns>BaasBusinessVO</returns>
        public BaasBusinessVO UpdateBaasBusinessUsingPut (Guid? nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO = null)
        {
             ApiResponse<BaasBusinessVO> localVarResponse = UpdateBaasBusinessUsingPutWithHttpInfo(nucleusBusinessId, baasBusinessCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Baas business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <param name="baasBusinessCO">baasBusinessCO (optional)</param>
        /// <returns>ApiResponse of BaasBusinessVO</returns>
        public ApiResponse< BaasBusinessVO > UpdateBaasBusinessUsingPutWithHttpInfo (Guid? nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO = null)
        {
            // verify the required parameter 'nucleusBusinessId' is set
            if (nucleusBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBusinessId' when calling BaasApi->UpdateBaasBusinessUsingPut");

            var localVarPath = "/baas/business/{nucleus_business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBusinessId != null) localVarPathParams.Add("nucleus_business_id", this.Configuration.ApiClient.ParameterToString(nucleusBusinessId)); // path parameter
            if (baasBusinessCO != null && baasBusinessCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasBusinessCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasBusinessCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBaasBusinessUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasBusinessVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasBusinessVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasBusinessVO)));
        }

        /// <summary>
        /// Update a Baas business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <param name="baasBusinessCO">baasBusinessCO (optional)</param>
        /// <returns>Task of BaasBusinessVO</returns>
        public async System.Threading.Tasks.Task<BaasBusinessVO> UpdateBaasBusinessUsingPutAsync (Guid? nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO = null)
        {
             ApiResponse<BaasBusinessVO> localVarResponse = await UpdateBaasBusinessUsingPutAsyncWithHttpInfo(nucleusBusinessId, baasBusinessCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Baas business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <param name="baasBusinessCO">baasBusinessCO (optional)</param>
        /// <returns>Task of ApiResponse (BaasBusinessVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasBusinessVO>> UpdateBaasBusinessUsingPutAsyncWithHttpInfo (Guid? nucleusBusinessId, UpdateBaasBusinessCO baasBusinessCO = null)
        {
            // verify the required parameter 'nucleusBusinessId' is set
            if (nucleusBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBusinessId' when calling BaasApi->UpdateBaasBusinessUsingPut");

            var localVarPath = "/baas/business/{nucleus_business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBusinessId != null) localVarPathParams.Add("nucleus_business_id", this.Configuration.ApiClient.ParameterToString(nucleusBusinessId)); // path parameter
            if (baasBusinessCO != null && baasBusinessCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasBusinessCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasBusinessCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBaasBusinessUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasBusinessVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasBusinessVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasBusinessVO)));
        }

        /// <summary>
        /// Update a Baas client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="baasClientCO">baasClientCO (optional)</param>
        /// <returns>BaasClientVO</returns>
        public BaasClientVO UpdateBaasClientUsingPut (Guid? nucleusClientId, UpdateBaasClientCO baasClientCO = null)
        {
             ApiResponse<BaasClientVO> localVarResponse = UpdateBaasClientUsingPutWithHttpInfo(nucleusClientId, baasClientCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Baas client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="baasClientCO">baasClientCO (optional)</param>
        /// <returns>ApiResponse of BaasClientVO</returns>
        public ApiResponse< BaasClientVO > UpdateBaasClientUsingPutWithHttpInfo (Guid? nucleusClientId, UpdateBaasClientCO baasClientCO = null)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling BaasApi->UpdateBaasClientUsingPut");

            var localVarPath = "/baas/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter
            if (baasClientCO != null && baasClientCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasClientCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasClientCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBaasClientUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasClientVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasClientVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasClientVO)));
        }

        /// <summary>
        /// Update a Baas client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="baasClientCO">baasClientCO (optional)</param>
        /// <returns>Task of BaasClientVO</returns>
        public async System.Threading.Tasks.Task<BaasClientVO> UpdateBaasClientUsingPutAsync (Guid? nucleusClientId, UpdateBaasClientCO baasClientCO = null)
        {
             ApiResponse<BaasClientVO> localVarResponse = await UpdateBaasClientUsingPutAsyncWithHttpInfo(nucleusClientId, baasClientCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Baas client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="baasClientCO">baasClientCO (optional)</param>
        /// <returns>Task of ApiResponse (BaasClientVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaasClientVO>> UpdateBaasClientUsingPutAsyncWithHttpInfo (Guid? nucleusClientId, UpdateBaasClientCO baasClientCO = null)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling BaasApi->UpdateBaasClientUsingPut");

            var localVarPath = "/baas/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter
            if (baasClientCO != null && baasClientCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baasClientCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baasClientCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBaasClientUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaasClientVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaasClientVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaasClientVO)));
        }

    }
}
