/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO CreateOrUpdateAccountingBillPayment (Guid? nucleusInvoiceId);

        /// <summary>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> CreateOrUpdateAccountingBillPaymentWithHttpInfo (Guid? nucleusInvoiceId);
        /// <summary>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO CreateOrUpdateAccountingBills (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null);

        /// <summary>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> CreateOrUpdateAccountingBillsWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null);
        /// <summary>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO CreateOrUpdateAccountingCustomer (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null);

        /// <summary>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> CreateOrUpdateAccountingCustomerWithHttpInfo (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null);
        /// <summary>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO CreateOrUpdateAccountingCustomerRevenue (Guid? nucleusContactId, DateTime? startDate, string accountingMethod = null, DateTime? endDate = null);

        /// <summary>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> CreateOrUpdateAccountingCustomerRevenueWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, string accountingMethod = null, DateTime? endDate = null);
        /// <summary>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO CreateOrUpdateAccountingInvoice (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null);

        /// <summary>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> CreateOrUpdateAccountingInvoiceWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null);
        /// <summary>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO CreateOrUpdateAccountingInvoicePayment (Guid? nucleusInvoiceId);

        /// <summary>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> CreateOrUpdateAccountingInvoicePaymentWithHttpInfo (Guid? nucleusInvoiceId);
        /// <summary>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO CreateOrUpdateAccountingSupplier (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null);

        /// <summary>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> CreateOrUpdateAccountingSupplierWithHttpInfo (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null);
        /// <summary>
        /// Permanently delete relation with particular accounting vendor.
        /// </summary>
        /// <remarks>
        /// Permanently delete relation with particular accounting vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteAccountingVendorAccessConfigIsActiveById (Guid? id);

        /// <summary>
        /// Permanently delete relation with particular accounting vendor.
        /// </summary>
        /// <remarks>
        /// Permanently delete relation with particular accounting vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountingVendorAccessConfigIsActiveByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// Get accounting stats from financial statements at the vendor for the business provided
        /// </summary>
        /// <remarks>
        /// Get accounting stats from financial statements at the vendor for the business provided
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="periodLength">period_length (optional)</param>
        /// <param name="periodMonth">period_month (optional)</param>
        /// <param name="periodQuarter">period_quarter (optional)</param>
        /// <param name="periodType">period_type (optional)</param>
        /// <param name="periodYear">period_year (optional)</param>
        /// <param name="report">report (optional)</param>
        /// <param name="statementDate">statement_date (optional)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO GetAccountingStats (string accountingMethod = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string periodLength = null, int? periodMonth = null, int? periodQuarter = null, string periodType = null, int? periodYear = null, string report = null, DateTime? statementDate = null);

        /// <summary>
        /// Get accounting stats from financial statements at the vendor for the business provided
        /// </summary>
        /// <remarks>
        /// Get accounting stats from financial statements at the vendor for the business provided
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="periodLength">period_length (optional)</param>
        /// <param name="periodMonth">period_month (optional)</param>
        /// <param name="periodQuarter">period_quarter (optional)</param>
        /// <param name="periodType">period_type (optional)</param>
        /// <param name="periodYear">period_year (optional)</param>
        /// <param name="report">report (optional)</param>
        /// <param name="statementDate">statement_date (optional)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> GetAccountingStatsWithHttpInfo (string accountingMethod = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string periodLength = null, int? periodMonth = null, int? periodQuarter = null, string periodType = null, int? periodYear = null, string report = null, DateTime? statementDate = null);
        /// <summary>
        /// Get Accounting Vendor Config
        /// </summary>
        /// <remarks>
        /// Get Accounting vendor config information with its status.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;VendorAccessConfigVO&gt;</returns>
        List<VendorAccessConfigVO> GetAccountingVendorInfoUsingClientId (Guid? nucleusClientId);

        /// <summary>
        /// Get Accounting Vendor Config
        /// </summary>
        /// <remarks>
        /// Get Accounting vendor config information with its status.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;VendorAccessConfigVO&gt;</returns>
        ApiResponse<List<VendorAccessConfigVO>> GetAccountingVendorInfoUsingClientIdWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Update bill in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Update bill in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO UpdateAccountingBill (Guid? nucleusInvoiceId);

        /// <summary>
        /// Update bill in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Update bill in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> UpdateAccountingBillWithHttpInfo (Guid? nucleusInvoiceId);
        /// <summary>
        /// Update customer in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update customer in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO UpdateAccountingCustomer (Guid? nucleusContactId);

        /// <summary>
        /// Update customer in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update customer in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> UpdateAccountingCustomerWithHttpInfo (Guid? nucleusContactId);
        /// <summary>
        /// Update invoice in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Update invoice in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO UpdateAccountingInvoice (Guid? nucleusInvoiceId);

        /// <summary>
        /// Update invoice in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Update invoice in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> UpdateAccountingInvoiceWithHttpInfo (Guid? nucleusInvoiceId);
        /// <summary>
        /// Update supplier in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update supplier in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        AccountingFinalResponseVO UpdateAccountingSupplier (Guid? nucleusContactId);

        /// <summary>
        /// Update supplier in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update supplier in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        ApiResponse<AccountingFinalResponseVO> UpdateAccountingSupplierWithHttpInfo (Guid? nucleusContactId);
        /// <summary>
        /// Enable/Disable relation with particular accounting vendor.
        /// </summary>
        /// <remarks>
        /// Enable/Disable link with particular accounting vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="isActive">is_active</param>
        /// <returns>VendorAccessConfigVO</returns>
        VendorAccessConfigVO UpdateAccountingVendorAccessConfigIsActiveById (Guid? id, bool? isActive);

        /// <summary>
        /// Enable/Disable relation with particular accounting vendor.
        /// </summary>
        /// <remarks>
        /// Enable/Disable link with particular accounting vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="isActive">is_active</param>
        /// <returns>ApiResponse of VendorAccessConfigVO</returns>
        ApiResponse<VendorAccessConfigVO> UpdateAccountingVendorAccessConfigIsActiveByIdWithHttpInfo (Guid? id, bool? isActive);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingBillPaymentAsync (Guid? nucleusInvoiceId);

        /// <summary>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingBillPaymentAsyncWithHttpInfo (Guid? nucleusInvoiceId);
        /// <summary>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingBillsAsync (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null);

        /// <summary>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingBillsAsyncWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null);
        /// <summary>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingCustomerAsync (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null);

        /// <summary>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingCustomerAsyncWithHttpInfo (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null);
        /// <summary>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingCustomerRevenueAsync (Guid? nucleusContactId, DateTime? startDate, string accountingMethod = null, DateTime? endDate = null);

        /// <summary>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingCustomerRevenueAsyncWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, string accountingMethod = null, DateTime? endDate = null);
        /// <summary>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingInvoiceAsync (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null);

        /// <summary>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingInvoiceAsyncWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null);
        /// <summary>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingInvoicePaymentAsync (Guid? nucleusInvoiceId);

        /// <summary>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingInvoicePaymentAsyncWithHttpInfo (Guid? nucleusInvoiceId);
        /// <summary>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingSupplierAsync (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null);

        /// <summary>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <remarks>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingSupplierAsyncWithHttpInfo (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null);
        /// <summary>
        /// Permanently delete relation with particular accounting vendor.
        /// </summary>
        /// <remarks>
        /// Permanently delete relation with particular accounting vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountingVendorAccessConfigIsActiveByIdAsync (Guid? id);

        /// <summary>
        /// Permanently delete relation with particular accounting vendor.
        /// </summary>
        /// <remarks>
        /// Permanently delete relation with particular accounting vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Get accounting stats from financial statements at the vendor for the business provided
        /// </summary>
        /// <remarks>
        /// Get accounting stats from financial statements at the vendor for the business provided
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="periodLength">period_length (optional)</param>
        /// <param name="periodMonth">period_month (optional)</param>
        /// <param name="periodQuarter">period_quarter (optional)</param>
        /// <param name="periodType">period_type (optional)</param>
        /// <param name="periodYear">period_year (optional)</param>
        /// <param name="report">report (optional)</param>
        /// <param name="statementDate">statement_date (optional)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> GetAccountingStatsAsync (string accountingMethod = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string periodLength = null, int? periodMonth = null, int? periodQuarter = null, string periodType = null, int? periodYear = null, string report = null, DateTime? statementDate = null);

        /// <summary>
        /// Get accounting stats from financial statements at the vendor for the business provided
        /// </summary>
        /// <remarks>
        /// Get accounting stats from financial statements at the vendor for the business provided
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="periodLength">period_length (optional)</param>
        /// <param name="periodMonth">period_month (optional)</param>
        /// <param name="periodQuarter">period_quarter (optional)</param>
        /// <param name="periodType">period_type (optional)</param>
        /// <param name="periodYear">period_year (optional)</param>
        /// <param name="report">report (optional)</param>
        /// <param name="statementDate">statement_date (optional)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> GetAccountingStatsAsyncWithHttpInfo (string accountingMethod = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string periodLength = null, int? periodMonth = null, int? periodQuarter = null, string periodType = null, int? periodYear = null, string report = null, DateTime? statementDate = null);
        /// <summary>
        /// Get Accounting Vendor Config
        /// </summary>
        /// <remarks>
        /// Get Accounting vendor config information with its status.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;VendorAccessConfigVO&gt;</returns>
        System.Threading.Tasks.Task<List<VendorAccessConfigVO>> GetAccountingVendorInfoUsingClientIdAsync (Guid? nucleusClientId);

        /// <summary>
        /// Get Accounting Vendor Config
        /// </summary>
        /// <remarks>
        /// Get Accounting vendor config information with its status.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;VendorAccessConfigVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VendorAccessConfigVO>>> GetAccountingVendorInfoUsingClientIdAsyncWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Update bill in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Update bill in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> UpdateAccountingBillAsync (Guid? nucleusInvoiceId);

        /// <summary>
        /// Update bill in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Update bill in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> UpdateAccountingBillAsyncWithHttpInfo (Guid? nucleusInvoiceId);
        /// <summary>
        /// Update customer in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update customer in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> UpdateAccountingCustomerAsync (Guid? nucleusContactId);

        /// <summary>
        /// Update customer in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update customer in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> UpdateAccountingCustomerAsyncWithHttpInfo (Guid? nucleusContactId);
        /// <summary>
        /// Update invoice in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Update invoice in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> UpdateAccountingInvoiceAsync (Guid? nucleusInvoiceId);

        /// <summary>
        /// Update invoice in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <remarks>
        /// Update invoice in Nucleus for a given nucleus_invoice_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> UpdateAccountingInvoiceAsyncWithHttpInfo (Guid? nucleusInvoiceId);
        /// <summary>
        /// Update supplier in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update supplier in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        System.Threading.Tasks.Task<AccountingFinalResponseVO> UpdateAccountingSupplierAsync (Guid? nucleusContactId);

        /// <summary>
        /// Update supplier in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <remarks>
        /// Update supplier in Nucleus for a given nucleus_contact_id
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> UpdateAccountingSupplierAsyncWithHttpInfo (Guid? nucleusContactId);
        /// <summary>
        /// Enable/Disable relation with particular accounting vendor.
        /// </summary>
        /// <remarks>
        /// Enable/Disable link with particular accounting vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="isActive">is_active</param>
        /// <returns>Task of VendorAccessConfigVO</returns>
        System.Threading.Tasks.Task<VendorAccessConfigVO> UpdateAccountingVendorAccessConfigIsActiveByIdAsync (Guid? id, bool? isActive);

        /// <summary>
        /// Enable/Disable relation with particular accounting vendor.
        /// </summary>
        /// <remarks>
        /// Enable/Disable link with particular accounting vendor.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="isActive">is_active</param>
        /// <returns>Task of ApiResponse (VendorAccessConfigVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<VendorAccessConfigVO>> UpdateAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo (Guid? id, bool? isActive);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountingApi : IAccountingApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountingApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountingApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO CreateOrUpdateAccountingBillPayment (Guid? nucleusInvoiceId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = CreateOrUpdateAccountingBillPaymentWithHttpInfo(nucleusInvoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > CreateOrUpdateAccountingBillPaymentWithHttpInfo (Guid? nucleusInvoiceId)
        {
            // verify the required parameter 'nucleusInvoiceId' is set
            if (nucleusInvoiceId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusInvoiceId' when calling AccountingApi->CreateOrUpdateAccountingBillPayment");

            var localVarPath = "/accounting/bill_payment/{nucleus_invoice_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusInvoiceId != null) localVarPathParams.Add("nucleus_invoice_id", this.Configuration.ApiClient.ParameterToString(nucleusInvoiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingBillPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingBillPaymentAsync (Guid? nucleusInvoiceId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await CreateOrUpdateAccountingBillPaymentAsyncWithHttpInfo(nucleusInvoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create/Update bill payment in Nucleus for a given nucleus_invoice_id Create/Update bill payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingBillPaymentAsyncWithHttpInfo (Guid? nucleusInvoiceId)
        {
            // verify the required parameter 'nucleusInvoiceId' is set
            if (nucleusInvoiceId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusInvoiceId' when calling AccountingApi->CreateOrUpdateAccountingBillPayment");

            var localVarPath = "/accounting/bill_payment/{nucleus_invoice_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusInvoiceId != null) localVarPathParams.Add("nucleus_invoice_id", this.Configuration.ApiClient.ParameterToString(nucleusInvoiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingBillPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO CreateOrUpdateAccountingBills (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = CreateOrUpdateAccountingBillsWithHttpInfo(nucleusContactId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > CreateOrUpdateAccountingBillsWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->CreateOrUpdateAccountingBills");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling AccountingApi->CreateOrUpdateAccountingBills");

            var localVarPath = "/accounting/bill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (nucleusContactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_contact_id", nucleusContactId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingBills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingBillsAsync (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await CreateOrUpdateAccountingBillsAsyncWithHttpInfo(nucleusContactId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update/Create all bills in Nucleus for a given nucleus_client_id Update/Create all bills in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingBillsAsyncWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->CreateOrUpdateAccountingBills");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling AccountingApi->CreateOrUpdateAccountingBills");

            var localVarPath = "/accounting/bill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (nucleusContactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_contact_id", nucleusContactId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingBills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO CreateOrUpdateAccountingCustomer (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = CreateOrUpdateAccountingCustomerWithHttpInfo(nucleusBusinessId, nucleusClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > CreateOrUpdateAccountingCustomerWithHttpInfo (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null)
        {

            var localVarPath = "/accounting/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingCustomerAsync (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await CreateOrUpdateAccountingCustomerAsyncWithHttpInfo(nucleusBusinessId, nucleusClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update/Create all customers in Nucleus for a given nucleus_client_id Update/Create all customers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingCustomerAsyncWithHttpInfo (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null)
        {

            var localVarPath = "/accounting/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO CreateOrUpdateAccountingCustomerRevenue (Guid? nucleusContactId, DateTime? startDate, string accountingMethod = null, DateTime? endDate = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = CreateOrUpdateAccountingCustomerRevenueWithHttpInfo(nucleusContactId, startDate, accountingMethod, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > CreateOrUpdateAccountingCustomerRevenueWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, string accountingMethod = null, DateTime? endDate = null)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->CreateOrUpdateAccountingCustomerRevenue");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling AccountingApi->CreateOrUpdateAccountingCustomerRevenue");

            var localVarPath = "/accounting/customer_revenue/{nucleus_contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusContactId != null) localVarPathParams.Add("nucleus_contact_id", this.Configuration.ApiClient.ParameterToString(nucleusContactId)); // path parameter
            if (accountingMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accounting_method", accountingMethod)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingCustomerRevenue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingCustomerRevenueAsync (Guid? nucleusContactId, DateTime? startDate, string accountingMethod = null, DateTime? endDate = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await CreateOrUpdateAccountingCustomerRevenueAsyncWithHttpInfo(nucleusContactId, startDate, accountingMethod, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update/Create all customers revenue in Nucleus for a given nucleus_contact_id Update/Create all customers revenue in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingCustomerRevenueAsyncWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, string accountingMethod = null, DateTime? endDate = null)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->CreateOrUpdateAccountingCustomerRevenue");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling AccountingApi->CreateOrUpdateAccountingCustomerRevenue");

            var localVarPath = "/accounting/customer_revenue/{nucleus_contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusContactId != null) localVarPathParams.Add("nucleus_contact_id", this.Configuration.ApiClient.ParameterToString(nucleusContactId)); // path parameter
            if (accountingMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accounting_method", accountingMethod)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingCustomerRevenue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO CreateOrUpdateAccountingInvoice (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = CreateOrUpdateAccountingInvoiceWithHttpInfo(nucleusContactId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > CreateOrUpdateAccountingInvoiceWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->CreateOrUpdateAccountingInvoice");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling AccountingApi->CreateOrUpdateAccountingInvoice");

            var localVarPath = "/accounting/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (nucleusContactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_contact_id", nucleusContactId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingInvoiceAsync (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await CreateOrUpdateAccountingInvoiceAsyncWithHttpInfo(nucleusContactId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update/Create all invoices in Nucleus for a given nucleus_client_id Update/Create all invoices in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingInvoiceAsyncWithHttpInfo (Guid? nucleusContactId, DateTime? startDate, DateTime? endDate = null)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->CreateOrUpdateAccountingInvoice");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling AccountingApi->CreateOrUpdateAccountingInvoice");

            var localVarPath = "/accounting/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (nucleusContactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_contact_id", nucleusContactId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO CreateOrUpdateAccountingInvoicePayment (Guid? nucleusInvoiceId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = CreateOrUpdateAccountingInvoicePaymentWithHttpInfo(nucleusInvoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > CreateOrUpdateAccountingInvoicePaymentWithHttpInfo (Guid? nucleusInvoiceId)
        {
            // verify the required parameter 'nucleusInvoiceId' is set
            if (nucleusInvoiceId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusInvoiceId' when calling AccountingApi->CreateOrUpdateAccountingInvoicePayment");

            var localVarPath = "/accounting/invoice_payment/{nucleus_invoice_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusInvoiceId != null) localVarPathParams.Add("nucleus_invoice_id", this.Configuration.ApiClient.ParameterToString(nucleusInvoiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingInvoicePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingInvoicePaymentAsync (Guid? nucleusInvoiceId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await CreateOrUpdateAccountingInvoicePaymentAsyncWithHttpInfo(nucleusInvoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create/Update invoice payment in Nucleus for a given nucleus_invoice_id Create/Update invoice payment in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingInvoicePaymentAsyncWithHttpInfo (Guid? nucleusInvoiceId)
        {
            // verify the required parameter 'nucleusInvoiceId' is set
            if (nucleusInvoiceId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusInvoiceId' when calling AccountingApi->CreateOrUpdateAccountingInvoicePayment");

            var localVarPath = "/accounting/invoice_payment/{nucleus_invoice_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusInvoiceId != null) localVarPathParams.Add("nucleus_invoice_id", this.Configuration.ApiClient.ParameterToString(nucleusInvoiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingInvoicePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO CreateOrUpdateAccountingSupplier (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = CreateOrUpdateAccountingSupplierWithHttpInfo(nucleusBusinessId, nucleusClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > CreateOrUpdateAccountingSupplierWithHttpInfo (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null)
        {

            var localVarPath = "/accounting/supplier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingSupplier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> CreateOrUpdateAccountingSupplierAsync (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await CreateOrUpdateAccountingSupplierAsyncWithHttpInfo(nucleusBusinessId, nucleusClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update/Create all suppliers in Nucleus for a given nucleus_client_id Update/Create all suppliers in Nucleus for a given nucleus_client_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> CreateOrUpdateAccountingSupplierAsyncWithHttpInfo (Guid? nucleusBusinessId = null, Guid? nucleusClientId = null)
        {

            var localVarPath = "/accounting/supplier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateAccountingSupplier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Permanently delete relation with particular accounting vendor. Permanently delete relation with particular accounting vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteAccountingVendorAccessConfigIsActiveById (Guid? id)
        {
             DeleteAccountingVendorAccessConfigIsActiveByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Permanently delete relation with particular accounting vendor. Permanently delete relation with particular accounting vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountingVendorAccessConfigIsActiveByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountingApi->DeleteAccountingVendorAccessConfigIsActiveById");

            var localVarPath = "/accounting/vendor/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountingVendorAccessConfigIsActiveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Permanently delete relation with particular accounting vendor. Permanently delete relation with particular accounting vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountingVendorAccessConfigIsActiveByIdAsync (Guid? id)
        {
             await DeleteAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Permanently delete relation with particular accounting vendor. Permanently delete relation with particular accounting vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountingApi->DeleteAccountingVendorAccessConfigIsActiveById");

            var localVarPath = "/accounting/vendor/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountingVendorAccessConfigIsActiveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get accounting stats from financial statements at the vendor for the business provided Get accounting stats from financial statements at the vendor for the business provided
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="periodLength">period_length (optional)</param>
        /// <param name="periodMonth">period_month (optional)</param>
        /// <param name="periodQuarter">period_quarter (optional)</param>
        /// <param name="periodType">period_type (optional)</param>
        /// <param name="periodYear">period_year (optional)</param>
        /// <param name="report">report (optional)</param>
        /// <param name="statementDate">statement_date (optional)</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO GetAccountingStats (string accountingMethod = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string periodLength = null, int? periodMonth = null, int? periodQuarter = null, string periodType = null, int? periodYear = null, string report = null, DateTime? statementDate = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = GetAccountingStatsWithHttpInfo(accountingMethod, nucleusBusinessId, nucleusClientId, periodLength, periodMonth, periodQuarter, periodType, periodYear, report, statementDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get accounting stats from financial statements at the vendor for the business provided Get accounting stats from financial statements at the vendor for the business provided
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="periodLength">period_length (optional)</param>
        /// <param name="periodMonth">period_month (optional)</param>
        /// <param name="periodQuarter">period_quarter (optional)</param>
        /// <param name="periodType">period_type (optional)</param>
        /// <param name="periodYear">period_year (optional)</param>
        /// <param name="report">report (optional)</param>
        /// <param name="statementDate">statement_date (optional)</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > GetAccountingStatsWithHttpInfo (string accountingMethod = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string periodLength = null, int? periodMonth = null, int? periodQuarter = null, string periodType = null, int? periodYear = null, string report = null, DateTime? statementDate = null)
        {

            var localVarPath = "/accounting/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountingMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accounting_method", accountingMethod)); // query parameter
            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter
            if (periodLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_length", periodLength)); // query parameter
            if (periodMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_month", periodMonth)); // query parameter
            if (periodQuarter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_quarter", periodQuarter)); // query parameter
            if (periodType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_type", periodType)); // query parameter
            if (periodYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_year", periodYear)); // query parameter
            if (report != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "report", report)); // query parameter
            if (statementDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statement_date", statementDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountingStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Get accounting stats from financial statements at the vendor for the business provided Get accounting stats from financial statements at the vendor for the business provided
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="periodLength">period_length (optional)</param>
        /// <param name="periodMonth">period_month (optional)</param>
        /// <param name="periodQuarter">period_quarter (optional)</param>
        /// <param name="periodType">period_type (optional)</param>
        /// <param name="periodYear">period_year (optional)</param>
        /// <param name="report">report (optional)</param>
        /// <param name="statementDate">statement_date (optional)</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> GetAccountingStatsAsync (string accountingMethod = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string periodLength = null, int? periodMonth = null, int? periodQuarter = null, string periodType = null, int? periodYear = null, string report = null, DateTime? statementDate = null)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await GetAccountingStatsAsyncWithHttpInfo(accountingMethod, nucleusBusinessId, nucleusClientId, periodLength, periodMonth, periodQuarter, periodType, periodYear, report, statementDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get accounting stats from financial statements at the vendor for the business provided Get accounting stats from financial statements at the vendor for the business provided
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingMethod">accounting_method (optional, default to accrual)</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="periodLength">period_length (optional)</param>
        /// <param name="periodMonth">period_month (optional)</param>
        /// <param name="periodQuarter">period_quarter (optional)</param>
        /// <param name="periodType">period_type (optional)</param>
        /// <param name="periodYear">period_year (optional)</param>
        /// <param name="report">report (optional)</param>
        /// <param name="statementDate">statement_date (optional)</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> GetAccountingStatsAsyncWithHttpInfo (string accountingMethod = null, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string periodLength = null, int? periodMonth = null, int? periodQuarter = null, string periodType = null, int? periodYear = null, string report = null, DateTime? statementDate = null)
        {

            var localVarPath = "/accounting/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountingMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accounting_method", accountingMethod)); // query parameter
            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter
            if (periodLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_length", periodLength)); // query parameter
            if (periodMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_month", periodMonth)); // query parameter
            if (periodQuarter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_quarter", periodQuarter)); // query parameter
            if (periodType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_type", periodType)); // query parameter
            if (periodYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period_year", periodYear)); // query parameter
            if (report != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "report", report)); // query parameter
            if (statementDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statement_date", statementDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountingStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Get Accounting Vendor Config Get Accounting vendor config information with its status.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;VendorAccessConfigVO&gt;</returns>
        public List<VendorAccessConfigVO> GetAccountingVendorInfoUsingClientId (Guid? nucleusClientId)
        {
             ApiResponse<List<VendorAccessConfigVO>> localVarResponse = GetAccountingVendorInfoUsingClientIdWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Accounting Vendor Config Get Accounting vendor config information with its status.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;VendorAccessConfigVO&gt;</returns>
        public ApiResponse< List<VendorAccessConfigVO> > GetAccountingVendorInfoUsingClientIdWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling AccountingApi->GetAccountingVendorInfoUsingClientId");

            var localVarPath = "/accounting/vendor/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountingVendorInfoUsingClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VendorAccessConfigVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VendorAccessConfigVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VendorAccessConfigVO>)));
        }

        /// <summary>
        /// Get Accounting Vendor Config Get Accounting vendor config information with its status.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;VendorAccessConfigVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<VendorAccessConfigVO>> GetAccountingVendorInfoUsingClientIdAsync (Guid? nucleusClientId)
        {
             ApiResponse<List<VendorAccessConfigVO>> localVarResponse = await GetAccountingVendorInfoUsingClientIdAsyncWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Accounting Vendor Config Get Accounting vendor config information with its status.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;VendorAccessConfigVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VendorAccessConfigVO>>> GetAccountingVendorInfoUsingClientIdAsyncWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling AccountingApi->GetAccountingVendorInfoUsingClientId");

            var localVarPath = "/accounting/vendor/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountingVendorInfoUsingClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VendorAccessConfigVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VendorAccessConfigVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VendorAccessConfigVO>)));
        }

        /// <summary>
        /// Update bill in Nucleus for a given nucleus_invoice_id Update bill in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO UpdateAccountingBill (Guid? nucleusInvoiceId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = UpdateAccountingBillWithHttpInfo(nucleusInvoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update bill in Nucleus for a given nucleus_invoice_id Update bill in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > UpdateAccountingBillWithHttpInfo (Guid? nucleusInvoiceId)
        {
            // verify the required parameter 'nucleusInvoiceId' is set
            if (nucleusInvoiceId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusInvoiceId' when calling AccountingApi->UpdateAccountingBill");

            var localVarPath = "/accounting/bill/{nucleus_invoice_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusInvoiceId != null) localVarPathParams.Add("nucleus_invoice_id", this.Configuration.ApiClient.ParameterToString(nucleusInvoiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingBill", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update bill in Nucleus for a given nucleus_invoice_id Update bill in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> UpdateAccountingBillAsync (Guid? nucleusInvoiceId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await UpdateAccountingBillAsyncWithHttpInfo(nucleusInvoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update bill in Nucleus for a given nucleus_invoice_id Update bill in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> UpdateAccountingBillAsyncWithHttpInfo (Guid? nucleusInvoiceId)
        {
            // verify the required parameter 'nucleusInvoiceId' is set
            if (nucleusInvoiceId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusInvoiceId' when calling AccountingApi->UpdateAccountingBill");

            var localVarPath = "/accounting/bill/{nucleus_invoice_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusInvoiceId != null) localVarPathParams.Add("nucleus_invoice_id", this.Configuration.ApiClient.ParameterToString(nucleusInvoiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingBill", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update customer in Nucleus for a given nucleus_contact_id Update customer in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO UpdateAccountingCustomer (Guid? nucleusContactId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = UpdateAccountingCustomerWithHttpInfo(nucleusContactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer in Nucleus for a given nucleus_contact_id Update customer in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > UpdateAccountingCustomerWithHttpInfo (Guid? nucleusContactId)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->UpdateAccountingCustomer");

            var localVarPath = "/accounting/customer/{nucleus_contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusContactId != null) localVarPathParams.Add("nucleus_contact_id", this.Configuration.ApiClient.ParameterToString(nucleusContactId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update customer in Nucleus for a given nucleus_contact_id Update customer in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> UpdateAccountingCustomerAsync (Guid? nucleusContactId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await UpdateAccountingCustomerAsyncWithHttpInfo(nucleusContactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update customer in Nucleus for a given nucleus_contact_id Update customer in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> UpdateAccountingCustomerAsyncWithHttpInfo (Guid? nucleusContactId)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->UpdateAccountingCustomer");

            var localVarPath = "/accounting/customer/{nucleus_contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusContactId != null) localVarPathParams.Add("nucleus_contact_id", this.Configuration.ApiClient.ParameterToString(nucleusContactId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update invoice in Nucleus for a given nucleus_invoice_id Update invoice in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO UpdateAccountingInvoice (Guid? nucleusInvoiceId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = UpdateAccountingInvoiceWithHttpInfo(nucleusInvoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update invoice in Nucleus for a given nucleus_invoice_id Update invoice in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > UpdateAccountingInvoiceWithHttpInfo (Guid? nucleusInvoiceId)
        {
            // verify the required parameter 'nucleusInvoiceId' is set
            if (nucleusInvoiceId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusInvoiceId' when calling AccountingApi->UpdateAccountingInvoice");

            var localVarPath = "/accounting/invoice/{nucleus_invoice_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusInvoiceId != null) localVarPathParams.Add("nucleus_invoice_id", this.Configuration.ApiClient.ParameterToString(nucleusInvoiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update invoice in Nucleus for a given nucleus_invoice_id Update invoice in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> UpdateAccountingInvoiceAsync (Guid? nucleusInvoiceId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await UpdateAccountingInvoiceAsyncWithHttpInfo(nucleusInvoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update invoice in Nucleus for a given nucleus_invoice_id Update invoice in Nucleus for a given nucleus_invoice_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusInvoiceId">nucleus_invoice_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> UpdateAccountingInvoiceAsyncWithHttpInfo (Guid? nucleusInvoiceId)
        {
            // verify the required parameter 'nucleusInvoiceId' is set
            if (nucleusInvoiceId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusInvoiceId' when calling AccountingApi->UpdateAccountingInvoice");

            var localVarPath = "/accounting/invoice/{nucleus_invoice_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusInvoiceId != null) localVarPathParams.Add("nucleus_invoice_id", this.Configuration.ApiClient.ParameterToString(nucleusInvoiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update supplier in Nucleus for a given nucleus_contact_id Update supplier in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>AccountingFinalResponseVO</returns>
        public AccountingFinalResponseVO UpdateAccountingSupplier (Guid? nucleusContactId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = UpdateAccountingSupplierWithHttpInfo(nucleusContactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update supplier in Nucleus for a given nucleus_contact_id Update supplier in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>ApiResponse of AccountingFinalResponseVO</returns>
        public ApiResponse< AccountingFinalResponseVO > UpdateAccountingSupplierWithHttpInfo (Guid? nucleusContactId)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->UpdateAccountingSupplier");

            var localVarPath = "/accounting/supplier/{nucleus_contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusContactId != null) localVarPathParams.Add("nucleus_contact_id", this.Configuration.ApiClient.ParameterToString(nucleusContactId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingSupplier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Update supplier in Nucleus for a given nucleus_contact_id Update supplier in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>Task of AccountingFinalResponseVO</returns>
        public async System.Threading.Tasks.Task<AccountingFinalResponseVO> UpdateAccountingSupplierAsync (Guid? nucleusContactId)
        {
             ApiResponse<AccountingFinalResponseVO> localVarResponse = await UpdateAccountingSupplierAsyncWithHttpInfo(nucleusContactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update supplier in Nucleus for a given nucleus_contact_id Update supplier in Nucleus for a given nucleus_contact_id
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusContactId">nucleus_contact_id</param>
        /// <returns>Task of ApiResponse (AccountingFinalResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingFinalResponseVO>> UpdateAccountingSupplierAsyncWithHttpInfo (Guid? nucleusContactId)
        {
            // verify the required parameter 'nucleusContactId' is set
            if (nucleusContactId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusContactId' when calling AccountingApi->UpdateAccountingSupplier");

            var localVarPath = "/accounting/supplier/{nucleus_contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusContactId != null) localVarPathParams.Add("nucleus_contact_id", this.Configuration.ApiClient.ParameterToString(nucleusContactId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingSupplier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingFinalResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingFinalResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingFinalResponseVO)));
        }

        /// <summary>
        /// Enable/Disable relation with particular accounting vendor. Enable/Disable link with particular accounting vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="isActive">is_active</param>
        /// <returns>VendorAccessConfigVO</returns>
        public VendorAccessConfigVO UpdateAccountingVendorAccessConfigIsActiveById (Guid? id, bool? isActive)
        {
             ApiResponse<VendorAccessConfigVO> localVarResponse = UpdateAccountingVendorAccessConfigIsActiveByIdWithHttpInfo(id, isActive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable/Disable relation with particular accounting vendor. Enable/Disable link with particular accounting vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="isActive">is_active</param>
        /// <returns>ApiResponse of VendorAccessConfigVO</returns>
        public ApiResponse< VendorAccessConfigVO > UpdateAccountingVendorAccessConfigIsActiveByIdWithHttpInfo (Guid? id, bool? isActive)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountingApi->UpdateAccountingVendorAccessConfigIsActiveById");
            // verify the required parameter 'isActive' is set
            if (isActive == null)
                throw new ApiException(400, "Missing required parameter 'isActive' when calling AccountingApi->UpdateAccountingVendorAccessConfigIsActiveById");

            var localVarPath = "/accounting/vendor/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (isActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_active", isActive)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingVendorAccessConfigIsActiveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorAccessConfigVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorAccessConfigVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorAccessConfigVO)));
        }

        /// <summary>
        /// Enable/Disable relation with particular accounting vendor. Enable/Disable link with particular accounting vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="isActive">is_active</param>
        /// <returns>Task of VendorAccessConfigVO</returns>
        public async System.Threading.Tasks.Task<VendorAccessConfigVO> UpdateAccountingVendorAccessConfigIsActiveByIdAsync (Guid? id, bool? isActive)
        {
             ApiResponse<VendorAccessConfigVO> localVarResponse = await UpdateAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo(id, isActive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable/Disable relation with particular accounting vendor. Enable/Disable link with particular accounting vendor.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="isActive">is_active</param>
        /// <returns>Task of ApiResponse (VendorAccessConfigVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorAccessConfigVO>> UpdateAccountingVendorAccessConfigIsActiveByIdAsyncWithHttpInfo (Guid? id, bool? isActive)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountingApi->UpdateAccountingVendorAccessConfigIsActiveById");
            // verify the required parameter 'isActive' is set
            if (isActive == null)
                throw new ApiException(400, "Missing required parameter 'isActive' when calling AccountingApi->UpdateAccountingVendorAccessConfigIsActiveById");

            var localVarPath = "/accounting/vendor/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (isActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_active", isActive)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountingVendorAccessConfigIsActiveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorAccessConfigVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorAccessConfigVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorAccessConfigVO)));
        }

    }
}
