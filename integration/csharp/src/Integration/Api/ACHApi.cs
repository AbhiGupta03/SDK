/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IACHApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel the ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>AchTransferResponseVO</returns>
        AchTransferResponseVO CancelAchTransferUsingDelete (Guid? nucleusFundingId);

        /// <summary>
        /// Cancel the ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of AchTransferResponseVO</returns>
        ApiResponse<AchTransferResponseVO> CancelAchTransferUsingDeleteWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achBankLinkRequestCO">achBankLinkRequestCO</param>
        /// <returns>AchBankLinkResponseVO</returns>
        AchBankLinkResponseVO CreateAchBankLinkUsingPost (AchBankLinkRequestCO achBankLinkRequestCO);

        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achBankLinkRequestCO">achBankLinkRequestCO</param>
        /// <returns>ApiResponse of AchBankLinkResponseVO</returns>
        ApiResponse<AchBankLinkResponseVO> CreateAchBankLinkUsingPostWithHttpInfo (AchBankLinkRequestCO achBankLinkRequestCO);
        /// <summary>
        /// Create a beneficial owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beneficialOwnerRequest">beneficialOwnerRequest</param>
        /// <returns>AchBeneficialOwnerResponseVO</returns>
        AchBeneficialOwnerResponseVO CreateAchBeneficialOwnerUsingPost (AchBeneficialOwnerRequestCO beneficialOwnerRequest);

        /// <summary>
        /// Create a beneficial owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beneficialOwnerRequest">beneficialOwnerRequest</param>
        /// <returns>ApiResponse of AchBeneficialOwnerResponseVO</returns>
        ApiResponse<AchBeneficialOwnerResponseVO> CreateAchBeneficialOwnerUsingPostWithHttpInfo (AchBeneficialOwnerRequestCO beneficialOwnerRequest);
        /// <summary>
        /// Create a business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>AchBusinessResponseVO</returns>
        AchBusinessResponseVO CreateAchBusinessUsingPost (AchBusinessRequestCO businessRequest);

        /// <summary>
        /// Create a business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>ApiResponse of AchBusinessResponseVO</returns>
        ApiResponse<AchBusinessResponseVO> CreateAchBusinessUsingPostWithHttpInfo (AchBusinessRequestCO businessRequest);
        /// <summary>
        /// Create an ACH card link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardLinkRequestCO">cardLinkRequestCO</param>
        /// <returns>AchCardLinkResponseVO</returns>
        AchCardLinkResponseVO CreateAchCardLinkUsingPost (AchCardLinkRequestCO cardLinkRequestCO);

        /// <summary>
        /// Create an ACH card link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardLinkRequestCO">cardLinkRequestCO</param>
        /// <returns>ApiResponse of AchCardLinkResponseVO</returns>
        ApiResponse<AchCardLinkResponseVO> CreateAchCardLinkUsingPostWithHttpInfo (AchCardLinkRequestCO cardLinkRequestCO);
        /// <summary>
        /// Create an ACH card reserve
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardReserveRequestCO">cardReserveRequestCO</param>
        /// <returns>AchCardReserveResponseVO</returns>
        AchCardReserveResponseVO CreateAchCardReserveUsingPost (AchCardReserveRequestCO cardReserveRequestCO);

        /// <summary>
        /// Create an ACH card reserve
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardReserveRequestCO">cardReserveRequestCO</param>
        /// <returns>ApiResponse of AchCardReserveResponseVO</returns>
        ApiResponse<AchCardReserveResponseVO> CreateAchCardReserveUsingPostWithHttpInfo (AchCardReserveRequestCO cardReserveRequestCO);
        /// <summary>
        /// Create a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>AchClientResponseVO</returns>
        AchClientResponseVO CreateAchClientUsingPost (AchClientRequestCO clientRequest);

        /// <summary>
        /// Create a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>ApiResponse of AchClientResponseVO</returns>
        ApiResponse<AchClientResponseVO> CreateAchClientUsingPostWithHttpInfo (AchClientRequestCO clientRequest);
        /// <summary>
        /// Create an ACH reserve link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reserveLinkRequestCO">reserveLinkRequestCO</param>
        /// <returns>AchReserveLinkResponseVO</returns>
        AchReserveLinkResponseVO CreateAchReserveLinkUsingPost (AchReserveLinkRequestCO reserveLinkRequestCO);

        /// <summary>
        /// Create an ACH reserve link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reserveLinkRequestCO">reserveLinkRequestCO</param>
        /// <returns>ApiResponse of AchReserveLinkResponseVO</returns>
        ApiResponse<AchReserveLinkResponseVO> CreateAchReserveLinkUsingPostWithHttpInfo (AchReserveLinkRequestCO reserveLinkRequestCO);
        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>AchBankLinkResponseVO</returns>
        AchBankLinkResponseVO DeleteAchBankLinkUsingDelete (Guid? nucleusBankLinkId);

        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of AchBankLinkResponseVO</returns>
        ApiResponse<AchBankLinkResponseVO> DeleteAchBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Fund card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achCardRequestCO">achCardRequestCO</param>
        /// <returns>AchCardResponseVO</returns>
        AchCardResponseVO FundCardUsingPost (AchCardRequestCO achCardRequestCO);

        /// <summary>
        /// Fund card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achCardRequestCO">achCardRequestCO</param>
        /// <returns>ApiResponse of AchCardResponseVO</returns>
        ApiResponse<AchCardResponseVO> FundCardUsingPostWithHttpInfo (AchCardRequestCO achCardRequestCO);
        /// <summary>
        /// Get balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>AchBalanceResponseVO</returns>
        AchBalanceResponseVO GetAchBalanceUsingGet (Guid? portfolioId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of AchBalanceResponseVO</returns>
        ApiResponse<AchBalanceResponseVO> GetAchBalanceUsingGetWithHttpInfo (Guid? portfolioId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>AchBankLinkResponseVO</returns>
        AchBankLinkResponseVO GetAchBankLinkUsingGet (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of AchBankLinkResponseVO</returns>
        ApiResponse<AchBankLinkResponseVO> GetAchBankLinkUsingGetWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get bank links for a reserve account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AchBankLinkResponseVO&gt;</returns>
        List<AchBankLinkResponseVO> GetAchBankLinksForReserveAccountUsingGet ();

        /// <summary>
        /// Get bank links for a reserve account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AchBankLinkResponseVO&gt;</returns>
        ApiResponse<List<AchBankLinkResponseVO>> GetAchBankLinksForReserveAccountUsingGetWithHttpInfo ();
        /// <summary>
        /// Get business balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">business_id</param>
        /// <returns>AchBalanceResponseVO</returns>
        AchBalanceResponseVO GetAchBusinessBalanceUsingGet (Guid? businessId);

        /// <summary>
        /// Get business balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">business_id</param>
        /// <returns>ApiResponse of AchBalanceResponseVO</returns>
        ApiResponse<AchBalanceResponseVO> GetAchBusinessBalanceUsingGetWithHttpInfo (Guid? businessId);
        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;AchBankLinkResponseVO&gt;</returns>
        List<AchBankLinkResponseVO> GetAchClientBankLinksUsingGet (Guid? nucleusClientId);

        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;AchBankLinkResponseVO&gt;</returns>
        ApiResponse<List<AchBankLinkResponseVO>> GetAchClientBankLinksUsingGetWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get the ACH status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>AchTransferResponseVO</returns>
        AchTransferResponseVO GetAchStatusUsingGet (Guid? nucleusBusinessId);

        /// <summary>
        /// Get the ACH status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>ApiResponse of AchTransferResponseVO</returns>
        ApiResponse<AchTransferResponseVO> GetAchStatusUsingGetWithHttpInfo (Guid? nucleusBusinessId);
        /// <summary>
        /// Get the ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>AchTransferResponseVO</returns>
        AchTransferResponseVO GetAchTransferUsingGet (Guid? nucleusFundingId);

        /// <summary>
        /// Get the ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of AchTransferResponseVO</returns>
        ApiResponse<AchTransferResponseVO> GetAchTransferUsingGetWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Get a list of client&#39;s ACH transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAchTransferResponseVO</returns>
        PageAchTransferResponseVO GetListOfClientAchTransfersUsingGet (Guid? nucleusClientId, int? page = null, int? size = null);

        /// <summary>
        /// Get a list of client&#39;s ACH transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAchTransferResponseVO</returns>
        ApiResponse<PageAchTransferResponseVO> GetListOfClientAchTransfersUsingGetWithHttpInfo (Guid? nucleusClientId, int? page = null, int? size = null);
        /// <summary>
        /// Get a list of tenant&#39;s ACH transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <returns>PageAchTransferResponseVO</returns>
        PageAchTransferResponseVO GetListOfTenantAchTransfersUsingGet (DateTime? endDate = null, int? page = null, int? size = null, DateTime? startDate = null, string status = null);

        /// <summary>
        /// Get a list of tenant&#39;s ACH transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <returns>ApiResponse of PageAchTransferResponseVO</returns>
        ApiResponse<PageAchTransferResponseVO> GetListOfTenantAchTransfersUsingGetWithHttpInfo (DateTime? endDate = null, int? page = null, int? size = null, DateTime? startDate = null, string status = null);
        /// <summary>
        /// Submit an ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>AchTransferResponseVO</returns>
        AchTransferResponseVO SubmitAchTransferUsingPost (AchTransferRequestCO transferRequest);

        /// <summary>
        /// Submit an ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>ApiResponse of AchTransferResponseVO</returns>
        ApiResponse<AchTransferResponseVO> SubmitAchTransferUsingPostWithHttpInfo (AchTransferRequestCO transferRequest);
        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>AchBankLinkResponseVO</returns>
        AchBankLinkResponseVO UpdateAchBankLinkUsingPut (Guid? nucleusBankLinkId);

        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of AchBankLinkResponseVO</returns>
        ApiResponse<AchBankLinkResponseVO> UpdateAchBankLinkUsingPutWithHttpInfo (Guid? nucleusBankLinkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel the ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of AchTransferResponseVO</returns>
        System.Threading.Tasks.Task<AchTransferResponseVO> CancelAchTransferUsingDeleteAsync (Guid? nucleusFundingId);

        /// <summary>
        /// Cancel the ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (AchTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchTransferResponseVO>> CancelAchTransferUsingDeleteAsyncWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achBankLinkRequestCO">achBankLinkRequestCO</param>
        /// <returns>Task of AchBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<AchBankLinkResponseVO> CreateAchBankLinkUsingPostAsync (AchBankLinkRequestCO achBankLinkRequestCO);

        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achBankLinkRequestCO">achBankLinkRequestCO</param>
        /// <returns>Task of ApiResponse (AchBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchBankLinkResponseVO>> CreateAchBankLinkUsingPostAsyncWithHttpInfo (AchBankLinkRequestCO achBankLinkRequestCO);
        /// <summary>
        /// Create a beneficial owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beneficialOwnerRequest">beneficialOwnerRequest</param>
        /// <returns>Task of AchBeneficialOwnerResponseVO</returns>
        System.Threading.Tasks.Task<AchBeneficialOwnerResponseVO> CreateAchBeneficialOwnerUsingPostAsync (AchBeneficialOwnerRequestCO beneficialOwnerRequest);

        /// <summary>
        /// Create a beneficial owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beneficialOwnerRequest">beneficialOwnerRequest</param>
        /// <returns>Task of ApiResponse (AchBeneficialOwnerResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchBeneficialOwnerResponseVO>> CreateAchBeneficialOwnerUsingPostAsyncWithHttpInfo (AchBeneficialOwnerRequestCO beneficialOwnerRequest);
        /// <summary>
        /// Create a business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Task of AchBusinessResponseVO</returns>
        System.Threading.Tasks.Task<AchBusinessResponseVO> CreateAchBusinessUsingPostAsync (AchBusinessRequestCO businessRequest);

        /// <summary>
        /// Create a business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Task of ApiResponse (AchBusinessResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchBusinessResponseVO>> CreateAchBusinessUsingPostAsyncWithHttpInfo (AchBusinessRequestCO businessRequest);
        /// <summary>
        /// Create an ACH card link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardLinkRequestCO">cardLinkRequestCO</param>
        /// <returns>Task of AchCardLinkResponseVO</returns>
        System.Threading.Tasks.Task<AchCardLinkResponseVO> CreateAchCardLinkUsingPostAsync (AchCardLinkRequestCO cardLinkRequestCO);

        /// <summary>
        /// Create an ACH card link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardLinkRequestCO">cardLinkRequestCO</param>
        /// <returns>Task of ApiResponse (AchCardLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchCardLinkResponseVO>> CreateAchCardLinkUsingPostAsyncWithHttpInfo (AchCardLinkRequestCO cardLinkRequestCO);
        /// <summary>
        /// Create an ACH card reserve
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardReserveRequestCO">cardReserveRequestCO</param>
        /// <returns>Task of AchCardReserveResponseVO</returns>
        System.Threading.Tasks.Task<AchCardReserveResponseVO> CreateAchCardReserveUsingPostAsync (AchCardReserveRequestCO cardReserveRequestCO);

        /// <summary>
        /// Create an ACH card reserve
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardReserveRequestCO">cardReserveRequestCO</param>
        /// <returns>Task of ApiResponse (AchCardReserveResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchCardReserveResponseVO>> CreateAchCardReserveUsingPostAsyncWithHttpInfo (AchCardReserveRequestCO cardReserveRequestCO);
        /// <summary>
        /// Create a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>Task of AchClientResponseVO</returns>
        System.Threading.Tasks.Task<AchClientResponseVO> CreateAchClientUsingPostAsync (AchClientRequestCO clientRequest);

        /// <summary>
        /// Create a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>Task of ApiResponse (AchClientResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchClientResponseVO>> CreateAchClientUsingPostAsyncWithHttpInfo (AchClientRequestCO clientRequest);
        /// <summary>
        /// Create an ACH reserve link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reserveLinkRequestCO">reserveLinkRequestCO</param>
        /// <returns>Task of AchReserveLinkResponseVO</returns>
        System.Threading.Tasks.Task<AchReserveLinkResponseVO> CreateAchReserveLinkUsingPostAsync (AchReserveLinkRequestCO reserveLinkRequestCO);

        /// <summary>
        /// Create an ACH reserve link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reserveLinkRequestCO">reserveLinkRequestCO</param>
        /// <returns>Task of ApiResponse (AchReserveLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchReserveLinkResponseVO>> CreateAchReserveLinkUsingPostAsyncWithHttpInfo (AchReserveLinkRequestCO reserveLinkRequestCO);
        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of AchBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<AchBankLinkResponseVO> DeleteAchBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (AchBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchBankLinkResponseVO>> DeleteAchBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Fund card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achCardRequestCO">achCardRequestCO</param>
        /// <returns>Task of AchCardResponseVO</returns>
        System.Threading.Tasks.Task<AchCardResponseVO> FundCardUsingPostAsync (AchCardRequestCO achCardRequestCO);

        /// <summary>
        /// Fund card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achCardRequestCO">achCardRequestCO</param>
        /// <returns>Task of ApiResponse (AchCardResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchCardResponseVO>> FundCardUsingPostAsyncWithHttpInfo (AchCardRequestCO achCardRequestCO);
        /// <summary>
        /// Get balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of AchBalanceResponseVO</returns>
        System.Threading.Tasks.Task<AchBalanceResponseVO> GetAchBalanceUsingGetAsync (Guid? portfolioId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (AchBalanceResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchBalanceResponseVO>> GetAchBalanceUsingGetAsyncWithHttpInfo (Guid? portfolioId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of AchBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<AchBankLinkResponseVO> GetAchBankLinkUsingGetAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (AchBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchBankLinkResponseVO>> GetAchBankLinkUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get bank links for a reserve account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AchBankLinkResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<AchBankLinkResponseVO>> GetAchBankLinksForReserveAccountUsingGetAsync ();

        /// <summary>
        /// Get bank links for a reserve account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AchBankLinkResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AchBankLinkResponseVO>>> GetAchBankLinksForReserveAccountUsingGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get business balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">business_id</param>
        /// <returns>Task of AchBalanceResponseVO</returns>
        System.Threading.Tasks.Task<AchBalanceResponseVO> GetAchBusinessBalanceUsingGetAsync (Guid? businessId);

        /// <summary>
        /// Get business balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">business_id</param>
        /// <returns>Task of ApiResponse (AchBalanceResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchBalanceResponseVO>> GetAchBusinessBalanceUsingGetAsyncWithHttpInfo (Guid? businessId);
        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;AchBankLinkResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<AchBankLinkResponseVO>> GetAchClientBankLinksUsingGetAsync (Guid? nucleusClientId);

        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;AchBankLinkResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AchBankLinkResponseVO>>> GetAchClientBankLinksUsingGetAsyncWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get the ACH status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of AchTransferResponseVO</returns>
        System.Threading.Tasks.Task<AchTransferResponseVO> GetAchStatusUsingGetAsync (Guid? nucleusBusinessId);

        /// <summary>
        /// Get the ACH status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of ApiResponse (AchTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchTransferResponseVO>> GetAchStatusUsingGetAsyncWithHttpInfo (Guid? nucleusBusinessId);
        /// <summary>
        /// Get the ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of AchTransferResponseVO</returns>
        System.Threading.Tasks.Task<AchTransferResponseVO> GetAchTransferUsingGetAsync (Guid? nucleusFundingId);

        /// <summary>
        /// Get the ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (AchTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchTransferResponseVO>> GetAchTransferUsingGetAsyncWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Get a list of client&#39;s ACH transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAchTransferResponseVO</returns>
        System.Threading.Tasks.Task<PageAchTransferResponseVO> GetListOfClientAchTransfersUsingGetAsync (Guid? nucleusClientId, int? page = null, int? size = null);

        /// <summary>
        /// Get a list of client&#39;s ACH transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAchTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAchTransferResponseVO>> GetListOfClientAchTransfersUsingGetAsyncWithHttpInfo (Guid? nucleusClientId, int? page = null, int? size = null);
        /// <summary>
        /// Get a list of tenant&#39;s ACH transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <returns>Task of PageAchTransferResponseVO</returns>
        System.Threading.Tasks.Task<PageAchTransferResponseVO> GetListOfTenantAchTransfersUsingGetAsync (DateTime? endDate = null, int? page = null, int? size = null, DateTime? startDate = null, string status = null);

        /// <summary>
        /// Get a list of tenant&#39;s ACH transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <returns>Task of ApiResponse (PageAchTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAchTransferResponseVO>> GetListOfTenantAchTransfersUsingGetAsyncWithHttpInfo (DateTime? endDate = null, int? page = null, int? size = null, DateTime? startDate = null, string status = null);
        /// <summary>
        /// Submit an ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of AchTransferResponseVO</returns>
        System.Threading.Tasks.Task<AchTransferResponseVO> SubmitAchTransferUsingPostAsync (AchTransferRequestCO transferRequest);

        /// <summary>
        /// Submit an ACH transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of ApiResponse (AchTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchTransferResponseVO>> SubmitAchTransferUsingPostAsyncWithHttpInfo (AchTransferRequestCO transferRequest);
        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of AchBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<AchBankLinkResponseVO> UpdateAchBankLinkUsingPutAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (AchBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchBankLinkResponseVO>> UpdateAchBankLinkUsingPutAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ACHApi : IACHApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ACHApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ACHApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ACHApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ACHApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel the ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>AchTransferResponseVO</returns>
        public AchTransferResponseVO CancelAchTransferUsingDelete (Guid? nucleusFundingId)
        {
             ApiResponse<AchTransferResponseVO> localVarResponse = CancelAchTransferUsingDeleteWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of AchTransferResponseVO</returns>
        public ApiResponse< AchTransferResponseVO > CancelAchTransferUsingDeleteWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling ACHApi->CancelAchTransferUsingDelete");

            var localVarPath = "/ach/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAchTransferUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchTransferResponseVO)));
        }

        /// <summary>
        /// Cancel the ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of AchTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<AchTransferResponseVO> CancelAchTransferUsingDeleteAsync (Guid? nucleusFundingId)
        {
             ApiResponse<AchTransferResponseVO> localVarResponse = await CancelAchTransferUsingDeleteAsyncWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel the ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (AchTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchTransferResponseVO>> CancelAchTransferUsingDeleteAsyncWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling ACHApi->CancelAchTransferUsingDelete");

            var localVarPath = "/ach/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAchTransferUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchTransferResponseVO)));
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achBankLinkRequestCO">achBankLinkRequestCO</param>
        /// <returns>AchBankLinkResponseVO</returns>
        public AchBankLinkResponseVO CreateAchBankLinkUsingPost (AchBankLinkRequestCO achBankLinkRequestCO)
        {
             ApiResponse<AchBankLinkResponseVO> localVarResponse = CreateAchBankLinkUsingPostWithHttpInfo(achBankLinkRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achBankLinkRequestCO">achBankLinkRequestCO</param>
        /// <returns>ApiResponse of AchBankLinkResponseVO</returns>
        public ApiResponse< AchBankLinkResponseVO > CreateAchBankLinkUsingPostWithHttpInfo (AchBankLinkRequestCO achBankLinkRequestCO)
        {
            // verify the required parameter 'achBankLinkRequestCO' is set
            if (achBankLinkRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'achBankLinkRequestCO' when calling ACHApi->CreateAchBankLinkUsingPost");

            var localVarPath = "/ach/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (achBankLinkRequestCO != null && achBankLinkRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(achBankLinkRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = achBankLinkRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBankLinkResponseVO)));
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achBankLinkRequestCO">achBankLinkRequestCO</param>
        /// <returns>Task of AchBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<AchBankLinkResponseVO> CreateAchBankLinkUsingPostAsync (AchBankLinkRequestCO achBankLinkRequestCO)
        {
             ApiResponse<AchBankLinkResponseVO> localVarResponse = await CreateAchBankLinkUsingPostAsyncWithHttpInfo(achBankLinkRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achBankLinkRequestCO">achBankLinkRequestCO</param>
        /// <returns>Task of ApiResponse (AchBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchBankLinkResponseVO>> CreateAchBankLinkUsingPostAsyncWithHttpInfo (AchBankLinkRequestCO achBankLinkRequestCO)
        {
            // verify the required parameter 'achBankLinkRequestCO' is set
            if (achBankLinkRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'achBankLinkRequestCO' when calling ACHApi->CreateAchBankLinkUsingPost");

            var localVarPath = "/ach/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (achBankLinkRequestCO != null && achBankLinkRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(achBankLinkRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = achBankLinkRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBankLinkResponseVO)));
        }

        /// <summary>
        /// Create a beneficial owner 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beneficialOwnerRequest">beneficialOwnerRequest</param>
        /// <returns>AchBeneficialOwnerResponseVO</returns>
        public AchBeneficialOwnerResponseVO CreateAchBeneficialOwnerUsingPost (AchBeneficialOwnerRequestCO beneficialOwnerRequest)
        {
             ApiResponse<AchBeneficialOwnerResponseVO> localVarResponse = CreateAchBeneficialOwnerUsingPostWithHttpInfo(beneficialOwnerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a beneficial owner 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beneficialOwnerRequest">beneficialOwnerRequest</param>
        /// <returns>ApiResponse of AchBeneficialOwnerResponseVO</returns>
        public ApiResponse< AchBeneficialOwnerResponseVO > CreateAchBeneficialOwnerUsingPostWithHttpInfo (AchBeneficialOwnerRequestCO beneficialOwnerRequest)
        {
            // verify the required parameter 'beneficialOwnerRequest' is set
            if (beneficialOwnerRequest == null)
                throw new ApiException(400, "Missing required parameter 'beneficialOwnerRequest' when calling ACHApi->CreateAchBeneficialOwnerUsingPost");

            var localVarPath = "/ach/business/beneficial_owner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (beneficialOwnerRequest != null && beneficialOwnerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(beneficialOwnerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = beneficialOwnerRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchBeneficialOwnerUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBeneficialOwnerResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBeneficialOwnerResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBeneficialOwnerResponseVO)));
        }

        /// <summary>
        /// Create a beneficial owner 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beneficialOwnerRequest">beneficialOwnerRequest</param>
        /// <returns>Task of AchBeneficialOwnerResponseVO</returns>
        public async System.Threading.Tasks.Task<AchBeneficialOwnerResponseVO> CreateAchBeneficialOwnerUsingPostAsync (AchBeneficialOwnerRequestCO beneficialOwnerRequest)
        {
             ApiResponse<AchBeneficialOwnerResponseVO> localVarResponse = await CreateAchBeneficialOwnerUsingPostAsyncWithHttpInfo(beneficialOwnerRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a beneficial owner 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beneficialOwnerRequest">beneficialOwnerRequest</param>
        /// <returns>Task of ApiResponse (AchBeneficialOwnerResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchBeneficialOwnerResponseVO>> CreateAchBeneficialOwnerUsingPostAsyncWithHttpInfo (AchBeneficialOwnerRequestCO beneficialOwnerRequest)
        {
            // verify the required parameter 'beneficialOwnerRequest' is set
            if (beneficialOwnerRequest == null)
                throw new ApiException(400, "Missing required parameter 'beneficialOwnerRequest' when calling ACHApi->CreateAchBeneficialOwnerUsingPost");

            var localVarPath = "/ach/business/beneficial_owner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (beneficialOwnerRequest != null && beneficialOwnerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(beneficialOwnerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = beneficialOwnerRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchBeneficialOwnerUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBeneficialOwnerResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBeneficialOwnerResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBeneficialOwnerResponseVO)));
        }

        /// <summary>
        /// Create a business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>AchBusinessResponseVO</returns>
        public AchBusinessResponseVO CreateAchBusinessUsingPost (AchBusinessRequestCO businessRequest)
        {
             ApiResponse<AchBusinessResponseVO> localVarResponse = CreateAchBusinessUsingPostWithHttpInfo(businessRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>ApiResponse of AchBusinessResponseVO</returns>
        public ApiResponse< AchBusinessResponseVO > CreateAchBusinessUsingPostWithHttpInfo (AchBusinessRequestCO businessRequest)
        {
            // verify the required parameter 'businessRequest' is set
            if (businessRequest == null)
                throw new ApiException(400, "Missing required parameter 'businessRequest' when calling ACHApi->CreateAchBusinessUsingPost");

            var localVarPath = "/ach/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (businessRequest != null && businessRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchBusinessUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBusinessResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBusinessResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBusinessResponseVO)));
        }

        /// <summary>
        /// Create a business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Task of AchBusinessResponseVO</returns>
        public async System.Threading.Tasks.Task<AchBusinessResponseVO> CreateAchBusinessUsingPostAsync (AchBusinessRequestCO businessRequest)
        {
             ApiResponse<AchBusinessResponseVO> localVarResponse = await CreateAchBusinessUsingPostAsyncWithHttpInfo(businessRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Task of ApiResponse (AchBusinessResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchBusinessResponseVO>> CreateAchBusinessUsingPostAsyncWithHttpInfo (AchBusinessRequestCO businessRequest)
        {
            // verify the required parameter 'businessRequest' is set
            if (businessRequest == null)
                throw new ApiException(400, "Missing required parameter 'businessRequest' when calling ACHApi->CreateAchBusinessUsingPost");

            var localVarPath = "/ach/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (businessRequest != null && businessRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchBusinessUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBusinessResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBusinessResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBusinessResponseVO)));
        }

        /// <summary>
        /// Create an ACH card link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardLinkRequestCO">cardLinkRequestCO</param>
        /// <returns>AchCardLinkResponseVO</returns>
        public AchCardLinkResponseVO CreateAchCardLinkUsingPost (AchCardLinkRequestCO cardLinkRequestCO)
        {
             ApiResponse<AchCardLinkResponseVO> localVarResponse = CreateAchCardLinkUsingPostWithHttpInfo(cardLinkRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an ACH card link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardLinkRequestCO">cardLinkRequestCO</param>
        /// <returns>ApiResponse of AchCardLinkResponseVO</returns>
        public ApiResponse< AchCardLinkResponseVO > CreateAchCardLinkUsingPostWithHttpInfo (AchCardLinkRequestCO cardLinkRequestCO)
        {
            // verify the required parameter 'cardLinkRequestCO' is set
            if (cardLinkRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardLinkRequestCO' when calling ACHApi->CreateAchCardLinkUsingPost");

            var localVarPath = "/ach/card_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (cardLinkRequestCO != null && cardLinkRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardLinkRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardLinkRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchCardLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchCardLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchCardLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchCardLinkResponseVO)));
        }

        /// <summary>
        /// Create an ACH card link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardLinkRequestCO">cardLinkRequestCO</param>
        /// <returns>Task of AchCardLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<AchCardLinkResponseVO> CreateAchCardLinkUsingPostAsync (AchCardLinkRequestCO cardLinkRequestCO)
        {
             ApiResponse<AchCardLinkResponseVO> localVarResponse = await CreateAchCardLinkUsingPostAsyncWithHttpInfo(cardLinkRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an ACH card link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardLinkRequestCO">cardLinkRequestCO</param>
        /// <returns>Task of ApiResponse (AchCardLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchCardLinkResponseVO>> CreateAchCardLinkUsingPostAsyncWithHttpInfo (AchCardLinkRequestCO cardLinkRequestCO)
        {
            // verify the required parameter 'cardLinkRequestCO' is set
            if (cardLinkRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardLinkRequestCO' when calling ACHApi->CreateAchCardLinkUsingPost");

            var localVarPath = "/ach/card_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (cardLinkRequestCO != null && cardLinkRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardLinkRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardLinkRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchCardLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchCardLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchCardLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchCardLinkResponseVO)));
        }

        /// <summary>
        /// Create an ACH card reserve 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardReserveRequestCO">cardReserveRequestCO</param>
        /// <returns>AchCardReserveResponseVO</returns>
        public AchCardReserveResponseVO CreateAchCardReserveUsingPost (AchCardReserveRequestCO cardReserveRequestCO)
        {
             ApiResponse<AchCardReserveResponseVO> localVarResponse = CreateAchCardReserveUsingPostWithHttpInfo(cardReserveRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an ACH card reserve 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardReserveRequestCO">cardReserveRequestCO</param>
        /// <returns>ApiResponse of AchCardReserveResponseVO</returns>
        public ApiResponse< AchCardReserveResponseVO > CreateAchCardReserveUsingPostWithHttpInfo (AchCardReserveRequestCO cardReserveRequestCO)
        {
            // verify the required parameter 'cardReserveRequestCO' is set
            if (cardReserveRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardReserveRequestCO' when calling ACHApi->CreateAchCardReserveUsingPost");

            var localVarPath = "/ach/card_reserve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (cardReserveRequestCO != null && cardReserveRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardReserveRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardReserveRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchCardReserveUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchCardReserveResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchCardReserveResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchCardReserveResponseVO)));
        }

        /// <summary>
        /// Create an ACH card reserve 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardReserveRequestCO">cardReserveRequestCO</param>
        /// <returns>Task of AchCardReserveResponseVO</returns>
        public async System.Threading.Tasks.Task<AchCardReserveResponseVO> CreateAchCardReserveUsingPostAsync (AchCardReserveRequestCO cardReserveRequestCO)
        {
             ApiResponse<AchCardReserveResponseVO> localVarResponse = await CreateAchCardReserveUsingPostAsyncWithHttpInfo(cardReserveRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an ACH card reserve 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardReserveRequestCO">cardReserveRequestCO</param>
        /// <returns>Task of ApiResponse (AchCardReserveResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchCardReserveResponseVO>> CreateAchCardReserveUsingPostAsyncWithHttpInfo (AchCardReserveRequestCO cardReserveRequestCO)
        {
            // verify the required parameter 'cardReserveRequestCO' is set
            if (cardReserveRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardReserveRequestCO' when calling ACHApi->CreateAchCardReserveUsingPost");

            var localVarPath = "/ach/card_reserve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (cardReserveRequestCO != null && cardReserveRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardReserveRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardReserveRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchCardReserveUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchCardReserveResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchCardReserveResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchCardReserveResponseVO)));
        }

        /// <summary>
        /// Create a client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>AchClientResponseVO</returns>
        public AchClientResponseVO CreateAchClientUsingPost (AchClientRequestCO clientRequest)
        {
             ApiResponse<AchClientResponseVO> localVarResponse = CreateAchClientUsingPostWithHttpInfo(clientRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>ApiResponse of AchClientResponseVO</returns>
        public ApiResponse< AchClientResponseVO > CreateAchClientUsingPostWithHttpInfo (AchClientRequestCO clientRequest)
        {
            // verify the required parameter 'clientRequest' is set
            if (clientRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientRequest' when calling ACHApi->CreateAchClientUsingPost");

            var localVarPath = "/ach/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (clientRequest != null && clientRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchClientResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchClientResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchClientResponseVO)));
        }

        /// <summary>
        /// Create a client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>Task of AchClientResponseVO</returns>
        public async System.Threading.Tasks.Task<AchClientResponseVO> CreateAchClientUsingPostAsync (AchClientRequestCO clientRequest)
        {
             ApiResponse<AchClientResponseVO> localVarResponse = await CreateAchClientUsingPostAsyncWithHttpInfo(clientRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>Task of ApiResponse (AchClientResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchClientResponseVO>> CreateAchClientUsingPostAsyncWithHttpInfo (AchClientRequestCO clientRequest)
        {
            // verify the required parameter 'clientRequest' is set
            if (clientRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientRequest' when calling ACHApi->CreateAchClientUsingPost");

            var localVarPath = "/ach/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (clientRequest != null && clientRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchClientResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchClientResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchClientResponseVO)));
        }

        /// <summary>
        /// Create an ACH reserve link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reserveLinkRequestCO">reserveLinkRequestCO</param>
        /// <returns>AchReserveLinkResponseVO</returns>
        public AchReserveLinkResponseVO CreateAchReserveLinkUsingPost (AchReserveLinkRequestCO reserveLinkRequestCO)
        {
             ApiResponse<AchReserveLinkResponseVO> localVarResponse = CreateAchReserveLinkUsingPostWithHttpInfo(reserveLinkRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an ACH reserve link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reserveLinkRequestCO">reserveLinkRequestCO</param>
        /// <returns>ApiResponse of AchReserveLinkResponseVO</returns>
        public ApiResponse< AchReserveLinkResponseVO > CreateAchReserveLinkUsingPostWithHttpInfo (AchReserveLinkRequestCO reserveLinkRequestCO)
        {
            // verify the required parameter 'reserveLinkRequestCO' is set
            if (reserveLinkRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'reserveLinkRequestCO' when calling ACHApi->CreateAchReserveLinkUsingPost");

            var localVarPath = "/ach/reserve_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (reserveLinkRequestCO != null && reserveLinkRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reserveLinkRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reserveLinkRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchReserveLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchReserveLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchReserveLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchReserveLinkResponseVO)));
        }

        /// <summary>
        /// Create an ACH reserve link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reserveLinkRequestCO">reserveLinkRequestCO</param>
        /// <returns>Task of AchReserveLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<AchReserveLinkResponseVO> CreateAchReserveLinkUsingPostAsync (AchReserveLinkRequestCO reserveLinkRequestCO)
        {
             ApiResponse<AchReserveLinkResponseVO> localVarResponse = await CreateAchReserveLinkUsingPostAsyncWithHttpInfo(reserveLinkRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an ACH reserve link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reserveLinkRequestCO">reserveLinkRequestCO</param>
        /// <returns>Task of ApiResponse (AchReserveLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchReserveLinkResponseVO>> CreateAchReserveLinkUsingPostAsyncWithHttpInfo (AchReserveLinkRequestCO reserveLinkRequestCO)
        {
            // verify the required parameter 'reserveLinkRequestCO' is set
            if (reserveLinkRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'reserveLinkRequestCO' when calling ACHApi->CreateAchReserveLinkUsingPost");

            var localVarPath = "/ach/reserve_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (reserveLinkRequestCO != null && reserveLinkRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reserveLinkRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reserveLinkRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchReserveLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchReserveLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchReserveLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchReserveLinkResponseVO)));
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>AchBankLinkResponseVO</returns>
        public AchBankLinkResponseVO DeleteAchBankLinkUsingDelete (Guid? nucleusBankLinkId)
        {
             ApiResponse<AchBankLinkResponseVO> localVarResponse = DeleteAchBankLinkUsingDeleteWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of AchBankLinkResponseVO</returns>
        public ApiResponse< AchBankLinkResponseVO > DeleteAchBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling ACHApi->DeleteAchBankLinkUsingDelete");

            var localVarPath = "/ach/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAchBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBankLinkResponseVO)));
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of AchBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<AchBankLinkResponseVO> DeleteAchBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<AchBankLinkResponseVO> localVarResponse = await DeleteAchBankLinkUsingDeleteAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (AchBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchBankLinkResponseVO>> DeleteAchBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling ACHApi->DeleteAchBankLinkUsingDelete");

            var localVarPath = "/ach/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAchBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBankLinkResponseVO)));
        }

        /// <summary>
        /// Fund card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achCardRequestCO">achCardRequestCO</param>
        /// <returns>AchCardResponseVO</returns>
        public AchCardResponseVO FundCardUsingPost (AchCardRequestCO achCardRequestCO)
        {
             ApiResponse<AchCardResponseVO> localVarResponse = FundCardUsingPostWithHttpInfo(achCardRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fund card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achCardRequestCO">achCardRequestCO</param>
        /// <returns>ApiResponse of AchCardResponseVO</returns>
        public ApiResponse< AchCardResponseVO > FundCardUsingPostWithHttpInfo (AchCardRequestCO achCardRequestCO)
        {
            // verify the required parameter 'achCardRequestCO' is set
            if (achCardRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'achCardRequestCO' when calling ACHApi->FundCardUsingPost");

            var localVarPath = "/ach/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (achCardRequestCO != null && achCardRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(achCardRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = achCardRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundCardUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchCardResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchCardResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchCardResponseVO)));
        }

        /// <summary>
        /// Fund card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achCardRequestCO">achCardRequestCO</param>
        /// <returns>Task of AchCardResponseVO</returns>
        public async System.Threading.Tasks.Task<AchCardResponseVO> FundCardUsingPostAsync (AchCardRequestCO achCardRequestCO)
        {
             ApiResponse<AchCardResponseVO> localVarResponse = await FundCardUsingPostAsyncWithHttpInfo(achCardRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fund card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achCardRequestCO">achCardRequestCO</param>
        /// <returns>Task of ApiResponse (AchCardResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchCardResponseVO>> FundCardUsingPostAsyncWithHttpInfo (AchCardRequestCO achCardRequestCO)
        {
            // verify the required parameter 'achCardRequestCO' is set
            if (achCardRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'achCardRequestCO' when calling ACHApi->FundCardUsingPost");

            var localVarPath = "/ach/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (achCardRequestCO != null && achCardRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(achCardRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = achCardRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundCardUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchCardResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchCardResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchCardResponseVO)));
        }

        /// <summary>
        /// Get balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>AchBalanceResponseVO</returns>
        public AchBalanceResponseVO GetAchBalanceUsingGet (Guid? portfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<AchBalanceResponseVO> localVarResponse = GetAchBalanceUsingGetWithHttpInfo(portfolioId, endDate, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of AchBalanceResponseVO</returns>
        public ApiResponse< AchBalanceResponseVO > GetAchBalanceUsingGetWithHttpInfo (Guid? portfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling ACHApi->GetAchBalanceUsingGet");

            var localVarPath = "/ach/balance/{portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBalanceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBalanceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBalanceResponseVO)));
        }

        /// <summary>
        /// Get balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of AchBalanceResponseVO</returns>
        public async System.Threading.Tasks.Task<AchBalanceResponseVO> GetAchBalanceUsingGetAsync (Guid? portfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<AchBalanceResponseVO> localVarResponse = await GetAchBalanceUsingGetAsyncWithHttpInfo(portfolioId, endDate, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (AchBalanceResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchBalanceResponseVO>> GetAchBalanceUsingGetAsyncWithHttpInfo (Guid? portfolioId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling ACHApi->GetAchBalanceUsingGet");

            var localVarPath = "/ach/balance/{portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBalanceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBalanceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBalanceResponseVO)));
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>AchBankLinkResponseVO</returns>
        public AchBankLinkResponseVO GetAchBankLinkUsingGet (Guid? nucleusBankLinkId)
        {
             ApiResponse<AchBankLinkResponseVO> localVarResponse = GetAchBankLinkUsingGetWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of AchBankLinkResponseVO</returns>
        public ApiResponse< AchBankLinkResponseVO > GetAchBankLinkUsingGetWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling ACHApi->GetAchBankLinkUsingGet");

            var localVarPath = "/ach/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBankLinkResponseVO)));
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of AchBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<AchBankLinkResponseVO> GetAchBankLinkUsingGetAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<AchBankLinkResponseVO> localVarResponse = await GetAchBankLinkUsingGetAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (AchBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchBankLinkResponseVO>> GetAchBankLinkUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling ACHApi->GetAchBankLinkUsingGet");

            var localVarPath = "/ach/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBankLinkResponseVO)));
        }

        /// <summary>
        /// Get bank links for a reserve account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AchBankLinkResponseVO&gt;</returns>
        public List<AchBankLinkResponseVO> GetAchBankLinksForReserveAccountUsingGet ()
        {
             ApiResponse<List<AchBankLinkResponseVO>> localVarResponse = GetAchBankLinksForReserveAccountUsingGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bank links for a reserve account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AchBankLinkResponseVO&gt;</returns>
        public ApiResponse< List<AchBankLinkResponseVO> > GetAchBankLinksForReserveAccountUsingGetWithHttpInfo ()
        {

            var localVarPath = "/ach/bank_link/reserve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }// authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchBankLinksForReserveAccountUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AchBankLinkResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AchBankLinkResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AchBankLinkResponseVO>)));
        }

        /// <summary>
        /// Get bank links for a reserve account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AchBankLinkResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AchBankLinkResponseVO>> GetAchBankLinksForReserveAccountUsingGetAsync ()
        {
             ApiResponse<List<AchBankLinkResponseVO>> localVarResponse = await GetAchBankLinksForReserveAccountUsingGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bank links for a reserve account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AchBankLinkResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AchBankLinkResponseVO>>> GetAchBankLinksForReserveAccountUsingGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/ach/bank_link/reserve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }// authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchBankLinksForReserveAccountUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AchBankLinkResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AchBankLinkResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AchBankLinkResponseVO>)));
        }

        /// <summary>
        /// Get business balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">business_id</param>
        /// <returns>AchBalanceResponseVO</returns>
        public AchBalanceResponseVO GetAchBusinessBalanceUsingGet (Guid? businessId)
        {
             ApiResponse<AchBalanceResponseVO> localVarResponse = GetAchBusinessBalanceUsingGetWithHttpInfo(businessId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get business balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">business_id</param>
        /// <returns>ApiResponse of AchBalanceResponseVO</returns>
        public ApiResponse< AchBalanceResponseVO > GetAchBusinessBalanceUsingGetWithHttpInfo (Guid? businessId)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling ACHApi->GetAchBusinessBalanceUsingGet");

            var localVarPath = "/ach/business/balance/{business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchBusinessBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBalanceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBalanceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBalanceResponseVO)));
        }

        /// <summary>
        /// Get business balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">business_id</param>
        /// <returns>Task of AchBalanceResponseVO</returns>
        public async System.Threading.Tasks.Task<AchBalanceResponseVO> GetAchBusinessBalanceUsingGetAsync (Guid? businessId)
        {
             ApiResponse<AchBalanceResponseVO> localVarResponse = await GetAchBusinessBalanceUsingGetAsyncWithHttpInfo(businessId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get business balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">business_id</param>
        /// <returns>Task of ApiResponse (AchBalanceResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchBalanceResponseVO>> GetAchBusinessBalanceUsingGetAsyncWithHttpInfo (Guid? businessId)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling ACHApi->GetAchBusinessBalanceUsingGet");

            var localVarPath = "/ach/business/balance/{business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchBusinessBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBalanceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBalanceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBalanceResponseVO)));
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;AchBankLinkResponseVO&gt;</returns>
        public List<AchBankLinkResponseVO> GetAchClientBankLinksUsingGet (Guid? nucleusClientId)
        {
             ApiResponse<List<AchBankLinkResponseVO>> localVarResponse = GetAchClientBankLinksUsingGetWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;AchBankLinkResponseVO&gt;</returns>
        public ApiResponse< List<AchBankLinkResponseVO> > GetAchClientBankLinksUsingGetWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling ACHApi->GetAchClientBankLinksUsingGet");

            var localVarPath = "/ach/bank_link/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchClientBankLinksUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AchBankLinkResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AchBankLinkResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AchBankLinkResponseVO>)));
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;AchBankLinkResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AchBankLinkResponseVO>> GetAchClientBankLinksUsingGetAsync (Guid? nucleusClientId)
        {
             ApiResponse<List<AchBankLinkResponseVO>> localVarResponse = await GetAchClientBankLinksUsingGetAsyncWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;AchBankLinkResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AchBankLinkResponseVO>>> GetAchClientBankLinksUsingGetAsyncWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling ACHApi->GetAchClientBankLinksUsingGet");

            var localVarPath = "/ach/bank_link/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchClientBankLinksUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AchBankLinkResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AchBankLinkResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AchBankLinkResponseVO>)));
        }

        /// <summary>
        /// Get the ACH status 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>AchTransferResponseVO</returns>
        public AchTransferResponseVO GetAchStatusUsingGet (Guid? nucleusBusinessId)
        {
             ApiResponse<AchTransferResponseVO> localVarResponse = GetAchStatusUsingGetWithHttpInfo(nucleusBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the ACH status 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>ApiResponse of AchTransferResponseVO</returns>
        public ApiResponse< AchTransferResponseVO > GetAchStatusUsingGetWithHttpInfo (Guid? nucleusBusinessId)
        {
            // verify the required parameter 'nucleusBusinessId' is set
            if (nucleusBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBusinessId' when calling ACHApi->GetAchStatusUsingGet");

            var localVarPath = "/ach/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchTransferResponseVO)));
        }

        /// <summary>
        /// Get the ACH status 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of AchTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<AchTransferResponseVO> GetAchStatusUsingGetAsync (Guid? nucleusBusinessId)
        {
             ApiResponse<AchTransferResponseVO> localVarResponse = await GetAchStatusUsingGetAsyncWithHttpInfo(nucleusBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the ACH status 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of ApiResponse (AchTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchTransferResponseVO>> GetAchStatusUsingGetAsyncWithHttpInfo (Guid? nucleusBusinessId)
        {
            // verify the required parameter 'nucleusBusinessId' is set
            if (nucleusBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBusinessId' when calling ACHApi->GetAchStatusUsingGet");

            var localVarPath = "/ach/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchTransferResponseVO)));
        }

        /// <summary>
        /// Get the ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>AchTransferResponseVO</returns>
        public AchTransferResponseVO GetAchTransferUsingGet (Guid? nucleusFundingId)
        {
             ApiResponse<AchTransferResponseVO> localVarResponse = GetAchTransferUsingGetWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of AchTransferResponseVO</returns>
        public ApiResponse< AchTransferResponseVO > GetAchTransferUsingGetWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling ACHApi->GetAchTransferUsingGet");

            var localVarPath = "/ach/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchTransferUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchTransferResponseVO)));
        }

        /// <summary>
        /// Get the ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of AchTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<AchTransferResponseVO> GetAchTransferUsingGetAsync (Guid? nucleusFundingId)
        {
             ApiResponse<AchTransferResponseVO> localVarResponse = await GetAchTransferUsingGetAsyncWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (AchTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchTransferResponseVO>> GetAchTransferUsingGetAsyncWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling ACHApi->GetAchTransferUsingGet");

            var localVarPath = "/ach/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchTransferUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchTransferResponseVO)));
        }

        /// <summary>
        /// Get a list of client&#39;s ACH transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAchTransferResponseVO</returns>
        public PageAchTransferResponseVO GetListOfClientAchTransfersUsingGet (Guid? nucleusClientId, int? page = null, int? size = null)
        {
             ApiResponse<PageAchTransferResponseVO> localVarResponse = GetListOfClientAchTransfersUsingGetWithHttpInfo(nucleusClientId, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of client&#39;s ACH transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAchTransferResponseVO</returns>
        public ApiResponse< PageAchTransferResponseVO > GetListOfClientAchTransfersUsingGetWithHttpInfo (Guid? nucleusClientId, int? page = null, int? size = null)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling ACHApi->GetListOfClientAchTransfersUsingGet");

            var localVarPath = "/ach/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfClientAchTransfersUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAchTransferResponseVO)));
        }

        /// <summary>
        /// Get a list of client&#39;s ACH transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAchTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<PageAchTransferResponseVO> GetListOfClientAchTransfersUsingGetAsync (Guid? nucleusClientId, int? page = null, int? size = null)
        {
             ApiResponse<PageAchTransferResponseVO> localVarResponse = await GetListOfClientAchTransfersUsingGetAsyncWithHttpInfo(nucleusClientId, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of client&#39;s ACH transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAchTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAchTransferResponseVO>> GetListOfClientAchTransfersUsingGetAsyncWithHttpInfo (Guid? nucleusClientId, int? page = null, int? size = null)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling ACHApi->GetListOfClientAchTransfersUsingGet");

            var localVarPath = "/ach/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfClientAchTransfersUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAchTransferResponseVO)));
        }

        /// <summary>
        /// Get a list of tenant&#39;s ACH transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <returns>PageAchTransferResponseVO</returns>
        public PageAchTransferResponseVO GetListOfTenantAchTransfersUsingGet (DateTime? endDate = null, int? page = null, int? size = null, DateTime? startDate = null, string status = null)
        {
             ApiResponse<PageAchTransferResponseVO> localVarResponse = GetListOfTenantAchTransfersUsingGetWithHttpInfo(endDate, page, size, startDate, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of tenant&#39;s ACH transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <returns>ApiResponse of PageAchTransferResponseVO</returns>
        public ApiResponse< PageAchTransferResponseVO > GetListOfTenantAchTransfersUsingGetWithHttpInfo (DateTime? endDate = null, int? page = null, int? size = null, DateTime? startDate = null, string status = null)
        {

            var localVarPath = "/ach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfTenantAchTransfersUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAchTransferResponseVO)));
        }

        /// <summary>
        /// Get a list of tenant&#39;s ACH transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <returns>Task of PageAchTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<PageAchTransferResponseVO> GetListOfTenantAchTransfersUsingGetAsync (DateTime? endDate = null, int? page = null, int? size = null, DateTime? startDate = null, string status = null)
        {
             ApiResponse<PageAchTransferResponseVO> localVarResponse = await GetListOfTenantAchTransfersUsingGetAsyncWithHttpInfo(endDate, page, size, startDate, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of tenant&#39;s ACH transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <returns>Task of ApiResponse (PageAchTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAchTransferResponseVO>> GetListOfTenantAchTransfersUsingGetAsyncWithHttpInfo (DateTime? endDate = null, int? page = null, int? size = null, DateTime? startDate = null, string status = null)
        {

            var localVarPath = "/ach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfTenantAchTransfersUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAchTransferResponseVO)));
        }

        /// <summary>
        /// Submit an ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>AchTransferResponseVO</returns>
        public AchTransferResponseVO SubmitAchTransferUsingPost (AchTransferRequestCO transferRequest)
        {
             ApiResponse<AchTransferResponseVO> localVarResponse = SubmitAchTransferUsingPostWithHttpInfo(transferRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit an ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>ApiResponse of AchTransferResponseVO</returns>
        public ApiResponse< AchTransferResponseVO > SubmitAchTransferUsingPostWithHttpInfo (AchTransferRequestCO transferRequest)
        {
            // verify the required parameter 'transferRequest' is set
            if (transferRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferRequest' when calling ACHApi->SubmitAchTransferUsingPost");

            var localVarPath = "/ach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (transferRequest != null && transferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitAchTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchTransferResponseVO)));
        }

        /// <summary>
        /// Submit an ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of AchTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<AchTransferResponseVO> SubmitAchTransferUsingPostAsync (AchTransferRequestCO transferRequest)
        {
             ApiResponse<AchTransferResponseVO> localVarResponse = await SubmitAchTransferUsingPostAsyncWithHttpInfo(transferRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit an ACH transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of ApiResponse (AchTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchTransferResponseVO>> SubmitAchTransferUsingPostAsyncWithHttpInfo (AchTransferRequestCO transferRequest)
        {
            // verify the required parameter 'transferRequest' is set
            if (transferRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferRequest' when calling ACHApi->SubmitAchTransferUsingPost");

            var localVarPath = "/ach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (transferRequest != null && transferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitAchTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchTransferResponseVO)));
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>AchBankLinkResponseVO</returns>
        public AchBankLinkResponseVO UpdateAchBankLinkUsingPut (Guid? nucleusBankLinkId)
        {
             ApiResponse<AchBankLinkResponseVO> localVarResponse = UpdateAchBankLinkUsingPutWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of AchBankLinkResponseVO</returns>
        public ApiResponse< AchBankLinkResponseVO > UpdateAchBankLinkUsingPutWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling ACHApi->UpdateAchBankLinkUsingPut");

            var localVarPath = "/ach/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAchBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBankLinkResponseVO)));
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of AchBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<AchBankLinkResponseVO> UpdateAchBankLinkUsingPutAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<AchBankLinkResponseVO> localVarResponse = await UpdateAchBankLinkUsingPutAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (AchBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchBankLinkResponseVO>> UpdateAchBankLinkUsingPutAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling ACHApi->UpdateAchBankLinkUsingPut");

            var localVarPath = "/ach/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAchBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchBankLinkResponseVO)));
        }

    }
}
