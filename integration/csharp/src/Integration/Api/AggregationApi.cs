/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAggregationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// Create mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationRequestObject">aggregationRequestObject</param>
        /// <returns>AggregationAccountsResponseVO</returns>
        AggregationAccountsResponseVO CreateAggregationAccountUsingPost (AggregationRequestObject aggregationRequestObject);

        /// <summary>
        /// Create mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// Create mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationRequestObject">aggregationRequestObject</param>
        /// <returns>ApiResponse of AggregationAccountsResponseVO</returns>
        ApiResponse<AggregationAccountsResponseVO> CreateAggregationAccountUsingPostWithHttpInfo (AggregationRequestObject aggregationRequestObject);
        /// <summary>
        /// De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// De-Link mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns></returns>
        void DeleteAggregationAccountUsingDelete (Guid? nucleusAggregationAccountId, string deleteType = null, string nucleusData = null);

        /// <summary>
        /// De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// De-Link mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAggregationAccountUsingDeleteWithHttpInfo (Guid? nucleusAggregationAccountId, string deleteType = null, string nucleusData = null);
        /// <summary>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>List&lt;AggregationAccountResponseVO&gt;</returns>
        List<AggregationAccountResponseVO> GetAggregationAccountAllUsingGet (List<Guid?> aggregationAccountIdList);

        /// <summary>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountResponseVO&gt;</returns>
        ApiResponse<List<AggregationAccountResponseVO>> GetAggregationAccountAllUsingGetWithHttpInfo (List<Guid?> aggregationAccountIdList);
        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts 
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account balance details with for the given aggregation accounts
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>List&lt;AggregationAccountBalanceResponseVO&gt;</returns>
        List<AggregationAccountBalanceResponseVO> GetAggregationAccountBalanceAllUsingGet (List<Guid?> aggregationAccountIdList);

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts 
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account balance details with for the given aggregation accounts
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountBalanceResponseVO&gt;</returns>
        ApiResponse<List<AggregationAccountBalanceResponseVO>> GetAggregationAccountBalanceAllUsingGetWithHttpInfo (List<Guid?> aggregationAccountIdList);
        /// <summary>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>AggregationAccountBalanceResponseVO</returns>
        AggregationAccountBalanceResponseVO GetAggregationAccountBalanceUsingGet (Guid? nucleusAggregationAccountId);

        /// <summary>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccountBalanceResponseVO</returns>
        ApiResponse<AggregationAccountBalanceResponseVO> GetAggregationAccountBalanceUsingGetWithHttpInfo (Guid? nucleusAggregationAccountId);
        /// <summary>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>List&lt;AggregationAccountHoldingResponseVO&gt;</returns>
        List<AggregationAccountHoldingResponseVO> GetAggregationAccountHoldingAllUsingGet (List<Guid?> aggregationAccountIdList);

        /// <summary>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountHoldingResponseVO&gt;</returns>
        ApiResponse<List<AggregationAccountHoldingResponseVO>> GetAggregationAccountHoldingAllUsingGetWithHttpInfo (List<Guid?> aggregationAccountIdList);
        /// <summary>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>AggregationAccountHoldingResponseVO</returns>
        AggregationAccountHoldingResponseVO GetAggregationAccountHoldingUsingGet (Guid? nucleusAggregationAccountId);

        /// <summary>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccountHoldingResponseVO</returns>
        ApiResponse<AggregationAccountHoldingResponseVO> GetAggregationAccountHoldingUsingGetWithHttpInfo (Guid? nucleusAggregationAccountId);
        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts 
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account balance details with for the given aggregation accounts
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>List&lt;AggregationAccountTransactionResponseVO&gt;</returns>
        List<AggregationAccountTransactionResponseVO> GetAggregationAccountTransactionAllUsingGet (List<Guid?> aggregationAccountIdList);

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts 
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account balance details with for the given aggregation accounts
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountTransactionResponseVO&gt;</returns>
        ApiResponse<List<AggregationAccountTransactionResponseVO>> GetAggregationAccountTransactionAllUsingGetWithHttpInfo (List<Guid?> aggregationAccountIdList);
        /// <summary>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>AggregationAccountTransactionResponseVO</returns>
        AggregationAccountTransactionResponseVO GetAggregationAccountTransactionUsingGet (Guid? nucleusAggregationAccountId);

        /// <summary>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccountTransactionResponseVO</returns>
        ApiResponse<AggregationAccountTransactionResponseVO> GetAggregationAccountTransactionUsingGetWithHttpInfo (Guid? nucleusAggregationAccountId);
        /// <summary>
        /// Fetch aggregation account details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>AggregationAccountResponseVO</returns>
        AggregationAccountResponseVO GetAggregationAccountUsingGet (Guid? nucleusAggregationAccountId);

        /// <summary>
        /// Fetch aggregation account details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccountResponseVO</returns>
        ApiResponse<AggregationAccountResponseVO> GetAggregationAccountUsingGetWithHttpInfo (Guid? nucleusAggregationAccountId);
        /// <summary>
        /// Get Value of the given property
        /// </summary>
        /// <remarks>
        /// Get Value of the given property
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>PropertyValueResponseVO</returns>
        PropertyValueResponseVO GetPropertyValue (Guid? nucleusAggregationAccountId, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null);

        /// <summary>
        /// Get Value of the given property
        /// </summary>
        /// <remarks>
        /// Get Value of the given property
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>ApiResponse of PropertyValueResponseVO</returns>
        ApiResponse<PropertyValueResponseVO> GetPropertyValueWithHttpInfo (Guid? nucleusAggregationAccountId, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// Create mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationRequestObject">aggregationRequestObject</param>
        /// <returns>Task of AggregationAccountsResponseVO</returns>
        System.Threading.Tasks.Task<AggregationAccountsResponseVO> CreateAggregationAccountUsingPostAsync (AggregationRequestObject aggregationRequestObject);

        /// <summary>
        /// Create mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// Create mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationRequestObject">aggregationRequestObject</param>
        /// <returns>Task of ApiResponse (AggregationAccountsResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountsResponseVO>> CreateAggregationAccountUsingPostAsyncWithHttpInfo (AggregationRequestObject aggregationRequestObject);
        /// <summary>
        /// De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// De-Link mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAggregationAccountUsingDeleteAsync (Guid? nucleusAggregationAccountId, string deleteType = null, string nucleusData = null);

        /// <summary>
        /// De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// De-Link mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountUsingDeleteAsyncWithHttpInfo (Guid? nucleusAggregationAccountId, string deleteType = null, string nucleusData = null);
        /// <summary>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of List&lt;AggregationAccountResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccountResponseVO>> GetAggregationAccountAllUsingGetAsync (List<Guid?> aggregationAccountIdList);

        /// <summary>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountResponseVO>>> GetAggregationAccountAllUsingGetAsyncWithHttpInfo (List<Guid?> aggregationAccountIdList);
        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts 
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account balance details with for the given aggregation accounts
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of List&lt;AggregationAccountBalanceResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccountBalanceResponseVO>> GetAggregationAccountBalanceAllUsingGetAsync (List<Guid?> aggregationAccountIdList);

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts 
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account balance details with for the given aggregation accounts
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountBalanceResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountBalanceResponseVO>>> GetAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo (List<Guid?> aggregationAccountIdList);
        /// <summary>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of AggregationAccountBalanceResponseVO</returns>
        System.Threading.Tasks.Task<AggregationAccountBalanceResponseVO> GetAggregationAccountBalanceUsingGetAsync (Guid? nucleusAggregationAccountId);

        /// <summary>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountBalanceResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountBalanceResponseVO>> GetAggregationAccountBalanceUsingGetAsyncWithHttpInfo (Guid? nucleusAggregationAccountId);
        /// <summary>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of List&lt;AggregationAccountHoldingResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccountHoldingResponseVO>> GetAggregationAccountHoldingAllUsingGetAsync (List<Guid?> aggregationAccountIdList);

        /// <summary>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountHoldingResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountHoldingResponseVO>>> GetAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo (List<Guid?> aggregationAccountIdList);
        /// <summary>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of AggregationAccountHoldingResponseVO</returns>
        System.Threading.Tasks.Task<AggregationAccountHoldingResponseVO> GetAggregationAccountHoldingUsingGetAsync (Guid? nucleusAggregationAccountId);

        /// <summary>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountHoldingResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountHoldingResponseVO>> GetAggregationAccountHoldingUsingGetAsyncWithHttpInfo (Guid? nucleusAggregationAccountId);
        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts 
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account balance details with for the given aggregation accounts
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of List&lt;AggregationAccountTransactionResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccountTransactionResponseVO>> GetAggregationAccountTransactionAllUsingGetAsync (List<Guid?> aggregationAccountIdList);

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts 
        /// </summary>
        /// <remarks>
        /// Fetch all aggregation account balance details with for the given aggregation accounts
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountTransactionResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountTransactionResponseVO>>> GetAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo (List<Guid?> aggregationAccountIdList);
        /// <summary>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of AggregationAccountTransactionResponseVO</returns>
        System.Threading.Tasks.Task<AggregationAccountTransactionResponseVO> GetAggregationAccountTransactionUsingGetAsync (Guid? nucleusAggregationAccountId);

        /// <summary>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountTransactionResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountTransactionResponseVO>> GetAggregationAccountTransactionUsingGetAsyncWithHttpInfo (Guid? nucleusAggregationAccountId);
        /// <summary>
        /// Fetch aggregation account details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of AggregationAccountResponseVO</returns>
        System.Threading.Tasks.Task<AggregationAccountResponseVO> GetAggregationAccountUsingGetAsync (Guid? nucleusAggregationAccountId);

        /// <summary>
        /// Fetch aggregation account details with the mapping created in POST endpoint
        /// </summary>
        /// <remarks>
        /// Fetch aggregation account details with the mapping created in POST endpoint
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountResponseVO>> GetAggregationAccountUsingGetAsyncWithHttpInfo (Guid? nucleusAggregationAccountId);
        /// <summary>
        /// Get Value of the given property
        /// </summary>
        /// <remarks>
        /// Get Value of the given property
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>Task of PropertyValueResponseVO</returns>
        System.Threading.Tasks.Task<PropertyValueResponseVO> GetPropertyValueAsync (Guid? nucleusAggregationAccountId, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null);

        /// <summary>
        /// Get Value of the given property
        /// </summary>
        /// <remarks>
        /// Get Value of the given property
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>Task of ApiResponse (PropertyValueResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyValueResponseVO>> GetPropertyValueAsyncWithHttpInfo (Guid? nucleusAggregationAccountId, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AggregationApi : IAggregationApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AggregationApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AggregationApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create mapping between client,vendor,tenant Create mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationRequestObject">aggregationRequestObject</param>
        /// <returns>AggregationAccountsResponseVO</returns>
        public AggregationAccountsResponseVO CreateAggregationAccountUsingPost (AggregationRequestObject aggregationRequestObject)
        {
             ApiResponse<AggregationAccountsResponseVO> localVarResponse = CreateAggregationAccountUsingPostWithHttpInfo(aggregationRequestObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create mapping between client,vendor,tenant Create mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationRequestObject">aggregationRequestObject</param>
        /// <returns>ApiResponse of AggregationAccountsResponseVO</returns>
        public ApiResponse< AggregationAccountsResponseVO > CreateAggregationAccountUsingPostWithHttpInfo (AggregationRequestObject aggregationRequestObject)
        {
            // verify the required parameter 'aggregationRequestObject' is set
            if (aggregationRequestObject == null)
                throw new ApiException(400, "Missing required parameter 'aggregationRequestObject' when calling AggregationApi->CreateAggregationAccountUsingPost");

            var localVarPath = "/aggregation/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationRequestObject != null && aggregationRequestObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationRequestObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationRequestObject; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountsResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountsResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountsResponseVO)));
        }

        /// <summary>
        /// Create mapping between client,vendor,tenant Create mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationRequestObject">aggregationRequestObject</param>
        /// <returns>Task of AggregationAccountsResponseVO</returns>
        public async System.Threading.Tasks.Task<AggregationAccountsResponseVO> CreateAggregationAccountUsingPostAsync (AggregationRequestObject aggregationRequestObject)
        {
             ApiResponse<AggregationAccountsResponseVO> localVarResponse = await CreateAggregationAccountUsingPostAsyncWithHttpInfo(aggregationRequestObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create mapping between client,vendor,tenant Create mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationRequestObject">aggregationRequestObject</param>
        /// <returns>Task of ApiResponse (AggregationAccountsResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountsResponseVO>> CreateAggregationAccountUsingPostAsyncWithHttpInfo (AggregationRequestObject aggregationRequestObject)
        {
            // verify the required parameter 'aggregationRequestObject' is set
            if (aggregationRequestObject == null)
                throw new ApiException(400, "Missing required parameter 'aggregationRequestObject' when calling AggregationApi->CreateAggregationAccountUsingPost");

            var localVarPath = "/aggregation/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationRequestObject != null && aggregationRequestObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationRequestObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationRequestObject; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountsResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountsResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountsResponseVO)));
        }

        /// <summary>
        /// De-Link mapping between client,vendor,tenant De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns></returns>
        public void DeleteAggregationAccountUsingDelete (Guid? nucleusAggregationAccountId, string deleteType = null, string nucleusData = null)
        {
             DeleteAggregationAccountUsingDeleteWithHttpInfo(nucleusAggregationAccountId, deleteType, nucleusData);
        }

        /// <summary>
        /// De-Link mapping between client,vendor,tenant De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAggregationAccountUsingDeleteWithHttpInfo (Guid? nucleusAggregationAccountId, string deleteType = null, string nucleusData = null)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->DeleteAggregationAccountUsingDelete");

            var localVarPath = "/aggregation/account/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter
            if (deleteType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_type", deleteType)); // query parameter
            if (nucleusData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_data", nucleusData)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// De-Link mapping between client,vendor,tenant De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAggregationAccountUsingDeleteAsync (Guid? nucleusAggregationAccountId, string deleteType = null, string nucleusData = null)
        {
             await DeleteAggregationAccountUsingDeleteAsyncWithHttpInfo(nucleusAggregationAccountId, deleteType, nucleusData);

        }

        /// <summary>
        /// De-Link mapping between client,vendor,tenant De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountUsingDeleteAsyncWithHttpInfo (Guid? nucleusAggregationAccountId, string deleteType = null, string nucleusData = null)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->DeleteAggregationAccountUsingDelete");

            var localVarPath = "/aggregation/account/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter
            if (deleteType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_type", deleteType)); // query parameter
            if (nucleusData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_data", nucleusData)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>List&lt;AggregationAccountResponseVO&gt;</returns>
        public List<AggregationAccountResponseVO> GetAggregationAccountAllUsingGet (List<Guid?> aggregationAccountIdList)
        {
             ApiResponse<List<AggregationAccountResponseVO>> localVarResponse = GetAggregationAccountAllUsingGetWithHttpInfo(aggregationAccountIdList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountResponseVO&gt;</returns>
        public ApiResponse< List<AggregationAccountResponseVO> > GetAggregationAccountAllUsingGetWithHttpInfo (List<Guid?> aggregationAccountIdList)
        {
            // verify the required parameter 'aggregationAccountIdList' is set
            if (aggregationAccountIdList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountIdList' when calling AggregationApi->GetAggregationAccountAllUsingGet");

            var localVarPath = "/aggregation/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aggregation_account_id_list", aggregationAccountIdList)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountResponseVO>)));
        }

        /// <summary>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of List&lt;AggregationAccountResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccountResponseVO>> GetAggregationAccountAllUsingGetAsync (List<Guid?> aggregationAccountIdList)
        {
             ApiResponse<List<AggregationAccountResponseVO>> localVarResponse = await GetAggregationAccountAllUsingGetAsyncWithHttpInfo(aggregationAccountIdList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountResponseVO>>> GetAggregationAccountAllUsingGetAsyncWithHttpInfo (List<Guid?> aggregationAccountIdList)
        {
            // verify the required parameter 'aggregationAccountIdList' is set
            if (aggregationAccountIdList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountIdList' when calling AggregationApi->GetAggregationAccountAllUsingGet");

            var localVarPath = "/aggregation/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aggregation_account_id_list", aggregationAccountIdList)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountResponseVO>)));
        }

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts  Fetch all aggregation account balance details with for the given aggregation accounts
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>List&lt;AggregationAccountBalanceResponseVO&gt;</returns>
        public List<AggregationAccountBalanceResponseVO> GetAggregationAccountBalanceAllUsingGet (List<Guid?> aggregationAccountIdList)
        {
             ApiResponse<List<AggregationAccountBalanceResponseVO>> localVarResponse = GetAggregationAccountBalanceAllUsingGetWithHttpInfo(aggregationAccountIdList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts  Fetch all aggregation account balance details with for the given aggregation accounts
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountBalanceResponseVO&gt;</returns>
        public ApiResponse< List<AggregationAccountBalanceResponseVO> > GetAggregationAccountBalanceAllUsingGetWithHttpInfo (List<Guid?> aggregationAccountIdList)
        {
            // verify the required parameter 'aggregationAccountIdList' is set
            if (aggregationAccountIdList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountIdList' when calling AggregationApi->GetAggregationAccountBalanceAllUsingGet");

            var localVarPath = "/aggregation/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aggregation_account_id_list", aggregationAccountIdList)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountBalanceAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountBalanceResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountBalanceResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountBalanceResponseVO>)));
        }

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts  Fetch all aggregation account balance details with for the given aggregation accounts
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of List&lt;AggregationAccountBalanceResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccountBalanceResponseVO>> GetAggregationAccountBalanceAllUsingGetAsync (List<Guid?> aggregationAccountIdList)
        {
             ApiResponse<List<AggregationAccountBalanceResponseVO>> localVarResponse = await GetAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo(aggregationAccountIdList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts  Fetch all aggregation account balance details with for the given aggregation accounts
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountBalanceResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountBalanceResponseVO>>> GetAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo (List<Guid?> aggregationAccountIdList)
        {
            // verify the required parameter 'aggregationAccountIdList' is set
            if (aggregationAccountIdList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountIdList' when calling AggregationApi->GetAggregationAccountBalanceAllUsingGet");

            var localVarPath = "/aggregation/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aggregation_account_id_list", aggregationAccountIdList)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountBalanceAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountBalanceResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountBalanceResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountBalanceResponseVO>)));
        }

        /// <summary>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>AggregationAccountBalanceResponseVO</returns>
        public AggregationAccountBalanceResponseVO GetAggregationAccountBalanceUsingGet (Guid? nucleusAggregationAccountId)
        {
             ApiResponse<AggregationAccountBalanceResponseVO> localVarResponse = GetAggregationAccountBalanceUsingGetWithHttpInfo(nucleusAggregationAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccountBalanceResponseVO</returns>
        public ApiResponse< AggregationAccountBalanceResponseVO > GetAggregationAccountBalanceUsingGetWithHttpInfo (Guid? nucleusAggregationAccountId)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetAggregationAccountBalanceUsingGet");

            var localVarPath = "/aggregation/balance/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountBalanceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountBalanceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountBalanceResponseVO)));
        }

        /// <summary>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of AggregationAccountBalanceResponseVO</returns>
        public async System.Threading.Tasks.Task<AggregationAccountBalanceResponseVO> GetAggregationAccountBalanceUsingGetAsync (Guid? nucleusAggregationAccountId)
        {
             ApiResponse<AggregationAccountBalanceResponseVO> localVarResponse = await GetAggregationAccountBalanceUsingGetAsyncWithHttpInfo(nucleusAggregationAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch aggregation account balance details with the mapping created in POST endpoint Fetch aggregation account balance details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountBalanceResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountBalanceResponseVO>> GetAggregationAccountBalanceUsingGetAsyncWithHttpInfo (Guid? nucleusAggregationAccountId)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetAggregationAccountBalanceUsingGet");

            var localVarPath = "/aggregation/balance/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountBalanceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountBalanceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountBalanceResponseVO)));
        }

        /// <summary>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>List&lt;AggregationAccountHoldingResponseVO&gt;</returns>
        public List<AggregationAccountHoldingResponseVO> GetAggregationAccountHoldingAllUsingGet (List<Guid?> aggregationAccountIdList)
        {
             ApiResponse<List<AggregationAccountHoldingResponseVO>> localVarResponse = GetAggregationAccountHoldingAllUsingGetWithHttpInfo(aggregationAccountIdList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountHoldingResponseVO&gt;</returns>
        public ApiResponse< List<AggregationAccountHoldingResponseVO> > GetAggregationAccountHoldingAllUsingGetWithHttpInfo (List<Guid?> aggregationAccountIdList)
        {
            // verify the required parameter 'aggregationAccountIdList' is set
            if (aggregationAccountIdList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountIdList' when calling AggregationApi->GetAggregationAccountHoldingAllUsingGet");

            var localVarPath = "/aggregation/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aggregation_account_id_list", aggregationAccountIdList)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountHoldingResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountHoldingResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountHoldingResponseVO>)));
        }

        /// <summary>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of List&lt;AggregationAccountHoldingResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccountHoldingResponseVO>> GetAggregationAccountHoldingAllUsingGetAsync (List<Guid?> aggregationAccountIdList)
        {
             ApiResponse<List<AggregationAccountHoldingResponseVO>> localVarResponse = await GetAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo(aggregationAccountIdList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all aggregation account(s) holding details with the mapping created in POST endpoint Fetch all aggregation account(s) holding details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountHoldingResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountHoldingResponseVO>>> GetAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo (List<Guid?> aggregationAccountIdList)
        {
            // verify the required parameter 'aggregationAccountIdList' is set
            if (aggregationAccountIdList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountIdList' when calling AggregationApi->GetAggregationAccountHoldingAllUsingGet");

            var localVarPath = "/aggregation/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aggregation_account_id_list", aggregationAccountIdList)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountHoldingResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountHoldingResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountHoldingResponseVO>)));
        }

        /// <summary>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>AggregationAccountHoldingResponseVO</returns>
        public AggregationAccountHoldingResponseVO GetAggregationAccountHoldingUsingGet (Guid? nucleusAggregationAccountId)
        {
             ApiResponse<AggregationAccountHoldingResponseVO> localVarResponse = GetAggregationAccountHoldingUsingGetWithHttpInfo(nucleusAggregationAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccountHoldingResponseVO</returns>
        public ApiResponse< AggregationAccountHoldingResponseVO > GetAggregationAccountHoldingUsingGetWithHttpInfo (Guid? nucleusAggregationAccountId)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetAggregationAccountHoldingUsingGet");

            var localVarPath = "/aggregation/holding/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountHoldingResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountHoldingResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountHoldingResponseVO)));
        }

        /// <summary>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of AggregationAccountHoldingResponseVO</returns>
        public async System.Threading.Tasks.Task<AggregationAccountHoldingResponseVO> GetAggregationAccountHoldingUsingGetAsync (Guid? nucleusAggregationAccountId)
        {
             ApiResponse<AggregationAccountHoldingResponseVO> localVarResponse = await GetAggregationAccountHoldingUsingGetAsyncWithHttpInfo(nucleusAggregationAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch aggregation account holding details with the mapping created in POST endpoint Fetch aggregation account holding details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountHoldingResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountHoldingResponseVO>> GetAggregationAccountHoldingUsingGetAsyncWithHttpInfo (Guid? nucleusAggregationAccountId)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetAggregationAccountHoldingUsingGet");

            var localVarPath = "/aggregation/holding/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountHoldingResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountHoldingResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountHoldingResponseVO)));
        }

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts  Fetch all aggregation account balance details with for the given aggregation accounts
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>List&lt;AggregationAccountTransactionResponseVO&gt;</returns>
        public List<AggregationAccountTransactionResponseVO> GetAggregationAccountTransactionAllUsingGet (List<Guid?> aggregationAccountIdList)
        {
             ApiResponse<List<AggregationAccountTransactionResponseVO>> localVarResponse = GetAggregationAccountTransactionAllUsingGetWithHttpInfo(aggregationAccountIdList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts  Fetch all aggregation account balance details with for the given aggregation accounts
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountTransactionResponseVO&gt;</returns>
        public ApiResponse< List<AggregationAccountTransactionResponseVO> > GetAggregationAccountTransactionAllUsingGetWithHttpInfo (List<Guid?> aggregationAccountIdList)
        {
            // verify the required parameter 'aggregationAccountIdList' is set
            if (aggregationAccountIdList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountIdList' when calling AggregationApi->GetAggregationAccountTransactionAllUsingGet");

            var localVarPath = "/aggregation/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aggregation_account_id_list", aggregationAccountIdList)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountTransactionResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountTransactionResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountTransactionResponseVO>)));
        }

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts  Fetch all aggregation account balance details with for the given aggregation accounts
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of List&lt;AggregationAccountTransactionResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccountTransactionResponseVO>> GetAggregationAccountTransactionAllUsingGetAsync (List<Guid?> aggregationAccountIdList)
        {
             ApiResponse<List<AggregationAccountTransactionResponseVO>> localVarResponse = await GetAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo(aggregationAccountIdList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all aggregation account balance details with for the given aggregation accounts  Fetch all aggregation account balance details with for the given aggregation accounts
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountIdList">aggregation_account_id_list</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountTransactionResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountTransactionResponseVO>>> GetAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo (List<Guid?> aggregationAccountIdList)
        {
            // verify the required parameter 'aggregationAccountIdList' is set
            if (aggregationAccountIdList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountIdList' when calling AggregationApi->GetAggregationAccountTransactionAllUsingGet");

            var localVarPath = "/aggregation/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aggregation_account_id_list", aggregationAccountIdList)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountTransactionResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountTransactionResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountTransactionResponseVO>)));
        }

        /// <summary>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>AggregationAccountTransactionResponseVO</returns>
        public AggregationAccountTransactionResponseVO GetAggregationAccountTransactionUsingGet (Guid? nucleusAggregationAccountId)
        {
             ApiResponse<AggregationAccountTransactionResponseVO> localVarResponse = GetAggregationAccountTransactionUsingGetWithHttpInfo(nucleusAggregationAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccountTransactionResponseVO</returns>
        public ApiResponse< AggregationAccountTransactionResponseVO > GetAggregationAccountTransactionUsingGetWithHttpInfo (Guid? nucleusAggregationAccountId)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetAggregationAccountTransactionUsingGet");

            var localVarPath = "/aggregation/transaction/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountTransactionResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountTransactionResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountTransactionResponseVO)));
        }

        /// <summary>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of AggregationAccountTransactionResponseVO</returns>
        public async System.Threading.Tasks.Task<AggregationAccountTransactionResponseVO> GetAggregationAccountTransactionUsingGetAsync (Guid? nucleusAggregationAccountId)
        {
             ApiResponse<AggregationAccountTransactionResponseVO> localVarResponse = await GetAggregationAccountTransactionUsingGetAsyncWithHttpInfo(nucleusAggregationAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch aggregation account transaction details with the mapping created in POST endpoint Fetch aggregation account transaction details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountTransactionResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountTransactionResponseVO>> GetAggregationAccountTransactionUsingGetAsyncWithHttpInfo (Guid? nucleusAggregationAccountId)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetAggregationAccountTransactionUsingGet");

            var localVarPath = "/aggregation/transaction/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountTransactionResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountTransactionResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountTransactionResponseVO)));
        }

        /// <summary>
        /// Fetch aggregation account details with the mapping created in POST endpoint Fetch aggregation account details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>AggregationAccountResponseVO</returns>
        public AggregationAccountResponseVO GetAggregationAccountUsingGet (Guid? nucleusAggregationAccountId)
        {
             ApiResponse<AggregationAccountResponseVO> localVarResponse = GetAggregationAccountUsingGetWithHttpInfo(nucleusAggregationAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch aggregation account details with the mapping created in POST endpoint Fetch aggregation account details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccountResponseVO</returns>
        public ApiResponse< AggregationAccountResponseVO > GetAggregationAccountUsingGetWithHttpInfo (Guid? nucleusAggregationAccountId)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetAggregationAccountUsingGet");

            var localVarPath = "/aggregation/account/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountResponseVO)));
        }

        /// <summary>
        /// Fetch aggregation account details with the mapping created in POST endpoint Fetch aggregation account details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of AggregationAccountResponseVO</returns>
        public async System.Threading.Tasks.Task<AggregationAccountResponseVO> GetAggregationAccountUsingGetAsync (Guid? nucleusAggregationAccountId)
        {
             ApiResponse<AggregationAccountResponseVO> localVarResponse = await GetAggregationAccountUsingGetAsyncWithHttpInfo(nucleusAggregationAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch aggregation account details with the mapping created in POST endpoint Fetch aggregation account details with the mapping created in POST endpoint
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountResponseVO>> GetAggregationAccountUsingGetAsyncWithHttpInfo (Guid? nucleusAggregationAccountId)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetAggregationAccountUsingGet");

            var localVarPath = "/aggregation/account/{nucleus_aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarPathParams.Add("nucleus_aggregation_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountResponseVO)));
        }

        /// <summary>
        /// Get Value of the given property Get Value of the given property
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>PropertyValueResponseVO</returns>
        public PropertyValueResponseVO GetPropertyValue (Guid? nucleusAggregationAccountId, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null)
        {
             ApiResponse<PropertyValueResponseVO> localVarResponse = GetPropertyValueWithHttpInfo(nucleusAggregationAccountId, nucleusBusinessId, nucleusClientId, product);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Value of the given property Get Value of the given property
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>ApiResponse of PropertyValueResponseVO</returns>
        public ApiResponse< PropertyValueResponseVO > GetPropertyValueWithHttpInfo (Guid? nucleusAggregationAccountId, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetPropertyValue");

            var localVarPath = "/property_value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_aggregation_account_id", nucleusAggregationAccountId)); // query parameter
            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPropertyValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyValueResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyValueResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyValueResponseVO)));
        }

        /// <summary>
        /// Get Value of the given property Get Value of the given property
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>Task of PropertyValueResponseVO</returns>
        public async System.Threading.Tasks.Task<PropertyValueResponseVO> GetPropertyValueAsync (Guid? nucleusAggregationAccountId, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null)
        {
             ApiResponse<PropertyValueResponseVO> localVarResponse = await GetPropertyValueAsyncWithHttpInfo(nucleusAggregationAccountId, nucleusBusinessId, nucleusClientId, product);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Value of the given property Get Value of the given property
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusAggregationAccountId">nucleus_aggregation_account_id</param>
        /// <param name="nucleusBusinessId">nucleus_business_id (optional)</param>
        /// <param name="nucleusClientId">nucleus_client_id (optional)</param>
        /// <param name="product">product (optional, default to atom)</param>
        /// <returns>Task of ApiResponse (PropertyValueResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyValueResponseVO>> GetPropertyValueAsyncWithHttpInfo (Guid? nucleusAggregationAccountId, Guid? nucleusBusinessId = null, Guid? nucleusClientId = null, string product = null)
        {
            // verify the required parameter 'nucleusAggregationAccountId' is set
            if (nucleusAggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAggregationAccountId' when calling AggregationApi->GetPropertyValue");

            var localVarPath = "/property_value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAggregationAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_aggregation_account_id", nucleusAggregationAccountId)); // query parameter
            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter
            if (nucleusClientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_client_id", nucleusClientId)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPropertyValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyValueResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyValueResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyValueResponseVO)));
        }

    }
}
