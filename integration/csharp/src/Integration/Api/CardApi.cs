/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Card auto reload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>CardAutoReloadResponseVO</returns>
        CardAutoReloadResponseVO CreateAutoReloadUsingPost (CardAutoReloadRequestCO request);

        /// <summary>
        /// Card auto reload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of CardAutoReloadResponseVO</returns>
        ApiResponse<CardAutoReloadResponseVO> CreateAutoReloadUsingPostWithHttpInfo (CardAutoReloadRequestCO request);
        /// <summary>
        /// Activate card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateRequest">activateRequest</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO CreateCardActivateUsingPost (CardBaseRequestCO activateRequest);

        /// <summary>
        /// Activate card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateRequest">activateRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> CreateCardActivateUsingPostWithHttpInfo (CardBaseRequestCO activateRequest);
        /// <summary>
        /// Create a card business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardBusinessRequestCO">cardBusinessRequestCO</param>
        /// <returns>CreateBusinessResponseVO</returns>
        CreateBusinessResponseVO CreateCardBusinessUsingPost (CardBusinessRequestCO cardBusinessRequestCO);

        /// <summary>
        /// Create a card business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardBusinessRequestCO">cardBusinessRequestCO</param>
        /// <returns>ApiResponse of CreateBusinessResponseVO</returns>
        ApiResponse<CreateBusinessResponseVO> CreateCardBusinessUsingPostWithHttpInfo (CardBusinessRequestCO cardBusinessRequestCO);
        /// <summary>
        /// close a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">closeRequest</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO CreateCardCloseUsingPost (CardBaseRequestCO closeRequest);

        /// <summary>
        /// close a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">closeRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> CreateCardCloseUsingPostWithHttpInfo (CardBaseRequestCO closeRequest);
        /// <summary>
        /// issue a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest">issueRequest</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO CreateCardIssueUsingPost (CardBaseRequestCO issueRequest);

        /// <summary>
        /// issue a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest">issueRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> CreateCardIssueUsingPostWithHttpInfo (CardBaseRequestCO issueRequest);
        /// <summary>
        /// Create a card load
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadRequest">loadRequest</param>
        /// <returns>CardLoadUnloadResponseVO</returns>
        CardLoadUnloadResponseVO CreateCardLoadUsingPost (CardLoadRequestCO loadRequest);

        /// <summary>
        /// Create a card load
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadRequest">loadRequest</param>
        /// <returns>ApiResponse of CardLoadUnloadResponseVO</returns>
        ApiResponse<CardLoadUnloadResponseVO> CreateCardLoadUsingPostWithHttpInfo (CardLoadRequestCO loadRequest);
        /// <summary>
        /// pin card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO CreateCardPinUsingPost (CardPinRequestCO cardPinRequestCO);

        /// <summary>
        /// pin card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> CreateCardPinUsingPostWithHttpInfo (CardPinRequestCO cardPinRequestCO);
        /// <summary>
        /// reactivate card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactivateRequest">reactivateRequest</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO CreateCardReactivateUsingPost (CardBaseRequestCO reactivateRequest);

        /// <summary>
        /// reactivate card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactivateRequest">reactivateRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> CreateCardReactivateUsingPostWithHttpInfo (CardBaseRequestCO reactivateRequest);
        /// <summary>
        /// Reissue a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO CreateCardReissueUsingPost (CardBaseRequestCO request);

        /// <summary>
        /// Reissue a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> CreateCardReissueUsingPostWithHttpInfo (CardBaseRequestCO request);
        /// <summary>
        /// Create card replace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>CardReplaceResponseVO</returns>
        CardReplaceResponseVO CreateCardReplaceUsingPost (CardBaseRequestCO request);

        /// <summary>
        /// Create card replace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of CardReplaceResponseVO</returns>
        ApiResponse<CardReplaceResponseVO> CreateCardReplaceUsingPostWithHttpInfo (CardBaseRequestCO request);
        /// <summary>
        /// Card reserve transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>CardReserveTransferResponseVO</returns>
        CardReserveTransferResponseVO CreateCardReserveTransferUsingPost (CardReserveTransferRequestCO request);

        /// <summary>
        /// Card reserve transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of CardReserveTransferResponseVO</returns>
        ApiResponse<CardReserveTransferResponseVO> CreateCardReserveTransferUsingPostWithHttpInfo (CardReserveTransferRequestCO request);
        /// <summary>
        /// Create card spending control
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>CardSpendingControlResponseVO</returns>
        CardSpendingControlResponseVO CreateCardSpendingControlUsingPost (CardSpendingControlRequestCO request);

        /// <summary>
        /// Create card spending control
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of CardSpendingControlResponseVO</returns>
        ApiResponse<CardSpendingControlResponseVO> CreateCardSpendingControlUsingPostWithHttpInfo (CardSpendingControlRequestCO request);
        /// <summary>
        /// suspend card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suspendRequest">suspendRequest</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO CreateCardSuspendUsingPost (CardBaseRequestCO suspendRequest);

        /// <summary>
        /// suspend card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suspendRequest">suspendRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> CreateCardSuspendUsingPostWithHttpInfo (CardBaseRequestCO suspendRequest);
        /// <summary>
        /// token card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenizeRequest">tokenizeRequest</param>
        /// <returns>CardTokenResponseVO</returns>
        CardTokenResponseVO CreateCardTokenUsingPost (CardTokenRequestCO tokenizeRequest);

        /// <summary>
        /// token card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenizeRequest">tokenizeRequest</param>
        /// <returns>ApiResponse of CardTokenResponseVO</returns>
        ApiResponse<CardTokenResponseVO> CreateCardTokenUsingPostWithHttpInfo (CardTokenRequestCO tokenizeRequest);
        /// <summary>
        /// Create a card upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reloadRequest">reloadRequest</param>
        /// <returns>CardLoadUnloadResponseVO</returns>
        CardLoadUnloadResponseVO CreateCardUnloadUsingPost (CardUnloadRequestCO reloadRequest);

        /// <summary>
        /// Create a card upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reloadRequest">reloadRequest</param>
        /// <returns>ApiResponse of CardLoadUnloadResponseVO</returns>
        ApiResponse<CardLoadUnloadResponseVO> CreateCardUnloadUsingPostWithHttpInfo (CardUnloadRequestCO reloadRequest);
        /// <summary>
        /// Create a card client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardClientRequestCO">cardClientRequestCO</param>
        /// <returns>CreateCardClientResponseVO</returns>
        CreateCardClientResponseVO CreateClientCardUsingPost (CardClientRequestCO cardClientRequestCO);

        /// <summary>
        /// Create a card client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardClientRequestCO">cardClientRequestCO</param>
        /// <returns>ApiResponse of CreateCardClientResponseVO</returns>
        ApiResponse<CreateCardClientResponseVO> CreateClientCardUsingPostWithHttpInfo (CardClientRequestCO cardClientRequestCO);
        /// <summary>
        /// Get a business status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO GetBusinessStatusUsingGet (Guid? nucleusBusinessId);

        /// <summary>
        /// Get a business status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> GetBusinessStatusUsingGetWithHttpInfo (Guid? nucleusBusinessId);
        /// <summary>
        /// Get a Card Balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>CardBalanceResponseVO</returns>
        CardBalanceResponseVO GetCardBalanceUsingGet (Guid? id, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get a Card Balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of CardBalanceResponseVO</returns>
        ApiResponse<CardBalanceResponseVO> GetCardBalanceUsingGetWithHttpInfo (Guid? id, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get card image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>GetCardImageResponseVO</returns>
        GetCardImageResponseVO GetCardImage (Guid? cardId);

        /// <summary>
        /// Get card image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>ApiResponse of GetCardImageResponseVO</returns>
        ApiResponse<GetCardImageResponseVO> GetCardImageWithHttpInfo (Guid? cardId);
        /// <summary>
        /// Get card pci details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>GetCardPciDetailsResponseVO</returns>
        GetCardPciDetailsResponseVO GetCardPciDetails (Guid? cardId);

        /// <summary>
        /// Get card pci details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>ApiResponse of GetCardPciDetailsResponseVO</returns>
        ApiResponse<GetCardPciDetailsResponseVO> GetCardPciDetailsWithHttpInfo (Guid? cardId);
        /// <summary>
        /// Card reserve account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CardReserveAccountResponseVO</returns>
        CardReserveAccountResponseVO GetCardReserveAccountDetailsUsingGet ();

        /// <summary>
        /// Card reserve account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CardReserveAccountResponseVO</returns>
        ApiResponse<CardReserveAccountResponseVO> GetCardReserveAccountDetailsUsingGetWithHttpInfo ();
        /// <summary>
        /// Get card statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>GetCardStatementResponseVO</returns>
        GetCardStatementResponseVO GetCardStatementUsingGet (Guid? cardId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get card statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of GetCardStatementResponseVO</returns>
        ApiResponse<GetCardStatementResponseVO> GetCardStatementUsingGetWithHttpInfo (Guid? cardId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get a card token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="deviceId">device_id (optional)</param>
        /// <param name="deviceType">device_type (optional)</param>
        /// <param name="wallet">wallet (optional)</param>
        /// <returns>List&lt;GetCardTokenResponseVO&gt;</returns>
        List<GetCardTokenResponseVO> GetCardTokenUsingToken (Guid? id, string deviceId = null, string deviceType = null, string wallet = null);

        /// <summary>
        /// Get a card token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="deviceId">device_id (optional)</param>
        /// <param name="deviceType">device_type (optional)</param>
        /// <param name="wallet">wallet (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCardTokenResponseVO&gt;</returns>
        ApiResponse<List<GetCardTokenResponseVO>> GetCardTokenUsingTokenWithHttpInfo (Guid? id, string deviceId = null, string deviceType = null, string wallet = null);
        /// <summary>
        /// Get a card transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>CardTransactionResponseVO</returns>
        CardTransactionResponseVO GetCardTransactionUsingGet (Guid? id, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get a card transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of CardTransactionResponseVO</returns>
        ApiResponse<CardTransactionResponseVO> GetCardTransactionUsingGetWithHttpInfo (Guid? id, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get a card information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO GetCardUsingGet (Guid? id);

        /// <summary>
        /// Get a card information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> GetCardUsingGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Update a card business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>UpdateBusinessResponseVO</returns>
        UpdateBusinessResponseVO UpdateCardBusinessUsingPut (Guid? nucleusBusinessId);

        /// <summary>
        /// Update a card business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>ApiResponse of UpdateBusinessResponseVO</returns>
        ApiResponse<UpdateBusinessResponseVO> UpdateCardBusinessUsingPutWithHttpInfo (Guid? nucleusBusinessId);
        /// <summary>
        /// update a pin card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <param name="id">id</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO UpdateCardPinUsingPut (CardUpdatePinRequestCO cardPinRequestCO, Guid? id);

        /// <summary>
        /// update a pin card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> UpdateCardPinUsingPutWithHttpInfo (CardUpdatePinRequestCO cardPinRequestCO, Guid? id);
        /// <summary>
        /// Update a card spending control
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusSpendingControlId">nucleus_spending_control_id</param>
        /// <returns>CardSpendingControlResponseVO</returns>
        CardSpendingControlResponseVO UpdateCardSpendingControlUsingPut (Guid? nucleusSpendingControlId);

        /// <summary>
        /// Update a card spending control
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusSpendingControlId">nucleus_spending_control_id</param>
        /// <returns>ApiResponse of CardSpendingControlResponseVO</returns>
        ApiResponse<CardSpendingControlResponseVO> UpdateCardSpendingControlUsingPutWithHttpInfo (Guid? nucleusSpendingControlId);
        /// <summary>
        /// Update a card information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO UpdateCardUsingPut (Guid? id);

        /// <summary>
        /// Update a card information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> UpdateCardUsingPutWithHttpInfo (Guid? id);
        /// <summary>
        /// Update a card client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>UpdateCardClientResponseVO</returns>
        UpdateCardClientResponseVO UpdateClientCardUsingPut (Guid? id);

        /// <summary>
        /// Update a card client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of UpdateCardClientResponseVO</returns>
        ApiResponse<UpdateCardClientResponseVO> UpdateClientCardUsingPutWithHttpInfo (Guid? id);
        /// <summary>
        /// verify card pin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>BaseResponseVO</returns>
        BaseResponseVO VerifyCardPinUsingPost (CardPinRequestCO cardPinRequestCO);

        /// <summary>
        /// verify card pin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        ApiResponse<BaseResponseVO> VerifyCardPinUsingPostWithHttpInfo (CardPinRequestCO cardPinRequestCO);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Card auto reload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of CardAutoReloadResponseVO</returns>
        System.Threading.Tasks.Task<CardAutoReloadResponseVO> CreateAutoReloadUsingPostAsync (CardAutoReloadRequestCO request);

        /// <summary>
        /// Card auto reload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (CardAutoReloadResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardAutoReloadResponseVO>> CreateAutoReloadUsingPostAsyncWithHttpInfo (CardAutoReloadRequestCO request);
        /// <summary>
        /// Activate card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateRequest">activateRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> CreateCardActivateUsingPostAsync (CardBaseRequestCO activateRequest);

        /// <summary>
        /// Activate card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateRequest">activateRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardActivateUsingPostAsyncWithHttpInfo (CardBaseRequestCO activateRequest);
        /// <summary>
        /// Create a card business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardBusinessRequestCO">cardBusinessRequestCO</param>
        /// <returns>Task of CreateBusinessResponseVO</returns>
        System.Threading.Tasks.Task<CreateBusinessResponseVO> CreateCardBusinessUsingPostAsync (CardBusinessRequestCO cardBusinessRequestCO);

        /// <summary>
        /// Create a card business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardBusinessRequestCO">cardBusinessRequestCO</param>
        /// <returns>Task of ApiResponse (CreateBusinessResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateBusinessResponseVO>> CreateCardBusinessUsingPostAsyncWithHttpInfo (CardBusinessRequestCO cardBusinessRequestCO);
        /// <summary>
        /// close a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">closeRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> CreateCardCloseUsingPostAsync (CardBaseRequestCO closeRequest);

        /// <summary>
        /// close a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">closeRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardCloseUsingPostAsyncWithHttpInfo (CardBaseRequestCO closeRequest);
        /// <summary>
        /// issue a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest">issueRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> CreateCardIssueUsingPostAsync (CardBaseRequestCO issueRequest);

        /// <summary>
        /// issue a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest">issueRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardIssueUsingPostAsyncWithHttpInfo (CardBaseRequestCO issueRequest);
        /// <summary>
        /// Create a card load
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadRequest">loadRequest</param>
        /// <returns>Task of CardLoadUnloadResponseVO</returns>
        System.Threading.Tasks.Task<CardLoadUnloadResponseVO> CreateCardLoadUsingPostAsync (CardLoadRequestCO loadRequest);

        /// <summary>
        /// Create a card load
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadRequest">loadRequest</param>
        /// <returns>Task of ApiResponse (CardLoadUnloadResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardLoadUnloadResponseVO>> CreateCardLoadUsingPostAsyncWithHttpInfo (CardLoadRequestCO loadRequest);
        /// <summary>
        /// pin card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> CreateCardPinUsingPostAsync (CardPinRequestCO cardPinRequestCO);

        /// <summary>
        /// pin card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardPinUsingPostAsyncWithHttpInfo (CardPinRequestCO cardPinRequestCO);
        /// <summary>
        /// reactivate card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactivateRequest">reactivateRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> CreateCardReactivateUsingPostAsync (CardBaseRequestCO reactivateRequest);

        /// <summary>
        /// reactivate card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactivateRequest">reactivateRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardReactivateUsingPostAsyncWithHttpInfo (CardBaseRequestCO reactivateRequest);
        /// <summary>
        /// Reissue a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> CreateCardReissueUsingPostAsync (CardBaseRequestCO request);

        /// <summary>
        /// Reissue a card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardReissueUsingPostAsyncWithHttpInfo (CardBaseRequestCO request);
        /// <summary>
        /// Create card replace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of CardReplaceResponseVO</returns>
        System.Threading.Tasks.Task<CardReplaceResponseVO> CreateCardReplaceUsingPostAsync (CardBaseRequestCO request);

        /// <summary>
        /// Create card replace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (CardReplaceResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardReplaceResponseVO>> CreateCardReplaceUsingPostAsyncWithHttpInfo (CardBaseRequestCO request);
        /// <summary>
        /// Card reserve transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of CardReserveTransferResponseVO</returns>
        System.Threading.Tasks.Task<CardReserveTransferResponseVO> CreateCardReserveTransferUsingPostAsync (CardReserveTransferRequestCO request);

        /// <summary>
        /// Card reserve transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (CardReserveTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardReserveTransferResponseVO>> CreateCardReserveTransferUsingPostAsyncWithHttpInfo (CardReserveTransferRequestCO request);
        /// <summary>
        /// Create card spending control
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of CardSpendingControlResponseVO</returns>
        System.Threading.Tasks.Task<CardSpendingControlResponseVO> CreateCardSpendingControlUsingPostAsync (CardSpendingControlRequestCO request);

        /// <summary>
        /// Create card spending control
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (CardSpendingControlResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardSpendingControlResponseVO>> CreateCardSpendingControlUsingPostAsyncWithHttpInfo (CardSpendingControlRequestCO request);
        /// <summary>
        /// suspend card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suspendRequest">suspendRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> CreateCardSuspendUsingPostAsync (CardBaseRequestCO suspendRequest);

        /// <summary>
        /// suspend card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suspendRequest">suspendRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardSuspendUsingPostAsyncWithHttpInfo (CardBaseRequestCO suspendRequest);
        /// <summary>
        /// token card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenizeRequest">tokenizeRequest</param>
        /// <returns>Task of CardTokenResponseVO</returns>
        System.Threading.Tasks.Task<CardTokenResponseVO> CreateCardTokenUsingPostAsync (CardTokenRequestCO tokenizeRequest);

        /// <summary>
        /// token card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenizeRequest">tokenizeRequest</param>
        /// <returns>Task of ApiResponse (CardTokenResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardTokenResponseVO>> CreateCardTokenUsingPostAsyncWithHttpInfo (CardTokenRequestCO tokenizeRequest);
        /// <summary>
        /// Create a card upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reloadRequest">reloadRequest</param>
        /// <returns>Task of CardLoadUnloadResponseVO</returns>
        System.Threading.Tasks.Task<CardLoadUnloadResponseVO> CreateCardUnloadUsingPostAsync (CardUnloadRequestCO reloadRequest);

        /// <summary>
        /// Create a card upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reloadRequest">reloadRequest</param>
        /// <returns>Task of ApiResponse (CardLoadUnloadResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardLoadUnloadResponseVO>> CreateCardUnloadUsingPostAsyncWithHttpInfo (CardUnloadRequestCO reloadRequest);
        /// <summary>
        /// Create a card client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardClientRequestCO">cardClientRequestCO</param>
        /// <returns>Task of CreateCardClientResponseVO</returns>
        System.Threading.Tasks.Task<CreateCardClientResponseVO> CreateClientCardUsingPostAsync (CardClientRequestCO cardClientRequestCO);

        /// <summary>
        /// Create a card client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardClientRequestCO">cardClientRequestCO</param>
        /// <returns>Task of ApiResponse (CreateCardClientResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCardClientResponseVO>> CreateClientCardUsingPostAsyncWithHttpInfo (CardClientRequestCO cardClientRequestCO);
        /// <summary>
        /// Get a business status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> GetBusinessStatusUsingGetAsync (Guid? nucleusBusinessId);

        /// <summary>
        /// Get a business status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> GetBusinessStatusUsingGetAsyncWithHttpInfo (Guid? nucleusBusinessId);
        /// <summary>
        /// Get a Card Balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of CardBalanceResponseVO</returns>
        System.Threading.Tasks.Task<CardBalanceResponseVO> GetCardBalanceUsingGetAsync (Guid? id, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get a Card Balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (CardBalanceResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardBalanceResponseVO>> GetCardBalanceUsingGetAsyncWithHttpInfo (Guid? id, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get card image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>Task of GetCardImageResponseVO</returns>
        System.Threading.Tasks.Task<GetCardImageResponseVO> GetCardImageAsync (Guid? cardId);

        /// <summary>
        /// Get card image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>Task of ApiResponse (GetCardImageResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCardImageResponseVO>> GetCardImageAsyncWithHttpInfo (Guid? cardId);
        /// <summary>
        /// Get card pci details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>Task of GetCardPciDetailsResponseVO</returns>
        System.Threading.Tasks.Task<GetCardPciDetailsResponseVO> GetCardPciDetailsAsync (Guid? cardId);

        /// <summary>
        /// Get card pci details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>Task of ApiResponse (GetCardPciDetailsResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCardPciDetailsResponseVO>> GetCardPciDetailsAsyncWithHttpInfo (Guid? cardId);
        /// <summary>
        /// Card reserve account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CardReserveAccountResponseVO</returns>
        System.Threading.Tasks.Task<CardReserveAccountResponseVO> GetCardReserveAccountDetailsUsingGetAsync ();

        /// <summary>
        /// Card reserve account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CardReserveAccountResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardReserveAccountResponseVO>> GetCardReserveAccountDetailsUsingGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get card statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of GetCardStatementResponseVO</returns>
        System.Threading.Tasks.Task<GetCardStatementResponseVO> GetCardStatementUsingGetAsync (Guid? cardId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get card statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (GetCardStatementResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCardStatementResponseVO>> GetCardStatementUsingGetAsyncWithHttpInfo (Guid? cardId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get a card token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="deviceId">device_id (optional)</param>
        /// <param name="deviceType">device_type (optional)</param>
        /// <param name="wallet">wallet (optional)</param>
        /// <returns>Task of List&lt;GetCardTokenResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<GetCardTokenResponseVO>> GetCardTokenUsingTokenAsync (Guid? id, string deviceId = null, string deviceType = null, string wallet = null);

        /// <summary>
        /// Get a card token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="deviceId">device_id (optional)</param>
        /// <param name="deviceType">device_type (optional)</param>
        /// <param name="wallet">wallet (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCardTokenResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCardTokenResponseVO>>> GetCardTokenUsingTokenAsyncWithHttpInfo (Guid? id, string deviceId = null, string deviceType = null, string wallet = null);
        /// <summary>
        /// Get a card transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of CardTransactionResponseVO</returns>
        System.Threading.Tasks.Task<CardTransactionResponseVO> GetCardTransactionUsingGetAsync (Guid? id, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// Get a card transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (CardTransactionResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardTransactionResponseVO>> GetCardTransactionUsingGetAsyncWithHttpInfo (Guid? id, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// Get a card information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> GetCardUsingGetAsync (Guid? id);

        /// <summary>
        /// Get a card information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> GetCardUsingGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Update a card business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of UpdateBusinessResponseVO</returns>
        System.Threading.Tasks.Task<UpdateBusinessResponseVO> UpdateCardBusinessUsingPutAsync (Guid? nucleusBusinessId);

        /// <summary>
        /// Update a card business
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of ApiResponse (UpdateBusinessResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateBusinessResponseVO>> UpdateCardBusinessUsingPutAsyncWithHttpInfo (Guid? nucleusBusinessId);
        /// <summary>
        /// update a pin card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <param name="id">id</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> UpdateCardPinUsingPutAsync (CardUpdatePinRequestCO cardPinRequestCO, Guid? id);

        /// <summary>
        /// update a pin card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> UpdateCardPinUsingPutAsyncWithHttpInfo (CardUpdatePinRequestCO cardPinRequestCO, Guid? id);
        /// <summary>
        /// Update a card spending control
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusSpendingControlId">nucleus_spending_control_id</param>
        /// <returns>Task of CardSpendingControlResponseVO</returns>
        System.Threading.Tasks.Task<CardSpendingControlResponseVO> UpdateCardSpendingControlUsingPutAsync (Guid? nucleusSpendingControlId);

        /// <summary>
        /// Update a card spending control
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusSpendingControlId">nucleus_spending_control_id</param>
        /// <returns>Task of ApiResponse (CardSpendingControlResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardSpendingControlResponseVO>> UpdateCardSpendingControlUsingPutAsyncWithHttpInfo (Guid? nucleusSpendingControlId);
        /// <summary>
        /// Update a card information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> UpdateCardUsingPutAsync (Guid? id);

        /// <summary>
        /// Update a card information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> UpdateCardUsingPutAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Update a card client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of UpdateCardClientResponseVO</returns>
        System.Threading.Tasks.Task<UpdateCardClientResponseVO> UpdateClientCardUsingPutAsync (Guid? id);

        /// <summary>
        /// Update a card client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (UpdateCardClientResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCardClientResponseVO>> UpdateClientCardUsingPutAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// verify card pin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>Task of BaseResponseVO</returns>
        System.Threading.Tasks.Task<BaseResponseVO> VerifyCardPinUsingPostAsync (CardPinRequestCO cardPinRequestCO);

        /// <summary>
        /// verify card pin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> VerifyCardPinUsingPostAsyncWithHttpInfo (CardPinRequestCO cardPinRequestCO);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardApi : ICardApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Card auto reload 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>CardAutoReloadResponseVO</returns>
        public CardAutoReloadResponseVO CreateAutoReloadUsingPost (CardAutoReloadRequestCO request)
        {
             ApiResponse<CardAutoReloadResponseVO> localVarResponse = CreateAutoReloadUsingPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Card auto reload 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of CardAutoReloadResponseVO</returns>
        public ApiResponse< CardAutoReloadResponseVO > CreateAutoReloadUsingPostWithHttpInfo (CardAutoReloadRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateAutoReloadUsingPost");

            var localVarPath = "/card/auto_reload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAutoReloadUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardAutoReloadResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardAutoReloadResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardAutoReloadResponseVO)));
        }

        /// <summary>
        /// Card auto reload 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of CardAutoReloadResponseVO</returns>
        public async System.Threading.Tasks.Task<CardAutoReloadResponseVO> CreateAutoReloadUsingPostAsync (CardAutoReloadRequestCO request)
        {
             ApiResponse<CardAutoReloadResponseVO> localVarResponse = await CreateAutoReloadUsingPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Card auto reload 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (CardAutoReloadResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardAutoReloadResponseVO>> CreateAutoReloadUsingPostAsyncWithHttpInfo (CardAutoReloadRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateAutoReloadUsingPost");

            var localVarPath = "/card/auto_reload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAutoReloadUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardAutoReloadResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardAutoReloadResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardAutoReloadResponseVO)));
        }

        /// <summary>
        /// Activate card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateRequest">activateRequest</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO CreateCardActivateUsingPost (CardBaseRequestCO activateRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = CreateCardActivateUsingPostWithHttpInfo(activateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateRequest">activateRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > CreateCardActivateUsingPostWithHttpInfo (CardBaseRequestCO activateRequest)
        {
            // verify the required parameter 'activateRequest' is set
            if (activateRequest == null)
                throw new ApiException(400, "Missing required parameter 'activateRequest' when calling CardApi->CreateCardActivateUsingPost");

            var localVarPath = "/card/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activateRequest != null && activateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(activateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = activateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardActivateUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Activate card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateRequest">activateRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> CreateCardActivateUsingPostAsync (CardBaseRequestCO activateRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await CreateCardActivateUsingPostAsyncWithHttpInfo(activateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateRequest">activateRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardActivateUsingPostAsyncWithHttpInfo (CardBaseRequestCO activateRequest)
        {
            // verify the required parameter 'activateRequest' is set
            if (activateRequest == null)
                throw new ApiException(400, "Missing required parameter 'activateRequest' when calling CardApi->CreateCardActivateUsingPost");

            var localVarPath = "/card/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activateRequest != null && activateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(activateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = activateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardActivateUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Create a card business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardBusinessRequestCO">cardBusinessRequestCO</param>
        /// <returns>CreateBusinessResponseVO</returns>
        public CreateBusinessResponseVO CreateCardBusinessUsingPost (CardBusinessRequestCO cardBusinessRequestCO)
        {
             ApiResponse<CreateBusinessResponseVO> localVarResponse = CreateCardBusinessUsingPostWithHttpInfo(cardBusinessRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a card business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardBusinessRequestCO">cardBusinessRequestCO</param>
        /// <returns>ApiResponse of CreateBusinessResponseVO</returns>
        public ApiResponse< CreateBusinessResponseVO > CreateCardBusinessUsingPostWithHttpInfo (CardBusinessRequestCO cardBusinessRequestCO)
        {
            // verify the required parameter 'cardBusinessRequestCO' is set
            if (cardBusinessRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardBusinessRequestCO' when calling CardApi->CreateCardBusinessUsingPost");

            var localVarPath = "/card/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardBusinessRequestCO != null && cardBusinessRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardBusinessRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardBusinessRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardBusinessUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateBusinessResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateBusinessResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateBusinessResponseVO)));
        }

        /// <summary>
        /// Create a card business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardBusinessRequestCO">cardBusinessRequestCO</param>
        /// <returns>Task of CreateBusinessResponseVO</returns>
        public async System.Threading.Tasks.Task<CreateBusinessResponseVO> CreateCardBusinessUsingPostAsync (CardBusinessRequestCO cardBusinessRequestCO)
        {
             ApiResponse<CreateBusinessResponseVO> localVarResponse = await CreateCardBusinessUsingPostAsyncWithHttpInfo(cardBusinessRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a card business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardBusinessRequestCO">cardBusinessRequestCO</param>
        /// <returns>Task of ApiResponse (CreateBusinessResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateBusinessResponseVO>> CreateCardBusinessUsingPostAsyncWithHttpInfo (CardBusinessRequestCO cardBusinessRequestCO)
        {
            // verify the required parameter 'cardBusinessRequestCO' is set
            if (cardBusinessRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardBusinessRequestCO' when calling CardApi->CreateCardBusinessUsingPost");

            var localVarPath = "/card/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardBusinessRequestCO != null && cardBusinessRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardBusinessRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardBusinessRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardBusinessUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateBusinessResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateBusinessResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateBusinessResponseVO)));
        }

        /// <summary>
        /// close a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">closeRequest</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO CreateCardCloseUsingPost (CardBaseRequestCO closeRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = CreateCardCloseUsingPostWithHttpInfo(closeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// close a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">closeRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > CreateCardCloseUsingPostWithHttpInfo (CardBaseRequestCO closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling CardApi->CreateCardCloseUsingPost");

            var localVarPath = "/card/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardCloseUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// close a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">closeRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> CreateCardCloseUsingPostAsync (CardBaseRequestCO closeRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await CreateCardCloseUsingPostAsyncWithHttpInfo(closeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// close a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">closeRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardCloseUsingPostAsyncWithHttpInfo (CardBaseRequestCO closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling CardApi->CreateCardCloseUsingPost");

            var localVarPath = "/card/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardCloseUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// issue a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest">issueRequest</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO CreateCardIssueUsingPost (CardBaseRequestCO issueRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = CreateCardIssueUsingPostWithHttpInfo(issueRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// issue a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest">issueRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > CreateCardIssueUsingPostWithHttpInfo (CardBaseRequestCO issueRequest)
        {
            // verify the required parameter 'issueRequest' is set
            if (issueRequest == null)
                throw new ApiException(400, "Missing required parameter 'issueRequest' when calling CardApi->CreateCardIssueUsingPost");

            var localVarPath = "/card/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issueRequest != null && issueRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(issueRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = issueRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardIssueUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// issue a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest">issueRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> CreateCardIssueUsingPostAsync (CardBaseRequestCO issueRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await CreateCardIssueUsingPostAsyncWithHttpInfo(issueRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// issue a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest">issueRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardIssueUsingPostAsyncWithHttpInfo (CardBaseRequestCO issueRequest)
        {
            // verify the required parameter 'issueRequest' is set
            if (issueRequest == null)
                throw new ApiException(400, "Missing required parameter 'issueRequest' when calling CardApi->CreateCardIssueUsingPost");

            var localVarPath = "/card/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issueRequest != null && issueRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(issueRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = issueRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardIssueUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Create a card load 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadRequest">loadRequest</param>
        /// <returns>CardLoadUnloadResponseVO</returns>
        public CardLoadUnloadResponseVO CreateCardLoadUsingPost (CardLoadRequestCO loadRequest)
        {
             ApiResponse<CardLoadUnloadResponseVO> localVarResponse = CreateCardLoadUsingPostWithHttpInfo(loadRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a card load 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadRequest">loadRequest</param>
        /// <returns>ApiResponse of CardLoadUnloadResponseVO</returns>
        public ApiResponse< CardLoadUnloadResponseVO > CreateCardLoadUsingPostWithHttpInfo (CardLoadRequestCO loadRequest)
        {
            // verify the required parameter 'loadRequest' is set
            if (loadRequest == null)
                throw new ApiException(400, "Missing required parameter 'loadRequest' when calling CardApi->CreateCardLoadUsingPost");

            var localVarPath = "/card/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadRequest != null && loadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loadRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardLoadUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardLoadUnloadResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardLoadUnloadResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardLoadUnloadResponseVO)));
        }

        /// <summary>
        /// Create a card load 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadRequest">loadRequest</param>
        /// <returns>Task of CardLoadUnloadResponseVO</returns>
        public async System.Threading.Tasks.Task<CardLoadUnloadResponseVO> CreateCardLoadUsingPostAsync (CardLoadRequestCO loadRequest)
        {
             ApiResponse<CardLoadUnloadResponseVO> localVarResponse = await CreateCardLoadUsingPostAsyncWithHttpInfo(loadRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a card load 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadRequest">loadRequest</param>
        /// <returns>Task of ApiResponse (CardLoadUnloadResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardLoadUnloadResponseVO>> CreateCardLoadUsingPostAsyncWithHttpInfo (CardLoadRequestCO loadRequest)
        {
            // verify the required parameter 'loadRequest' is set
            if (loadRequest == null)
                throw new ApiException(400, "Missing required parameter 'loadRequest' when calling CardApi->CreateCardLoadUsingPost");

            var localVarPath = "/card/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadRequest != null && loadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loadRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardLoadUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardLoadUnloadResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardLoadUnloadResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardLoadUnloadResponseVO)));
        }

        /// <summary>
        /// pin card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO CreateCardPinUsingPost (CardPinRequestCO cardPinRequestCO)
        {
             ApiResponse<BaseResponseVO> localVarResponse = CreateCardPinUsingPostWithHttpInfo(cardPinRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// pin card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > CreateCardPinUsingPostWithHttpInfo (CardPinRequestCO cardPinRequestCO)
        {
            // verify the required parameter 'cardPinRequestCO' is set
            if (cardPinRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardPinRequestCO' when calling CardApi->CreateCardPinUsingPost");

            var localVarPath = "/card/pin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardPinRequestCO != null && cardPinRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardPinRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardPinRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardPinUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// pin card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> CreateCardPinUsingPostAsync (CardPinRequestCO cardPinRequestCO)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await CreateCardPinUsingPostAsyncWithHttpInfo(cardPinRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// pin card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardPinUsingPostAsyncWithHttpInfo (CardPinRequestCO cardPinRequestCO)
        {
            // verify the required parameter 'cardPinRequestCO' is set
            if (cardPinRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardPinRequestCO' when calling CardApi->CreateCardPinUsingPost");

            var localVarPath = "/card/pin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardPinRequestCO != null && cardPinRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardPinRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardPinRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardPinUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// reactivate card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactivateRequest">reactivateRequest</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO CreateCardReactivateUsingPost (CardBaseRequestCO reactivateRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = CreateCardReactivateUsingPostWithHttpInfo(reactivateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// reactivate card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactivateRequest">reactivateRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > CreateCardReactivateUsingPostWithHttpInfo (CardBaseRequestCO reactivateRequest)
        {
            // verify the required parameter 'reactivateRequest' is set
            if (reactivateRequest == null)
                throw new ApiException(400, "Missing required parameter 'reactivateRequest' when calling CardApi->CreateCardReactivateUsingPost");

            var localVarPath = "/card/reactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reactivateRequest != null && reactivateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reactivateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reactivateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardReactivateUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// reactivate card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactivateRequest">reactivateRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> CreateCardReactivateUsingPostAsync (CardBaseRequestCO reactivateRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await CreateCardReactivateUsingPostAsyncWithHttpInfo(reactivateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// reactivate card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactivateRequest">reactivateRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardReactivateUsingPostAsyncWithHttpInfo (CardBaseRequestCO reactivateRequest)
        {
            // verify the required parameter 'reactivateRequest' is set
            if (reactivateRequest == null)
                throw new ApiException(400, "Missing required parameter 'reactivateRequest' when calling CardApi->CreateCardReactivateUsingPost");

            var localVarPath = "/card/reactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reactivateRequest != null && reactivateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reactivateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reactivateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardReactivateUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Reissue a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO CreateCardReissueUsingPost (CardBaseRequestCO request)
        {
             ApiResponse<BaseResponseVO> localVarResponse = CreateCardReissueUsingPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reissue a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > CreateCardReissueUsingPostWithHttpInfo (CardBaseRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateCardReissueUsingPost");

            var localVarPath = "/card/reissue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardReissueUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Reissue a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> CreateCardReissueUsingPostAsync (CardBaseRequestCO request)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await CreateCardReissueUsingPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reissue a card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardReissueUsingPostAsyncWithHttpInfo (CardBaseRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateCardReissueUsingPost");

            var localVarPath = "/card/reissue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardReissueUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Create card replace 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>CardReplaceResponseVO</returns>
        public CardReplaceResponseVO CreateCardReplaceUsingPost (CardBaseRequestCO request)
        {
             ApiResponse<CardReplaceResponseVO> localVarResponse = CreateCardReplaceUsingPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create card replace 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of CardReplaceResponseVO</returns>
        public ApiResponse< CardReplaceResponseVO > CreateCardReplaceUsingPostWithHttpInfo (CardBaseRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateCardReplaceUsingPost");

            var localVarPath = "/card/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardReplaceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardReplaceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardReplaceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardReplaceResponseVO)));
        }

        /// <summary>
        /// Create card replace 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of CardReplaceResponseVO</returns>
        public async System.Threading.Tasks.Task<CardReplaceResponseVO> CreateCardReplaceUsingPostAsync (CardBaseRequestCO request)
        {
             ApiResponse<CardReplaceResponseVO> localVarResponse = await CreateCardReplaceUsingPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create card replace 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (CardReplaceResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardReplaceResponseVO>> CreateCardReplaceUsingPostAsyncWithHttpInfo (CardBaseRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateCardReplaceUsingPost");

            var localVarPath = "/card/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardReplaceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardReplaceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardReplaceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardReplaceResponseVO)));
        }

        /// <summary>
        /// Card reserve transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>CardReserveTransferResponseVO</returns>
        public CardReserveTransferResponseVO CreateCardReserveTransferUsingPost (CardReserveTransferRequestCO request)
        {
             ApiResponse<CardReserveTransferResponseVO> localVarResponse = CreateCardReserveTransferUsingPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Card reserve transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of CardReserveTransferResponseVO</returns>
        public ApiResponse< CardReserveTransferResponseVO > CreateCardReserveTransferUsingPostWithHttpInfo (CardReserveTransferRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateCardReserveTransferUsingPost");

            var localVarPath = "/card/reserve_transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardReserveTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardReserveTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardReserveTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardReserveTransferResponseVO)));
        }

        /// <summary>
        /// Card reserve transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of CardReserveTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<CardReserveTransferResponseVO> CreateCardReserveTransferUsingPostAsync (CardReserveTransferRequestCO request)
        {
             ApiResponse<CardReserveTransferResponseVO> localVarResponse = await CreateCardReserveTransferUsingPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Card reserve transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (CardReserveTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardReserveTransferResponseVO>> CreateCardReserveTransferUsingPostAsyncWithHttpInfo (CardReserveTransferRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateCardReserveTransferUsingPost");

            var localVarPath = "/card/reserve_transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardReserveTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardReserveTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardReserveTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardReserveTransferResponseVO)));
        }

        /// <summary>
        /// Create card spending control 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>CardSpendingControlResponseVO</returns>
        public CardSpendingControlResponseVO CreateCardSpendingControlUsingPost (CardSpendingControlRequestCO request)
        {
             ApiResponse<CardSpendingControlResponseVO> localVarResponse = CreateCardSpendingControlUsingPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create card spending control 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of CardSpendingControlResponseVO</returns>
        public ApiResponse< CardSpendingControlResponseVO > CreateCardSpendingControlUsingPostWithHttpInfo (CardSpendingControlRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateCardSpendingControlUsingPost");

            var localVarPath = "/card/spending_control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardSpendingControlUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardSpendingControlResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardSpendingControlResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardSpendingControlResponseVO)));
        }

        /// <summary>
        /// Create card spending control 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of CardSpendingControlResponseVO</returns>
        public async System.Threading.Tasks.Task<CardSpendingControlResponseVO> CreateCardSpendingControlUsingPostAsync (CardSpendingControlRequestCO request)
        {
             ApiResponse<CardSpendingControlResponseVO> localVarResponse = await CreateCardSpendingControlUsingPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create card spending control 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (CardSpendingControlResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardSpendingControlResponseVO>> CreateCardSpendingControlUsingPostAsyncWithHttpInfo (CardSpendingControlRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardApi->CreateCardSpendingControlUsingPost");

            var localVarPath = "/card/spending_control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardSpendingControlUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardSpendingControlResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardSpendingControlResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardSpendingControlResponseVO)));
        }

        /// <summary>
        /// suspend card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suspendRequest">suspendRequest</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO CreateCardSuspendUsingPost (CardBaseRequestCO suspendRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = CreateCardSuspendUsingPostWithHttpInfo(suspendRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// suspend card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suspendRequest">suspendRequest</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > CreateCardSuspendUsingPostWithHttpInfo (CardBaseRequestCO suspendRequest)
        {
            // verify the required parameter 'suspendRequest' is set
            if (suspendRequest == null)
                throw new ApiException(400, "Missing required parameter 'suspendRequest' when calling CardApi->CreateCardSuspendUsingPost");

            var localVarPath = "/card/suspend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (suspendRequest != null && suspendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(suspendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = suspendRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardSuspendUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// suspend card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suspendRequest">suspendRequest</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> CreateCardSuspendUsingPostAsync (CardBaseRequestCO suspendRequest)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await CreateCardSuspendUsingPostAsyncWithHttpInfo(suspendRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// suspend card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suspendRequest">suspendRequest</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> CreateCardSuspendUsingPostAsyncWithHttpInfo (CardBaseRequestCO suspendRequest)
        {
            // verify the required parameter 'suspendRequest' is set
            if (suspendRequest == null)
                throw new ApiException(400, "Missing required parameter 'suspendRequest' when calling CardApi->CreateCardSuspendUsingPost");

            var localVarPath = "/card/suspend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (suspendRequest != null && suspendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(suspendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = suspendRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardSuspendUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// token card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenizeRequest">tokenizeRequest</param>
        /// <returns>CardTokenResponseVO</returns>
        public CardTokenResponseVO CreateCardTokenUsingPost (CardTokenRequestCO tokenizeRequest)
        {
             ApiResponse<CardTokenResponseVO> localVarResponse = CreateCardTokenUsingPostWithHttpInfo(tokenizeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// token card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenizeRequest">tokenizeRequest</param>
        /// <returns>ApiResponse of CardTokenResponseVO</returns>
        public ApiResponse< CardTokenResponseVO > CreateCardTokenUsingPostWithHttpInfo (CardTokenRequestCO tokenizeRequest)
        {
            // verify the required parameter 'tokenizeRequest' is set
            if (tokenizeRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenizeRequest' when calling CardApi->CreateCardTokenUsingPost");

            var localVarPath = "/card/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenizeRequest != null && tokenizeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenizeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenizeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardTokenUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardTokenResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardTokenResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardTokenResponseVO)));
        }

        /// <summary>
        /// token card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenizeRequest">tokenizeRequest</param>
        /// <returns>Task of CardTokenResponseVO</returns>
        public async System.Threading.Tasks.Task<CardTokenResponseVO> CreateCardTokenUsingPostAsync (CardTokenRequestCO tokenizeRequest)
        {
             ApiResponse<CardTokenResponseVO> localVarResponse = await CreateCardTokenUsingPostAsyncWithHttpInfo(tokenizeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// token card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenizeRequest">tokenizeRequest</param>
        /// <returns>Task of ApiResponse (CardTokenResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardTokenResponseVO>> CreateCardTokenUsingPostAsyncWithHttpInfo (CardTokenRequestCO tokenizeRequest)
        {
            // verify the required parameter 'tokenizeRequest' is set
            if (tokenizeRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenizeRequest' when calling CardApi->CreateCardTokenUsingPost");

            var localVarPath = "/card/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenizeRequest != null && tokenizeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenizeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenizeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardTokenUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardTokenResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardTokenResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardTokenResponseVO)));
        }

        /// <summary>
        /// Create a card upload 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reloadRequest">reloadRequest</param>
        /// <returns>CardLoadUnloadResponseVO</returns>
        public CardLoadUnloadResponseVO CreateCardUnloadUsingPost (CardUnloadRequestCO reloadRequest)
        {
             ApiResponse<CardLoadUnloadResponseVO> localVarResponse = CreateCardUnloadUsingPostWithHttpInfo(reloadRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a card upload 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reloadRequest">reloadRequest</param>
        /// <returns>ApiResponse of CardLoadUnloadResponseVO</returns>
        public ApiResponse< CardLoadUnloadResponseVO > CreateCardUnloadUsingPostWithHttpInfo (CardUnloadRequestCO reloadRequest)
        {
            // verify the required parameter 'reloadRequest' is set
            if (reloadRequest == null)
                throw new ApiException(400, "Missing required parameter 'reloadRequest' when calling CardApi->CreateCardUnloadUsingPost");

            var localVarPath = "/card/unload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reloadRequest != null && reloadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reloadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reloadRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardUnloadUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardLoadUnloadResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardLoadUnloadResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardLoadUnloadResponseVO)));
        }

        /// <summary>
        /// Create a card upload 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reloadRequest">reloadRequest</param>
        /// <returns>Task of CardLoadUnloadResponseVO</returns>
        public async System.Threading.Tasks.Task<CardLoadUnloadResponseVO> CreateCardUnloadUsingPostAsync (CardUnloadRequestCO reloadRequest)
        {
             ApiResponse<CardLoadUnloadResponseVO> localVarResponse = await CreateCardUnloadUsingPostAsyncWithHttpInfo(reloadRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a card upload 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reloadRequest">reloadRequest</param>
        /// <returns>Task of ApiResponse (CardLoadUnloadResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardLoadUnloadResponseVO>> CreateCardUnloadUsingPostAsyncWithHttpInfo (CardUnloadRequestCO reloadRequest)
        {
            // verify the required parameter 'reloadRequest' is set
            if (reloadRequest == null)
                throw new ApiException(400, "Missing required parameter 'reloadRequest' when calling CardApi->CreateCardUnloadUsingPost");

            var localVarPath = "/card/unload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reloadRequest != null && reloadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reloadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reloadRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardUnloadUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardLoadUnloadResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardLoadUnloadResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardLoadUnloadResponseVO)));
        }

        /// <summary>
        /// Create a card client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardClientRequestCO">cardClientRequestCO</param>
        /// <returns>CreateCardClientResponseVO</returns>
        public CreateCardClientResponseVO CreateClientCardUsingPost (CardClientRequestCO cardClientRequestCO)
        {
             ApiResponse<CreateCardClientResponseVO> localVarResponse = CreateClientCardUsingPostWithHttpInfo(cardClientRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a card client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardClientRequestCO">cardClientRequestCO</param>
        /// <returns>ApiResponse of CreateCardClientResponseVO</returns>
        public ApiResponse< CreateCardClientResponseVO > CreateClientCardUsingPostWithHttpInfo (CardClientRequestCO cardClientRequestCO)
        {
            // verify the required parameter 'cardClientRequestCO' is set
            if (cardClientRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardClientRequestCO' when calling CardApi->CreateClientCardUsingPost");

            var localVarPath = "/card/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardClientRequestCO != null && cardClientRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardClientRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardClientRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientCardUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCardClientResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCardClientResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCardClientResponseVO)));
        }

        /// <summary>
        /// Create a card client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardClientRequestCO">cardClientRequestCO</param>
        /// <returns>Task of CreateCardClientResponseVO</returns>
        public async System.Threading.Tasks.Task<CreateCardClientResponseVO> CreateClientCardUsingPostAsync (CardClientRequestCO cardClientRequestCO)
        {
             ApiResponse<CreateCardClientResponseVO> localVarResponse = await CreateClientCardUsingPostAsyncWithHttpInfo(cardClientRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a card client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardClientRequestCO">cardClientRequestCO</param>
        /// <returns>Task of ApiResponse (CreateCardClientResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCardClientResponseVO>> CreateClientCardUsingPostAsyncWithHttpInfo (CardClientRequestCO cardClientRequestCO)
        {
            // verify the required parameter 'cardClientRequestCO' is set
            if (cardClientRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardClientRequestCO' when calling CardApi->CreateClientCardUsingPost");

            var localVarPath = "/card/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardClientRequestCO != null && cardClientRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardClientRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardClientRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientCardUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCardClientResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCardClientResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCardClientResponseVO)));
        }

        /// <summary>
        /// Get a business status 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO GetBusinessStatusUsingGet (Guid? nucleusBusinessId)
        {
             ApiResponse<BaseResponseVO> localVarResponse = GetBusinessStatusUsingGetWithHttpInfo(nucleusBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a business status 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > GetBusinessStatusUsingGetWithHttpInfo (Guid? nucleusBusinessId)
        {
            // verify the required parameter 'nucleusBusinessId' is set
            if (nucleusBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBusinessId' when calling CardApi->GetBusinessStatusUsingGet");

            var localVarPath = "/card/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Get a business status 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> GetBusinessStatusUsingGetAsync (Guid? nucleusBusinessId)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await GetBusinessStatusUsingGetAsyncWithHttpInfo(nucleusBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a business status 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> GetBusinessStatusUsingGetAsyncWithHttpInfo (Guid? nucleusBusinessId)
        {
            // verify the required parameter 'nucleusBusinessId' is set
            if (nucleusBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBusinessId' when calling CardApi->GetBusinessStatusUsingGet");

            var localVarPath = "/card/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBusinessId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_business_id", nucleusBusinessId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Get a Card Balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>CardBalanceResponseVO</returns>
        public CardBalanceResponseVO GetCardBalanceUsingGet (Guid? id, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<CardBalanceResponseVO> localVarResponse = GetCardBalanceUsingGetWithHttpInfo(id, endDate, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Card Balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of CardBalanceResponseVO</returns>
        public ApiResponse< CardBalanceResponseVO > GetCardBalanceUsingGetWithHttpInfo (Guid? id, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->GetCardBalanceUsingGet");

            var localVarPath = "/card/balance/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardBalanceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardBalanceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardBalanceResponseVO)));
        }

        /// <summary>
        /// Get a Card Balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of CardBalanceResponseVO</returns>
        public async System.Threading.Tasks.Task<CardBalanceResponseVO> GetCardBalanceUsingGetAsync (Guid? id, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<CardBalanceResponseVO> localVarResponse = await GetCardBalanceUsingGetAsyncWithHttpInfo(id, endDate, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Card Balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (CardBalanceResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardBalanceResponseVO>> GetCardBalanceUsingGetAsyncWithHttpInfo (Guid? id, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->GetCardBalanceUsingGet");

            var localVarPath = "/card/balance/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardBalanceResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardBalanceResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardBalanceResponseVO)));
        }

        /// <summary>
        /// Get card image 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>GetCardImageResponseVO</returns>
        public GetCardImageResponseVO GetCardImage (Guid? cardId)
        {
             ApiResponse<GetCardImageResponseVO> localVarResponse = GetCardImageWithHttpInfo(cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get card image 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>ApiResponse of GetCardImageResponseVO</returns>
        public ApiResponse< GetCardImageResponseVO > GetCardImageWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardImage");

            var localVarPath = "/card/image/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCardImageResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCardImageResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCardImageResponseVO)));
        }

        /// <summary>
        /// Get card image 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>Task of GetCardImageResponseVO</returns>
        public async System.Threading.Tasks.Task<GetCardImageResponseVO> GetCardImageAsync (Guid? cardId)
        {
             ApiResponse<GetCardImageResponseVO> localVarResponse = await GetCardImageAsyncWithHttpInfo(cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get card image 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>Task of ApiResponse (GetCardImageResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCardImageResponseVO>> GetCardImageAsyncWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardImage");

            var localVarPath = "/card/image/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCardImageResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCardImageResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCardImageResponseVO)));
        }

        /// <summary>
        /// Get card pci details 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>GetCardPciDetailsResponseVO</returns>
        public GetCardPciDetailsResponseVO GetCardPciDetails (Guid? cardId)
        {
             ApiResponse<GetCardPciDetailsResponseVO> localVarResponse = GetCardPciDetailsWithHttpInfo(cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get card pci details 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>ApiResponse of GetCardPciDetailsResponseVO</returns>
        public ApiResponse< GetCardPciDetailsResponseVO > GetCardPciDetailsWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardPciDetails");

            var localVarPath = "/card/pci_details/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardPciDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCardPciDetailsResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCardPciDetailsResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCardPciDetailsResponseVO)));
        }

        /// <summary>
        /// Get card pci details 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>Task of GetCardPciDetailsResponseVO</returns>
        public async System.Threading.Tasks.Task<GetCardPciDetailsResponseVO> GetCardPciDetailsAsync (Guid? cardId)
        {
             ApiResponse<GetCardPciDetailsResponseVO> localVarResponse = await GetCardPciDetailsAsyncWithHttpInfo(cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get card pci details 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <returns>Task of ApiResponse (GetCardPciDetailsResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCardPciDetailsResponseVO>> GetCardPciDetailsAsyncWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardPciDetails");

            var localVarPath = "/card/pci_details/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardPciDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCardPciDetailsResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCardPciDetailsResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCardPciDetailsResponseVO)));
        }

        /// <summary>
        /// Card reserve account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CardReserveAccountResponseVO</returns>
        public CardReserveAccountResponseVO GetCardReserveAccountDetailsUsingGet ()
        {
             ApiResponse<CardReserveAccountResponseVO> localVarResponse = GetCardReserveAccountDetailsUsingGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Card reserve account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CardReserveAccountResponseVO</returns>
        public ApiResponse< CardReserveAccountResponseVO > GetCardReserveAccountDetailsUsingGetWithHttpInfo ()
        {

            var localVarPath = "/card/reserve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardReserveAccountDetailsUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardReserveAccountResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardReserveAccountResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardReserveAccountResponseVO)));
        }

        /// <summary>
        /// Card reserve account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CardReserveAccountResponseVO</returns>
        public async System.Threading.Tasks.Task<CardReserveAccountResponseVO> GetCardReserveAccountDetailsUsingGetAsync ()
        {
             ApiResponse<CardReserveAccountResponseVO> localVarResponse = await GetCardReserveAccountDetailsUsingGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Card reserve account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CardReserveAccountResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardReserveAccountResponseVO>> GetCardReserveAccountDetailsUsingGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/card/reserve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardReserveAccountDetailsUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardReserveAccountResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardReserveAccountResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardReserveAccountResponseVO)));
        }

        /// <summary>
        /// Get card statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>GetCardStatementResponseVO</returns>
        public GetCardStatementResponseVO GetCardStatementUsingGet (Guid? cardId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<GetCardStatementResponseVO> localVarResponse = GetCardStatementUsingGetWithHttpInfo(cardId, endDate, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get card statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of GetCardStatementResponseVO</returns>
        public ApiResponse< GetCardStatementResponseVO > GetCardStatementUsingGetWithHttpInfo (Guid? cardId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardStatementUsingGet");

            var localVarPath = "/card/statement/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardStatementUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCardStatementResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCardStatementResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCardStatementResponseVO)));
        }

        /// <summary>
        /// Get card statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of GetCardStatementResponseVO</returns>
        public async System.Threading.Tasks.Task<GetCardStatementResponseVO> GetCardStatementUsingGetAsync (Guid? cardId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<GetCardStatementResponseVO> localVarResponse = await GetCardStatementUsingGetAsyncWithHttpInfo(cardId, endDate, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get card statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (GetCardStatementResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCardStatementResponseVO>> GetCardStatementUsingGetAsyncWithHttpInfo (Guid? cardId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardStatementUsingGet");

            var localVarPath = "/card/statement/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardStatementUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCardStatementResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCardStatementResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCardStatementResponseVO)));
        }

        /// <summary>
        /// Get a card token 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="deviceId">device_id (optional)</param>
        /// <param name="deviceType">device_type (optional)</param>
        /// <param name="wallet">wallet (optional)</param>
        /// <returns>List&lt;GetCardTokenResponseVO&gt;</returns>
        public List<GetCardTokenResponseVO> GetCardTokenUsingToken (Guid? id, string deviceId = null, string deviceType = null, string wallet = null)
        {
             ApiResponse<List<GetCardTokenResponseVO>> localVarResponse = GetCardTokenUsingTokenWithHttpInfo(id, deviceId, deviceType, wallet);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a card token 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="deviceId">device_id (optional)</param>
        /// <param name="deviceType">device_type (optional)</param>
        /// <param name="wallet">wallet (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCardTokenResponseVO&gt;</returns>
        public ApiResponse< List<GetCardTokenResponseVO> > GetCardTokenUsingTokenWithHttpInfo (Guid? id, string deviceId = null, string deviceType = null, string wallet = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->GetCardTokenUsingToken");

            var localVarPath = "/card/token/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (deviceType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_type", deviceType)); // query parameter
            if (wallet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wallet", wallet)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardTokenUsingToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCardTokenResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCardTokenResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCardTokenResponseVO>)));
        }

        /// <summary>
        /// Get a card token 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="deviceId">device_id (optional)</param>
        /// <param name="deviceType">device_type (optional)</param>
        /// <param name="wallet">wallet (optional)</param>
        /// <returns>Task of List&lt;GetCardTokenResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCardTokenResponseVO>> GetCardTokenUsingTokenAsync (Guid? id, string deviceId = null, string deviceType = null, string wallet = null)
        {
             ApiResponse<List<GetCardTokenResponseVO>> localVarResponse = await GetCardTokenUsingTokenAsyncWithHttpInfo(id, deviceId, deviceType, wallet);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a card token 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="deviceId">device_id (optional)</param>
        /// <param name="deviceType">device_type (optional)</param>
        /// <param name="wallet">wallet (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCardTokenResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCardTokenResponseVO>>> GetCardTokenUsingTokenAsyncWithHttpInfo (Guid? id, string deviceId = null, string deviceType = null, string wallet = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->GetCardTokenUsingToken");

            var localVarPath = "/card/token/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (deviceType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_type", deviceType)); // query parameter
            if (wallet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wallet", wallet)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardTokenUsingToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCardTokenResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCardTokenResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCardTokenResponseVO>)));
        }

        /// <summary>
        /// Get a card transaction 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>CardTransactionResponseVO</returns>
        public CardTransactionResponseVO GetCardTransactionUsingGet (Guid? id, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<CardTransactionResponseVO> localVarResponse = GetCardTransactionUsingGetWithHttpInfo(id, endDate, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a card transaction 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>ApiResponse of CardTransactionResponseVO</returns>
        public ApiResponse< CardTransactionResponseVO > GetCardTransactionUsingGetWithHttpInfo (Guid? id, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->GetCardTransactionUsingGet");

            var localVarPath = "/card/transaction/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardTransactionResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardTransactionResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardTransactionResponseVO)));
        }

        /// <summary>
        /// Get a card transaction 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of CardTransactionResponseVO</returns>
        public async System.Threading.Tasks.Task<CardTransactionResponseVO> GetCardTransactionUsingGetAsync (Guid? id, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<CardTransactionResponseVO> localVarResponse = await GetCardTransactionUsingGetAsyncWithHttpInfo(id, endDate, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a card transaction 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="endDate">end_date (optional)</param>
        /// <param name="startDate">start_date (optional)</param>
        /// <returns>Task of ApiResponse (CardTransactionResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardTransactionResponseVO>> GetCardTransactionUsingGetAsyncWithHttpInfo (Guid? id, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->GetCardTransactionUsingGet");

            var localVarPath = "/card/transaction/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardTransactionResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardTransactionResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardTransactionResponseVO)));
        }

        /// <summary>
        /// Get a card information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO GetCardUsingGet (Guid? id)
        {
             ApiResponse<BaseResponseVO> localVarResponse = GetCardUsingGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a card information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > GetCardUsingGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->GetCardUsingGet");

            var localVarPath = "/card/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Get a card information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> GetCardUsingGetAsync (Guid? id)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await GetCardUsingGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a card information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> GetCardUsingGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->GetCardUsingGet");

            var localVarPath = "/card/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Update a card business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>UpdateBusinessResponseVO</returns>
        public UpdateBusinessResponseVO UpdateCardBusinessUsingPut (Guid? nucleusBusinessId)
        {
             ApiResponse<UpdateBusinessResponseVO> localVarResponse = UpdateCardBusinessUsingPutWithHttpInfo(nucleusBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a card business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>ApiResponse of UpdateBusinessResponseVO</returns>
        public ApiResponse< UpdateBusinessResponseVO > UpdateCardBusinessUsingPutWithHttpInfo (Guid? nucleusBusinessId)
        {
            // verify the required parameter 'nucleusBusinessId' is set
            if (nucleusBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBusinessId' when calling CardApi->UpdateCardBusinessUsingPut");

            var localVarPath = "/card/business/{nucleus_business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBusinessId != null) localVarPathParams.Add("nucleus_business_id", this.Configuration.ApiClient.ParameterToString(nucleusBusinessId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardBusinessUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateBusinessResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateBusinessResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateBusinessResponseVO)));
        }

        /// <summary>
        /// Update a card business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of UpdateBusinessResponseVO</returns>
        public async System.Threading.Tasks.Task<UpdateBusinessResponseVO> UpdateCardBusinessUsingPutAsync (Guid? nucleusBusinessId)
        {
             ApiResponse<UpdateBusinessResponseVO> localVarResponse = await UpdateCardBusinessUsingPutAsyncWithHttpInfo(nucleusBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a card business 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBusinessId">nucleus_business_id</param>
        /// <returns>Task of ApiResponse (UpdateBusinessResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateBusinessResponseVO>> UpdateCardBusinessUsingPutAsyncWithHttpInfo (Guid? nucleusBusinessId)
        {
            // verify the required parameter 'nucleusBusinessId' is set
            if (nucleusBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBusinessId' when calling CardApi->UpdateCardBusinessUsingPut");

            var localVarPath = "/card/business/{nucleus_business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBusinessId != null) localVarPathParams.Add("nucleus_business_id", this.Configuration.ApiClient.ParameterToString(nucleusBusinessId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardBusinessUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateBusinessResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateBusinessResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateBusinessResponseVO)));
        }

        /// <summary>
        /// update a pin card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <param name="id">id</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO UpdateCardPinUsingPut (CardUpdatePinRequestCO cardPinRequestCO, Guid? id)
        {
             ApiResponse<BaseResponseVO> localVarResponse = UpdateCardPinUsingPutWithHttpInfo(cardPinRequestCO, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update a pin card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > UpdateCardPinUsingPutWithHttpInfo (CardUpdatePinRequestCO cardPinRequestCO, Guid? id)
        {
            // verify the required parameter 'cardPinRequestCO' is set
            if (cardPinRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardPinRequestCO' when calling CardApi->UpdateCardPinUsingPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->UpdateCardPinUsingPut");

            var localVarPath = "/card/pin/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cardPinRequestCO != null && cardPinRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardPinRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardPinRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardPinUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// update a pin card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <param name="id">id</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> UpdateCardPinUsingPutAsync (CardUpdatePinRequestCO cardPinRequestCO, Guid? id)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await UpdateCardPinUsingPutAsyncWithHttpInfo(cardPinRequestCO, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update a pin card 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> UpdateCardPinUsingPutAsyncWithHttpInfo (CardUpdatePinRequestCO cardPinRequestCO, Guid? id)
        {
            // verify the required parameter 'cardPinRequestCO' is set
            if (cardPinRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardPinRequestCO' when calling CardApi->UpdateCardPinUsingPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->UpdateCardPinUsingPut");

            var localVarPath = "/card/pin/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cardPinRequestCO != null && cardPinRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardPinRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardPinRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardPinUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Update a card spending control 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusSpendingControlId">nucleus_spending_control_id</param>
        /// <returns>CardSpendingControlResponseVO</returns>
        public CardSpendingControlResponseVO UpdateCardSpendingControlUsingPut (Guid? nucleusSpendingControlId)
        {
             ApiResponse<CardSpendingControlResponseVO> localVarResponse = UpdateCardSpendingControlUsingPutWithHttpInfo(nucleusSpendingControlId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a card spending control 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusSpendingControlId">nucleus_spending_control_id</param>
        /// <returns>ApiResponse of CardSpendingControlResponseVO</returns>
        public ApiResponse< CardSpendingControlResponseVO > UpdateCardSpendingControlUsingPutWithHttpInfo (Guid? nucleusSpendingControlId)
        {
            // verify the required parameter 'nucleusSpendingControlId' is set
            if (nucleusSpendingControlId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusSpendingControlId' when calling CardApi->UpdateCardSpendingControlUsingPut");

            var localVarPath = "/card/spending_control/{nucleus_spending_control_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusSpendingControlId != null) localVarPathParams.Add("nucleus_spending_control_id", this.Configuration.ApiClient.ParameterToString(nucleusSpendingControlId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardSpendingControlUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardSpendingControlResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardSpendingControlResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardSpendingControlResponseVO)));
        }

        /// <summary>
        /// Update a card spending control 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusSpendingControlId">nucleus_spending_control_id</param>
        /// <returns>Task of CardSpendingControlResponseVO</returns>
        public async System.Threading.Tasks.Task<CardSpendingControlResponseVO> UpdateCardSpendingControlUsingPutAsync (Guid? nucleusSpendingControlId)
        {
             ApiResponse<CardSpendingControlResponseVO> localVarResponse = await UpdateCardSpendingControlUsingPutAsyncWithHttpInfo(nucleusSpendingControlId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a card spending control 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusSpendingControlId">nucleus_spending_control_id</param>
        /// <returns>Task of ApiResponse (CardSpendingControlResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardSpendingControlResponseVO>> UpdateCardSpendingControlUsingPutAsyncWithHttpInfo (Guid? nucleusSpendingControlId)
        {
            // verify the required parameter 'nucleusSpendingControlId' is set
            if (nucleusSpendingControlId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusSpendingControlId' when calling CardApi->UpdateCardSpendingControlUsingPut");

            var localVarPath = "/card/spending_control/{nucleus_spending_control_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusSpendingControlId != null) localVarPathParams.Add("nucleus_spending_control_id", this.Configuration.ApiClient.ParameterToString(nucleusSpendingControlId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardSpendingControlUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardSpendingControlResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardSpendingControlResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardSpendingControlResponseVO)));
        }

        /// <summary>
        /// Update a card information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO UpdateCardUsingPut (Guid? id)
        {
             ApiResponse<BaseResponseVO> localVarResponse = UpdateCardUsingPutWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a card information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > UpdateCardUsingPutWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->UpdateCardUsingPut");

            var localVarPath = "/card/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Update a card information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> UpdateCardUsingPutAsync (Guid? id)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await UpdateCardUsingPutAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a card information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> UpdateCardUsingPutAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->UpdateCardUsingPut");

            var localVarPath = "/card/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// Update a card client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>UpdateCardClientResponseVO</returns>
        public UpdateCardClientResponseVO UpdateClientCardUsingPut (Guid? id)
        {
             ApiResponse<UpdateCardClientResponseVO> localVarResponse = UpdateClientCardUsingPutWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a card client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of UpdateCardClientResponseVO</returns>
        public ApiResponse< UpdateCardClientResponseVO > UpdateClientCardUsingPutWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->UpdateClientCardUsingPut");

            var localVarPath = "/card/client/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientCardUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCardClientResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCardClientResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCardClientResponseVO)));
        }

        /// <summary>
        /// Update a card client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of UpdateCardClientResponseVO</returns>
        public async System.Threading.Tasks.Task<UpdateCardClientResponseVO> UpdateClientCardUsingPutAsync (Guid? id)
        {
             ApiResponse<UpdateCardClientResponseVO> localVarResponse = await UpdateClientCardUsingPutAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a card client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (UpdateCardClientResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCardClientResponseVO>> UpdateClientCardUsingPutAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardApi->UpdateClientCardUsingPut");

            var localVarPath = "/card/client/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientCardUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCardClientResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCardClientResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCardClientResponseVO)));
        }

        /// <summary>
        /// verify card pin 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>BaseResponseVO</returns>
        public BaseResponseVO VerifyCardPinUsingPost (CardPinRequestCO cardPinRequestCO)
        {
             ApiResponse<BaseResponseVO> localVarResponse = VerifyCardPinUsingPostWithHttpInfo(cardPinRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// verify card pin 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>ApiResponse of BaseResponseVO</returns>
        public ApiResponse< BaseResponseVO > VerifyCardPinUsingPostWithHttpInfo (CardPinRequestCO cardPinRequestCO)
        {
            // verify the required parameter 'cardPinRequestCO' is set
            if (cardPinRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardPinRequestCO' when calling CardApi->VerifyCardPinUsingPost");

            var localVarPath = "/card/pin/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardPinRequestCO != null && cardPinRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardPinRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardPinRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyCardPinUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

        /// <summary>
        /// verify card pin 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>Task of BaseResponseVO</returns>
        public async System.Threading.Tasks.Task<BaseResponseVO> VerifyCardPinUsingPostAsync (CardPinRequestCO cardPinRequestCO)
        {
             ApiResponse<BaseResponseVO> localVarResponse = await VerifyCardPinUsingPostAsyncWithHttpInfo(cardPinRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// verify card pin 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardPinRequestCO">cardPinRequestCO</param>
        /// <returns>Task of ApiResponse (BaseResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponseVO>> VerifyCardPinUsingPostAsyncWithHttpInfo (CardPinRequestCO cardPinRequestCO)
        {
            // verify the required parameter 'cardPinRequestCO' is set
            if (cardPinRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'cardPinRequestCO' when calling CardApi->VerifyCardPinUsingPost");

            var localVarPath = "/card/pin/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardPinRequestCO != null && cardPinRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardPinRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardPinRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyCardPinUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponseVO)));
        }

    }
}
