/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIAVApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Instant Account Verification of an account.
        /// </summary>
        /// <remarks>
        /// Endpoint is used to verify account.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iavRequestCO">iavRequestCO</param>
        /// <returns>IavResponseVo</returns>
        IavResponseVo CreateIAVUsingPost (IavRequestCO iavRequestCO);

        /// <summary>
        /// Instant Account Verification of an account.
        /// </summary>
        /// <remarks>
        /// Endpoint is used to verify account.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iavRequestCO">iavRequestCO</param>
        /// <returns>ApiResponse of IavResponseVo</returns>
        ApiResponse<IavResponseVo> CreateIAVUsingPostWithHttpInfo (IavRequestCO iavRequestCO);
        /// <summary>
        /// De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// De-Link mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns></returns>
        void DeleteBankLinkUsingDelete (Guid? nucleusBankLinkId, string deleteType = null, string nucleusData = null);

        /// <summary>
        /// De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// De-Link mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId, string deleteType = null, string nucleusData = null);
        /// <summary>
        /// Get verified account based on id.
        /// </summary>
        /// <remarks>
        /// Get verified account based on id.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>IavResponseVo</returns>
        IavResponseVo GetIAVUsingGet (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get verified account based on id.
        /// </summary>
        /// <remarks>
        /// Get verified account based on id.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of IavResponseVo</returns>
        ApiResponse<IavResponseVo> GetIAVUsingGetWithHttpInfo (Guid? nucleusBankLinkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Instant Account Verification of an account.
        /// </summary>
        /// <remarks>
        /// Endpoint is used to verify account.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iavRequestCO">iavRequestCO</param>
        /// <returns>Task of IavResponseVo</returns>
        System.Threading.Tasks.Task<IavResponseVo> CreateIAVUsingPostAsync (IavRequestCO iavRequestCO);

        /// <summary>
        /// Instant Account Verification of an account.
        /// </summary>
        /// <remarks>
        /// Endpoint is used to verify account.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iavRequestCO">iavRequestCO</param>
        /// <returns>Task of ApiResponse (IavResponseVo)</returns>
        System.Threading.Tasks.Task<ApiResponse<IavResponseVo>> CreateIAVUsingPostAsyncWithHttpInfo (IavRequestCO iavRequestCO);
        /// <summary>
        /// De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// De-Link mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId, string deleteType = null, string nucleusData = null);

        /// <summary>
        /// De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <remarks>
        /// De-Link mapping between client,vendor,tenant
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId, string deleteType = null, string nucleusData = null);
        /// <summary>
        /// Get verified account based on id.
        /// </summary>
        /// <remarks>
        /// Get verified account based on id.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of IavResponseVo</returns>
        System.Threading.Tasks.Task<IavResponseVo> GetIAVUsingGetAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get verified account based on id.
        /// </summary>
        /// <remarks>
        /// Get verified account based on id.
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (IavResponseVo)</returns>
        System.Threading.Tasks.Task<ApiResponse<IavResponseVo>> GetIAVUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IAVApi : IIAVApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IAVApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IAVApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IAVApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IAVApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Instant Account Verification of an account. Endpoint is used to verify account.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iavRequestCO">iavRequestCO</param>
        /// <returns>IavResponseVo</returns>
        public IavResponseVo CreateIAVUsingPost (IavRequestCO iavRequestCO)
        {
             ApiResponse<IavResponseVo> localVarResponse = CreateIAVUsingPostWithHttpInfo(iavRequestCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Instant Account Verification of an account. Endpoint is used to verify account.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iavRequestCO">iavRequestCO</param>
        /// <returns>ApiResponse of IavResponseVo</returns>
        public ApiResponse< IavResponseVo > CreateIAVUsingPostWithHttpInfo (IavRequestCO iavRequestCO)
        {
            // verify the required parameter 'iavRequestCO' is set
            if (iavRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'iavRequestCO' when calling IAVApi->CreateIAVUsingPost");

            var localVarPath = "/iav";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (iavRequestCO != null && iavRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(iavRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = iavRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIAVUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IavResponseVo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IavResponseVo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IavResponseVo)));
        }

        /// <summary>
        /// Instant Account Verification of an account. Endpoint is used to verify account.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iavRequestCO">iavRequestCO</param>
        /// <returns>Task of IavResponseVo</returns>
        public async System.Threading.Tasks.Task<IavResponseVo> CreateIAVUsingPostAsync (IavRequestCO iavRequestCO)
        {
             ApiResponse<IavResponseVo> localVarResponse = await CreateIAVUsingPostAsyncWithHttpInfo(iavRequestCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Instant Account Verification of an account. Endpoint is used to verify account.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iavRequestCO">iavRequestCO</param>
        /// <returns>Task of ApiResponse (IavResponseVo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IavResponseVo>> CreateIAVUsingPostAsyncWithHttpInfo (IavRequestCO iavRequestCO)
        {
            // verify the required parameter 'iavRequestCO' is set
            if (iavRequestCO == null)
                throw new ApiException(400, "Missing required parameter 'iavRequestCO' when calling IAVApi->CreateIAVUsingPost");

            var localVarPath = "/iav";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (iavRequestCO != null && iavRequestCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(iavRequestCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = iavRequestCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIAVUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IavResponseVo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IavResponseVo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IavResponseVo)));
        }

        /// <summary>
        /// De-Link mapping between client,vendor,tenant De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns></returns>
        public void DeleteBankLinkUsingDelete (Guid? nucleusBankLinkId, string deleteType = null, string nucleusData = null)
        {
             DeleteBankLinkUsingDeleteWithHttpInfo(nucleusBankLinkId, deleteType, nucleusData);
        }

        /// <summary>
        /// De-Link mapping between client,vendor,tenant De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId, string deleteType = null, string nucleusData = null)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling IAVApi->DeleteBankLinkUsingDelete");

            var localVarPath = "/iav/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter
            if (deleteType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_type", deleteType)); // query parameter
            if (nucleusData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_data", nucleusData)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// De-Link mapping between client,vendor,tenant De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId, string deleteType = null, string nucleusData = null)
        {
             await DeleteBankLinkUsingDeleteAsyncWithHttpInfo(nucleusBankLinkId, deleteType, nucleusData);

        }

        /// <summary>
        /// De-Link mapping between client,vendor,tenant De-Link mapping between client,vendor,tenant
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <param name="deleteType">delete_type (optional, default to delink)</param>
        /// <param name="nucleusData">nucleus_data (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId, string deleteType = null, string nucleusData = null)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling IAVApi->DeleteBankLinkUsingDelete");

            var localVarPath = "/iav/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter
            if (deleteType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_type", deleteType)); // query parameter
            if (nucleusData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_data", nucleusData)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get verified account based on id. Get verified account based on id.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>IavResponseVo</returns>
        public IavResponseVo GetIAVUsingGet (Guid? nucleusBankLinkId)
        {
             ApiResponse<IavResponseVo> localVarResponse = GetIAVUsingGetWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get verified account based on id. Get verified account based on id.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of IavResponseVo</returns>
        public ApiResponse< IavResponseVo > GetIAVUsingGetWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling IAVApi->GetIAVUsingGet");

            var localVarPath = "/iav/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIAVUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IavResponseVo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IavResponseVo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IavResponseVo)));
        }

        /// <summary>
        /// Get verified account based on id. Get verified account based on id.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of IavResponseVo</returns>
        public async System.Threading.Tasks.Task<IavResponseVo> GetIAVUsingGetAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<IavResponseVo> localVarResponse = await GetIAVUsingGetAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get verified account based on id. Get verified account based on id.
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (IavResponseVo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IavResponseVo>> GetIAVUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling IAVApi->GetIAVUsingGet");

            var localVarPath = "/iav/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIAVUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IavResponseVo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IavResponseVo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IavResponseVo)));
        }

    }
}
