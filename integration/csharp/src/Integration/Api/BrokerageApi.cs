/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrokerageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns></returns>
        void CancelBrokerageOrderUsingPut (Guid? nucleusOrderId);

        /// <summary>
        /// Cancel an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelBrokerageOrderUsingPutWithHttpInfo (Guid? nucleusOrderId);
        /// <summary>
        /// create a Brokerage account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageAccountCO">brokerageAccountCO</param>
        /// <returns>BrokerageAccountVO</returns>
        BrokerageAccountVO CreateBrokerageAccountUsingPost (BrokerageAccountCO brokerageAccountCO);

        /// <summary>
        /// create a Brokerage account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageAccountCO">brokerageAccountCO</param>
        /// <returns>ApiResponse of BrokerageAccountVO</returns>
        ApiResponse<BrokerageAccountVO> CreateBrokerageAccountUsingPostWithHttpInfo (BrokerageAccountCO brokerageAccountCO);
        /// <summary>
        /// create a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageBankLinkCO">brokerageBankLinkCO</param>
        /// <returns>BrokerageBankLinkVO</returns>
        BrokerageBankLinkVO CreateBrokerageBankLinkUsingPost (BrokerageBankLinkCO brokerageBankLinkCO);

        /// <summary>
        /// create a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageBankLinkCO">brokerageBankLinkCO</param>
        /// <returns>ApiResponse of BrokerageBankLinkVO</returns>
        ApiResponse<BrokerageBankLinkVO> CreateBrokerageBankLinkUsingPostWithHttpInfo (BrokerageBankLinkCO brokerageBankLinkCO);
        /// <summary>
        /// Create a Brokerage Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCO">clientCO</param>
        /// <returns>BrokerageCreateClientVO</returns>
        BrokerageCreateClientVO CreateBrokerageClientUsingPost (BrokerageCreateClientCO clientCO);

        /// <summary>
        /// Create a Brokerage Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCO">clientCO</param>
        /// <returns>ApiResponse of BrokerageCreateClientVO</returns>
        ApiResponse<BrokerageCreateClientVO> CreateBrokerageClientUsingPostWithHttpInfo (BrokerageCreateClientCO clientCO);
        /// <summary>
        /// Create a deposit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageDepositCO">brokerageDepositCO</param>
        /// <returns>BrokerageDepositVO</returns>
        BrokerageDepositVO CreateBrokerageDepositUsingPost (BrokerageDepositCO brokerageDepositCO);

        /// <summary>
        /// Create a deposit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageDepositCO">brokerageDepositCO</param>
        /// <returns>ApiResponse of BrokerageDepositVO</returns>
        ApiResponse<BrokerageDepositVO> CreateBrokerageDepositUsingPostWithHttpInfo (BrokerageDepositCO brokerageDepositCO);
        /// <summary>
        /// Create a Brokerage document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCO">documentCO</param>
        /// <returns>BrokerageDocumentVO</returns>
        BrokerageDocumentVO CreateBrokerageDocumentUsingPost (BrokerageDocumentCO documentCO);

        /// <summary>
        /// Create a Brokerage document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCO">documentCO</param>
        /// <returns>ApiResponse of BrokerageDocumentVO</returns>
        ApiResponse<BrokerageDocumentVO> CreateBrokerageDocumentUsingPostWithHttpInfo (BrokerageDocumentCO documentCO);
        /// <summary>
        /// Create an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageOrderCO">brokerageOrderCO</param>
        /// <returns>BrokerageOrderVO</returns>
        BrokerageOrderVO CreateBrokerageOrderUsingPost (BrokerageOrderCO brokerageOrderCO);

        /// <summary>
        /// Create an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageOrderCO">brokerageOrderCO</param>
        /// <returns>ApiResponse of BrokerageOrderVO</returns>
        ApiResponse<BrokerageOrderVO> CreateBrokerageOrderUsingPostWithHttpInfo (BrokerageOrderCO brokerageOrderCO);
        /// <summary>
        /// Create a withdrawal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageWithdrawalCO">brokerageWithdrawalCO</param>
        /// <returns>BrokerageWithdrawalVO</returns>
        BrokerageWithdrawalVO CreateBrokerageWithdrawalUsingPost (BrokerageWithdrawalCO brokerageWithdrawalCO);

        /// <summary>
        /// Create a withdrawal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageWithdrawalCO">brokerageWithdrawalCO</param>
        /// <returns>ApiResponse of BrokerageWithdrawalVO</returns>
        ApiResponse<BrokerageWithdrawalVO> CreateBrokerageWithdrawalUsingPostWithHttpInfo (BrokerageWithdrawalCO brokerageWithdrawalCO);
        /// <summary>
        /// Delete a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns></returns>
        void DeleteBrokerageBankLinkUsingDelete (Guid? nucleusBankLinkId);

        /// <summary>
        /// Delete a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrokerageBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get a Brokerage account statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type</param>
        /// <returns>BrokerageStatementVO</returns>
        BrokerageStatementVO GetBrokerageAccountStatementUsingGet (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType);

        /// <summary>
        /// Get a Brokerage account statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type</param>
        /// <returns>ApiResponse of BrokerageStatementVO</returns>
        ApiResponse<BrokerageStatementVO> GetBrokerageAccountStatementUsingGetWithHttpInfo (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType);
        /// <summary>
        /// Get account balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>BrokerageBalanceVO</returns>
        BrokerageBalanceVO GetBrokerageBalanceUsingGet (Guid? nucleusPortfolioId);

        /// <summary>
        /// Get account balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>ApiResponse of BrokerageBalanceVO</returns>
        ApiResponse<BrokerageBalanceVO> GetBrokerageBalanceUsingGetWithHttpInfo (Guid? nucleusPortfolioId);
        /// <summary>
        /// Get a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>BrokerageBankLinkVO</returns>
        BrokerageBankLinkVO GetBrokerageBankLinkUsingGet (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of BrokerageBankLinkVO</returns>
        ApiResponse<BrokerageBankLinkVO> GetBrokerageBankLinkUsingGetWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get a Brokerage document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusDocumentId">nucleus_document_id</param>
        /// <returns>BrokerageDocumentVO</returns>
        BrokerageDocumentVO GetBrokerageDocumentUsingGet (Guid? nucleusDocumentId);

        /// <summary>
        /// Get a Brokerage document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusDocumentId">nucleus_document_id</param>
        /// <returns>ApiResponse of BrokerageDocumentVO</returns>
        ApiResponse<BrokerageDocumentVO> GetBrokerageDocumentUsingGetWithHttpInfo (Guid? nucleusDocumentId);
        /// <summary>
        /// Get portfolio holding performance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>BrokeragePerformanceVO</returns>
        BrokeragePerformanceVO GetBrokerageHoldingPerformanceUsingGet (Guid? nucleusPortfolioId);

        /// <summary>
        /// Get portfolio holding performance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>ApiResponse of BrokeragePerformanceVO</returns>
        ApiResponse<BrokeragePerformanceVO> GetBrokerageHoldingPerformanceUsingGetWithHttpInfo (Guid? nucleusPortfolioId);
        /// <summary>
        /// Get portfolio holdings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>BrokerageHoldingVO</returns>
        BrokerageHoldingVO GetBrokerageHoldingUsingGet (Guid? nucleusPortfolioId);

        /// <summary>
        /// Get portfolio holdings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>ApiResponse of BrokerageHoldingVO</returns>
        ApiResponse<BrokerageHoldingVO> GetBrokerageHoldingUsingGetWithHttpInfo (Guid? nucleusPortfolioId);
        /// <summary>
        /// Get an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>BrokerageOrderVO</returns>
        BrokerageOrderVO GetBrokerageOrderUsingGet (Guid? nucleusOrderId);

        /// <summary>
        /// Get an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>ApiResponse of BrokerageOrderVO</returns>
        ApiResponse<BrokerageOrderVO> GetBrokerageOrderUsingGetWithHttpInfo (Guid? nucleusOrderId);
        /// <summary>
        /// Get securities information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">vendor_name</param>
        /// <param name="getFundamentals">get_fundamentals (optional, default to false)</param>
        /// <param name="nucleusSecurityId">nucleus_security_id (optional)</param>
        /// <returns>BrokerageSecuritiesVO</returns>
        BrokerageSecuritiesVO GetBrokerageSecuritiesUsingGet (string vendorName, bool? getFundamentals = null, Guid? nucleusSecurityId = null);

        /// <summary>
        /// Get securities information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">vendor_name</param>
        /// <param name="getFundamentals">get_fundamentals (optional, default to false)</param>
        /// <param name="nucleusSecurityId">nucleus_security_id (optional)</param>
        /// <returns>ApiResponse of BrokerageSecuritiesVO</returns>
        ApiResponse<BrokerageSecuritiesVO> GetBrokerageSecuritiesUsingGetWithHttpInfo (string vendorName, bool? getFundamentals = null, Guid? nucleusSecurityId = null);
        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drivewealthResponse">drivewealthResponse</param>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="startDate">start_date</param>
        /// <returns>BrokerageTransactionVO</returns>
        BrokerageTransactionVO GetBrokerageTransactionsUsingGet (GetTransactionsResponse drivewealthResponse, DateTime? endDate, Guid? nucleusPortfolioId, DateTime? startDate);

        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drivewealthResponse">drivewealthResponse</param>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="startDate">start_date</param>
        /// <returns>ApiResponse of BrokerageTransactionVO</returns>
        ApiResponse<BrokerageTransactionVO> GetBrokerageTransactionsUsingGetWithHttpInfo (GetTransactionsResponse drivewealthResponse, DateTime? endDate, Guid? nucleusPortfolioId, DateTime? startDate);
        /// <summary>
        /// Update a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>BrokerageBankLinkVO</returns>
        BrokerageBankLinkVO UpdateBrokerageBankLinkUsingPut (Guid? nucleusBankLinkId);

        /// <summary>
        /// Update a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of BrokerageBankLinkVO</returns>
        ApiResponse<BrokerageBankLinkVO> UpdateBrokerageBankLinkUsingPutWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Update a Brokerage client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="clientCO">clientCO (optional)</param>
        /// <returns>BrokerageUpdateClientVO</returns>
        BrokerageUpdateClientVO UpdateBrokerageClientUsingPut (Guid? nucleusClientId, BrokerageUpdateClientCO clientCO = null);

        /// <summary>
        /// Update a Brokerage client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="clientCO">clientCO (optional)</param>
        /// <returns>ApiResponse of BrokerageUpdateClientVO</returns>
        ApiResponse<BrokerageUpdateClientVO> UpdateBrokerageClientUsingPutWithHttpInfo (Guid? nucleusClientId, BrokerageUpdateClientCO clientCO = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelBrokerageOrderUsingPutAsync (Guid? nucleusOrderId);

        /// <summary>
        /// Cancel an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelBrokerageOrderUsingPutAsyncWithHttpInfo (Guid? nucleusOrderId);
        /// <summary>
        /// create a Brokerage account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageAccountCO">brokerageAccountCO</param>
        /// <returns>Task of BrokerageAccountVO</returns>
        System.Threading.Tasks.Task<BrokerageAccountVO> CreateBrokerageAccountUsingPostAsync (BrokerageAccountCO brokerageAccountCO);

        /// <summary>
        /// create a Brokerage account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageAccountCO">brokerageAccountCO</param>
        /// <returns>Task of ApiResponse (BrokerageAccountVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageAccountVO>> CreateBrokerageAccountUsingPostAsyncWithHttpInfo (BrokerageAccountCO brokerageAccountCO);
        /// <summary>
        /// create a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageBankLinkCO">brokerageBankLinkCO</param>
        /// <returns>Task of BrokerageBankLinkVO</returns>
        System.Threading.Tasks.Task<BrokerageBankLinkVO> CreateBrokerageBankLinkUsingPostAsync (BrokerageBankLinkCO brokerageBankLinkCO);

        /// <summary>
        /// create a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageBankLinkCO">brokerageBankLinkCO</param>
        /// <returns>Task of ApiResponse (BrokerageBankLinkVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageBankLinkVO>> CreateBrokerageBankLinkUsingPostAsyncWithHttpInfo (BrokerageBankLinkCO brokerageBankLinkCO);
        /// <summary>
        /// Create a Brokerage Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCO">clientCO</param>
        /// <returns>Task of BrokerageCreateClientVO</returns>
        System.Threading.Tasks.Task<BrokerageCreateClientVO> CreateBrokerageClientUsingPostAsync (BrokerageCreateClientCO clientCO);

        /// <summary>
        /// Create a Brokerage Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCO">clientCO</param>
        /// <returns>Task of ApiResponse (BrokerageCreateClientVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageCreateClientVO>> CreateBrokerageClientUsingPostAsyncWithHttpInfo (BrokerageCreateClientCO clientCO);
        /// <summary>
        /// Create a deposit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageDepositCO">brokerageDepositCO</param>
        /// <returns>Task of BrokerageDepositVO</returns>
        System.Threading.Tasks.Task<BrokerageDepositVO> CreateBrokerageDepositUsingPostAsync (BrokerageDepositCO brokerageDepositCO);

        /// <summary>
        /// Create a deposit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageDepositCO">brokerageDepositCO</param>
        /// <returns>Task of ApiResponse (BrokerageDepositVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageDepositVO>> CreateBrokerageDepositUsingPostAsyncWithHttpInfo (BrokerageDepositCO brokerageDepositCO);
        /// <summary>
        /// Create a Brokerage document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCO">documentCO</param>
        /// <returns>Task of BrokerageDocumentVO</returns>
        System.Threading.Tasks.Task<BrokerageDocumentVO> CreateBrokerageDocumentUsingPostAsync (BrokerageDocumentCO documentCO);

        /// <summary>
        /// Create a Brokerage document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCO">documentCO</param>
        /// <returns>Task of ApiResponse (BrokerageDocumentVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageDocumentVO>> CreateBrokerageDocumentUsingPostAsyncWithHttpInfo (BrokerageDocumentCO documentCO);
        /// <summary>
        /// Create an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageOrderCO">brokerageOrderCO</param>
        /// <returns>Task of BrokerageOrderVO</returns>
        System.Threading.Tasks.Task<BrokerageOrderVO> CreateBrokerageOrderUsingPostAsync (BrokerageOrderCO brokerageOrderCO);

        /// <summary>
        /// Create an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageOrderCO">brokerageOrderCO</param>
        /// <returns>Task of ApiResponse (BrokerageOrderVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageOrderVO>> CreateBrokerageOrderUsingPostAsyncWithHttpInfo (BrokerageOrderCO brokerageOrderCO);
        /// <summary>
        /// Create a withdrawal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageWithdrawalCO">brokerageWithdrawalCO</param>
        /// <returns>Task of BrokerageWithdrawalVO</returns>
        System.Threading.Tasks.Task<BrokerageWithdrawalVO> CreateBrokerageWithdrawalUsingPostAsync (BrokerageWithdrawalCO brokerageWithdrawalCO);

        /// <summary>
        /// Create a withdrawal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageWithdrawalCO">brokerageWithdrawalCO</param>
        /// <returns>Task of ApiResponse (BrokerageWithdrawalVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageWithdrawalVO>> CreateBrokerageWithdrawalUsingPostAsyncWithHttpInfo (BrokerageWithdrawalCO brokerageWithdrawalCO);
        /// <summary>
        /// Delete a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrokerageBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Delete a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrokerageBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get a Brokerage account statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type</param>
        /// <returns>Task of BrokerageStatementVO</returns>
        System.Threading.Tasks.Task<BrokerageStatementVO> GetBrokerageAccountStatementUsingGetAsync (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType);

        /// <summary>
        /// Get a Brokerage account statement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type</param>
        /// <returns>Task of ApiResponse (BrokerageStatementVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageStatementVO>> GetBrokerageAccountStatementUsingGetAsyncWithHttpInfo (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType);
        /// <summary>
        /// Get account balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of BrokerageBalanceVO</returns>
        System.Threading.Tasks.Task<BrokerageBalanceVO> GetBrokerageBalanceUsingGetAsync (Guid? nucleusPortfolioId);

        /// <summary>
        /// Get account balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of ApiResponse (BrokerageBalanceVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageBalanceVO>> GetBrokerageBalanceUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId);
        /// <summary>
        /// Get a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of BrokerageBankLinkVO</returns>
        System.Threading.Tasks.Task<BrokerageBankLinkVO> GetBrokerageBankLinkUsingGetAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (BrokerageBankLinkVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageBankLinkVO>> GetBrokerageBankLinkUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get a Brokerage document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusDocumentId">nucleus_document_id</param>
        /// <returns>Task of BrokerageDocumentVO</returns>
        System.Threading.Tasks.Task<BrokerageDocumentVO> GetBrokerageDocumentUsingGetAsync (Guid? nucleusDocumentId);

        /// <summary>
        /// Get a Brokerage document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusDocumentId">nucleus_document_id</param>
        /// <returns>Task of ApiResponse (BrokerageDocumentVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageDocumentVO>> GetBrokerageDocumentUsingGetAsyncWithHttpInfo (Guid? nucleusDocumentId);
        /// <summary>
        /// Get portfolio holding performance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of BrokeragePerformanceVO</returns>
        System.Threading.Tasks.Task<BrokeragePerformanceVO> GetBrokerageHoldingPerformanceUsingGetAsync (Guid? nucleusPortfolioId);

        /// <summary>
        /// Get portfolio holding performance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of ApiResponse (BrokeragePerformanceVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokeragePerformanceVO>> GetBrokerageHoldingPerformanceUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId);
        /// <summary>
        /// Get portfolio holdings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of BrokerageHoldingVO</returns>
        System.Threading.Tasks.Task<BrokerageHoldingVO> GetBrokerageHoldingUsingGetAsync (Guid? nucleusPortfolioId);

        /// <summary>
        /// Get portfolio holdings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of ApiResponse (BrokerageHoldingVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageHoldingVO>> GetBrokerageHoldingUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId);
        /// <summary>
        /// Get an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>Task of BrokerageOrderVO</returns>
        System.Threading.Tasks.Task<BrokerageOrderVO> GetBrokerageOrderUsingGetAsync (Guid? nucleusOrderId);

        /// <summary>
        /// Get an Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>Task of ApiResponse (BrokerageOrderVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageOrderVO>> GetBrokerageOrderUsingGetAsyncWithHttpInfo (Guid? nucleusOrderId);
        /// <summary>
        /// Get securities information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">vendor_name</param>
        /// <param name="getFundamentals">get_fundamentals (optional, default to false)</param>
        /// <param name="nucleusSecurityId">nucleus_security_id (optional)</param>
        /// <returns>Task of BrokerageSecuritiesVO</returns>
        System.Threading.Tasks.Task<BrokerageSecuritiesVO> GetBrokerageSecuritiesUsingGetAsync (string vendorName, bool? getFundamentals = null, Guid? nucleusSecurityId = null);

        /// <summary>
        /// Get securities information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">vendor_name</param>
        /// <param name="getFundamentals">get_fundamentals (optional, default to false)</param>
        /// <param name="nucleusSecurityId">nucleus_security_id (optional)</param>
        /// <returns>Task of ApiResponse (BrokerageSecuritiesVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageSecuritiesVO>> GetBrokerageSecuritiesUsingGetAsyncWithHttpInfo (string vendorName, bool? getFundamentals = null, Guid? nucleusSecurityId = null);
        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drivewealthResponse">drivewealthResponse</param>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="startDate">start_date</param>
        /// <returns>Task of BrokerageTransactionVO</returns>
        System.Threading.Tasks.Task<BrokerageTransactionVO> GetBrokerageTransactionsUsingGetAsync (GetTransactionsResponse drivewealthResponse, DateTime? endDate, Guid? nucleusPortfolioId, DateTime? startDate);

        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drivewealthResponse">drivewealthResponse</param>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="startDate">start_date</param>
        /// <returns>Task of ApiResponse (BrokerageTransactionVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageTransactionVO>> GetBrokerageTransactionsUsingGetAsyncWithHttpInfo (GetTransactionsResponse drivewealthResponse, DateTime? endDate, Guid? nucleusPortfolioId, DateTime? startDate);
        /// <summary>
        /// Update a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of BrokerageBankLinkVO</returns>
        System.Threading.Tasks.Task<BrokerageBankLinkVO> UpdateBrokerageBankLinkUsingPutAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Update a Bank Link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (BrokerageBankLinkVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageBankLinkVO>> UpdateBrokerageBankLinkUsingPutAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Update a Brokerage client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="clientCO">clientCO (optional)</param>
        /// <returns>Task of BrokerageUpdateClientVO</returns>
        System.Threading.Tasks.Task<BrokerageUpdateClientVO> UpdateBrokerageClientUsingPutAsync (Guid? nucleusClientId, BrokerageUpdateClientCO clientCO = null);

        /// <summary>
        /// Update a Brokerage client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="clientCO">clientCO (optional)</param>
        /// <returns>Task of ApiResponse (BrokerageUpdateClientVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrokerageUpdateClientVO>> UpdateBrokerageClientUsingPutAsyncWithHttpInfo (Guid? nucleusClientId, BrokerageUpdateClientCO clientCO = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BrokerageApi : IBrokerageApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrokerageApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BrokerageApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns></returns>
        public void CancelBrokerageOrderUsingPut (Guid? nucleusOrderId)
        {
             CancelBrokerageOrderUsingPutWithHttpInfo(nucleusOrderId);
        }

        /// <summary>
        /// Cancel an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelBrokerageOrderUsingPutWithHttpInfo (Guid? nucleusOrderId)
        {
            // verify the required parameter 'nucleusOrderId' is set
            if (nucleusOrderId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusOrderId' when calling BrokerageApi->CancelBrokerageOrderUsingPut");

            var localVarPath = "/brokerage/order/{nucleus_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusOrderId != null) localVarPathParams.Add("nucleus_order_id", this.Configuration.ApiClient.ParameterToString(nucleusOrderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBrokerageOrderUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelBrokerageOrderUsingPutAsync (Guid? nucleusOrderId)
        {
             await CancelBrokerageOrderUsingPutAsyncWithHttpInfo(nucleusOrderId);

        }

        /// <summary>
        /// Cancel an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelBrokerageOrderUsingPutAsyncWithHttpInfo (Guid? nucleusOrderId)
        {
            // verify the required parameter 'nucleusOrderId' is set
            if (nucleusOrderId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusOrderId' when calling BrokerageApi->CancelBrokerageOrderUsingPut");

            var localVarPath = "/brokerage/order/{nucleus_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusOrderId != null) localVarPathParams.Add("nucleus_order_id", this.Configuration.ApiClient.ParameterToString(nucleusOrderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBrokerageOrderUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// create a Brokerage account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageAccountCO">brokerageAccountCO</param>
        /// <returns>BrokerageAccountVO</returns>
        public BrokerageAccountVO CreateBrokerageAccountUsingPost (BrokerageAccountCO brokerageAccountCO)
        {
             ApiResponse<BrokerageAccountVO> localVarResponse = CreateBrokerageAccountUsingPostWithHttpInfo(brokerageAccountCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a Brokerage account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageAccountCO">brokerageAccountCO</param>
        /// <returns>ApiResponse of BrokerageAccountVO</returns>
        public ApiResponse< BrokerageAccountVO > CreateBrokerageAccountUsingPostWithHttpInfo (BrokerageAccountCO brokerageAccountCO)
        {
            // verify the required parameter 'brokerageAccountCO' is set
            if (brokerageAccountCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageAccountCO' when calling BrokerageApi->CreateBrokerageAccountUsingPost");

            var localVarPath = "/brokerage/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageAccountCO != null && brokerageAccountCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageAccountCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageAccountCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageAccountVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageAccountVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageAccountVO)));
        }

        /// <summary>
        /// create a Brokerage account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageAccountCO">brokerageAccountCO</param>
        /// <returns>Task of BrokerageAccountVO</returns>
        public async System.Threading.Tasks.Task<BrokerageAccountVO> CreateBrokerageAccountUsingPostAsync (BrokerageAccountCO brokerageAccountCO)
        {
             ApiResponse<BrokerageAccountVO> localVarResponse = await CreateBrokerageAccountUsingPostAsyncWithHttpInfo(brokerageAccountCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a Brokerage account 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageAccountCO">brokerageAccountCO</param>
        /// <returns>Task of ApiResponse (BrokerageAccountVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageAccountVO>> CreateBrokerageAccountUsingPostAsyncWithHttpInfo (BrokerageAccountCO brokerageAccountCO)
        {
            // verify the required parameter 'brokerageAccountCO' is set
            if (brokerageAccountCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageAccountCO' when calling BrokerageApi->CreateBrokerageAccountUsingPost");

            var localVarPath = "/brokerage/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageAccountCO != null && brokerageAccountCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageAccountCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageAccountCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageAccountVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageAccountVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageAccountVO)));
        }

        /// <summary>
        /// create a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageBankLinkCO">brokerageBankLinkCO</param>
        /// <returns>BrokerageBankLinkVO</returns>
        public BrokerageBankLinkVO CreateBrokerageBankLinkUsingPost (BrokerageBankLinkCO brokerageBankLinkCO)
        {
             ApiResponse<BrokerageBankLinkVO> localVarResponse = CreateBrokerageBankLinkUsingPostWithHttpInfo(brokerageBankLinkCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageBankLinkCO">brokerageBankLinkCO</param>
        /// <returns>ApiResponse of BrokerageBankLinkVO</returns>
        public ApiResponse< BrokerageBankLinkVO > CreateBrokerageBankLinkUsingPostWithHttpInfo (BrokerageBankLinkCO brokerageBankLinkCO)
        {
            // verify the required parameter 'brokerageBankLinkCO' is set
            if (brokerageBankLinkCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageBankLinkCO' when calling BrokerageApi->CreateBrokerageBankLinkUsingPost");

            var localVarPath = "/brokerage/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageBankLinkCO != null && brokerageBankLinkCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageBankLinkCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageBankLinkCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageBankLinkVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageBankLinkVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageBankLinkVO)));
        }

        /// <summary>
        /// create a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageBankLinkCO">brokerageBankLinkCO</param>
        /// <returns>Task of BrokerageBankLinkVO</returns>
        public async System.Threading.Tasks.Task<BrokerageBankLinkVO> CreateBrokerageBankLinkUsingPostAsync (BrokerageBankLinkCO brokerageBankLinkCO)
        {
             ApiResponse<BrokerageBankLinkVO> localVarResponse = await CreateBrokerageBankLinkUsingPostAsyncWithHttpInfo(brokerageBankLinkCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageBankLinkCO">brokerageBankLinkCO</param>
        /// <returns>Task of ApiResponse (BrokerageBankLinkVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageBankLinkVO>> CreateBrokerageBankLinkUsingPostAsyncWithHttpInfo (BrokerageBankLinkCO brokerageBankLinkCO)
        {
            // verify the required parameter 'brokerageBankLinkCO' is set
            if (brokerageBankLinkCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageBankLinkCO' when calling BrokerageApi->CreateBrokerageBankLinkUsingPost");

            var localVarPath = "/brokerage/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageBankLinkCO != null && brokerageBankLinkCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageBankLinkCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageBankLinkCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageBankLinkVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageBankLinkVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageBankLinkVO)));
        }

        /// <summary>
        /// Create a Brokerage Client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCO">clientCO</param>
        /// <returns>BrokerageCreateClientVO</returns>
        public BrokerageCreateClientVO CreateBrokerageClientUsingPost (BrokerageCreateClientCO clientCO)
        {
             ApiResponse<BrokerageCreateClientVO> localVarResponse = CreateBrokerageClientUsingPostWithHttpInfo(clientCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Brokerage Client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCO">clientCO</param>
        /// <returns>ApiResponse of BrokerageCreateClientVO</returns>
        public ApiResponse< BrokerageCreateClientVO > CreateBrokerageClientUsingPostWithHttpInfo (BrokerageCreateClientCO clientCO)
        {
            // verify the required parameter 'clientCO' is set
            if (clientCO == null)
                throw new ApiException(400, "Missing required parameter 'clientCO' when calling BrokerageApi->CreateBrokerageClientUsingPost");

            var localVarPath = "/brokerage/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientCO != null && clientCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageCreateClientVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageCreateClientVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageCreateClientVO)));
        }

        /// <summary>
        /// Create a Brokerage Client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCO">clientCO</param>
        /// <returns>Task of BrokerageCreateClientVO</returns>
        public async System.Threading.Tasks.Task<BrokerageCreateClientVO> CreateBrokerageClientUsingPostAsync (BrokerageCreateClientCO clientCO)
        {
             ApiResponse<BrokerageCreateClientVO> localVarResponse = await CreateBrokerageClientUsingPostAsyncWithHttpInfo(clientCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Brokerage Client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCO">clientCO</param>
        /// <returns>Task of ApiResponse (BrokerageCreateClientVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageCreateClientVO>> CreateBrokerageClientUsingPostAsyncWithHttpInfo (BrokerageCreateClientCO clientCO)
        {
            // verify the required parameter 'clientCO' is set
            if (clientCO == null)
                throw new ApiException(400, "Missing required parameter 'clientCO' when calling BrokerageApi->CreateBrokerageClientUsingPost");

            var localVarPath = "/brokerage/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientCO != null && clientCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageCreateClientVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageCreateClientVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageCreateClientVO)));
        }

        /// <summary>
        /// Create a deposit 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageDepositCO">brokerageDepositCO</param>
        /// <returns>BrokerageDepositVO</returns>
        public BrokerageDepositVO CreateBrokerageDepositUsingPost (BrokerageDepositCO brokerageDepositCO)
        {
             ApiResponse<BrokerageDepositVO> localVarResponse = CreateBrokerageDepositUsingPostWithHttpInfo(brokerageDepositCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a deposit 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageDepositCO">brokerageDepositCO</param>
        /// <returns>ApiResponse of BrokerageDepositVO</returns>
        public ApiResponse< BrokerageDepositVO > CreateBrokerageDepositUsingPostWithHttpInfo (BrokerageDepositCO brokerageDepositCO)
        {
            // verify the required parameter 'brokerageDepositCO' is set
            if (brokerageDepositCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageDepositCO' when calling BrokerageApi->CreateBrokerageDepositUsingPost");

            var localVarPath = "/brokerage/deposit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageDepositCO != null && brokerageDepositCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageDepositCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageDepositCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageDepositUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageDepositVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageDepositVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageDepositVO)));
        }

        /// <summary>
        /// Create a deposit 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageDepositCO">brokerageDepositCO</param>
        /// <returns>Task of BrokerageDepositVO</returns>
        public async System.Threading.Tasks.Task<BrokerageDepositVO> CreateBrokerageDepositUsingPostAsync (BrokerageDepositCO brokerageDepositCO)
        {
             ApiResponse<BrokerageDepositVO> localVarResponse = await CreateBrokerageDepositUsingPostAsyncWithHttpInfo(brokerageDepositCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a deposit 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageDepositCO">brokerageDepositCO</param>
        /// <returns>Task of ApiResponse (BrokerageDepositVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageDepositVO>> CreateBrokerageDepositUsingPostAsyncWithHttpInfo (BrokerageDepositCO brokerageDepositCO)
        {
            // verify the required parameter 'brokerageDepositCO' is set
            if (brokerageDepositCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageDepositCO' when calling BrokerageApi->CreateBrokerageDepositUsingPost");

            var localVarPath = "/brokerage/deposit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageDepositCO != null && brokerageDepositCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageDepositCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageDepositCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageDepositUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageDepositVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageDepositVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageDepositVO)));
        }

        /// <summary>
        /// Create a Brokerage document 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCO">documentCO</param>
        /// <returns>BrokerageDocumentVO</returns>
        public BrokerageDocumentVO CreateBrokerageDocumentUsingPost (BrokerageDocumentCO documentCO)
        {
             ApiResponse<BrokerageDocumentVO> localVarResponse = CreateBrokerageDocumentUsingPostWithHttpInfo(documentCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Brokerage document 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCO">documentCO</param>
        /// <returns>ApiResponse of BrokerageDocumentVO</returns>
        public ApiResponse< BrokerageDocumentVO > CreateBrokerageDocumentUsingPostWithHttpInfo (BrokerageDocumentCO documentCO)
        {
            // verify the required parameter 'documentCO' is set
            if (documentCO == null)
                throw new ApiException(400, "Missing required parameter 'documentCO' when calling BrokerageApi->CreateBrokerageDocumentUsingPost");

            var localVarPath = "/brokerage/document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentCO != null && documentCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageDocumentUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageDocumentVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageDocumentVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageDocumentVO)));
        }

        /// <summary>
        /// Create a Brokerage document 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCO">documentCO</param>
        /// <returns>Task of BrokerageDocumentVO</returns>
        public async System.Threading.Tasks.Task<BrokerageDocumentVO> CreateBrokerageDocumentUsingPostAsync (BrokerageDocumentCO documentCO)
        {
             ApiResponse<BrokerageDocumentVO> localVarResponse = await CreateBrokerageDocumentUsingPostAsyncWithHttpInfo(documentCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Brokerage document 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCO">documentCO</param>
        /// <returns>Task of ApiResponse (BrokerageDocumentVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageDocumentVO>> CreateBrokerageDocumentUsingPostAsyncWithHttpInfo (BrokerageDocumentCO documentCO)
        {
            // verify the required parameter 'documentCO' is set
            if (documentCO == null)
                throw new ApiException(400, "Missing required parameter 'documentCO' when calling BrokerageApi->CreateBrokerageDocumentUsingPost");

            var localVarPath = "/brokerage/document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentCO != null && documentCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageDocumentUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageDocumentVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageDocumentVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageDocumentVO)));
        }

        /// <summary>
        /// Create an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageOrderCO">brokerageOrderCO</param>
        /// <returns>BrokerageOrderVO</returns>
        public BrokerageOrderVO CreateBrokerageOrderUsingPost (BrokerageOrderCO brokerageOrderCO)
        {
             ApiResponse<BrokerageOrderVO> localVarResponse = CreateBrokerageOrderUsingPostWithHttpInfo(brokerageOrderCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageOrderCO">brokerageOrderCO</param>
        /// <returns>ApiResponse of BrokerageOrderVO</returns>
        public ApiResponse< BrokerageOrderVO > CreateBrokerageOrderUsingPostWithHttpInfo (BrokerageOrderCO brokerageOrderCO)
        {
            // verify the required parameter 'brokerageOrderCO' is set
            if (brokerageOrderCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageOrderCO' when calling BrokerageApi->CreateBrokerageOrderUsingPost");

            var localVarPath = "/brokerage/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageOrderCO != null && brokerageOrderCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageOrderCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageOrderCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageOrderUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageOrderVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageOrderVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageOrderVO)));
        }

        /// <summary>
        /// Create an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageOrderCO">brokerageOrderCO</param>
        /// <returns>Task of BrokerageOrderVO</returns>
        public async System.Threading.Tasks.Task<BrokerageOrderVO> CreateBrokerageOrderUsingPostAsync (BrokerageOrderCO brokerageOrderCO)
        {
             ApiResponse<BrokerageOrderVO> localVarResponse = await CreateBrokerageOrderUsingPostAsyncWithHttpInfo(brokerageOrderCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageOrderCO">brokerageOrderCO</param>
        /// <returns>Task of ApiResponse (BrokerageOrderVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageOrderVO>> CreateBrokerageOrderUsingPostAsyncWithHttpInfo (BrokerageOrderCO brokerageOrderCO)
        {
            // verify the required parameter 'brokerageOrderCO' is set
            if (brokerageOrderCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageOrderCO' when calling BrokerageApi->CreateBrokerageOrderUsingPost");

            var localVarPath = "/brokerage/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageOrderCO != null && brokerageOrderCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageOrderCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageOrderCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageOrderUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageOrderVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageOrderVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageOrderVO)));
        }

        /// <summary>
        /// Create a withdrawal 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageWithdrawalCO">brokerageWithdrawalCO</param>
        /// <returns>BrokerageWithdrawalVO</returns>
        public BrokerageWithdrawalVO CreateBrokerageWithdrawalUsingPost (BrokerageWithdrawalCO brokerageWithdrawalCO)
        {
             ApiResponse<BrokerageWithdrawalVO> localVarResponse = CreateBrokerageWithdrawalUsingPostWithHttpInfo(brokerageWithdrawalCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a withdrawal 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageWithdrawalCO">brokerageWithdrawalCO</param>
        /// <returns>ApiResponse of BrokerageWithdrawalVO</returns>
        public ApiResponse< BrokerageWithdrawalVO > CreateBrokerageWithdrawalUsingPostWithHttpInfo (BrokerageWithdrawalCO brokerageWithdrawalCO)
        {
            // verify the required parameter 'brokerageWithdrawalCO' is set
            if (brokerageWithdrawalCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageWithdrawalCO' when calling BrokerageApi->CreateBrokerageWithdrawalUsingPost");

            var localVarPath = "/brokerage/withdrawal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageWithdrawalCO != null && brokerageWithdrawalCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageWithdrawalCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageWithdrawalCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageWithdrawalUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageWithdrawalVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageWithdrawalVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageWithdrawalVO)));
        }

        /// <summary>
        /// Create a withdrawal 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageWithdrawalCO">brokerageWithdrawalCO</param>
        /// <returns>Task of BrokerageWithdrawalVO</returns>
        public async System.Threading.Tasks.Task<BrokerageWithdrawalVO> CreateBrokerageWithdrawalUsingPostAsync (BrokerageWithdrawalCO brokerageWithdrawalCO)
        {
             ApiResponse<BrokerageWithdrawalVO> localVarResponse = await CreateBrokerageWithdrawalUsingPostAsyncWithHttpInfo(brokerageWithdrawalCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a withdrawal 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brokerageWithdrawalCO">brokerageWithdrawalCO</param>
        /// <returns>Task of ApiResponse (BrokerageWithdrawalVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageWithdrawalVO>> CreateBrokerageWithdrawalUsingPostAsyncWithHttpInfo (BrokerageWithdrawalCO brokerageWithdrawalCO)
        {
            // verify the required parameter 'brokerageWithdrawalCO' is set
            if (brokerageWithdrawalCO == null)
                throw new ApiException(400, "Missing required parameter 'brokerageWithdrawalCO' when calling BrokerageApi->CreateBrokerageWithdrawalUsingPost");

            var localVarPath = "/brokerage/withdrawal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brokerageWithdrawalCO != null && brokerageWithdrawalCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brokerageWithdrawalCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brokerageWithdrawalCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBrokerageWithdrawalUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageWithdrawalVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageWithdrawalVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageWithdrawalVO)));
        }

        /// <summary>
        /// Delete a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns></returns>
        public void DeleteBrokerageBankLinkUsingDelete (Guid? nucleusBankLinkId)
        {
             DeleteBrokerageBankLinkUsingDeleteWithHttpInfo(nucleusBankLinkId);
        }

        /// <summary>
        /// Delete a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBrokerageBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling BrokerageApi->DeleteBrokerageBankLinkUsingDelete");

            var localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrokerageBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrokerageBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId)
        {
             await DeleteBrokerageBankLinkUsingDeleteAsyncWithHttpInfo(nucleusBankLinkId);

        }

        /// <summary>
        /// Delete a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrokerageBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling BrokerageApi->DeleteBrokerageBankLinkUsingDelete");

            var localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrokerageBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a Brokerage account statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type</param>
        /// <returns>BrokerageStatementVO</returns>
        public BrokerageStatementVO GetBrokerageAccountStatementUsingGet (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType)
        {
             ApiResponse<BrokerageStatementVO> localVarResponse = GetBrokerageAccountStatementUsingGetWithHttpInfo(endDate, nucleusAccountId, startDate, statementType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Brokerage account statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type</param>
        /// <returns>ApiResponse of BrokerageStatementVO</returns>
        public ApiResponse< BrokerageStatementVO > GetBrokerageAccountStatementUsingGetWithHttpInfo (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType)
        {
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling BrokerageApi->GetBrokerageAccountStatementUsingGet");
            // verify the required parameter 'nucleusAccountId' is set
            if (nucleusAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAccountId' when calling BrokerageApi->GetBrokerageAccountStatementUsingGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling BrokerageApi->GetBrokerageAccountStatementUsingGet");
            // verify the required parameter 'statementType' is set
            if (statementType == null)
                throw new ApiException(400, "Missing required parameter 'statementType' when calling BrokerageApi->GetBrokerageAccountStatementUsingGet");

            var localVarPath = "/brokerage/statement/{nucleus_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAccountId != null) localVarPathParams.Add("nucleus_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAccountId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (statementType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statement_type", statementType)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageAccountStatementUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageStatementVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageStatementVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageStatementVO)));
        }

        /// <summary>
        /// Get a Brokerage account statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type</param>
        /// <returns>Task of BrokerageStatementVO</returns>
        public async System.Threading.Tasks.Task<BrokerageStatementVO> GetBrokerageAccountStatementUsingGetAsync (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType)
        {
             ApiResponse<BrokerageStatementVO> localVarResponse = await GetBrokerageAccountStatementUsingGetAsyncWithHttpInfo(endDate, nucleusAccountId, startDate, statementType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Brokerage account statement 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusAccountId">nucleus_account_id</param>
        /// <param name="startDate">start_date</param>
        /// <param name="statementType">statement_type</param>
        /// <returns>Task of ApiResponse (BrokerageStatementVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageStatementVO>> GetBrokerageAccountStatementUsingGetAsyncWithHttpInfo (DateTime? endDate, Guid? nucleusAccountId, DateTime? startDate, string statementType)
        {
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling BrokerageApi->GetBrokerageAccountStatementUsingGet");
            // verify the required parameter 'nucleusAccountId' is set
            if (nucleusAccountId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusAccountId' when calling BrokerageApi->GetBrokerageAccountStatementUsingGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling BrokerageApi->GetBrokerageAccountStatementUsingGet");
            // verify the required parameter 'statementType' is set
            if (statementType == null)
                throw new ApiException(400, "Missing required parameter 'statementType' when calling BrokerageApi->GetBrokerageAccountStatementUsingGet");

            var localVarPath = "/brokerage/statement/{nucleus_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusAccountId != null) localVarPathParams.Add("nucleus_account_id", this.Configuration.ApiClient.ParameterToString(nucleusAccountId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (statementType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statement_type", statementType)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageAccountStatementUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageStatementVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageStatementVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageStatementVO)));
        }

        /// <summary>
        /// Get account balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>BrokerageBalanceVO</returns>
        public BrokerageBalanceVO GetBrokerageBalanceUsingGet (Guid? nucleusPortfolioId)
        {
             ApiResponse<BrokerageBalanceVO> localVarResponse = GetBrokerageBalanceUsingGetWithHttpInfo(nucleusPortfolioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>ApiResponse of BrokerageBalanceVO</returns>
        public ApiResponse< BrokerageBalanceVO > GetBrokerageBalanceUsingGetWithHttpInfo (Guid? nucleusPortfolioId)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BrokerageApi->GetBrokerageBalanceUsingGet");

            var localVarPath = "/brokerage/balance/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageBalanceVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageBalanceVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageBalanceVO)));
        }

        /// <summary>
        /// Get account balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of BrokerageBalanceVO</returns>
        public async System.Threading.Tasks.Task<BrokerageBalanceVO> GetBrokerageBalanceUsingGetAsync (Guid? nucleusPortfolioId)
        {
             ApiResponse<BrokerageBalanceVO> localVarResponse = await GetBrokerageBalanceUsingGetAsyncWithHttpInfo(nucleusPortfolioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account balance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of ApiResponse (BrokerageBalanceVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageBalanceVO>> GetBrokerageBalanceUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BrokerageApi->GetBrokerageBalanceUsingGet");

            var localVarPath = "/brokerage/balance/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageBalanceVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageBalanceVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageBalanceVO)));
        }

        /// <summary>
        /// Get a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>BrokerageBankLinkVO</returns>
        public BrokerageBankLinkVO GetBrokerageBankLinkUsingGet (Guid? nucleusBankLinkId)
        {
             ApiResponse<BrokerageBankLinkVO> localVarResponse = GetBrokerageBankLinkUsingGetWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of BrokerageBankLinkVO</returns>
        public ApiResponse< BrokerageBankLinkVO > GetBrokerageBankLinkUsingGetWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling BrokerageApi->GetBrokerageBankLinkUsingGet");

            var localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageBankLinkVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageBankLinkVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageBankLinkVO)));
        }

        /// <summary>
        /// Get a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of BrokerageBankLinkVO</returns>
        public async System.Threading.Tasks.Task<BrokerageBankLinkVO> GetBrokerageBankLinkUsingGetAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<BrokerageBankLinkVO> localVarResponse = await GetBrokerageBankLinkUsingGetAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (BrokerageBankLinkVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageBankLinkVO>> GetBrokerageBankLinkUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling BrokerageApi->GetBrokerageBankLinkUsingGet");

            var localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageBankLinkVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageBankLinkVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageBankLinkVO)));
        }

        /// <summary>
        /// Get a Brokerage document 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusDocumentId">nucleus_document_id</param>
        /// <returns>BrokerageDocumentVO</returns>
        public BrokerageDocumentVO GetBrokerageDocumentUsingGet (Guid? nucleusDocumentId)
        {
             ApiResponse<BrokerageDocumentVO> localVarResponse = GetBrokerageDocumentUsingGetWithHttpInfo(nucleusDocumentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Brokerage document 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusDocumentId">nucleus_document_id</param>
        /// <returns>ApiResponse of BrokerageDocumentVO</returns>
        public ApiResponse< BrokerageDocumentVO > GetBrokerageDocumentUsingGetWithHttpInfo (Guid? nucleusDocumentId)
        {
            // verify the required parameter 'nucleusDocumentId' is set
            if (nucleusDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusDocumentId' when calling BrokerageApi->GetBrokerageDocumentUsingGet");

            var localVarPath = "/brokerage/document/{nucleus_document_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusDocumentId != null) localVarPathParams.Add("nucleus_document_id", this.Configuration.ApiClient.ParameterToString(nucleusDocumentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageDocumentUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageDocumentVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageDocumentVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageDocumentVO)));
        }

        /// <summary>
        /// Get a Brokerage document 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusDocumentId">nucleus_document_id</param>
        /// <returns>Task of BrokerageDocumentVO</returns>
        public async System.Threading.Tasks.Task<BrokerageDocumentVO> GetBrokerageDocumentUsingGetAsync (Guid? nucleusDocumentId)
        {
             ApiResponse<BrokerageDocumentVO> localVarResponse = await GetBrokerageDocumentUsingGetAsyncWithHttpInfo(nucleusDocumentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Brokerage document 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusDocumentId">nucleus_document_id</param>
        /// <returns>Task of ApiResponse (BrokerageDocumentVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageDocumentVO>> GetBrokerageDocumentUsingGetAsyncWithHttpInfo (Guid? nucleusDocumentId)
        {
            // verify the required parameter 'nucleusDocumentId' is set
            if (nucleusDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusDocumentId' when calling BrokerageApi->GetBrokerageDocumentUsingGet");

            var localVarPath = "/brokerage/document/{nucleus_document_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusDocumentId != null) localVarPathParams.Add("nucleus_document_id", this.Configuration.ApiClient.ParameterToString(nucleusDocumentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageDocumentUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageDocumentVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageDocumentVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageDocumentVO)));
        }

        /// <summary>
        /// Get portfolio holding performance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>BrokeragePerformanceVO</returns>
        public BrokeragePerformanceVO GetBrokerageHoldingPerformanceUsingGet (Guid? nucleusPortfolioId)
        {
             ApiResponse<BrokeragePerformanceVO> localVarResponse = GetBrokerageHoldingPerformanceUsingGetWithHttpInfo(nucleusPortfolioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get portfolio holding performance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>ApiResponse of BrokeragePerformanceVO</returns>
        public ApiResponse< BrokeragePerformanceVO > GetBrokerageHoldingPerformanceUsingGetWithHttpInfo (Guid? nucleusPortfolioId)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BrokerageApi->GetBrokerageHoldingPerformanceUsingGet");

            var localVarPath = "/brokerage/holding/performance/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageHoldingPerformanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokeragePerformanceVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokeragePerformanceVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokeragePerformanceVO)));
        }

        /// <summary>
        /// Get portfolio holding performance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of BrokeragePerformanceVO</returns>
        public async System.Threading.Tasks.Task<BrokeragePerformanceVO> GetBrokerageHoldingPerformanceUsingGetAsync (Guid? nucleusPortfolioId)
        {
             ApiResponse<BrokeragePerformanceVO> localVarResponse = await GetBrokerageHoldingPerformanceUsingGetAsyncWithHttpInfo(nucleusPortfolioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get portfolio holding performance 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of ApiResponse (BrokeragePerformanceVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokeragePerformanceVO>> GetBrokerageHoldingPerformanceUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BrokerageApi->GetBrokerageHoldingPerformanceUsingGet");

            var localVarPath = "/brokerage/holding/performance/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageHoldingPerformanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokeragePerformanceVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokeragePerformanceVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokeragePerformanceVO)));
        }

        /// <summary>
        /// Get portfolio holdings 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>BrokerageHoldingVO</returns>
        public BrokerageHoldingVO GetBrokerageHoldingUsingGet (Guid? nucleusPortfolioId)
        {
             ApiResponse<BrokerageHoldingVO> localVarResponse = GetBrokerageHoldingUsingGetWithHttpInfo(nucleusPortfolioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get portfolio holdings 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>ApiResponse of BrokerageHoldingVO</returns>
        public ApiResponse< BrokerageHoldingVO > GetBrokerageHoldingUsingGetWithHttpInfo (Guid? nucleusPortfolioId)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BrokerageApi->GetBrokerageHoldingUsingGet");

            var localVarPath = "/brokerage/holding/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageHoldingVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageHoldingVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageHoldingVO)));
        }

        /// <summary>
        /// Get portfolio holdings 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of BrokerageHoldingVO</returns>
        public async System.Threading.Tasks.Task<BrokerageHoldingVO> GetBrokerageHoldingUsingGetAsync (Guid? nucleusPortfolioId)
        {
             ApiResponse<BrokerageHoldingVO> localVarResponse = await GetBrokerageHoldingUsingGetAsyncWithHttpInfo(nucleusPortfolioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get portfolio holdings 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <returns>Task of ApiResponse (BrokerageHoldingVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageHoldingVO>> GetBrokerageHoldingUsingGetAsyncWithHttpInfo (Guid? nucleusPortfolioId)
        {
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BrokerageApi->GetBrokerageHoldingUsingGet");

            var localVarPath = "/brokerage/holding/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageHoldingVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageHoldingVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageHoldingVO)));
        }

        /// <summary>
        /// Get an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>BrokerageOrderVO</returns>
        public BrokerageOrderVO GetBrokerageOrderUsingGet (Guid? nucleusOrderId)
        {
             ApiResponse<BrokerageOrderVO> localVarResponse = GetBrokerageOrderUsingGetWithHttpInfo(nucleusOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>ApiResponse of BrokerageOrderVO</returns>
        public ApiResponse< BrokerageOrderVO > GetBrokerageOrderUsingGetWithHttpInfo (Guid? nucleusOrderId)
        {
            // verify the required parameter 'nucleusOrderId' is set
            if (nucleusOrderId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusOrderId' when calling BrokerageApi->GetBrokerageOrderUsingGet");

            var localVarPath = "/brokerage/order/{nucleus_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusOrderId != null) localVarPathParams.Add("nucleus_order_id", this.Configuration.ApiClient.ParameterToString(nucleusOrderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageOrderUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageOrderVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageOrderVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageOrderVO)));
        }

        /// <summary>
        /// Get an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>Task of BrokerageOrderVO</returns>
        public async System.Threading.Tasks.Task<BrokerageOrderVO> GetBrokerageOrderUsingGetAsync (Guid? nucleusOrderId)
        {
             ApiResponse<BrokerageOrderVO> localVarResponse = await GetBrokerageOrderUsingGetAsyncWithHttpInfo(nucleusOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Order 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusOrderId">nucleus_order_id</param>
        /// <returns>Task of ApiResponse (BrokerageOrderVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageOrderVO>> GetBrokerageOrderUsingGetAsyncWithHttpInfo (Guid? nucleusOrderId)
        {
            // verify the required parameter 'nucleusOrderId' is set
            if (nucleusOrderId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusOrderId' when calling BrokerageApi->GetBrokerageOrderUsingGet");

            var localVarPath = "/brokerage/order/{nucleus_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusOrderId != null) localVarPathParams.Add("nucleus_order_id", this.Configuration.ApiClient.ParameterToString(nucleusOrderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageOrderUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageOrderVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageOrderVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageOrderVO)));
        }

        /// <summary>
        /// Get securities information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">vendor_name</param>
        /// <param name="getFundamentals">get_fundamentals (optional, default to false)</param>
        /// <param name="nucleusSecurityId">nucleus_security_id (optional)</param>
        /// <returns>BrokerageSecuritiesVO</returns>
        public BrokerageSecuritiesVO GetBrokerageSecuritiesUsingGet (string vendorName, bool? getFundamentals = null, Guid? nucleusSecurityId = null)
        {
             ApiResponse<BrokerageSecuritiesVO> localVarResponse = GetBrokerageSecuritiesUsingGetWithHttpInfo(vendorName, getFundamentals, nucleusSecurityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get securities information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">vendor_name</param>
        /// <param name="getFundamentals">get_fundamentals (optional, default to false)</param>
        /// <param name="nucleusSecurityId">nucleus_security_id (optional)</param>
        /// <returns>ApiResponse of BrokerageSecuritiesVO</returns>
        public ApiResponse< BrokerageSecuritiesVO > GetBrokerageSecuritiesUsingGetWithHttpInfo (string vendorName, bool? getFundamentals = null, Guid? nucleusSecurityId = null)
        {
            // verify the required parameter 'vendorName' is set
            if (vendorName == null)
                throw new ApiException(400, "Missing required parameter 'vendorName' when calling BrokerageApi->GetBrokerageSecuritiesUsingGet");

            var localVarPath = "/brokerage/securities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getFundamentals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_fundamentals", getFundamentals)); // query parameter
            if (nucleusSecurityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_security_id", nucleusSecurityId)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageSecuritiesUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageSecuritiesVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageSecuritiesVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageSecuritiesVO)));
        }

        /// <summary>
        /// Get securities information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">vendor_name</param>
        /// <param name="getFundamentals">get_fundamentals (optional, default to false)</param>
        /// <param name="nucleusSecurityId">nucleus_security_id (optional)</param>
        /// <returns>Task of BrokerageSecuritiesVO</returns>
        public async System.Threading.Tasks.Task<BrokerageSecuritiesVO> GetBrokerageSecuritiesUsingGetAsync (string vendorName, bool? getFundamentals = null, Guid? nucleusSecurityId = null)
        {
             ApiResponse<BrokerageSecuritiesVO> localVarResponse = await GetBrokerageSecuritiesUsingGetAsyncWithHttpInfo(vendorName, getFundamentals, nucleusSecurityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get securities information 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">vendor_name</param>
        /// <param name="getFundamentals">get_fundamentals (optional, default to false)</param>
        /// <param name="nucleusSecurityId">nucleus_security_id (optional)</param>
        /// <returns>Task of ApiResponse (BrokerageSecuritiesVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageSecuritiesVO>> GetBrokerageSecuritiesUsingGetAsyncWithHttpInfo (string vendorName, bool? getFundamentals = null, Guid? nucleusSecurityId = null)
        {
            // verify the required parameter 'vendorName' is set
            if (vendorName == null)
                throw new ApiException(400, "Missing required parameter 'vendorName' when calling BrokerageApi->GetBrokerageSecuritiesUsingGet");

            var localVarPath = "/brokerage/securities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getFundamentals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_fundamentals", getFundamentals)); // query parameter
            if (nucleusSecurityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nucleus_security_id", nucleusSecurityId)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageSecuritiesUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageSecuritiesVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageSecuritiesVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageSecuritiesVO)));
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drivewealthResponse">drivewealthResponse</param>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="startDate">start_date</param>
        /// <returns>BrokerageTransactionVO</returns>
        public BrokerageTransactionVO GetBrokerageTransactionsUsingGet (GetTransactionsResponse drivewealthResponse, DateTime? endDate, Guid? nucleusPortfolioId, DateTime? startDate)
        {
             ApiResponse<BrokerageTransactionVO> localVarResponse = GetBrokerageTransactionsUsingGetWithHttpInfo(drivewealthResponse, endDate, nucleusPortfolioId, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drivewealthResponse">drivewealthResponse</param>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="startDate">start_date</param>
        /// <returns>ApiResponse of BrokerageTransactionVO</returns>
        public ApiResponse< BrokerageTransactionVO > GetBrokerageTransactionsUsingGetWithHttpInfo (GetTransactionsResponse drivewealthResponse, DateTime? endDate, Guid? nucleusPortfolioId, DateTime? startDate)
        {
            // verify the required parameter 'drivewealthResponse' is set
            if (drivewealthResponse == null)
                throw new ApiException(400, "Missing required parameter 'drivewealthResponse' when calling BrokerageApi->GetBrokerageTransactionsUsingGet");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling BrokerageApi->GetBrokerageTransactionsUsingGet");
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BrokerageApi->GetBrokerageTransactionsUsingGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling BrokerageApi->GetBrokerageTransactionsUsingGet");

            var localVarPath = "/brokerage/transaction/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (drivewealthResponse != null && drivewealthResponse.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(drivewealthResponse); // http body (model) parameter
            }
            else
            {
                localVarPostBody = drivewealthResponse; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageTransactionsUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageTransactionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageTransactionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageTransactionVO)));
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drivewealthResponse">drivewealthResponse</param>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="startDate">start_date</param>
        /// <returns>Task of BrokerageTransactionVO</returns>
        public async System.Threading.Tasks.Task<BrokerageTransactionVO> GetBrokerageTransactionsUsingGetAsync (GetTransactionsResponse drivewealthResponse, DateTime? endDate, Guid? nucleusPortfolioId, DateTime? startDate)
        {
             ApiResponse<BrokerageTransactionVO> localVarResponse = await GetBrokerageTransactionsUsingGetAsyncWithHttpInfo(drivewealthResponse, endDate, nucleusPortfolioId, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drivewealthResponse">drivewealthResponse</param>
        /// <param name="endDate">end_date</param>
        /// <param name="nucleusPortfolioId">nucleus_portfolio_id</param>
        /// <param name="startDate">start_date</param>
        /// <returns>Task of ApiResponse (BrokerageTransactionVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageTransactionVO>> GetBrokerageTransactionsUsingGetAsyncWithHttpInfo (GetTransactionsResponse drivewealthResponse, DateTime? endDate, Guid? nucleusPortfolioId, DateTime? startDate)
        {
            // verify the required parameter 'drivewealthResponse' is set
            if (drivewealthResponse == null)
                throw new ApiException(400, "Missing required parameter 'drivewealthResponse' when calling BrokerageApi->GetBrokerageTransactionsUsingGet");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling BrokerageApi->GetBrokerageTransactionsUsingGet");
            // verify the required parameter 'nucleusPortfolioId' is set
            if (nucleusPortfolioId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusPortfolioId' when calling BrokerageApi->GetBrokerageTransactionsUsingGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling BrokerageApi->GetBrokerageTransactionsUsingGet");

            var localVarPath = "/brokerage/transaction/{nucleus_portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusPortfolioId != null) localVarPathParams.Add("nucleus_portfolio_id", this.Configuration.ApiClient.ParameterToString(nucleusPortfolioId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (drivewealthResponse != null && drivewealthResponse.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(drivewealthResponse); // http body (model) parameter
            }
            else
            {
                localVarPostBody = drivewealthResponse; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrokerageTransactionsUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageTransactionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageTransactionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageTransactionVO)));
        }

        /// <summary>
        /// Update a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>BrokerageBankLinkVO</returns>
        public BrokerageBankLinkVO UpdateBrokerageBankLinkUsingPut (Guid? nucleusBankLinkId)
        {
             ApiResponse<BrokerageBankLinkVO> localVarResponse = UpdateBrokerageBankLinkUsingPutWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of BrokerageBankLinkVO</returns>
        public ApiResponse< BrokerageBankLinkVO > UpdateBrokerageBankLinkUsingPutWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling BrokerageApi->UpdateBrokerageBankLinkUsingPut");

            var localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrokerageBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageBankLinkVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageBankLinkVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageBankLinkVO)));
        }

        /// <summary>
        /// Update a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of BrokerageBankLinkVO</returns>
        public async System.Threading.Tasks.Task<BrokerageBankLinkVO> UpdateBrokerageBankLinkUsingPutAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<BrokerageBankLinkVO> localVarResponse = await UpdateBrokerageBankLinkUsingPutAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Bank Link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (BrokerageBankLinkVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageBankLinkVO>> UpdateBrokerageBankLinkUsingPutAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling BrokerageApi->UpdateBrokerageBankLinkUsingPut");

            var localVarPath = "/brokerage/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrokerageBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageBankLinkVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageBankLinkVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageBankLinkVO)));
        }

        /// <summary>
        /// Update a Brokerage client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="clientCO">clientCO (optional)</param>
        /// <returns>BrokerageUpdateClientVO</returns>
        public BrokerageUpdateClientVO UpdateBrokerageClientUsingPut (Guid? nucleusClientId, BrokerageUpdateClientCO clientCO = null)
        {
             ApiResponse<BrokerageUpdateClientVO> localVarResponse = UpdateBrokerageClientUsingPutWithHttpInfo(nucleusClientId, clientCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Brokerage client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="clientCO">clientCO (optional)</param>
        /// <returns>ApiResponse of BrokerageUpdateClientVO</returns>
        public ApiResponse< BrokerageUpdateClientVO > UpdateBrokerageClientUsingPutWithHttpInfo (Guid? nucleusClientId, BrokerageUpdateClientCO clientCO = null)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling BrokerageApi->UpdateBrokerageClientUsingPut");

            var localVarPath = "/brokerage/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter
            if (clientCO != null && clientCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrokerageClientUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageUpdateClientVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageUpdateClientVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageUpdateClientVO)));
        }

        /// <summary>
        /// Update a Brokerage client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="clientCO">clientCO (optional)</param>
        /// <returns>Task of BrokerageUpdateClientVO</returns>
        public async System.Threading.Tasks.Task<BrokerageUpdateClientVO> UpdateBrokerageClientUsingPutAsync (Guid? nucleusClientId, BrokerageUpdateClientCO clientCO = null)
        {
             ApiResponse<BrokerageUpdateClientVO> localVarResponse = await UpdateBrokerageClientUsingPutAsyncWithHttpInfo(nucleusClientId, clientCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Brokerage client 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <param name="clientCO">clientCO (optional)</param>
        /// <returns>Task of ApiResponse (BrokerageUpdateClientVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrokerageUpdateClientVO>> UpdateBrokerageClientUsingPutAsyncWithHttpInfo (Guid? nucleusClientId, BrokerageUpdateClientCO clientCO = null)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling BrokerageApi->UpdateBrokerageClientUsingPut");

            var localVarPath = "/brokerage/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter
            if (clientCO != null && clientCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrokerageClientUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrokerageUpdateClientVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrokerageUpdateClientVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrokerageUpdateClientVO)));
        }

    }
}
