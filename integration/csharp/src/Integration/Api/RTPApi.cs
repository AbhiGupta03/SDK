/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Integration.Client;
using Integration.ModelEntity;

namespace Integration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRTPApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel the RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>RtpTransferResponseVO</returns>
        RtpTransferResponseVO CancelRtpTransferUsingDelete (Guid? nucleusFundingId);

        /// <summary>
        /// Cancel the RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of RtpTransferResponseVO</returns>
        ApiResponse<RtpTransferResponseVO> CancelRtpTransferUsingDeleteWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>RtpBankLinkResponseVO</returns>
        RtpBankLinkResponseVO CreateRTPBankLinkUsingPost (RtpBankLinkRequestCO request);

        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of RtpBankLinkResponseVO</returns>
        ApiResponse<RtpBankLinkResponseVO> CreateRTPBankLinkUsingPostWithHttpInfo (RtpBankLinkRequestCO request);
        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>RtpBankLinkResponseVO</returns>
        RtpBankLinkResponseVO DeleteRTPBankLinkUsingDelete (Guid? nucleusBankLinkId);

        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of RtpBankLinkResponseVO</returns>
        ApiResponse<RtpBankLinkResponseVO> DeleteRTPBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get a list of Rtp transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;RtpTransferResponseVO&gt;</returns>
        List<RtpTransferResponseVO> GetListOfRtpTransfersUsingGet (Guid? nucleusClientId);

        /// <summary>
        /// Get a list of Rtp transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;RtpTransferResponseVO&gt;</returns>
        ApiResponse<List<RtpTransferResponseVO>> GetListOfRtpTransfersUsingGetWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>RtpBankLinkResponseVO</returns>
        RtpBankLinkResponseVO GetRTPBankLinkUsingGet (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of RtpBankLinkResponseVO</returns>
        ApiResponse<RtpBankLinkResponseVO> GetRTPBankLinkUsingGetWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;RtpBankLinkResponseVO&gt;</returns>
        List<RtpBankLinkResponseVO> GetRTPClientBankLinksUsingGet (Guid? nucleusClientId);

        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;RtpBankLinkResponseVO&gt;</returns>
        ApiResponse<List<RtpBankLinkResponseVO>> GetRTPClientBankLinksUsingGetWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get the RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>RtpTransferResponseVO</returns>
        RtpTransferResponseVO GetRtpTransferUsingGet (Guid? nucleusFundingId);

        /// <summary>
        /// Get the RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of RtpTransferResponseVO</returns>
        ApiResponse<RtpTransferResponseVO> GetRtpTransferUsingGetWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Submit a RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>RtpTransferResponseVO</returns>
        RtpTransferResponseVO SubmitRtpTransferUsingPost (RtpTransferRequestCO transferRequest);

        /// <summary>
        /// Submit a RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>ApiResponse of RtpTransferResponseVO</returns>
        ApiResponse<RtpTransferResponseVO> SubmitRtpTransferUsingPostWithHttpInfo (RtpTransferRequestCO transferRequest);
        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>RtpBankLinkResponseVO</returns>
        RtpBankLinkResponseVO UpdateRTPBankLinkUsingPut (Guid? nucleusBankLinkId);

        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of RtpBankLinkResponseVO</returns>
        ApiResponse<RtpBankLinkResponseVO> UpdateRTPBankLinkUsingPutWithHttpInfo (Guid? nucleusBankLinkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel the RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of RtpTransferResponseVO</returns>
        System.Threading.Tasks.Task<RtpTransferResponseVO> CancelRtpTransferUsingDeleteAsync (Guid? nucleusFundingId);

        /// <summary>
        /// Cancel the RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (RtpTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RtpTransferResponseVO>> CancelRtpTransferUsingDeleteAsyncWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of RtpBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<RtpBankLinkResponseVO> CreateRTPBankLinkUsingPostAsync (RtpBankLinkRequestCO request);

        /// <summary>
        /// Create bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (RtpBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RtpBankLinkResponseVO>> CreateRTPBankLinkUsingPostAsyncWithHttpInfo (RtpBankLinkRequestCO request);
        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of RtpBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<RtpBankLinkResponseVO> DeleteRTPBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Delete bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (RtpBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RtpBankLinkResponseVO>> DeleteRTPBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get a list of Rtp transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;RtpTransferResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<RtpTransferResponseVO>> GetListOfRtpTransfersUsingGetAsync (Guid? nucleusClientId);

        /// <summary>
        /// Get a list of Rtp transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;RtpTransferResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RtpTransferResponseVO>>> GetListOfRtpTransfersUsingGetAsyncWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of RtpBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<RtpBankLinkResponseVO> GetRTPBankLinkUsingGetAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Get bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (RtpBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RtpBankLinkResponseVO>> GetRTPBankLinkUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;RtpBankLinkResponseVO&gt;</returns>
        System.Threading.Tasks.Task<List<RtpBankLinkResponseVO>> GetRTPClientBankLinksUsingGetAsync (Guid? nucleusClientId);

        /// <summary>
        /// Get client bank links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;RtpBankLinkResponseVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RtpBankLinkResponseVO>>> GetRTPClientBankLinksUsingGetAsyncWithHttpInfo (Guid? nucleusClientId);
        /// <summary>
        /// Get the RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of RtpTransferResponseVO</returns>
        System.Threading.Tasks.Task<RtpTransferResponseVO> GetRtpTransferUsingGetAsync (Guid? nucleusFundingId);

        /// <summary>
        /// Get the RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (RtpTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RtpTransferResponseVO>> GetRtpTransferUsingGetAsyncWithHttpInfo (Guid? nucleusFundingId);
        /// <summary>
        /// Submit a RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of RtpTransferResponseVO</returns>
        System.Threading.Tasks.Task<RtpTransferResponseVO> SubmitRtpTransferUsingPostAsync (RtpTransferRequestCO transferRequest);

        /// <summary>
        /// Submit a RTP transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of ApiResponse (RtpTransferResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RtpTransferResponseVO>> SubmitRtpTransferUsingPostAsyncWithHttpInfo (RtpTransferRequestCO transferRequest);
        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of RtpBankLinkResponseVO</returns>
        System.Threading.Tasks.Task<RtpBankLinkResponseVO> UpdateRTPBankLinkUsingPutAsync (Guid? nucleusBankLinkId);

        /// <summary>
        /// Update bank link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (RtpBankLinkResponseVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RtpBankLinkResponseVO>> UpdateRTPBankLinkUsingPutAsyncWithHttpInfo (Guid? nucleusBankLinkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RTPApi : IRTPApi
    {
        private Integration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RTPApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RTPApi(String basePath)
        {
            this.Configuration = new Integration.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RTPApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RTPApi(Integration.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Integration.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Integration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Integration.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Integration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel the RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>RtpTransferResponseVO</returns>
        public RtpTransferResponseVO CancelRtpTransferUsingDelete (Guid? nucleusFundingId)
        {
             ApiResponse<RtpTransferResponseVO> localVarResponse = CancelRtpTransferUsingDeleteWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of RtpTransferResponseVO</returns>
        public ApiResponse< RtpTransferResponseVO > CancelRtpTransferUsingDeleteWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling RTPApi->CancelRtpTransferUsingDelete");

            var localVarPath = "/rtp/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelRtpTransferUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpTransferResponseVO)));
        }

        /// <summary>
        /// Cancel the RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of RtpTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<RtpTransferResponseVO> CancelRtpTransferUsingDeleteAsync (Guid? nucleusFundingId)
        {
             ApiResponse<RtpTransferResponseVO> localVarResponse = await CancelRtpTransferUsingDeleteAsyncWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel the RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (RtpTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RtpTransferResponseVO>> CancelRtpTransferUsingDeleteAsyncWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling RTPApi->CancelRtpTransferUsingDelete");

            var localVarPath = "/rtp/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelRtpTransferUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpTransferResponseVO)));
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>RtpBankLinkResponseVO</returns>
        public RtpBankLinkResponseVO CreateRTPBankLinkUsingPost (RtpBankLinkRequestCO request)
        {
             ApiResponse<RtpBankLinkResponseVO> localVarResponse = CreateRTPBankLinkUsingPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of RtpBankLinkResponseVO</returns>
        public ApiResponse< RtpBankLinkResponseVO > CreateRTPBankLinkUsingPostWithHttpInfo (RtpBankLinkRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling RTPApi->CreateRTPBankLinkUsingPost");

            var localVarPath = "/rtp/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRTPBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpBankLinkResponseVO)));
        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of RtpBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<RtpBankLinkResponseVO> CreateRTPBankLinkUsingPostAsync (RtpBankLinkRequestCO request)
        {
             ApiResponse<RtpBankLinkResponseVO> localVarResponse = await CreateRTPBankLinkUsingPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (RtpBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RtpBankLinkResponseVO>> CreateRTPBankLinkUsingPostAsyncWithHttpInfo (RtpBankLinkRequestCO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling RTPApi->CreateRTPBankLinkUsingPost");

            var localVarPath = "/rtp/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRTPBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpBankLinkResponseVO)));
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>RtpBankLinkResponseVO</returns>
        public RtpBankLinkResponseVO DeleteRTPBankLinkUsingDelete (Guid? nucleusBankLinkId)
        {
             ApiResponse<RtpBankLinkResponseVO> localVarResponse = DeleteRTPBankLinkUsingDeleteWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of RtpBankLinkResponseVO</returns>
        public ApiResponse< RtpBankLinkResponseVO > DeleteRTPBankLinkUsingDeleteWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling RTPApi->DeleteRTPBankLinkUsingDelete");

            var localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRTPBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpBankLinkResponseVO)));
        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of RtpBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<RtpBankLinkResponseVO> DeleteRTPBankLinkUsingDeleteAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<RtpBankLinkResponseVO> localVarResponse = await DeleteRTPBankLinkUsingDeleteAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (RtpBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RtpBankLinkResponseVO>> DeleteRTPBankLinkUsingDeleteAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling RTPApi->DeleteRTPBankLinkUsingDelete");

            var localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRTPBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpBankLinkResponseVO)));
        }

        /// <summary>
        /// Get a list of Rtp transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;RtpTransferResponseVO&gt;</returns>
        public List<RtpTransferResponseVO> GetListOfRtpTransfersUsingGet (Guid? nucleusClientId)
        {
             ApiResponse<List<RtpTransferResponseVO>> localVarResponse = GetListOfRtpTransfersUsingGetWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Rtp transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;RtpTransferResponseVO&gt;</returns>
        public ApiResponse< List<RtpTransferResponseVO> > GetListOfRtpTransfersUsingGetWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling RTPApi->GetListOfRtpTransfersUsingGet");

            var localVarPath = "/rtp/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfRtpTransfersUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RtpTransferResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RtpTransferResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RtpTransferResponseVO>)));
        }

        /// <summary>
        /// Get a list of Rtp transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;RtpTransferResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RtpTransferResponseVO>> GetListOfRtpTransfersUsingGetAsync (Guid? nucleusClientId)
        {
             ApiResponse<List<RtpTransferResponseVO>> localVarResponse = await GetListOfRtpTransfersUsingGetAsyncWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of Rtp transfers 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;RtpTransferResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RtpTransferResponseVO>>> GetListOfRtpTransfersUsingGetAsyncWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling RTPApi->GetListOfRtpTransfersUsingGet");

            var localVarPath = "/rtp/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfRtpTransfersUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RtpTransferResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RtpTransferResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RtpTransferResponseVO>)));
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>RtpBankLinkResponseVO</returns>
        public RtpBankLinkResponseVO GetRTPBankLinkUsingGet (Guid? nucleusBankLinkId)
        {
             ApiResponse<RtpBankLinkResponseVO> localVarResponse = GetRTPBankLinkUsingGetWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of RtpBankLinkResponseVO</returns>
        public ApiResponse< RtpBankLinkResponseVO > GetRTPBankLinkUsingGetWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling RTPApi->GetRTPBankLinkUsingGet");

            var localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRTPBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpBankLinkResponseVO)));
        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of RtpBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<RtpBankLinkResponseVO> GetRTPBankLinkUsingGetAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<RtpBankLinkResponseVO> localVarResponse = await GetRTPBankLinkUsingGetAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (RtpBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RtpBankLinkResponseVO>> GetRTPBankLinkUsingGetAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling RTPApi->GetRTPBankLinkUsingGet");

            var localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRTPBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpBankLinkResponseVO)));
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>List&lt;RtpBankLinkResponseVO&gt;</returns>
        public List<RtpBankLinkResponseVO> GetRTPClientBankLinksUsingGet (Guid? nucleusClientId)
        {
             ApiResponse<List<RtpBankLinkResponseVO>> localVarResponse = GetRTPClientBankLinksUsingGetWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>ApiResponse of List&lt;RtpBankLinkResponseVO&gt;</returns>
        public ApiResponse< List<RtpBankLinkResponseVO> > GetRTPClientBankLinksUsingGetWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling RTPApi->GetRTPClientBankLinksUsingGet");

            var localVarPath = "/rtp/bank_link/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRTPClientBankLinksUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RtpBankLinkResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RtpBankLinkResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RtpBankLinkResponseVO>)));
        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of List&lt;RtpBankLinkResponseVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RtpBankLinkResponseVO>> GetRTPClientBankLinksUsingGetAsync (Guid? nucleusClientId)
        {
             ApiResponse<List<RtpBankLinkResponseVO>> localVarResponse = await GetRTPClientBankLinksUsingGetAsyncWithHttpInfo(nucleusClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get client bank links 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusClientId">nucleus_client_id</param>
        /// <returns>Task of ApiResponse (List&lt;RtpBankLinkResponseVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RtpBankLinkResponseVO>>> GetRTPClientBankLinksUsingGetAsyncWithHttpInfo (Guid? nucleusClientId)
        {
            // verify the required parameter 'nucleusClientId' is set
            if (nucleusClientId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusClientId' when calling RTPApi->GetRTPClientBankLinksUsingGet");

            var localVarPath = "/rtp/bank_link/client/{nucleus_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusClientId != null) localVarPathParams.Add("nucleus_client_id", this.Configuration.ApiClient.ParameterToString(nucleusClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRTPClientBankLinksUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RtpBankLinkResponseVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RtpBankLinkResponseVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RtpBankLinkResponseVO>)));
        }

        /// <summary>
        /// Get the RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>RtpTransferResponseVO</returns>
        public RtpTransferResponseVO GetRtpTransferUsingGet (Guid? nucleusFundingId)
        {
             ApiResponse<RtpTransferResponseVO> localVarResponse = GetRtpTransferUsingGetWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>ApiResponse of RtpTransferResponseVO</returns>
        public ApiResponse< RtpTransferResponseVO > GetRtpTransferUsingGetWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling RTPApi->GetRtpTransferUsingGet");

            var localVarPath = "/rtp/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRtpTransferUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpTransferResponseVO)));
        }

        /// <summary>
        /// Get the RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of RtpTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<RtpTransferResponseVO> GetRtpTransferUsingGetAsync (Guid? nucleusFundingId)
        {
             ApiResponse<RtpTransferResponseVO> localVarResponse = await GetRtpTransferUsingGetAsyncWithHttpInfo(nucleusFundingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusFundingId">nucleus_funding_id</param>
        /// <returns>Task of ApiResponse (RtpTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RtpTransferResponseVO>> GetRtpTransferUsingGetAsyncWithHttpInfo (Guid? nucleusFundingId)
        {
            // verify the required parameter 'nucleusFundingId' is set
            if (nucleusFundingId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusFundingId' when calling RTPApi->GetRtpTransferUsingGet");

            var localVarPath = "/rtp/{nucleus_funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusFundingId != null) localVarPathParams.Add("nucleus_funding_id", this.Configuration.ApiClient.ParameterToString(nucleusFundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRtpTransferUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpTransferResponseVO)));
        }

        /// <summary>
        /// Submit a RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>RtpTransferResponseVO</returns>
        public RtpTransferResponseVO SubmitRtpTransferUsingPost (RtpTransferRequestCO transferRequest)
        {
             ApiResponse<RtpTransferResponseVO> localVarResponse = SubmitRtpTransferUsingPostWithHttpInfo(transferRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>ApiResponse of RtpTransferResponseVO</returns>
        public ApiResponse< RtpTransferResponseVO > SubmitRtpTransferUsingPostWithHttpInfo (RtpTransferRequestCO transferRequest)
        {
            // verify the required parameter 'transferRequest' is set
            if (transferRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferRequest' when calling RTPApi->SubmitRtpTransferUsingPost");

            var localVarPath = "/rtp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferRequest != null && transferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitRtpTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpTransferResponseVO)));
        }

        /// <summary>
        /// Submit a RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of RtpTransferResponseVO</returns>
        public async System.Threading.Tasks.Task<RtpTransferResponseVO> SubmitRtpTransferUsingPostAsync (RtpTransferRequestCO transferRequest)
        {
             ApiResponse<RtpTransferResponseVO> localVarResponse = await SubmitRtpTransferUsingPostAsyncWithHttpInfo(transferRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit a RTP transfer 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest">transferRequest</param>
        /// <returns>Task of ApiResponse (RtpTransferResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RtpTransferResponseVO>> SubmitRtpTransferUsingPostAsyncWithHttpInfo (RtpTransferRequestCO transferRequest)
        {
            // verify the required parameter 'transferRequest' is set
            if (transferRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferRequest' when calling RTPApi->SubmitRtpTransferUsingPost");

            var localVarPath = "/rtp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferRequest != null && transferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitRtpTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpTransferResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpTransferResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpTransferResponseVO)));
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>RtpBankLinkResponseVO</returns>
        public RtpBankLinkResponseVO UpdateRTPBankLinkUsingPut (Guid? nucleusBankLinkId)
        {
             ApiResponse<RtpBankLinkResponseVO> localVarResponse = UpdateRTPBankLinkUsingPutWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>ApiResponse of RtpBankLinkResponseVO</returns>
        public ApiResponse< RtpBankLinkResponseVO > UpdateRTPBankLinkUsingPutWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling RTPApi->UpdateRTPBankLinkUsingPut");

            var localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRTPBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpBankLinkResponseVO)));
        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of RtpBankLinkResponseVO</returns>
        public async System.Threading.Tasks.Task<RtpBankLinkResponseVO> UpdateRTPBankLinkUsingPutAsync (Guid? nucleusBankLinkId)
        {
             ApiResponse<RtpBankLinkResponseVO> localVarResponse = await UpdateRTPBankLinkUsingPutAsyncWithHttpInfo(nucleusBankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update bank link 
        /// </summary>
        /// <exception cref="Integration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nucleusBankLinkId">nucleus_bank_link_id</param>
        /// <returns>Task of ApiResponse (RtpBankLinkResponseVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RtpBankLinkResponseVO>> UpdateRTPBankLinkUsingPutAsyncWithHttpInfo (Guid? nucleusBankLinkId)
        {
            // verify the required parameter 'nucleusBankLinkId' is set
            if (nucleusBankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'nucleusBankLinkId' when calling RTPApi->UpdateRTPBankLinkUsingPut");

            var localVarPath = "/rtp/bank_link/{nucleus_bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nucleusBankLinkId != null) localVarPathParams.Add("nucleus_bank_link_id", this.Configuration.ApiClient.ParameterToString(nucleusBankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRTPBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RtpBankLinkResponseVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RtpBankLinkResponseVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RtpBankLinkResponseVO)));
        }

    }
}
