/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Integration.Client;
using Integration.Api;
using Integration.ModelEntity;

namespace Integration.Test
{
    /// <summary>
    ///  Class for testing RTPApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RTPApiTests
    {
        private RTPApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RTPApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RTPApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RTPApi
            //Assert.IsInstanceOfType(typeof(RTPApi), instance, "instance is a RTPApi");
        }

        
        /// <summary>
        /// Test CancelRtpTransferUsingDelete
        /// </summary>
        [Test]
        public void CancelRtpTransferUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusFundingId = null;
            //var response = instance.CancelRtpTransferUsingDelete(nucleusFundingId);
            //Assert.IsInstanceOf<RtpTransferResponseVO> (response, "response is RtpTransferResponseVO");
        }
        
        /// <summary>
        /// Test CreateRTPBankLinkUsingPost
        /// </summary>
        [Test]
        public void CreateRTPBankLinkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RtpBankLinkRequestCO request = null;
            //var response = instance.CreateRTPBankLinkUsingPost(request);
            //Assert.IsInstanceOf<RtpBankLinkResponseVO> (response, "response is RtpBankLinkResponseVO");
        }
        
        /// <summary>
        /// Test DeleteRTPBankLinkUsingDelete
        /// </summary>
        [Test]
        public void DeleteRTPBankLinkUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusBankLinkId = null;
            //var response = instance.DeleteRTPBankLinkUsingDelete(nucleusBankLinkId);
            //Assert.IsInstanceOf<RtpBankLinkResponseVO> (response, "response is RtpBankLinkResponseVO");
        }
        
        /// <summary>
        /// Test GetListOfRtpTransfersUsingGet
        /// </summary>
        [Test]
        public void GetListOfRtpTransfersUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusClientId = null;
            //var response = instance.GetListOfRtpTransfersUsingGet(nucleusClientId);
            //Assert.IsInstanceOf<List<RtpTransferResponseVO>> (response, "response is List<RtpTransferResponseVO>");
        }
        
        /// <summary>
        /// Test GetRTPBankLinkUsingGet
        /// </summary>
        [Test]
        public void GetRTPBankLinkUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusBankLinkId = null;
            //var response = instance.GetRTPBankLinkUsingGet(nucleusBankLinkId);
            //Assert.IsInstanceOf<RtpBankLinkResponseVO> (response, "response is RtpBankLinkResponseVO");
        }
        
        /// <summary>
        /// Test GetRTPClientBankLinksUsingGet
        /// </summary>
        [Test]
        public void GetRTPClientBankLinksUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusClientId = null;
            //var response = instance.GetRTPClientBankLinksUsingGet(nucleusClientId);
            //Assert.IsInstanceOf<List<RtpBankLinkResponseVO>> (response, "response is List<RtpBankLinkResponseVO>");
        }
        
        /// <summary>
        /// Test GetRtpTransferUsingGet
        /// </summary>
        [Test]
        public void GetRtpTransferUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusFundingId = null;
            //var response = instance.GetRtpTransferUsingGet(nucleusFundingId);
            //Assert.IsInstanceOf<RtpTransferResponseVO> (response, "response is RtpTransferResponseVO");
        }
        
        /// <summary>
        /// Test SubmitRtpTransferUsingPost
        /// </summary>
        [Test]
        public void SubmitRtpTransferUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RtpTransferRequestCO transferRequest = null;
            //var response = instance.SubmitRtpTransferUsingPost(transferRequest);
            //Assert.IsInstanceOf<RtpTransferResponseVO> (response, "response is RtpTransferResponseVO");
        }
        
        /// <summary>
        /// Test UpdateRTPBankLinkUsingPut
        /// </summary>
        [Test]
        public void UpdateRTPBankLinkUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusBankLinkId = null;
            //var response = instance.UpdateRTPBankLinkUsingPut(nucleusBankLinkId);
            //Assert.IsInstanceOf<RtpBankLinkResponseVO> (response, "response is RtpBankLinkResponseVO");
        }
        
    }

}
