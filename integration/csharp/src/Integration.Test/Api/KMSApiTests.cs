/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Integration.Client;
using Integration.Api;
using Integration.ModelEntity;

namespace Integration.Test
{
    /// <summary>
    ///  Class for testing KMSApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class KMSApiTests
    {
        private KMSApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new KMSApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of KMSApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' KMSApi
            //Assert.IsInstanceOfType(typeof(KMSApi), instance, "instance is a KMSApi");
        }

        
        /// <summary>
        /// Test CreateKMSUsingPost
        /// </summary>
        [Test]
        public void CreateKMSUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KmsConfig kmsConfig = null;
            //var response = instance.CreateKMSUsingPost(kmsConfig);
            //Assert.IsInstanceOf<KmsConfig> (response, "response is KmsConfig");
        }
        
        /// <summary>
        /// Test DeleteKMSUsingDelete
        /// </summary>
        [Test]
        public void DeleteKMSUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kmsId = null;
            //instance.DeleteKMSUsingDelete(kmsId);
            
        }
        
        /// <summary>
        /// Test GetKMSAllUsingGet
        /// </summary>
        [Test]
        public void GetKMSAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetKMSAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageKmsConfig> (response, "response is PageKmsConfig");
        }
        
        /// <summary>
        /// Test GetKMSUsingGet
        /// </summary>
        [Test]
        public void GetKMSUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kmsId = null;
            //var response = instance.GetKMSUsingGet(kmsId);
            //Assert.IsInstanceOf<KmsConfig> (response, "response is KmsConfig");
        }
        
        /// <summary>
        /// Test UpdateKMSUsingPut
        /// </summary>
        [Test]
        public void UpdateKMSUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KmsConfig kmsConfig = null;
            //Guid? kmsId = null;
            //var response = instance.UpdateKMSUsingPut(kmsConfig, kmsId);
            //Assert.IsInstanceOf<KmsConfig> (response, "response is KmsConfig");
        }
        
    }

}
