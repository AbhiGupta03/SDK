/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Integration.Client;
using Integration.Api;
using Integration.ModelEntity;

namespace Integration.Test
{
    /// <summary>
    ///  Class for testing UtilsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UtilsApiTests
    {
        private UtilsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UtilsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UtilsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UtilsApi
            //Assert.IsInstanceOfType(typeof(UtilsApi), instance, "instance is a UtilsApi");
        }

        
        /// <summary>
        /// Test CreateTokenExchangeUsingPost
        /// </summary>
        [Test]
        public void CreateTokenExchangeUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExchangeTokenCO exchangeTokenCO = null;
            //var response = instance.CreateTokenExchangeUsingPost(exchangeTokenCO);
            //Assert.IsInstanceOf<ExchangePublicTokenVO> (response, "response is ExchangePublicTokenVO");
        }
        
        /// <summary>
        /// Test CreateUserUsingPost
        /// </summary>
        [Test]
        public void CreateUserUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateUserRequest createUserRequest = null;
            //var response = instance.CreateUserUsingPost(createUserRequest);
            //Assert.IsInstanceOf<UserResponseVO> (response, "response is UserResponseVO");
        }
        
        /// <summary>
        /// Test GetAuditLogAllUsingGet
        /// </summary>
        [Test]
        public void GetAuditLogAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //DateTime? endDate = null;
            //string _event = null;
            //string integrationType = null;
            //bool? isRequest = null;
            //Guid? nucleusAggregationAccountId = null;
            //Guid? nucleusClientId = null;
            //string orderBy = null;
            //int? page = null;
            //string requestType = null;
            //int? size = null;
            //DateTime? startDate = null;
            //string vendorName = null;
            //var response = instance.GetAuditLogAllUsingGet(ascending, endDate, _event, integrationType, isRequest, nucleusAggregationAccountId, nucleusClientId, orderBy, page, requestType, size, startDate, vendorName);
            //Assert.IsInstanceOf<Pageobject> (response, "response is Pageobject");
        }
        
        /// <summary>
        /// Test GetWidgetLinkUsingGet
        /// </summary>
        [Test]
        public void GetWidgetLinkUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusId = null;
            //bool? isBusiness = null;
            //bool? isMobileWebview = null;
            //string memberId = null;
            //decimal? messageVersion = null;
            //string mode = null;
            //Guid? nucleusAggregationAccountId = null;
            //Guid? nucleusBankLinkId = null;
            //string vendorName = null;
            //bool? waitForFullAggregation = null;
            //string webviewUrlScheme = null;
            //var response = instance.GetWidgetLinkUsingGet(nucleusId, isBusiness, isMobileWebview, memberId, messageVersion, mode, nucleusAggregationAccountId, nucleusBankLinkId, vendorName, waitForFullAggregation, webviewUrlScheme);
            //Assert.IsInstanceOf<WidgetUrlVO> (response, "response is WidgetUrlVO");
        }
        
    }

}
