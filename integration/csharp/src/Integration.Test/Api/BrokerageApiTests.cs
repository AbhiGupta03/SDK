/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Integration.Client;
using Integration.Api;
using Integration.ModelEntity;

namespace Integration.Test
{
    /// <summary>
    ///  Class for testing BrokerageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BrokerageApiTests
    {
        private BrokerageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BrokerageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BrokerageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BrokerageApi
            //Assert.IsInstanceOfType(typeof(BrokerageApi), instance, "instance is a BrokerageApi");
        }

        
        /// <summary>
        /// Test CancelBrokerageOrderUsingPut
        /// </summary>
        [Test]
        public void CancelBrokerageOrderUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusOrderId = null;
            //instance.CancelBrokerageOrderUsingPut(nucleusOrderId);
            
        }
        
        /// <summary>
        /// Test CreateBrokerageAccountUsingPost
        /// </summary>
        [Test]
        public void CreateBrokerageAccountUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrokerageAccountCO brokerageAccountCO = null;
            //var response = instance.CreateBrokerageAccountUsingPost(brokerageAccountCO);
            //Assert.IsInstanceOf<BrokerageAccountVO> (response, "response is BrokerageAccountVO");
        }
        
        /// <summary>
        /// Test CreateBrokerageBankLinkUsingPost
        /// </summary>
        [Test]
        public void CreateBrokerageBankLinkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrokerageBankLinkCO brokerageBankLinkCO = null;
            //var response = instance.CreateBrokerageBankLinkUsingPost(brokerageBankLinkCO);
            //Assert.IsInstanceOf<BrokerageBankLinkVO> (response, "response is BrokerageBankLinkVO");
        }
        
        /// <summary>
        /// Test CreateBrokerageClientUsingPost
        /// </summary>
        [Test]
        public void CreateBrokerageClientUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrokerageCreateClientCO clientCO = null;
            //var response = instance.CreateBrokerageClientUsingPost(clientCO);
            //Assert.IsInstanceOf<BrokerageCreateClientVO> (response, "response is BrokerageCreateClientVO");
        }
        
        /// <summary>
        /// Test CreateBrokerageDepositUsingPost
        /// </summary>
        [Test]
        public void CreateBrokerageDepositUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrokerageDepositCO brokerageDepositCO = null;
            //var response = instance.CreateBrokerageDepositUsingPost(brokerageDepositCO);
            //Assert.IsInstanceOf<BrokerageDepositVO> (response, "response is BrokerageDepositVO");
        }
        
        /// <summary>
        /// Test CreateBrokerageDocumentUsingPost
        /// </summary>
        [Test]
        public void CreateBrokerageDocumentUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrokerageDocumentCO documentCO = null;
            //var response = instance.CreateBrokerageDocumentUsingPost(documentCO);
            //Assert.IsInstanceOf<BrokerageDocumentVO> (response, "response is BrokerageDocumentVO");
        }
        
        /// <summary>
        /// Test CreateBrokerageOrderUsingPost
        /// </summary>
        [Test]
        public void CreateBrokerageOrderUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrokerageOrderCO brokerageOrderCO = null;
            //var response = instance.CreateBrokerageOrderUsingPost(brokerageOrderCO);
            //Assert.IsInstanceOf<BrokerageOrderVO> (response, "response is BrokerageOrderVO");
        }
        
        /// <summary>
        /// Test CreateBrokerageWithdrawalUsingPost
        /// </summary>
        [Test]
        public void CreateBrokerageWithdrawalUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrokerageWithdrawalCO brokerageWithdrawalCO = null;
            //var response = instance.CreateBrokerageWithdrawalUsingPost(brokerageWithdrawalCO);
            //Assert.IsInstanceOf<BrokerageWithdrawalVO> (response, "response is BrokerageWithdrawalVO");
        }
        
        /// <summary>
        /// Test DeleteBrokerageBankLinkUsingDelete
        /// </summary>
        [Test]
        public void DeleteBrokerageBankLinkUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusBankLinkId = null;
            //instance.DeleteBrokerageBankLinkUsingDelete(nucleusBankLinkId);
            
        }
        
        /// <summary>
        /// Test GetBrokerageAccountStatementUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageAccountStatementUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? endDate = null;
            //Guid? nucleusAccountId = null;
            //DateTime? startDate = null;
            //string statementType = null;
            //var response = instance.GetBrokerageAccountStatementUsingGet(endDate, nucleusAccountId, startDate, statementType);
            //Assert.IsInstanceOf<BrokerageStatementVO> (response, "response is BrokerageStatementVO");
        }
        
        /// <summary>
        /// Test GetBrokerageBalanceUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageBalanceUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusPortfolioId = null;
            //var response = instance.GetBrokerageBalanceUsingGet(nucleusPortfolioId);
            //Assert.IsInstanceOf<BrokerageBalanceVO> (response, "response is BrokerageBalanceVO");
        }
        
        /// <summary>
        /// Test GetBrokerageBankLinkUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageBankLinkUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusBankLinkId = null;
            //var response = instance.GetBrokerageBankLinkUsingGet(nucleusBankLinkId);
            //Assert.IsInstanceOf<BrokerageBankLinkVO> (response, "response is BrokerageBankLinkVO");
        }
        
        /// <summary>
        /// Test GetBrokerageDocumentUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageDocumentUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusDocumentId = null;
            //var response = instance.GetBrokerageDocumentUsingGet(nucleusDocumentId);
            //Assert.IsInstanceOf<BrokerageDocumentVO> (response, "response is BrokerageDocumentVO");
        }
        
        /// <summary>
        /// Test GetBrokerageHoldingPerformanceUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageHoldingPerformanceUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusPortfolioId = null;
            //var response = instance.GetBrokerageHoldingPerformanceUsingGet(nucleusPortfolioId);
            //Assert.IsInstanceOf<BrokeragePerformanceVO> (response, "response is BrokeragePerformanceVO");
        }
        
        /// <summary>
        /// Test GetBrokerageHoldingUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageHoldingUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusPortfolioId = null;
            //var response = instance.GetBrokerageHoldingUsingGet(nucleusPortfolioId);
            //Assert.IsInstanceOf<BrokerageHoldingVO> (response, "response is BrokerageHoldingVO");
        }
        
        /// <summary>
        /// Test GetBrokerageOrderUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageOrderUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusOrderId = null;
            //var response = instance.GetBrokerageOrderUsingGet(nucleusOrderId);
            //Assert.IsInstanceOf<BrokerageOrderVO> (response, "response is BrokerageOrderVO");
        }
        
        /// <summary>
        /// Test GetBrokerageSecuritiesUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageSecuritiesUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vendorName = null;
            //bool? getFundamentals = null;
            //Guid? nucleusSecurityId = null;
            //var response = instance.GetBrokerageSecuritiesUsingGet(vendorName, getFundamentals, nucleusSecurityId);
            //Assert.IsInstanceOf<BrokerageSecuritiesVO> (response, "response is BrokerageSecuritiesVO");
        }
        
        /// <summary>
        /// Test GetBrokerageTransactionsUsingGet
        /// </summary>
        [Test]
        public void GetBrokerageTransactionsUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetTransactionsResponse drivewealthResponse = null;
            //DateTime? endDate = null;
            //Guid? nucleusPortfolioId = null;
            //DateTime? startDate = null;
            //var response = instance.GetBrokerageTransactionsUsingGet(drivewealthResponse, endDate, nucleusPortfolioId, startDate);
            //Assert.IsInstanceOf<BrokerageTransactionVO> (response, "response is BrokerageTransactionVO");
        }
        
        /// <summary>
        /// Test UpdateBrokerageBankLinkUsingPut
        /// </summary>
        [Test]
        public void UpdateBrokerageBankLinkUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusBankLinkId = null;
            //var response = instance.UpdateBrokerageBankLinkUsingPut(nucleusBankLinkId);
            //Assert.IsInstanceOf<BrokerageBankLinkVO> (response, "response is BrokerageBankLinkVO");
        }
        
        /// <summary>
        /// Test UpdateBrokerageClientUsingPut
        /// </summary>
        [Test]
        public void UpdateBrokerageClientUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusClientId = null;
            //BrokerageUpdateClientCO clientCO = null;
            //var response = instance.UpdateBrokerageClientUsingPut(nucleusClientId, clientCO);
            //Assert.IsInstanceOf<BrokerageUpdateClientVO> (response, "response is BrokerageUpdateClientVO");
        }
        
    }

}
