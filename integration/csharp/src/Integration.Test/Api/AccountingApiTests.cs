/* 
 * Hydrogen Integration API
 *
 * The Hydrogen Integration API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Integration.Client;
using Integration.Api;
using Integration.ModelEntity;

namespace Integration.Test
{
    /// <summary>
    ///  Class for testing AccountingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountingApiTests
    {
        private AccountingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountingApi
            //Assert.IsInstanceOfType(typeof(AccountingApi), instance, "instance is a AccountingApi");
        }

        
        /// <summary>
        /// Test CreateOrUpdateAccountingBillPayment
        /// </summary>
        [Test]
        public void CreateOrUpdateAccountingBillPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusInvoiceId = null;
            //var response = instance.CreateOrUpdateAccountingBillPayment(nucleusInvoiceId);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test CreateOrUpdateAccountingBills
        /// </summary>
        [Test]
        public void CreateOrUpdateAccountingBillsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusContactId = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CreateOrUpdateAccountingBills(nucleusContactId, startDate, endDate);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test CreateOrUpdateAccountingCustomer
        /// </summary>
        [Test]
        public void CreateOrUpdateAccountingCustomerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusBusinessId = null;
            //Guid? nucleusClientId = null;
            //var response = instance.CreateOrUpdateAccountingCustomer(nucleusBusinessId, nucleusClientId);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test CreateOrUpdateAccountingCustomerRevenue
        /// </summary>
        [Test]
        public void CreateOrUpdateAccountingCustomerRevenueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusContactId = null;
            //DateTime? startDate = null;
            //string accountingMethod = null;
            //DateTime? endDate = null;
            //var response = instance.CreateOrUpdateAccountingCustomerRevenue(nucleusContactId, startDate, accountingMethod, endDate);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test CreateOrUpdateAccountingInvoice
        /// </summary>
        [Test]
        public void CreateOrUpdateAccountingInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusContactId = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CreateOrUpdateAccountingInvoice(nucleusContactId, startDate, endDate);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test CreateOrUpdateAccountingInvoicePayment
        /// </summary>
        [Test]
        public void CreateOrUpdateAccountingInvoicePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusInvoiceId = null;
            //var response = instance.CreateOrUpdateAccountingInvoicePayment(nucleusInvoiceId);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test CreateOrUpdateAccountingSupplier
        /// </summary>
        [Test]
        public void CreateOrUpdateAccountingSupplierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusBusinessId = null;
            //Guid? nucleusClientId = null;
            //var response = instance.CreateOrUpdateAccountingSupplier(nucleusBusinessId, nucleusClientId);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test DeleteAccountingVendorAccessConfigIsActiveById
        /// </summary>
        [Test]
        public void DeleteAccountingVendorAccessConfigIsActiveByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //instance.DeleteAccountingVendorAccessConfigIsActiveById(id);
            
        }
        
        /// <summary>
        /// Test GetAccountingStats
        /// </summary>
        [Test]
        public void GetAccountingStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountingMethod = null;
            //Guid? nucleusBusinessId = null;
            //Guid? nucleusClientId = null;
            //string periodLength = null;
            //int? periodMonth = null;
            //int? periodQuarter = null;
            //string periodType = null;
            //int? periodYear = null;
            //string report = null;
            //DateTime? statementDate = null;
            //var response = instance.GetAccountingStats(accountingMethod, nucleusBusinessId, nucleusClientId, periodLength, periodMonth, periodQuarter, periodType, periodYear, report, statementDate);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test GetAccountingVendorInfoUsingClientId
        /// </summary>
        [Test]
        public void GetAccountingVendorInfoUsingClientIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusClientId = null;
            //var response = instance.GetAccountingVendorInfoUsingClientId(nucleusClientId);
            //Assert.IsInstanceOf<List<VendorAccessConfigVO>> (response, "response is List<VendorAccessConfigVO>");
        }
        
        /// <summary>
        /// Test UpdateAccountingBill
        /// </summary>
        [Test]
        public void UpdateAccountingBillTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusInvoiceId = null;
            //var response = instance.UpdateAccountingBill(nucleusInvoiceId);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test UpdateAccountingCustomer
        /// </summary>
        [Test]
        public void UpdateAccountingCustomerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusContactId = null;
            //var response = instance.UpdateAccountingCustomer(nucleusContactId);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test UpdateAccountingInvoice
        /// </summary>
        [Test]
        public void UpdateAccountingInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusInvoiceId = null;
            //var response = instance.UpdateAccountingInvoice(nucleusInvoiceId);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test UpdateAccountingSupplier
        /// </summary>
        [Test]
        public void UpdateAccountingSupplierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nucleusContactId = null;
            //var response = instance.UpdateAccountingSupplier(nucleusContactId);
            //Assert.IsInstanceOf<AccountingFinalResponseVO> (response, "response is AccountingFinalResponseVO");
        }
        
        /// <summary>
        /// Test UpdateAccountingVendorAccessConfigIsActiveById
        /// </summary>
        [Test]
        public void UpdateAccountingVendorAccessConfigIsActiveByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //bool? isActive = null;
            //var response = instance.UpdateAccountingVendorAccessConfigIsActiveById(id, isActive);
            //Assert.IsInstanceOf<VendorAccessConfigVO> (response, "response is VendorAccessConfigVO");
        }
        
    }

}
