/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.molecule.api;

import com.hydrogen.molecule.ApiCallback;
import com.hydrogen.molecule.ApiClient;
import com.hydrogen.molecule.ApiException;
import com.hydrogen.molecule.ApiResponse;
import com.hydrogen.molecule.Configuration;
import com.hydrogen.molecule.Pair;
import com.hydrogen.molecule.ProgressRequestBody;
import com.hydrogen.molecule.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.molecule.model.CurrencyBalanceResponse;
import com.hydrogen.molecule.model.CurrencyBalanceUpdateParams;
import com.hydrogen.molecule.model.PageCurrencyBalanceResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrencyBalanceApi {
    private ApiClient apiClient;

    public CurrencyBalanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrencyBalanceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCurrencyBalanceAllUsingGet
     * @param walletId To filter response Currency Balance list by wallet ID (optional)
     * @param currencyId To filter response Currency Balance list by currency ID (optional)
     * @param page To filter response Currency Balance list by page number (optional)
     * @param size Number of records per page (optional)
     * @param orderBy Field to sort record list (optional)
     * @param ascending Sorting order (optional)
     * @param getLatest To fetch latest (one) record (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrencyBalanceAllUsingGetCall(UUID walletId, UUID currencyId, Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/currency_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("wallet_id", walletId));
        if (currencyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_id", currencyId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrencyBalanceAllUsingGetValidateBeforeCall(UUID walletId, UUID currencyId, Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCurrencyBalanceAllUsingGetCall(walletId, currencyId, page, size, orderBy, ascending, getLatest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch Currency Balance list
     * 
     * @param walletId To filter response Currency Balance list by wallet ID (optional)
     * @param currencyId To filter response Currency Balance list by currency ID (optional)
     * @param page To filter response Currency Balance list by page number (optional)
     * @param size Number of records per page (optional)
     * @param orderBy Field to sort record list (optional)
     * @param ascending Sorting order (optional)
     * @param getLatest To fetch latest (one) record (optional)
     * @return PageCurrencyBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageCurrencyBalanceResponse getCurrencyBalanceAllUsingGet(UUID walletId, UUID currencyId, Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest) throws ApiException {
        ApiResponse<PageCurrencyBalanceResponse> resp = getCurrencyBalanceAllUsingGetWithHttpInfo(walletId, currencyId, page, size, orderBy, ascending, getLatest);
        return resp.getData();
    }

    /**
     * Fetch Currency Balance list
     * 
     * @param walletId To filter response Currency Balance list by wallet ID (optional)
     * @param currencyId To filter response Currency Balance list by currency ID (optional)
     * @param page To filter response Currency Balance list by page number (optional)
     * @param size Number of records per page (optional)
     * @param orderBy Field to sort record list (optional)
     * @param ascending Sorting order (optional)
     * @param getLatest To fetch latest (one) record (optional)
     * @return ApiResponse&lt;PageCurrencyBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageCurrencyBalanceResponse> getCurrencyBalanceAllUsingGetWithHttpInfo(UUID walletId, UUID currencyId, Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest) throws ApiException {
        com.squareup.okhttp.Call call = getCurrencyBalanceAllUsingGetValidateBeforeCall(walletId, currencyId, page, size, orderBy, ascending, getLatest, null, null);
        Type localVarReturnType = new TypeToken<PageCurrencyBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch Currency Balance list (asynchronously)
     * 
     * @param walletId To filter response Currency Balance list by wallet ID (optional)
     * @param currencyId To filter response Currency Balance list by currency ID (optional)
     * @param page To filter response Currency Balance list by page number (optional)
     * @param size Number of records per page (optional)
     * @param orderBy Field to sort record list (optional)
     * @param ascending Sorting order (optional)
     * @param getLatest To fetch latest (one) record (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrencyBalanceAllUsingGetAsync(UUID walletId, UUID currencyId, Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest, final ApiCallback<PageCurrencyBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrencyBalanceAllUsingGetValidateBeforeCall(walletId, currencyId, page, size, orderBy, ascending, getLatest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageCurrencyBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCurrencyBalanceUsingGet
     * @param currencyBalanceId Currency Balance ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrencyBalanceUsingGetCall(UUID currencyBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/currency_balance/{currency_balance_id}"
            .replaceAll("\\{" + "currency_balance_id" + "\\}", apiClient.escapeString(currencyBalanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrencyBalanceUsingGetValidateBeforeCall(UUID currencyBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'currencyBalanceId' is set
        if (currencyBalanceId == null) {
            throw new ApiException("Missing the required parameter 'currencyBalanceId' when calling getCurrencyBalanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getCurrencyBalanceUsingGetCall(currencyBalanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch Currency Balance details
     * 
     * @param currencyBalanceId Currency Balance ID (required)
     * @return CurrencyBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurrencyBalanceResponse getCurrencyBalanceUsingGet(UUID currencyBalanceId) throws ApiException {
        ApiResponse<CurrencyBalanceResponse> resp = getCurrencyBalanceUsingGetWithHttpInfo(currencyBalanceId);
        return resp.getData();
    }

    /**
     * Fetch Currency Balance details
     * 
     * @param currencyBalanceId Currency Balance ID (required)
     * @return ApiResponse&lt;CurrencyBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurrencyBalanceResponse> getCurrencyBalanceUsingGetWithHttpInfo(UUID currencyBalanceId) throws ApiException {
        com.squareup.okhttp.Call call = getCurrencyBalanceUsingGetValidateBeforeCall(currencyBalanceId, null, null);
        Type localVarReturnType = new TypeToken<CurrencyBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch Currency Balance details (asynchronously)
     * 
     * @param currencyBalanceId Currency Balance ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrencyBalanceUsingGetAsync(UUID currencyBalanceId, final ApiCallback<CurrencyBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrencyBalanceUsingGetValidateBeforeCall(currencyBalanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurrencyBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCurrencyBalanceUsingPost
     * @param currencyBalanceUpdateParams To fetch/update latest record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCurrencyBalanceUsingPostCall(CurrencyBalanceUpdateParams currencyBalanceUpdateParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = currencyBalanceUpdateParams;

        // create path and map variables
        String localVarPath = "/currency_balance/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCurrencyBalanceUsingPostValidateBeforeCall(CurrencyBalanceUpdateParams currencyBalanceUpdateParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'currencyBalanceUpdateParams' is set
        if (currencyBalanceUpdateParams == null) {
            throw new ApiException("Missing the required parameter 'currencyBalanceUpdateParams' when calling updateCurrencyBalanceUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCurrencyBalanceUsingPostCall(currencyBalanceUpdateParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update(Fetch) latest Currency Balance
     * 
     * @param currencyBalanceUpdateParams To fetch/update latest record (required)
     * @return CurrencyBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurrencyBalanceResponse updateCurrencyBalanceUsingPost(CurrencyBalanceUpdateParams currencyBalanceUpdateParams) throws ApiException {
        ApiResponse<CurrencyBalanceResponse> resp = updateCurrencyBalanceUsingPostWithHttpInfo(currencyBalanceUpdateParams);
        return resp.getData();
    }

    /**
     * Update(Fetch) latest Currency Balance
     * 
     * @param currencyBalanceUpdateParams To fetch/update latest record (required)
     * @return ApiResponse&lt;CurrencyBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurrencyBalanceResponse> updateCurrencyBalanceUsingPostWithHttpInfo(CurrencyBalanceUpdateParams currencyBalanceUpdateParams) throws ApiException {
        com.squareup.okhttp.Call call = updateCurrencyBalanceUsingPostValidateBeforeCall(currencyBalanceUpdateParams, null, null);
        Type localVarReturnType = new TypeToken<CurrencyBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update(Fetch) latest Currency Balance (asynchronously)
     * 
     * @param currencyBalanceUpdateParams To fetch/update latest record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCurrencyBalanceUsingPostAsync(CurrencyBalanceUpdateParams currencyBalanceUpdateParams, final ApiCallback<CurrencyBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCurrencyBalanceUsingPostValidateBeforeCall(currencyBalanceUpdateParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurrencyBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
