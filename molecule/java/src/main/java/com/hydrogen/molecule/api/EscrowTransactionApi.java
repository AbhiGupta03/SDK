/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.molecule.api;

import com.hydrogen.molecule.ApiCallback;
import com.hydrogen.molecule.ApiClient;
import com.hydrogen.molecule.ApiException;
import com.hydrogen.molecule.ApiResponse;
import com.hydrogen.molecule.Configuration;
import com.hydrogen.molecule.Pair;
import com.hydrogen.molecule.ProgressRequestBody;
import com.hydrogen.molecule.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.molecule.model.EscrowDepositParams;
import com.hydrogen.molecule.model.EscrowTransactionResponse;
import com.hydrogen.molecule.model.PageEscrowTransactionResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EscrowTransactionApi {
    private ApiClient apiClient;

    public EscrowTransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EscrowTransactionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEscrowTransactionUsingPost
     * @param escrowDepositParams It enables a user to create a escrow transaction (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEscrowTransactionUsingPostCall(EscrowDepositParams escrowDepositParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = escrowDepositParams;

        // create path and map variables
        String localVarPath = "/escrow_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEscrowTransactionUsingPostValidateBeforeCall(EscrowDepositParams escrowDepositParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'escrowDepositParams' is set
        if (escrowDepositParams == null) {
            throw new ApiException("Missing the required parameter 'escrowDepositParams' when calling createEscrowTransactionUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createEscrowTransactionUsingPostCall(escrowDepositParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new Escrow Transaction
     * 
     * @param escrowDepositParams It enables a user to create a escrow transaction (required)
     * @return EscrowTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EscrowTransactionResponse createEscrowTransactionUsingPost(EscrowDepositParams escrowDepositParams) throws ApiException {
        ApiResponse<EscrowTransactionResponse> resp = createEscrowTransactionUsingPostWithHttpInfo(escrowDepositParams);
        return resp.getData();
    }

    /**
     * Create a new Escrow Transaction
     * 
     * @param escrowDepositParams It enables a user to create a escrow transaction (required)
     * @return ApiResponse&lt;EscrowTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EscrowTransactionResponse> createEscrowTransactionUsingPostWithHttpInfo(EscrowDepositParams escrowDepositParams) throws ApiException {
        com.squareup.okhttp.Call call = createEscrowTransactionUsingPostValidateBeforeCall(escrowDepositParams, null, null);
        Type localVarReturnType = new TypeToken<EscrowTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Escrow Transaction (asynchronously)
     * 
     * @param escrowDepositParams It enables a user to create a escrow transaction (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEscrowTransactionUsingPostAsync(EscrowDepositParams escrowDepositParams, final ApiCallback<EscrowTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEscrowTransactionUsingPostValidateBeforeCall(escrowDepositParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EscrowTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEscrowTransactionAllUsingGet
     * @param page To filter response Escrow Transaction list by page number (optional)
     * @param size Number of records per page (optional)
     * @param orderBy Field to sort record list (optional)
     * @param ascending Sorting order (optional)
     * @param getLatest To fetch latest (one) record (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEscrowTransactionAllUsingGetCall(Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/escrow_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEscrowTransactionAllUsingGetValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEscrowTransactionAllUsingGetCall(page, size, orderBy, ascending, getLatest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all Escrow Transaction
     * 
     * @param page To filter response Escrow Transaction list by page number (optional)
     * @param size Number of records per page (optional)
     * @param orderBy Field to sort record list (optional)
     * @param ascending Sorting order (optional)
     * @param getLatest To fetch latest (one) record (optional)
     * @return PageEscrowTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageEscrowTransactionResponse getEscrowTransactionAllUsingGet(Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest) throws ApiException {
        ApiResponse<PageEscrowTransactionResponse> resp = getEscrowTransactionAllUsingGetWithHttpInfo(page, size, orderBy, ascending, getLatest);
        return resp.getData();
    }

    /**
     * List all Escrow Transaction
     * 
     * @param page To filter response Escrow Transaction list by page number (optional)
     * @param size Number of records per page (optional)
     * @param orderBy Field to sort record list (optional)
     * @param ascending Sorting order (optional)
     * @param getLatest To fetch latest (one) record (optional)
     * @return ApiResponse&lt;PageEscrowTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageEscrowTransactionResponse> getEscrowTransactionAllUsingGetWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest) throws ApiException {
        com.squareup.okhttp.Call call = getEscrowTransactionAllUsingGetValidateBeforeCall(page, size, orderBy, ascending, getLatest, null, null);
        Type localVarReturnType = new TypeToken<PageEscrowTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Escrow Transaction (asynchronously)
     * 
     * @param page To filter response Escrow Transaction list by page number (optional)
     * @param size Number of records per page (optional)
     * @param orderBy Field to sort record list (optional)
     * @param ascending Sorting order (optional)
     * @param getLatest To fetch latest (one) record (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEscrowTransactionAllUsingGetAsync(Integer page, Integer size, String orderBy, Boolean ascending, Boolean getLatest, final ApiCallback<PageEscrowTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEscrowTransactionAllUsingGetValidateBeforeCall(page, size, orderBy, ascending, getLatest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageEscrowTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEscrowTransactionUsingGet
     * @param escrowTransactionId Escrow Transaction ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEscrowTransactionUsingGetCall(UUID escrowTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/escrow_transaction/{escrow_transaction_id}"
            .replaceAll("\\{" + "escrow_transaction_id" + "\\}", apiClient.escapeString(escrowTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEscrowTransactionUsingGetValidateBeforeCall(UUID escrowTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'escrowTransactionId' is set
        if (escrowTransactionId == null) {
            throw new ApiException("Missing the required parameter 'escrowTransactionId' when calling getEscrowTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getEscrowTransactionUsingGetCall(escrowTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch Escrow Transaction
     * 
     * @param escrowTransactionId Escrow Transaction ID (required)
     * @return EscrowTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EscrowTransactionResponse getEscrowTransactionUsingGet(UUID escrowTransactionId) throws ApiException {
        ApiResponse<EscrowTransactionResponse> resp = getEscrowTransactionUsingGetWithHttpInfo(escrowTransactionId);
        return resp.getData();
    }

    /**
     * Fetch Escrow Transaction
     * 
     * @param escrowTransactionId Escrow Transaction ID (required)
     * @return ApiResponse&lt;EscrowTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EscrowTransactionResponse> getEscrowTransactionUsingGetWithHttpInfo(UUID escrowTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = getEscrowTransactionUsingGetValidateBeforeCall(escrowTransactionId, null, null);
        Type localVarReturnType = new TypeToken<EscrowTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch Escrow Transaction (asynchronously)
     * 
     * @param escrowTransactionId Escrow Transaction ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEscrowTransactionUsingGetAsync(UUID escrowTransactionId, final ApiCallback<EscrowTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEscrowTransactionUsingGetValidateBeforeCall(escrowTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EscrowTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEscrowTransactionUsingPut
     * @param escrowTransactionId Escrow Transaction ID (required)
     * @param escrowDepositParams It enables a user to create a escrow transaction (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEscrowTransactionUsingPutCall(UUID escrowTransactionId, EscrowDepositParams escrowDepositParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = escrowDepositParams;

        // create path and map variables
        String localVarPath = "/escrow_transaction/{escrow_transaction_id}"
            .replaceAll("\\{" + "escrow_transaction_id" + "\\}", apiClient.escapeString(escrowTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEscrowTransactionUsingPutValidateBeforeCall(UUID escrowTransactionId, EscrowDepositParams escrowDepositParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'escrowTransactionId' is set
        if (escrowTransactionId == null) {
            throw new ApiException("Missing the required parameter 'escrowTransactionId' when calling updateEscrowTransactionUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEscrowTransactionUsingPutCall(escrowTransactionId, escrowDepositParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Escrow Transaction
     * 
     * @param escrowTransactionId Escrow Transaction ID (required)
     * @param escrowDepositParams It enables a user to create a escrow transaction (optional)
     * @return EscrowTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EscrowTransactionResponse updateEscrowTransactionUsingPut(UUID escrowTransactionId, EscrowDepositParams escrowDepositParams) throws ApiException {
        ApiResponse<EscrowTransactionResponse> resp = updateEscrowTransactionUsingPutWithHttpInfo(escrowTransactionId, escrowDepositParams);
        return resp.getData();
    }

    /**
     * Update Escrow Transaction
     * 
     * @param escrowTransactionId Escrow Transaction ID (required)
     * @param escrowDepositParams It enables a user to create a escrow transaction (optional)
     * @return ApiResponse&lt;EscrowTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EscrowTransactionResponse> updateEscrowTransactionUsingPutWithHttpInfo(UUID escrowTransactionId, EscrowDepositParams escrowDepositParams) throws ApiException {
        com.squareup.okhttp.Call call = updateEscrowTransactionUsingPutValidateBeforeCall(escrowTransactionId, escrowDepositParams, null, null);
        Type localVarReturnType = new TypeToken<EscrowTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Escrow Transaction (asynchronously)
     * 
     * @param escrowTransactionId Escrow Transaction ID (required)
     * @param escrowDepositParams It enables a user to create a escrow transaction (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEscrowTransactionUsingPutAsync(UUID escrowTransactionId, EscrowDepositParams escrowDepositParams, final ApiCallback<EscrowTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEscrowTransactionUsingPutValidateBeforeCall(escrowTransactionId, escrowDepositParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EscrowTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
