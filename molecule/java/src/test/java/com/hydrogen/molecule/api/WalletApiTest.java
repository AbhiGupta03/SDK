/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.molecule.api;

import com.hydrogen.molecule.ApiException;
import com.hydrogen.molecule.model.PageWalletResponse;
import com.hydrogen.molecule.model.WalletParams;
import com.hydrogen.molecule.model.WalletResponse;

import java.util.UUID;

import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for WalletApi
 */
@Ignore
public class WalletApiTest {

    private final WalletApi api = new WalletApi();

    
    /**
     * Creates a new Wallet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWalletUsingPostTest() throws ApiException {
        WalletParams walletParams = null;
        WalletResponse response = api.createWalletUsingPost(walletParams);

        // TODO: test validations
    }
    
    /**
     * Fetch Wallet list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWalletAllUsingGetTest() throws ApiException {
        UUID nucleusClientId = null;
        Boolean isPrimary = null;
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        Boolean getLatest = null;
        PageWalletResponse response = api.getWalletAllUsingGet(nucleusClientId, isPrimary, page, size, orderBy, ascending, getLatest);

        // TODO: test validations
    }
    
    /**
     * Fetch Wallet details by Wallet Key ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWalletByWalletKeyUsingGetTest() throws ApiException {
        UUID walletKeyId = null;
        WalletResponse response = api.getWalletByWalletKeyUsingGet(walletKeyId);

        // TODO: test validations
    }
    
    /**
     * Fetch Wallet details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWalletUsingGetTest() throws ApiException {
        UUID walletId = null;
        WalletResponse response = api.getWalletUsingGet(walletId);

        // TODO: test validations
    }
    
    /**
     * Update Wallet details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWalletUsingPutTest() throws ApiException {
        UUID walletId = null;
        WalletParams walletUpdateParams = null;
        WalletResponse response = api.updateWalletUsingPut(walletId, walletUpdateParams);

        // TODO: test validations
    }
    
}
