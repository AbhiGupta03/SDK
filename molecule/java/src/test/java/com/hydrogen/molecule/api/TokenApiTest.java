/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.molecule.api;

import com.hydrogen.molecule.ApiException;
import com.hydrogen.molecule.model.PageTokenResponse;
import com.hydrogen.molecule.model.TokenBurnParams;
import com.hydrogen.molecule.model.TokenDeployParams;
import com.hydrogen.molecule.model.TokenMintParams;
import com.hydrogen.molecule.model.TokenParams;
import com.hydrogen.molecule.model.TokenResponse;
import com.hydrogen.molecule.model.TokenUpdateParams;
import com.hydrogen.molecule.model.TokenWhitelistParams;
import com.hydrogen.molecule.model.TransactionSuccessResponse;

import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for TokenApi
 */
@Ignore
public class TokenApiTest {

    private final TokenApi api = new TokenApi();

    
    /**
     * Burn tokens
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void burnTokenUsingPostTest() throws ApiException {
        TokenBurnParams tokenBurnParams = null;
        TransactionSuccessResponse response = api.burnTokenUsingPost(tokenBurnParams);

        // TODO: test validations
    }
    
    /**
     * Creates a new Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTokenUsingPostTest() throws ApiException {
        TokenParams tokenParams = null;
        TokenResponse response = api.createTokenUsingPost(tokenParams);

        // TODO: test validations
    }
    
    /**
     * Delete Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTokenUsingDeleteTest() throws ApiException {
        UUID tokenId = null;
        api.deleteTokenUsingDelete(tokenId);

        // TODO: test validations
    }
    
    /**
     * Deploys provided Token to network
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deployTokenUsingPostTest() throws ApiException {
        TokenDeployParams tokenDeployParams = null;
        TransactionSuccessResponse response = api.deployTokenUsingPost(tokenDeployParams);

        // TODO: test validations
    }
    
    /**
     * Fetch Token list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenAllUsingGetTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        Boolean getLatest = null;
        PageTokenResponse response = api.getTokenAllUsingGet(page, size, orderBy, ascending, getLatest);

        // TODO: test validations
    }
    
    /**
     * Fetch Token details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenUsingGetTest() throws ApiException {
        UUID tokenId = null;
        TokenResponse response = api.getTokenUsingGet(tokenId);

        // TODO: test validations
    }
    
    /**
     * Mint new tokens
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mintTokenUsingPostTest() throws ApiException {
        TokenMintParams tokenMintParams = null;
        TransactionSuccessResponse response = api.mintTokenUsingPost(tokenMintParams);

        // TODO: test validations
    }
    
    /**
     * Update Token details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTokenUsingPutTest() throws ApiException {
        UUID tokenId = null;
        TokenUpdateParams tokenUpdateParams = null;
        TokenResponse response = api.updateTokenUsingPut(tokenId, tokenUpdateParams);

        // TODO: test validations
    }
    
    /**
     * Whitelist token for provided wallet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void whitelistTokenUsingPostTest() throws ApiException {
        TokenWhitelistParams tokenWhitelistParams = null;
        TransactionSuccessResponse response = api.whitelistTokenUsingPost(tokenWhitelistParams);

        // TODO: test validations
    }
    
}
