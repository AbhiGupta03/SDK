/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/PageTokenResponse', 'model/TokenBurnParams', 'model/TokenDeployParams', 'model/TokenMintParams', 'model/TokenParams', 'model/TokenResponse', 'model/TokenUpdateParams', 'model/TokenWhitelistParams', 'model/TransactionSuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/PageTokenResponse'), require('../model/TokenBurnParams'), require('../model/TokenDeployParams'), require('../model/TokenMintParams'), require('../model/TokenParams'), require('../model/TokenResponse'), require('../model/TokenUpdateParams'), require('../model/TokenWhitelistParams'), require('../model/TransactionSuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MoleculeApiDocumentation) {
      root.MoleculeApiDocumentation = {};
    }
    root.MoleculeApiDocumentation.TokenApi = factory(root.MoleculeApiDocumentation.ApiClient, root.MoleculeApiDocumentation.ErrorResponse, root.MoleculeApiDocumentation.PageTokenResponse, root.MoleculeApiDocumentation.TokenBurnParams, root.MoleculeApiDocumentation.TokenDeployParams, root.MoleculeApiDocumentation.TokenMintParams, root.MoleculeApiDocumentation.TokenParams, root.MoleculeApiDocumentation.TokenResponse, root.MoleculeApiDocumentation.TokenUpdateParams, root.MoleculeApiDocumentation.TokenWhitelistParams, root.MoleculeApiDocumentation.TransactionSuccessResponse);
  }
}(this, function(ApiClient, ErrorResponse, PageTokenResponse, TokenBurnParams, TokenDeployParams, TokenMintParams, TokenParams, TokenResponse, TokenUpdateParams, TokenWhitelistParams, TransactionSuccessResponse) {
  'use strict';

  /**
   * Token service.
   * @module api/TokenApi
   * @version 1.3.0
   */

  /**
   * Constructs a new TokenApi. 
   * @alias module:api/TokenApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the burnTokenUsingPost operation.
     * @callback module:api/TokenApi~burnTokenUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burn tokens
     * @param {module:model/TokenBurnParams} tokenBurnParams Burns provided amount of existing tokens
     * @param {module:api/TokenApi~burnTokenUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionSuccessResponse}
     */
    this.burnTokenUsingPost = function(tokenBurnParams, callback) {
      var postBody = tokenBurnParams;

      // verify the required parameter 'tokenBurnParams' is set
      if (tokenBurnParams === undefined || tokenBurnParams === null) {
        throw new Error("Missing the required parameter 'tokenBurnParams' when calling burnTokenUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionSuccessResponse;

      return this.apiClient.callApi(
        '/token/burn', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTokenUsingPost operation.
     * @callback module:api/TokenApi~createTokenUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Token
     * @param {module:model/TokenParams} tokenParams It enables a user to create a Token
     * @param {module:api/TokenApi~createTokenUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    this.createTokenUsingPost = function(tokenParams, callback) {
      var postBody = tokenParams;

      // verify the required parameter 'tokenParams' is set
      if (tokenParams === undefined || tokenParams === null) {
        throw new Error("Missing the required parameter 'tokenParams' when calling createTokenUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TokenResponse;

      return this.apiClient.callApi(
        '/token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTokenUsingDelete operation.
     * @callback module:api/TokenApi~deleteTokenUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Token
     * @param {String} tokenId Token ID
     * @param {module:api/TokenApi~deleteTokenUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTokenUsingDelete = function(tokenId, callback) {
      var postBody = null;

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteTokenUsingDelete");
      }


      var pathParams = {
        'token_id': tokenId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/token/{token_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deployTokenUsingPost operation.
     * @callback module:api/TokenApi~deployTokenUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploys provided Token to network
     * @param {module:model/TokenDeployParams} tokenDeployParams Deploys provided Token to network
     * @param {module:api/TokenApi~deployTokenUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionSuccessResponse}
     */
    this.deployTokenUsingPost = function(tokenDeployParams, callback) {
      var postBody = tokenDeployParams;

      // verify the required parameter 'tokenDeployParams' is set
      if (tokenDeployParams === undefined || tokenDeployParams === null) {
        throw new Error("Missing the required parameter 'tokenDeployParams' when calling deployTokenUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionSuccessResponse;

      return this.apiClient.callApi(
        '/token/deploy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenAllUsingGet operation.
     * @callback module:api/TokenApi~getTokenAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Token list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page To filter response Token list by page number
     * @param {Number} opts.size Number of records per page
     * @param {String} opts.orderBy Field to sort record list
     * @param {Boolean} opts.ascending Sorting order
     * @param {Boolean} opts.getLatest To fetch latest (one) record
     * @param {module:api/TokenApi~getTokenAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageTokenResponse}
     */
    this.getTokenAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'get_latest': opts['getLatest'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageTokenResponse;

      return this.apiClient.callApi(
        '/token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenUsingGet operation.
     * @callback module:api/TokenApi~getTokenUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Token details
     * @param {String} tokenId Token ID
     * @param {module:api/TokenApi~getTokenUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    this.getTokenUsingGet = function(tokenId, callback) {
      var postBody = null;

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getTokenUsingGet");
      }


      var pathParams = {
        'token_id': tokenId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TokenResponse;

      return this.apiClient.callApi(
        '/token/{token_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mintTokenUsingPost operation.
     * @callback module:api/TokenApi~mintTokenUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint new tokens
     * @param {module:model/TokenMintParams} tokenMintParams Mint new tokens
     * @param {module:api/TokenApi~mintTokenUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionSuccessResponse}
     */
    this.mintTokenUsingPost = function(tokenMintParams, callback) {
      var postBody = tokenMintParams;

      // verify the required parameter 'tokenMintParams' is set
      if (tokenMintParams === undefined || tokenMintParams === null) {
        throw new Error("Missing the required parameter 'tokenMintParams' when calling mintTokenUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionSuccessResponse;

      return this.apiClient.callApi(
        '/token/mint', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTokenUsingPut operation.
     * @callback module:api/TokenApi~updateTokenUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Token details
     * @param {String} tokenId Token ID
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenUpdateParams} opts.tokenUpdateParams Token details to be updated
     * @param {module:api/TokenApi~updateTokenUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    this.updateTokenUsingPut = function(tokenId, opts, callback) {
      opts = opts || {};
      var postBody = opts['tokenUpdateParams'];

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling updateTokenUsingPut");
      }


      var pathParams = {
        'token_id': tokenId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TokenResponse;

      return this.apiClient.callApi(
        '/token/{token_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the whitelistTokenUsingPost operation.
     * @callback module:api/TokenApi~whitelistTokenUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Whitelist token for provided wallet
     * @param {module:model/TokenWhitelistParams} tokenWhitelistParams Whitelist token for provided wallet
     * @param {module:api/TokenApi~whitelistTokenUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionSuccessResponse}
     */
    this.whitelistTokenUsingPost = function(tokenWhitelistParams, callback) {
      var postBody = tokenWhitelistParams;

      // verify the required parameter 'tokenWhitelistParams' is set
      if (tokenWhitelistParams === undefined || tokenWhitelistParams === null) {
        throw new Error("Missing the required parameter 'tokenWhitelistParams' when calling whitelistTokenUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionSuccessResponse;

      return this.apiClient.callApi(
        '/token/whitelist', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
