/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/PageTokenTransferResponse', 'model/TokenTransferParams', 'model/TokenTransferResponse', 'model/TransactionSuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/PageTokenTransferResponse'), require('../model/TokenTransferParams'), require('../model/TokenTransferResponse'), require('../model/TransactionSuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MoleculeApiDocumentation) {
      root.MoleculeApiDocumentation = {};
    }
    root.MoleculeApiDocumentation.TokenTransferApi = factory(root.MoleculeApiDocumentation.ApiClient, root.MoleculeApiDocumentation.ErrorResponse, root.MoleculeApiDocumentation.PageTokenTransferResponse, root.MoleculeApiDocumentation.TokenTransferParams, root.MoleculeApiDocumentation.TokenTransferResponse, root.MoleculeApiDocumentation.TransactionSuccessResponse);
  }
}(this, function(ApiClient, ErrorResponse, PageTokenTransferResponse, TokenTransferParams, TokenTransferResponse, TransactionSuccessResponse) {
  'use strict';

  /**
   * TokenTransfer service.
   * @module api/TokenTransferApi
   * @version 1.3.0
   */

  /**
   * Constructs a new TokenTransferApi. 
   * @alias module:api/TokenTransferApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createTokenTransferUsingPost operation.
     * @callback module:api/TokenTransferApi~createTokenTransferUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates Token Transfer record
     * @param {module:model/TokenTransferParams} tokenTransferParams It enables a user to transfer Tokens
     * @param {module:api/TokenTransferApi~createTokenTransferUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionSuccessResponse}
     */
    this.createTokenTransferUsingPost = function(tokenTransferParams, callback) {
      var postBody = tokenTransferParams;

      // verify the required parameter 'tokenTransferParams' is set
      if (tokenTransferParams === undefined || tokenTransferParams === null) {
        throw new Error("Missing the required parameter 'tokenTransferParams' when calling createTokenTransferUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionSuccessResponse;

      return this.apiClient.callApi(
        '/token_transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenTransferAllUsingGet operation.
     * @callback module:api/TokenTransferApi~getTokenTransferAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageTokenTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Token Transfer record list
     * @param {Object} opts Optional parameters
     * @param {String} opts.walletId To filter response Token Transfer list by Wallet ID
     * @param {Number} opts.page To filter response Token Transfer list by page number
     * @param {Number} opts.size Number of records per page
     * @param {String} opts.orderBy Field to sort record list
     * @param {Boolean} opts.ascending Sorting order
     * @param {Boolean} opts.getLatest To fetch latest (one) record
     * @param {module:api/TokenTransferApi~getTokenTransferAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageTokenTransferResponse}
     */
    this.getTokenTransferAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'wallet_id': opts['walletId'],
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'get_latest': opts['getLatest'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageTokenTransferResponse;

      return this.apiClient.callApi(
        '/token_transfer', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenTransferUsingGet operation.
     * @callback module:api/TokenTransferApi~getTokenTransferUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Token Transfer record details
     * @param {String} tokenTransferId Token Transfer ID
     * @param {module:api/TokenTransferApi~getTokenTransferUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenTransferResponse}
     */
    this.getTokenTransferUsingGet = function(tokenTransferId, callback) {
      var postBody = null;

      // verify the required parameter 'tokenTransferId' is set
      if (tokenTransferId === undefined || tokenTransferId === null) {
        throw new Error("Missing the required parameter 'tokenTransferId' when calling getTokenTransferUsingGet");
      }


      var pathParams = {
        'token_transfer_id': tokenTransferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TokenTransferResponse;

      return this.apiClient.callApi(
        '/token_transfer/{token_transfer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
