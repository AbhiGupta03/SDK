/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CurrencyParams', 'model/CurrencyResponse', 'model/CurrencyUpdateParams', 'model/ErrorResponse', 'model/PageCurrencyResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CurrencyParams'), require('../model/CurrencyResponse'), require('../model/CurrencyUpdateParams'), require('../model/ErrorResponse'), require('../model/PageCurrencyResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MoleculeApiDocumentation) {
      root.MoleculeApiDocumentation = {};
    }
    root.MoleculeApiDocumentation.CurrencyApi = factory(root.MoleculeApiDocumentation.ApiClient, root.MoleculeApiDocumentation.CurrencyParams, root.MoleculeApiDocumentation.CurrencyResponse, root.MoleculeApiDocumentation.CurrencyUpdateParams, root.MoleculeApiDocumentation.ErrorResponse, root.MoleculeApiDocumentation.PageCurrencyResponse);
  }
}(this, function(ApiClient, CurrencyParams, CurrencyResponse, CurrencyUpdateParams, ErrorResponse, PageCurrencyResponse) {
  'use strict';

  /**
   * Currency service.
   * @module api/CurrencyApi
   * @version 1.3.0
   */

  /**
   * Constructs a new CurrencyApi. 
   * @alias module:api/CurrencyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCurrencyUsingPost operation.
     * @callback module:api/CurrencyApi~createCurrencyUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Currency
     * @param {module:model/CurrencyParams} currencyParams It enables a user to create a Currency
     * @param {module:api/CurrencyApi~createCurrencyUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyResponse}
     */
    this.createCurrencyUsingPost = function(currencyParams, callback) {
      var postBody = currencyParams;

      // verify the required parameter 'currencyParams' is set
      if (currencyParams === undefined || currencyParams === null) {
        throw new Error("Missing the required parameter 'currencyParams' when calling createCurrencyUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CurrencyResponse;

      return this.apiClient.callApi(
        '/currency', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencyAllUsingGet operation.
     * @callback module:api/CurrencyApi~getCurrencyAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageCurrencyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Currency list
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol To filter response Currency list by Symbol name
     * @param {Boolean} opts.isAllowed To filter response Currency list
     * @param {Number} opts.page To filter response Currency list by page number
     * @param {Number} opts.size Number of records per page
     * @param {String} opts.orderBy Field to sort record list
     * @param {Boolean} opts.ascending Sorting order
     * @param {Boolean} opts.getLatest To fetch latest (one) record
     * @param {module:api/CurrencyApi~getCurrencyAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageCurrencyResponse}
     */
    this.getCurrencyAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'symbol': opts['symbol'],
        'is_allowed': opts['isAllowed'],
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'get_latest': opts['getLatest'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageCurrencyResponse;

      return this.apiClient.callApi(
        '/currency', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencyUsingGet operation.
     * @callback module:api/CurrencyApi~getCurrencyUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Currency details
     * @param {String} currencyId Currency ID
     * @param {module:api/CurrencyApi~getCurrencyUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyResponse}
     */
    this.getCurrencyUsingGet = function(currencyId, callback) {
      var postBody = null;

      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling getCurrencyUsingGet");
      }


      var pathParams = {
        'currency_id': currencyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CurrencyResponse;

      return this.apiClient.callApi(
        '/currency/{currency_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCurrencyUsingPut operation.
     * @callback module:api/CurrencyApi~updateCurrencyUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Currency details
     * @param {String} currencyId Currency ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CurrencyUpdateParams} opts.currencyUpdateParams Currency details to be updated
     * @param {module:api/CurrencyApi~updateCurrencyUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyResponse}
     */
    this.updateCurrencyUsingPut = function(currencyId, opts, callback) {
      opts = opts || {};
      var postBody = opts['currencyUpdateParams'];

      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling updateCurrencyUsingPut");
      }


      var pathParams = {
        'currency_id': currencyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CurrencyResponse;

      return this.apiClient.callApi(
        '/currency/{currency_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
