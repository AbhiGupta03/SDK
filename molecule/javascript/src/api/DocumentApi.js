/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DocumentParams', 'model/DocumentResponse', 'model/DocumentVerifyResponse', 'model/ErrorResponse', 'model/TransactionSuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DocumentParams'), require('../model/DocumentResponse'), require('../model/DocumentVerifyResponse'), require('../model/ErrorResponse'), require('../model/TransactionSuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MoleculeApiDocumentation) {
      root.MoleculeApiDocumentation = {};
    }
    root.MoleculeApiDocumentation.DocumentApi = factory(root.MoleculeApiDocumentation.ApiClient, root.MoleculeApiDocumentation.DocumentParams, root.MoleculeApiDocumentation.DocumentResponse, root.MoleculeApiDocumentation.DocumentVerifyResponse, root.MoleculeApiDocumentation.ErrorResponse, root.MoleculeApiDocumentation.TransactionSuccessResponse);
  }
}(this, function(ApiClient, DocumentParams, DocumentResponse, DocumentVerifyResponse, ErrorResponse, TransactionSuccessResponse) {
  'use strict';

  /**
   * Document service.
   * @module api/DocumentApi
   * @version 1.3.0
   */

  /**
   * Constructs a new DocumentApi. 
   * @alias module:api/DocumentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDocumentUsingPost operation.
     * @callback module:api/DocumentApi~createDocumentUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Document
     * @param {module:model/DocumentParams} documentParams Enables a user to store a Document hash on the blockchain
     * @param {module:api/DocumentApi~createDocumentUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionSuccessResponse}
     */
    this.createDocumentUsingPost = function(documentParams, callback) {
      var postBody = documentParams;

      // verify the required parameter 'documentParams' is set
      if (documentParams === undefined || documentParams === null) {
        throw new Error("Missing the required parameter 'documentParams' when calling createDocumentUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionSuccessResponse;

      return this.apiClient.callApi(
        '/document', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentUsingGet operation.
     * @callback module:api/DocumentApi~getDocumentUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Document
     * @param {String} documentId Document ID
     * @param {module:api/DocumentApi~getDocumentUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    this.getDocumentUsingGet = function(documentId, callback) {
      var postBody = null;

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentUsingGet");
      }


      var pathParams = {
        'document_id': documentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DocumentResponse;

      return this.apiClient.callApi(
        '/document/{document_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyDocumentUsingPost operation.
     * @callback module:api/DocumentApi~verifyDocumentUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentVerifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify a Document
     * @param {module:model/DocumentParams} documentParams Enables a user to verify a Document has not been changed
     * @param {module:api/DocumentApi~verifyDocumentUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentVerifyResponse}
     */
    this.verifyDocumentUsingPost = function(documentParams, callback) {
      var postBody = documentParams;

      // verify the required parameter 'documentParams' is set
      if (documentParams === undefined || documentParams === null) {
        throw new Error("Missing the required parameter 'documentParams' when calling verifyDocumentUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DocumentVerifyResponse;

      return this.apiClient.callApi(
        '/document/verify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
