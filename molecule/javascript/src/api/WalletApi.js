/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/PageWalletResponse', 'model/WalletParams', 'model/WalletResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/PageWalletResponse'), require('../model/WalletParams'), require('../model/WalletResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MoleculeApiDocumentation) {
      root.MoleculeApiDocumentation = {};
    }
    root.MoleculeApiDocumentation.WalletApi = factory(root.MoleculeApiDocumentation.ApiClient, root.MoleculeApiDocumentation.ErrorResponse, root.MoleculeApiDocumentation.PageWalletResponse, root.MoleculeApiDocumentation.WalletParams, root.MoleculeApiDocumentation.WalletResponse);
  }
}(this, function(ApiClient, ErrorResponse, PageWalletResponse, WalletParams, WalletResponse) {
  'use strict';

  /**
   * Wallet service.
   * @module api/WalletApi
   * @version 1.3.0
   */

  /**
   * Constructs a new WalletApi. 
   * @alias module:api/WalletApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createWalletUsingPost operation.
     * @callback module:api/WalletApi~createWalletUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Wallet
     * @param {module:model/WalletParams} walletParams It enables a user to create a Wallet
     * @param {module:api/WalletApi~createWalletUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletResponse}
     */
    this.createWalletUsingPost = function(walletParams, callback) {
      var postBody = walletParams;

      // verify the required parameter 'walletParams' is set
      if (walletParams === undefined || walletParams === null) {
        throw new Error("Missing the required parameter 'walletParams' when calling createWalletUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WalletResponse;

      return this.apiClient.callApi(
        '/wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWalletAllUsingGet operation.
     * @callback module:api/WalletApi~getWalletAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageWalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Wallet list
     * @param {Object} opts Optional parameters
     * @param {String} opts.nucleusClientId To filter response wallet list by client's ID
     * @param {Boolean} opts.isPrimary To filter response for primary wallets
     * @param {Number} opts.page To filter response wallet list by page number
     * @param {Number} opts.size Number of records per page
     * @param {String} opts.orderBy Field to sort record list
     * @param {Boolean} opts.ascending Sorting order
     * @param {Boolean} opts.getLatest To fetch latest (one) record
     * @param {module:api/WalletApi~getWalletAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageWalletResponse}
     */
    this.getWalletAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'nucleus_client_id': opts['nucleusClientId'],
        'is_primary': opts['isPrimary'],
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'get_latest': opts['getLatest'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageWalletResponse;

      return this.apiClient.callApi(
        '/wallet', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWalletByWalletKeyUsingGet operation.
     * @callback module:api/WalletApi~getWalletByWalletKeyUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Wallet details by Wallet Key ID
     * @param {String} walletKeyId Wallet Key ID
     * @param {module:api/WalletApi~getWalletByWalletKeyUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletResponse}
     */
    this.getWalletByWalletKeyUsingGet = function(walletKeyId, callback) {
      var postBody = null;

      // verify the required parameter 'walletKeyId' is set
      if (walletKeyId === undefined || walletKeyId === null) {
        throw new Error("Missing the required parameter 'walletKeyId' when calling getWalletByWalletKeyUsingGet");
      }


      var pathParams = {
        'wallet_key_id': walletKeyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WalletResponse;

      return this.apiClient.callApi(
        '/wallet/wallet_key/{wallet_key_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWalletUsingGet operation.
     * @callback module:api/WalletApi~getWalletUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Wallet details
     * @param {String} walletId Wallet ID
     * @param {module:api/WalletApi~getWalletUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletResponse}
     */
    this.getWalletUsingGet = function(walletId, callback) {
      var postBody = null;

      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletUsingGet");
      }


      var pathParams = {
        'wallet_id': walletId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WalletResponse;

      return this.apiClient.callApi(
        '/wallet/{wallet_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWalletUsingPut operation.
     * @callback module:api/WalletApi~updateWalletUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Wallet details
     * @param {String} walletId Wallet ID
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletParams} opts.walletUpdateParams Wallet details to be updated
     * @param {module:api/WalletApi~updateWalletUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletResponse}
     */
    this.updateWalletUsingPut = function(walletId, opts, callback) {
      opts = opts || {};
      var postBody = opts['walletUpdateParams'];

      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling updateWalletUsingPut");
      }


      var pathParams = {
        'wallet_id': walletId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WalletResponse;

      return this.apiClient.callApi(
        '/wallet/{wallet_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
