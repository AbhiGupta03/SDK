/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CrowdsaleDeployParams', 'model/CrowdsaleFundParams', 'model/CrowdsalePurchaseParams', 'model/CurrencyBalanceResponse', 'model/CurrencyBalanceUpdateParams', 'model/CurrencyParams', 'model/CurrencyResponse', 'model/CurrencyTransferParams', 'model/CurrencyTransferResponse', 'model/CurrencyUpdateParams', 'model/Document', 'model/DocumentParams', 'model/DocumentResponse', 'model/DocumentVerifyResponse', 'model/ErrorResponse', 'model/EscrowDepositParams', 'model/EscrowParams', 'model/EscrowResponse', 'model/EscrowTransactionResponse', 'model/PageCurrencyBalanceResponse', 'model/PageCurrencyResponse', 'model/PageCurrencyTransferResponse', 'model/PageEscrowResponse', 'model/PageEscrowTransactionResponse', 'model/PageTokenBalanceResponse', 'model/PageTokenResponse', 'model/PageTokenSupplyResponse', 'model/PageTokenTransferResponse', 'model/PageTransactionSuccessResponse', 'model/PageWalletKeyResponse', 'model/PageWalletPermissionResponse', 'model/PageWalletResponse', 'model/PageWebhookResponse', 'model/Sort', 'model/TokenBalanceResponse', 'model/TokenBurnParams', 'model/TokenDeployParams', 'model/TokenMintParams', 'model/TokenParams', 'model/TokenParamsOfferingSettings', 'model/TokenResponse', 'model/TokenResponseOfferingSettings', 'model/TokenSupplyResponse', 'model/TokenTransferParams', 'model/TokenTransferResponse', 'model/TokenUpdateParams', 'model/TokenWhitelistParams', 'model/TokenWhitelists', 'model/TransactionSuccessResponse', 'model/WalletClients', 'model/WalletClientsPermission', 'model/WalletKeyGenerateParams', 'model/WalletKeyParams', 'model/WalletKeyResponse', 'model/WalletParams', 'model/WalletPermissionResponse', 'model/WalletPermissionUpdateParams', 'model/WalletResponse', 'model/WebhookParams', 'model/WebhookResponse', 'api/CurrencyApi', 'api/CurrencyBalanceApi', 'api/CurrencyTransferApi', 'api/DocumentApi', 'api/EscrowApi', 'api/EscrowTransactionApi', 'api/TokenApi', 'api/TokenBalanceApi', 'api/TokenCrowdsaleApi', 'api/TokenSupplyApi', 'api/TokenTransferApi', 'api/TransactionStatusApi', 'api/WalletApi', 'api/WalletKeyApi', 'api/WalletPermissionApi', 'api/WebhookApi', 'api/AuthApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/CrowdsaleDeployParams'), require('./model/CrowdsaleFundParams'), require('./model/CrowdsalePurchaseParams'), require('./model/CurrencyBalanceResponse'), require('./model/CurrencyBalanceUpdateParams'), require('./model/CurrencyParams'), require('./model/CurrencyResponse'), require('./model/CurrencyTransferParams'), require('./model/CurrencyTransferResponse'), require('./model/CurrencyUpdateParams'), require('./model/Document'), require('./model/DocumentParams'), require('./model/DocumentResponse'), require('./model/DocumentVerifyResponse'), require('./model/ErrorResponse'), require('./model/EscrowDepositParams'), require('./model/EscrowParams'), require('./model/EscrowResponse'), require('./model/EscrowTransactionResponse'), require('./model/PageCurrencyBalanceResponse'), require('./model/PageCurrencyResponse'), require('./model/PageCurrencyTransferResponse'), require('./model/PageEscrowResponse'), require('./model/PageEscrowTransactionResponse'), require('./model/PageTokenBalanceResponse'), require('./model/PageTokenResponse'), require('./model/PageTokenSupplyResponse'), require('./model/PageTokenTransferResponse'), require('./model/PageTransactionSuccessResponse'), require('./model/PageWalletKeyResponse'), require('./model/PageWalletPermissionResponse'), require('./model/PageWalletResponse'), require('./model/PageWebhookResponse'), require('./model/Sort'), require('./model/TokenBalanceResponse'), require('./model/TokenBurnParams'), require('./model/TokenDeployParams'), require('./model/TokenMintParams'), require('./model/TokenParams'), require('./model/TokenParamsOfferingSettings'), require('./model/TokenResponse'), require('./model/TokenResponseOfferingSettings'), require('./model/TokenSupplyResponse'), require('./model/TokenTransferParams'), require('./model/TokenTransferResponse'), require('./model/TokenUpdateParams'), require('./model/TokenWhitelistParams'), require('./model/TokenWhitelists'), require('./model/TransactionSuccessResponse'), require('./model/WalletClients'), require('./model/WalletClientsPermission'), require('./model/WalletKeyGenerateParams'), require('./model/WalletKeyParams'), require('./model/WalletKeyResponse'), require('./model/WalletParams'), require('./model/WalletPermissionResponse'), require('./model/WalletPermissionUpdateParams'), require('./model/WalletResponse'), require('./model/WebhookParams'), require('./model/WebhookResponse'), require('./api/CurrencyApi'), require('./api/CurrencyBalanceApi'), require('./api/CurrencyTransferApi'), require('./api/DocumentApi'), require('./api/EscrowApi'), require('./api/EscrowTransactionApi'), require('./api/TokenApi'), require('./api/TokenBalanceApi'), require('./api/TokenCrowdsaleApi'), require('./api/TokenSupplyApi'), require('./api/TokenTransferApi'), require('./api/TransactionStatusApi'), require('./api/WalletApi'), require('./api/WalletKeyApi'), require('./api/WalletPermissionApi'), require('./api/WebhookApi'), require('./api/AuthApi'));
  }
}(function(ApiClient, CrowdsaleDeployParams, CrowdsaleFundParams, CrowdsalePurchaseParams, CurrencyBalanceResponse, CurrencyBalanceUpdateParams, CurrencyParams, CurrencyResponse, CurrencyTransferParams, CurrencyTransferResponse, CurrencyUpdateParams, Document, DocumentParams, DocumentResponse, DocumentVerifyResponse, ErrorResponse, EscrowDepositParams, EscrowParams, EscrowResponse, EscrowTransactionResponse, PageCurrencyBalanceResponse, PageCurrencyResponse, PageCurrencyTransferResponse, PageEscrowResponse, PageEscrowTransactionResponse, PageTokenBalanceResponse, PageTokenResponse, PageTokenSupplyResponse, PageTokenTransferResponse, PageTransactionSuccessResponse, PageWalletKeyResponse, PageWalletPermissionResponse, PageWalletResponse, PageWebhookResponse, Sort, TokenBalanceResponse, TokenBurnParams, TokenDeployParams, TokenMintParams, TokenParams, TokenParamsOfferingSettings, TokenResponse, TokenResponseOfferingSettings, TokenSupplyResponse, TokenTransferParams, TokenTransferResponse, TokenUpdateParams, TokenWhitelistParams, TokenWhitelists, TransactionSuccessResponse, WalletClients, WalletClientsPermission, WalletKeyGenerateParams, WalletKeyParams, WalletKeyResponse, WalletParams, WalletPermissionResponse, WalletPermissionUpdateParams, WalletResponse, WebhookParams, WebhookResponse, CurrencyApi, CurrencyBalanceApi, CurrencyTransferApi, DocumentApi, EscrowApi, EscrowTransactionApi, TokenApi, TokenBalanceApi, TokenCrowdsaleApi, TokenSupplyApi, TokenTransferApi, TransactionStatusApi, WalletApi, WalletKeyApi, WalletPermissionApi, WebhookApi, AuthApi) {
  'use strict';

  /**
   * The_Hydrogen_Molecule_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var MoleculeApiDocumentation = require('index'); // See note below*.
   * var xxxSvc = new MoleculeApiDocumentation.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new MoleculeApiDocumentation.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new MoleculeApiDocumentation.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new MoleculeApiDocumentation.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.3.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The CrowdsaleDeployParams model constructor.
     * @property {module:model/CrowdsaleDeployParams}
     */
    CrowdsaleDeployParams: CrowdsaleDeployParams,
    /**
     * The CrowdsaleFundParams model constructor.
     * @property {module:model/CrowdsaleFundParams}
     */
    CrowdsaleFundParams: CrowdsaleFundParams,
    /**
     * The CrowdsalePurchaseParams model constructor.
     * @property {module:model/CrowdsalePurchaseParams}
     */
    CrowdsalePurchaseParams: CrowdsalePurchaseParams,
    /**
     * The CurrencyBalanceResponse model constructor.
     * @property {module:model/CurrencyBalanceResponse}
     */
    CurrencyBalanceResponse: CurrencyBalanceResponse,
    /**
     * The CurrencyBalanceUpdateParams model constructor.
     * @property {module:model/CurrencyBalanceUpdateParams}
     */
    CurrencyBalanceUpdateParams: CurrencyBalanceUpdateParams,
    /**
     * The CurrencyParams model constructor.
     * @property {module:model/CurrencyParams}
     */
    CurrencyParams: CurrencyParams,
    /**
     * The CurrencyResponse model constructor.
     * @property {module:model/CurrencyResponse}
     */
    CurrencyResponse: CurrencyResponse,
    /**
     * The CurrencyTransferParams model constructor.
     * @property {module:model/CurrencyTransferParams}
     */
    CurrencyTransferParams: CurrencyTransferParams,
    /**
     * The CurrencyTransferResponse model constructor.
     * @property {module:model/CurrencyTransferResponse}
     */
    CurrencyTransferResponse: CurrencyTransferResponse,
    /**
     * The CurrencyUpdateParams model constructor.
     * @property {module:model/CurrencyUpdateParams}
     */
    CurrencyUpdateParams: CurrencyUpdateParams,
    /**
     * The Document model constructor.
     * @property {module:model/Document}
     */
    Document: Document,
    /**
     * The DocumentParams model constructor.
     * @property {module:model/DocumentParams}
     */
    DocumentParams: DocumentParams,
    /**
     * The DocumentResponse model constructor.
     * @property {module:model/DocumentResponse}
     */
    DocumentResponse: DocumentResponse,
    /**
     * The DocumentVerifyResponse model constructor.
     * @property {module:model/DocumentVerifyResponse}
     */
    DocumentVerifyResponse: DocumentVerifyResponse,
    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The EscrowDepositParams model constructor.
     * @property {module:model/EscrowDepositParams}
     */
    EscrowDepositParams: EscrowDepositParams,
    /**
     * The EscrowParams model constructor.
     * @property {module:model/EscrowParams}
     */
    EscrowParams: EscrowParams,
    /**
     * The EscrowResponse model constructor.
     * @property {module:model/EscrowResponse}
     */
    EscrowResponse: EscrowResponse,
    /**
     * The EscrowTransactionResponse model constructor.
     * @property {module:model/EscrowTransactionResponse}
     */
    EscrowTransactionResponse: EscrowTransactionResponse,
    /**
     * The PageCurrencyBalanceResponse model constructor.
     * @property {module:model/PageCurrencyBalanceResponse}
     */
    PageCurrencyBalanceResponse: PageCurrencyBalanceResponse,
    /**
     * The PageCurrencyResponse model constructor.
     * @property {module:model/PageCurrencyResponse}
     */
    PageCurrencyResponse: PageCurrencyResponse,
    /**
     * The PageCurrencyTransferResponse model constructor.
     * @property {module:model/PageCurrencyTransferResponse}
     */
    PageCurrencyTransferResponse: PageCurrencyTransferResponse,
    /**
     * The PageEscrowResponse model constructor.
     * @property {module:model/PageEscrowResponse}
     */
    PageEscrowResponse: PageEscrowResponse,
    /**
     * The PageEscrowTransactionResponse model constructor.
     * @property {module:model/PageEscrowTransactionResponse}
     */
    PageEscrowTransactionResponse: PageEscrowTransactionResponse,
    /**
     * The PageTokenBalanceResponse model constructor.
     * @property {module:model/PageTokenBalanceResponse}
     */
    PageTokenBalanceResponse: PageTokenBalanceResponse,
    /**
     * The PageTokenResponse model constructor.
     * @property {module:model/PageTokenResponse}
     */
    PageTokenResponse: PageTokenResponse,
    /**
     * The PageTokenSupplyResponse model constructor.
     * @property {module:model/PageTokenSupplyResponse}
     */
    PageTokenSupplyResponse: PageTokenSupplyResponse,
    /**
     * The PageTokenTransferResponse model constructor.
     * @property {module:model/PageTokenTransferResponse}
     */
    PageTokenTransferResponse: PageTokenTransferResponse,
    /**
     * The PageTransactionSuccessResponse model constructor.
     * @property {module:model/PageTransactionSuccessResponse}
     */
    PageTransactionSuccessResponse: PageTransactionSuccessResponse,
    /**
     * The PageWalletKeyResponse model constructor.
     * @property {module:model/PageWalletKeyResponse}
     */
    PageWalletKeyResponse: PageWalletKeyResponse,
    /**
     * The PageWalletPermissionResponse model constructor.
     * @property {module:model/PageWalletPermissionResponse}
     */
    PageWalletPermissionResponse: PageWalletPermissionResponse,
    /**
     * The PageWalletResponse model constructor.
     * @property {module:model/PageWalletResponse}
     */
    PageWalletResponse: PageWalletResponse,
    /**
     * The PageWebhookResponse model constructor.
     * @property {module:model/PageWebhookResponse}
     */
    PageWebhookResponse: PageWebhookResponse,
    /**
     * The Sort model constructor.
     * @property {module:model/Sort}
     */
    Sort: Sort,
    /**
     * The TokenBalanceResponse model constructor.
     * @property {module:model/TokenBalanceResponse}
     */
    TokenBalanceResponse: TokenBalanceResponse,
    /**
     * The TokenBurnParams model constructor.
     * @property {module:model/TokenBurnParams}
     */
    TokenBurnParams: TokenBurnParams,
    /**
     * The TokenDeployParams model constructor.
     * @property {module:model/TokenDeployParams}
     */
    TokenDeployParams: TokenDeployParams,
    /**
     * The TokenMintParams model constructor.
     * @property {module:model/TokenMintParams}
     */
    TokenMintParams: TokenMintParams,
    /**
     * The TokenParams model constructor.
     * @property {module:model/TokenParams}
     */
    TokenParams: TokenParams,
    /**
     * The TokenParamsOfferingSettings model constructor.
     * @property {module:model/TokenParamsOfferingSettings}
     */
    TokenParamsOfferingSettings: TokenParamsOfferingSettings,
    /**
     * The TokenResponse model constructor.
     * @property {module:model/TokenResponse}
     */
    TokenResponse: TokenResponse,
    /**
     * The TokenResponseOfferingSettings model constructor.
     * @property {module:model/TokenResponseOfferingSettings}
     */
    TokenResponseOfferingSettings: TokenResponseOfferingSettings,
    /**
     * The TokenSupplyResponse model constructor.
     * @property {module:model/TokenSupplyResponse}
     */
    TokenSupplyResponse: TokenSupplyResponse,
    /**
     * The TokenTransferParams model constructor.
     * @property {module:model/TokenTransferParams}
     */
    TokenTransferParams: TokenTransferParams,
    /**
     * The TokenTransferResponse model constructor.
     * @property {module:model/TokenTransferResponse}
     */
    TokenTransferResponse: TokenTransferResponse,
    /**
     * The TokenUpdateParams model constructor.
     * @property {module:model/TokenUpdateParams}
     */
    TokenUpdateParams: TokenUpdateParams,
    /**
     * The TokenWhitelistParams model constructor.
     * @property {module:model/TokenWhitelistParams}
     */
    TokenWhitelistParams: TokenWhitelistParams,
    /**
     * The TokenWhitelists model constructor.
     * @property {module:model/TokenWhitelists}
     */
    TokenWhitelists: TokenWhitelists,
    /**
     * The TransactionSuccessResponse model constructor.
     * @property {module:model/TransactionSuccessResponse}
     */
    TransactionSuccessResponse: TransactionSuccessResponse,
    /**
     * The WalletClients model constructor.
     * @property {module:model/WalletClients}
     */
    WalletClients: WalletClients,
    /**
     * The WalletClientsPermission model constructor.
     * @property {module:model/WalletClientsPermission}
     */
    WalletClientsPermission: WalletClientsPermission,
    /**
     * The WalletKeyGenerateParams model constructor.
     * @property {module:model/WalletKeyGenerateParams}
     */
    WalletKeyGenerateParams: WalletKeyGenerateParams,
    /**
     * The WalletKeyParams model constructor.
     * @property {module:model/WalletKeyParams}
     */
    WalletKeyParams: WalletKeyParams,
    /**
     * The WalletKeyResponse model constructor.
     * @property {module:model/WalletKeyResponse}
     */
    WalletKeyResponse: WalletKeyResponse,
    /**
     * The WalletParams model constructor.
     * @property {module:model/WalletParams}
     */
    WalletParams: WalletParams,
    /**
     * The WalletPermissionResponse model constructor.
     * @property {module:model/WalletPermissionResponse}
     */
    WalletPermissionResponse: WalletPermissionResponse,
    /**
     * The WalletPermissionUpdateParams model constructor.
     * @property {module:model/WalletPermissionUpdateParams}
     */
    WalletPermissionUpdateParams: WalletPermissionUpdateParams,
    /**
     * The WalletResponse model constructor.
     * @property {module:model/WalletResponse}
     */
    WalletResponse: WalletResponse,
    /**
     * The WebhookParams model constructor.
     * @property {module:model/WebhookParams}
     */
    WebhookParams: WebhookParams,
    /**
     * The WebhookResponse model constructor.
     * @property {module:model/WebhookResponse}
     */
    WebhookResponse: WebhookResponse,
    /**
     * The CurrencyApi service constructor.
     * @property {module:api/CurrencyApi}
     */
    CurrencyApi: CurrencyApi,
    /**
     * The CurrencyBalanceApi service constructor.
     * @property {module:api/CurrencyBalanceApi}
     */
    CurrencyBalanceApi: CurrencyBalanceApi,
    /**
     * The CurrencyTransferApi service constructor.
     * @property {module:api/CurrencyTransferApi}
     */
    CurrencyTransferApi: CurrencyTransferApi,
    /**
     * The DocumentApi service constructor.
     * @property {module:api/DocumentApi}
     */
    DocumentApi: DocumentApi,
    /**
     * The EscrowApi service constructor.
     * @property {module:api/EscrowApi}
     */
    EscrowApi: EscrowApi,
    /**
     * The EscrowTransactionApi service constructor.
     * @property {module:api/EscrowTransactionApi}
     */
    EscrowTransactionApi: EscrowTransactionApi,
    /**
     * The TokenApi service constructor.
     * @property {module:api/TokenApi}
     */
    TokenApi: TokenApi,
    /**
     * The TokenBalanceApi service constructor.
     * @property {module:api/TokenBalanceApi}
     */
    TokenBalanceApi: TokenBalanceApi,
    /**
     * The TokenCrowdsaleApi service constructor.
     * @property {module:api/TokenCrowdsaleApi}
     */
    TokenCrowdsaleApi: TokenCrowdsaleApi,
    /**
     * The TokenSupplyApi service constructor.
     * @property {module:api/TokenSupplyApi}
     */
    TokenSupplyApi: TokenSupplyApi,
    /**
     * The TokenTransferApi service constructor.
     * @property {module:api/TokenTransferApi}
     */
    TokenTransferApi: TokenTransferApi,
    /**
     * The TransactionStatusApi service constructor.
     * @property {module:api/TransactionStatusApi}
     */
    TransactionStatusApi: TransactionStatusApi,
    /**
     * The WalletApi service constructor.
     * @property {module:api/WalletApi}
     */
    WalletApi: WalletApi,
    /**
     * The WalletKeyApi service constructor.
     * @property {module:api/WalletKeyApi}
     */
    WalletKeyApi: WalletKeyApi,
    /**
     * The WalletPermissionApi service constructor.
     * @property {module:api/WalletPermissionApi}
     */
    WalletPermissionApi: WalletPermissionApi,
    /**
     * The WebhookApi service constructor.
     * @property {module:api/WebhookApi}
     */
    WebhookApi: WebhookApi,
    AuthApi: AuthApi
  };

  return exports;
}));
