/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MoleculeApiDocumentation);
  }
}(this, function(expect, MoleculeApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MoleculeApiDocumentation.DocumentApi();
  });

  describe('(package)', function() {
    describe('DocumentApi', function() {
      describe('createDocumentUsingPost', function() {
        it('should call createDocumentUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createDocumentUsingPost call and complete the assertions
          /*
          var documentParams = new MoleculeApiDocumentation.DocumentParams();
          documentParams.documentId = """00000000-0000-0000-0000-000000000000";
          documentParams.walletId = """00000000-0000-0000-0000-000000000000";

          instance.createDocumentUsingPost(documentParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TransactionSuccessResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDocumentUsingGet', function() {
        it('should call getDocumentUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getDocumentUsingGet call and complete the assertions
          /*
          var documentId = "documentId_example";

          instance.getDocumentUsingGet(documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.DocumentResponse);
            {
              let dataCtr = data.documents;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MoleculeApiDocumentation.Document);
                expect(data.electronDocumentId).to.be.a('string');
                expect(data.electronDocumentId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0.0);
                expect(data.docFileHash).to.be.a('string');
                expect(data.docFileHash).to.be("");
                expect(data.walletId).to.be.a('string');
                expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('verifyDocumentUsingPost', function() {
        it('should call verifyDocumentUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for verifyDocumentUsingPost call and complete the assertions
          /*
          var documentParams = new MoleculeApiDocumentation.DocumentParams();
          documentParams.documentId = """00000000-0000-0000-0000-000000000000";
          documentParams.walletId = """00000000-0000-0000-0000-000000000000";

          instance.verifyDocumentUsingPost(documentParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.DocumentVerifyResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.docFileHash).to.be.a('string');
            expect(data.docFileHash).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
