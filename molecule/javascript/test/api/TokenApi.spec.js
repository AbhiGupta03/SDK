/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MoleculeApiDocumentation);
  }
}(this, function(expect, MoleculeApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MoleculeApiDocumentation.TokenApi();
  });

  describe('(package)', function() {
    describe('TokenApi', function() {
      describe('burnTokenUsingPost', function() {
        it('should call burnTokenUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for burnTokenUsingPost call and complete the assertions
          /*
          var tokenBurnParams = new MoleculeApiDocumentation.TokenBurnParams();
          tokenBurnParams.tokenId = """00000000-0000-0000-0000-000000000000";
          tokenBurnParams.amount = 0.0;

          instance.burnTokenUsingPost(tokenBurnParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TransactionSuccessResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTokenUsingPost', function() {
        it('should call createTokenUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createTokenUsingPost call and complete the assertions
          /*
          var tokenParams = new MoleculeApiDocumentation.TokenParams();
          tokenParams.name = "";
          tokenParams.symbol = "";
          tokenParams.nucleusModelId = """00000000-0000-0000-0000-000000000000";
          tokenParams.ownerWalletId = """00000000-0000-0000-0000-000000000000";
          tokenParams.isMintable = false;
          tokenParams.isBurnable = false;
          tokenParams.whitelistAddress = "";
          tokenParams.contractAddress = "";
          tokenParams.crowdsaleAddress = "";
          tokenParams.isActive = false;
          tokenParams.secondaryId = "";
          tokenParams.recordStatus = "";
          tokenParams.offeringSettings = new MoleculeApiDocumentation.TokenParamsOfferingSettings();
          tokenParams.offeringSettings.startDate = new Date();
          tokenParams.offeringSettings.endDate = new Date();
          tokenParams.offeringSettings.rate = "";
          tokenParams.metadata = ;
          tokenParams.restrictions = ;

          instance.createTokenUsingPost(tokenParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TokenResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.nucleusModelId).to.be.a('string');
            expect(data.nucleusModelId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.ownerWalletId).to.be.a('string');
            expect(data.ownerWalletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.isMintable).to.be.a('boolean');
            expect(data.isMintable).to.be(false);
            expect(data.isBurnable).to.be.a('boolean');
            expect(data.isBurnable).to.be(false);
            expect(data.whitelistAddress).to.be.a('string');
            expect(data.whitelistAddress).to.be("");
            expect(data.contractAddress).to.be.a('string');
            expect(data.contractAddress).to.be("");
            expect(data.crowdsaleAddress).to.be.a('string');
            expect(data.crowdsaleAddress).to.be("");
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("");
            expect(data.recordStatus).to.be.a('string');
            expect(data.recordStatus).to.be("");
            expect(data.offeringSettings).to.be.a(MoleculeApiDocumentation.TokenResponseOfferingSettings);
                  expect(data.offeringSettings.startDate).to.be.a(Date);
              expect(data.offeringSettings.startDate).to.be(new Date());
              expect(data.offeringSettings.endDate).to.be.a(Date);
              expect(data.offeringSettings.endDate).to.be(new Date());
              expect(data.offeringSettings.rate).to.be.a('string');
              expect(data.offeringSettings.rate).to.be("");
            expect(data.metadata).to.be.a(Object);
            expect(data.metadata).to.be();
            expect(data.restrictions).to.be.a(Object);
            expect(data.restrictions).to.be();
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTokenUsingDelete', function() {
        it('should call deleteTokenUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTokenUsingDelete call
          /*
          var tokenId = "tokenId_example";

          instance.deleteTokenUsingDelete(tokenId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deployTokenUsingPost', function() {
        it('should call deployTokenUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for deployTokenUsingPost call and complete the assertions
          /*
          var tokenDeployParams = new MoleculeApiDocumentation.TokenDeployParams();
          tokenDeployParams.tokenId = """00000000-0000-0000-0000-000000000000";

          instance.deployTokenUsingPost(tokenDeployParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TransactionSuccessResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokenAllUsingGet', function() {
        it('should call getTokenAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokenAllUsingGet call and complete the assertions
          /*
          var opts = {};
          opts.page = 56;
          opts.size = 56;
          opts.orderBy = "orderBy_example";
          opts.ascending = true;
          opts.getLatest = true;

          instance.getTokenAllUsingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.PageTokenResponse);
            {
              let dataCtr = data.content;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MoleculeApiDocumentation.TokenResponse);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.symbol).to.be.a('string');
                expect(data.symbol).to.be("");
                expect(data.nucleusModelId).to.be.a('string');
                expect(data.nucleusModelId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.ownerWalletId).to.be.a('string');
                expect(data.ownerWalletId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.isMintable).to.be.a('boolean');
                expect(data.isMintable).to.be(false);
                expect(data.isBurnable).to.be.a('boolean');
                expect(data.isBurnable).to.be(false);
                expect(data.whitelistAddress).to.be.a('string');
                expect(data.whitelistAddress).to.be("");
                expect(data.contractAddress).to.be.a('string');
                expect(data.contractAddress).to.be("");
                expect(data.crowdsaleAddress).to.be.a('string');
                expect(data.crowdsaleAddress).to.be("");
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(false);
                expect(data.secondaryId).to.be.a('string');
                expect(data.secondaryId).to.be("");
                expect(data.recordStatus).to.be.a('string');
                expect(data.recordStatus).to.be("");
                expect(data.offeringSettings).to.be.a(MoleculeApiDocumentation.TokenResponseOfferingSettings);
                      expect(data.offeringSettings.startDate).to.be.a(Date);
                  expect(data.offeringSettings.startDate).to.be(new Date());
                  expect(data.offeringSettings.endDate).to.be.a(Date);
                  expect(data.offeringSettings.endDate).to.be(new Date());
                  expect(data.offeringSettings.rate).to.be.a('string');
                  expect(data.offeringSettings.rate).to.be("");
                expect(data.metadata).to.be.a(Object);
                expect(data.metadata).to.be();
                expect(data.restrictions).to.be.a(Object);
                expect(data.restrictions).to.be();
                expect(data.createDate).to.be.a(Date);
                expect(data.createDate).to.be(new Date());
                expect(data.updateDate).to.be.a(Date);
                expect(data.updateDate).to.be(new Date());

                      }
            }
            expect(data.first).to.be.a('boolean');
            expect(data.first).to.be(false);
            expect(data.last).to.be.a('boolean');
            expect(data.last).to.be(false);
            expect(data._number).to.be.a('number');
            expect(data._number).to.be(0);
            expect(data.numberOfElements).to.be.a('number');
            expect(data.numberOfElements).to.be(0);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            {
              let dataCtr = data.sort;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MoleculeApiDocumentation.Sort);
                expect(data.ascending).to.be.a('boolean');
                expect(data.ascending).to.be(true);
                expect(data.descending).to.be.a('boolean');
                expect(data.descending).to.be(false);
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("DESC");
                expect(data.ignoreCase).to.be.a('boolean');
                expect(data.ignoreCase).to.be(false);
                expect(data.nullHandling).to.be.a('string');
                expect(data.nullHandling).to.be("NATIVE");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("updateDate");

                      }
            }
            expect(data.totalElements).to.be.a('number');
            expect(data.totalElements).to.be("0");
            expect(data.totalPages).to.be.a('number');
            expect(data.totalPages).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokenUsingGet', function() {
        it('should call getTokenUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokenUsingGet call and complete the assertions
          /*
          var tokenId = "tokenId_example";

          instance.getTokenUsingGet(tokenId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TokenResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.nucleusModelId).to.be.a('string');
            expect(data.nucleusModelId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.ownerWalletId).to.be.a('string');
            expect(data.ownerWalletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.isMintable).to.be.a('boolean');
            expect(data.isMintable).to.be(false);
            expect(data.isBurnable).to.be.a('boolean');
            expect(data.isBurnable).to.be(false);
            expect(data.whitelistAddress).to.be.a('string');
            expect(data.whitelistAddress).to.be("");
            expect(data.contractAddress).to.be.a('string');
            expect(data.contractAddress).to.be("");
            expect(data.crowdsaleAddress).to.be.a('string');
            expect(data.crowdsaleAddress).to.be("");
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("");
            expect(data.recordStatus).to.be.a('string');
            expect(data.recordStatus).to.be("");
            expect(data.offeringSettings).to.be.a(MoleculeApiDocumentation.TokenResponseOfferingSettings);
                  expect(data.offeringSettings.startDate).to.be.a(Date);
              expect(data.offeringSettings.startDate).to.be(new Date());
              expect(data.offeringSettings.endDate).to.be.a(Date);
              expect(data.offeringSettings.endDate).to.be(new Date());
              expect(data.offeringSettings.rate).to.be.a('string');
              expect(data.offeringSettings.rate).to.be("");
            expect(data.metadata).to.be.a(Object);
            expect(data.metadata).to.be();
            expect(data.restrictions).to.be.a(Object);
            expect(data.restrictions).to.be();
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mintTokenUsingPost', function() {
        it('should call mintTokenUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for mintTokenUsingPost call and complete the assertions
          /*
          var tokenMintParams = new MoleculeApiDocumentation.TokenMintParams();
          tokenMintParams.receiverWalletId = """00000000-0000-0000-0000-000000000000";
          tokenMintParams.tokenId = """00000000-0000-0000-0000-000000000000";
          tokenMintParams.amount = 0.0;

          instance.mintTokenUsingPost(tokenMintParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TransactionSuccessResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTokenUsingPut', function() {
        it('should call updateTokenUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTokenUsingPut call and complete the assertions
          /*
          var tokenId = "tokenId_example";
          var opts = {};
          opts.tokenUpdateParams = new MoleculeApiDocumentation.TokenUpdateParams();
          opts.tokenUpdateParams.name = "";
          opts.tokenUpdateParams.symbol = "";
          opts.tokenUpdateParams.nucleusModelId = """00000000-0000-0000-0000-000000000000";
          opts.tokenUpdateParams.ownerWalletId = """00000000-0000-0000-0000-000000000000";
          opts.tokenUpdateParams.isMintable = false;
          opts.tokenUpdateParams.isBurnable = false;
          opts.tokenUpdateParams.whitelistAddress = "";
          opts.tokenUpdateParams.contractAddress = "";
          opts.tokenUpdateParams.crowdsaleAddress = "";
          opts.tokenUpdateParams.isActive = false;
          opts.tokenUpdateParams.secondaryId = "";
          opts.tokenUpdateParams.recordStatus = "";
          opts.tokenUpdateParams.offeringSettings = new MoleculeApiDocumentation.TokenParamsOfferingSettings();
          opts.tokenUpdateParams.offeringSettings.startDate = new Date();
          opts.tokenUpdateParams.offeringSettings.endDate = new Date();
          opts.tokenUpdateParams.offeringSettings.rate = "";
          opts.tokenUpdateParams.metadata = ;
          opts.tokenUpdateParams.restrictions = ;

          instance.updateTokenUsingPut(tokenId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TokenResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.nucleusModelId).to.be.a('string');
            expect(data.nucleusModelId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.ownerWalletId).to.be.a('string');
            expect(data.ownerWalletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.isMintable).to.be.a('boolean');
            expect(data.isMintable).to.be(false);
            expect(data.isBurnable).to.be.a('boolean');
            expect(data.isBurnable).to.be(false);
            expect(data.whitelistAddress).to.be.a('string');
            expect(data.whitelistAddress).to.be("");
            expect(data.contractAddress).to.be.a('string');
            expect(data.contractAddress).to.be("");
            expect(data.crowdsaleAddress).to.be.a('string');
            expect(data.crowdsaleAddress).to.be("");
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("");
            expect(data.recordStatus).to.be.a('string');
            expect(data.recordStatus).to.be("");
            expect(data.offeringSettings).to.be.a(MoleculeApiDocumentation.TokenResponseOfferingSettings);
                  expect(data.offeringSettings.startDate).to.be.a(Date);
              expect(data.offeringSettings.startDate).to.be(new Date());
              expect(data.offeringSettings.endDate).to.be.a(Date);
              expect(data.offeringSettings.endDate).to.be(new Date());
              expect(data.offeringSettings.rate).to.be.a('string');
              expect(data.offeringSettings.rate).to.be("");
            expect(data.metadata).to.be.a(Object);
            expect(data.metadata).to.be();
            expect(data.restrictions).to.be.a(Object);
            expect(data.restrictions).to.be();
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('whitelistTokenUsingPost', function() {
        it('should call whitelistTokenUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for whitelistTokenUsingPost call and complete the assertions
          /*
          var tokenWhitelistParams = new MoleculeApiDocumentation.TokenWhitelistParams();
          tokenWhitelistParams.walletId = """00000000-0000-0000-0000-000000000000";
          tokenWhitelistParams.tokenId = """00000000-0000-0000-0000-000000000000";

          instance.whitelistTokenUsingPost(tokenWhitelistParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TransactionSuccessResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
