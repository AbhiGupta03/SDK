/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MoleculeApiDocumentation);
  }
}(this, function(expect, MoleculeApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MoleculeApiDocumentation.WebhookApi();
  });

  describe('(package)', function() {
    describe('WebhookApi', function() {
      describe('createWebhookUsingPost', function() {
        it('should call createWebhookUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createWebhookUsingPost call and complete the assertions
          /*
          var webhookParams = new MoleculeApiDocumentation.WebhookParams();
          webhookParams.url = "";
          webhookParams.moleculeService = ["whitelist_admin"]"whitelist_admin";
          webhookParams.isActive = false;
          webhookParams.recordStatus = "";

          instance.createWebhookUsingPost(webhookParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.WebhookResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            {
              let dataCtr = data.moleculeService;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("whitelist_admin");
              }
            }
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.recordStatus).to.be.a('string');
            expect(data.recordStatus).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteWebhookUsingDelete', function() {
        it('should call deleteWebhookUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteWebhookUsingDelete call
          /*
          var webhookId = "webhookId_example";

          instance.deleteWebhookUsingDelete(webhookId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWebhookAllUsingGet', function() {
        it('should call getWebhookAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getWebhookAllUsingGet call and complete the assertions
          /*
          var opts = {};
          opts.page = 56;
          opts.size = 56;
          opts.orderBy = "orderBy_example";
          opts.ascending = true;
          opts.getLatest = true;

          instance.getWebhookAllUsingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.PageWebhookResponse);
            {
              let dataCtr = data.content;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MoleculeApiDocumentation.WebhookResponse);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.url).to.be.a('string');
                expect(data.url).to.be("");
                {
                  let dataCtr = data.moleculeService;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("whitelist_admin");
                  }
                }
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(false);
                expect(data.recordStatus).to.be.a('string');
                expect(data.recordStatus).to.be("");
                expect(data.createDate).to.be.a(Date);
                expect(data.createDate).to.be(new Date());
                expect(data.updateDate).to.be.a(Date);
                expect(data.updateDate).to.be(new Date());

                      }
            }
            expect(data.first).to.be.a('boolean');
            expect(data.first).to.be(false);
            expect(data.last).to.be.a('boolean');
            expect(data.last).to.be(false);
            expect(data._number).to.be.a('number');
            expect(data._number).to.be(0);
            expect(data.numberOfElements).to.be.a('number');
            expect(data.numberOfElements).to.be(0);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            {
              let dataCtr = data.sort;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MoleculeApiDocumentation.Sort);
                expect(data.ascending).to.be.a('boolean');
                expect(data.ascending).to.be(true);
                expect(data.descending).to.be.a('boolean');
                expect(data.descending).to.be(false);
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("DESC");
                expect(data.ignoreCase).to.be.a('boolean');
                expect(data.ignoreCase).to.be(false);
                expect(data.nullHandling).to.be.a('string');
                expect(data.nullHandling).to.be("NATIVE");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("updateDate");

                      }
            }
            expect(data.totalElements).to.be.a('number');
            expect(data.totalElements).to.be("0");
            expect(data.totalPages).to.be.a('number');
            expect(data.totalPages).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWebhookUsingGet', function() {
        it('should call getWebhookUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getWebhookUsingGet call and complete the assertions
          /*
          var webhookId = "webhookId_example";

          instance.getWebhookUsingGet(webhookId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.WebhookResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            {
              let dataCtr = data.moleculeService;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("whitelist_admin");
              }
            }
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.recordStatus).to.be.a('string');
            expect(data.recordStatus).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateWebhookUsingPut', function() {
        it('should call updateWebhookUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateWebhookUsingPut call and complete the assertions
          /*
          var webhookId = "webhookId_example";
          var webhookUpdateParams = new MoleculeApiDocumentation.WebhookParams();
          webhookUpdateParams.url = "";
          webhookUpdateParams.moleculeService = ["whitelist_admin"]"whitelist_admin";
          webhookUpdateParams.isActive = false;
          webhookUpdateParams.recordStatus = "";

          instance.updateWebhookUsingPut(webhookId, webhookUpdateParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.WebhookResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            {
              let dataCtr = data.moleculeService;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("whitelist_admin");
              }
            }
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.recordStatus).to.be.a('string');
            expect(data.recordStatus).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
