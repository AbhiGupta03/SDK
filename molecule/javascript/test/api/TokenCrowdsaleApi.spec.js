/*
 * Molecule API Documentation
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MoleculeApiDocumentation);
  }
}(this, function(expect, MoleculeApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MoleculeApiDocumentation.TokenCrowdsaleApi();
  });

  describe('(package)', function() {
    describe('TokenCrowdsaleApi', function() {
      describe('deployCrowdsaleUsingPost', function() {
        it('should call deployCrowdsaleUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for deployCrowdsaleUsingPost call and complete the assertions
          /*
          var crowdsaleDeployParams = new MoleculeApiDocumentation.CrowdsaleDeployParams();
          crowdsaleDeployParams.tokenId = """00000000-0000-0000-0000-000000000000";

          instance.deployCrowdsaleUsingPost(crowdsaleDeployParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TransactionSuccessResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fundCrowdsaleUsingPost', function() {
        it('should call fundCrowdsaleUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for fundCrowdsaleUsingPost call and complete the assertions
          /*
          var crowdsaleFundParams = new MoleculeApiDocumentation.CrowdsaleFundParams();
          crowdsaleFundParams.tokenId = """00000000-0000-0000-0000-000000000000";
          crowdsaleFundParams.supply = "";

          instance.fundCrowdsaleUsingPost(crowdsaleFundParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TransactionSuccessResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseCrowdsaleUsingPost', function() {
        it('should call purchaseCrowdsaleUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseCrowdsaleUsingPost call and complete the assertions
          /*
          var crowdsalePurchaseParams = new MoleculeApiDocumentation.CrowdsalePurchaseParams();
          crowdsalePurchaseParams.tokenId = """00000000-0000-0000-0000-000000000000";
          crowdsalePurchaseParams.walletId = """00000000-0000-0000-0000-000000000000";
          crowdsalePurchaseParams.amount = 0.0;

          instance.purchaseCrowdsaleUsingPost(crowdsalePurchaseParams, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MoleculeApiDocumentation.TransactionSuccessResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(new Date());
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
