# coding: utf-8

"""
    Molecule API Documentation

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'electron_document_id': 'str',
        'version': 'float',
        'doc_file_hash': 'str',
        'wallet_id': 'str'
    }

    attribute_map = {
        'electron_document_id': 'electron_document_id',
        'version': 'version',
        'doc_file_hash': 'doc_file_hash',
        'wallet_id': 'wallet_id'
    }

    def __init__(self, electron_document_id=None, version=None, doc_file_hash=None, wallet_id=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501

        self._electron_document_id = None
        self._version = None
        self._doc_file_hash = None
        self._wallet_id = None
        self.discriminator = None

        if electron_document_id is not None:
            self.electron_document_id = electron_document_id
        if version is not None:
            self.version = version
        if doc_file_hash is not None:
            self.doc_file_hash = doc_file_hash
        if wallet_id is not None:
            self.wallet_id = wallet_id

    @property
    def electron_document_id(self):
        """Gets the electron_document_id of this Document.  # noqa: E501


        :return: The electron_document_id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._electron_document_id

    @electron_document_id.setter
    def electron_document_id(self, electron_document_id):
        """Sets the electron_document_id of this Document.


        :param electron_document_id: The electron_document_id of this Document.  # noqa: E501
        :type: str
        """

        self._electron_document_id = electron_document_id

    @property
    def version(self):
        """Gets the version of this Document.  # noqa: E501


        :return: The version of this Document.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Document.


        :param version: The version of this Document.  # noqa: E501
        :type: float
        """

        self._version = version

    @property
    def doc_file_hash(self):
        """Gets the doc_file_hash of this Document.  # noqa: E501


        :return: The doc_file_hash of this Document.  # noqa: E501
        :rtype: str
        """
        return self._doc_file_hash

    @doc_file_hash.setter
    def doc_file_hash(self, doc_file_hash):
        """Sets the doc_file_hash of this Document.


        :param doc_file_hash: The doc_file_hash of this Document.  # noqa: E501
        :type: str
        """

        self._doc_file_hash = doc_file_hash

    @property
    def wallet_id(self):
        """Gets the wallet_id of this Document.  # noqa: E501


        :return: The wallet_id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this Document.


        :param wallet_id: The wallet_id of this Document.  # noqa: E501
        :type: str
        """

        self._wallet_id = wallet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
