# coding: utf-8

"""
    Molecule API Documentation

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenBalanceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'balance': 'float',
        'wallet_id': 'str',
        'token_id': 'str',
        'is_active': 'bool',
        'record_status': 'str',
        'create_date': 'datetime',
        'update_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'balance': 'balance',
        'wallet_id': 'wallet_id',
        'token_id': 'token_id',
        'is_active': 'is_active',
        'record_status': 'record_status',
        'create_date': 'create_date',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, balance=None, wallet_id=None, token_id=None, is_active=None, record_status=None, create_date=None, update_date=None):  # noqa: E501
        """TokenBalanceResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._balance = None
        self._wallet_id = None
        self._token_id = None
        self._is_active = None
        self._record_status = None
        self._create_date = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if balance is not None:
            self.balance = balance
        if wallet_id is not None:
            self.wallet_id = wallet_id
        if token_id is not None:
            self.token_id = token_id
        if is_active is not None:
            self.is_active = is_active
        if record_status is not None:
            self.record_status = record_status
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this TokenBalanceResponse.  # noqa: E501


        :return: The id of this TokenBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TokenBalanceResponse.


        :param id: The id of this TokenBalanceResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def balance(self):
        """Gets the balance of this TokenBalanceResponse.  # noqa: E501


        :return: The balance of this TokenBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this TokenBalanceResponse.


        :param balance: The balance of this TokenBalanceResponse.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def wallet_id(self):
        """Gets the wallet_id of this TokenBalanceResponse.  # noqa: E501


        :return: The wallet_id of this TokenBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this TokenBalanceResponse.


        :param wallet_id: The wallet_id of this TokenBalanceResponse.  # noqa: E501
        :type: str
        """

        self._wallet_id = wallet_id

    @property
    def token_id(self):
        """Gets the token_id of this TokenBalanceResponse.  # noqa: E501


        :return: The token_id of this TokenBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TokenBalanceResponse.


        :param token_id: The token_id of this TokenBalanceResponse.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def is_active(self):
        """Gets the is_active of this TokenBalanceResponse.  # noqa: E501


        :return: The is_active of this TokenBalanceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this TokenBalanceResponse.


        :param is_active: The is_active of this TokenBalanceResponse.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def record_status(self):
        """Gets the record_status of this TokenBalanceResponse.  # noqa: E501


        :return: The record_status of this TokenBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._record_status

    @record_status.setter
    def record_status(self, record_status):
        """Sets the record_status of this TokenBalanceResponse.


        :param record_status: The record_status of this TokenBalanceResponse.  # noqa: E501
        :type: str
        """

        self._record_status = record_status

    @property
    def create_date(self):
        """Gets the create_date of this TokenBalanceResponse.  # noqa: E501


        :return: The create_date of this TokenBalanceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this TokenBalanceResponse.


        :param create_date: The create_date of this TokenBalanceResponse.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this TokenBalanceResponse.  # noqa: E501


        :return: The update_date of this TokenBalanceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this TokenBalanceResponse.


        :param update_date: The update_date of this TokenBalanceResponse.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenBalanceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenBalanceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
