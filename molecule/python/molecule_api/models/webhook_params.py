# coding: utf-8

"""
    Molecule API Documentation

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebhookParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'molecule_service': 'list[str]',
        'is_active': 'bool',
        'record_status': 'str'
    }

    attribute_map = {
        'url': 'url',
        'molecule_service': 'molecule_service',
        'is_active': 'is_active',
        'record_status': 'record_status'
    }

    def __init__(self, url=None, molecule_service=None, is_active=None, record_status=None):  # noqa: E501
        """WebhookParams - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._molecule_service = None
        self._is_active = None
        self._record_status = None
        self.discriminator = None

        self.url = url
        self.molecule_service = molecule_service
        if is_active is not None:
            self.is_active = is_active
        if record_status is not None:
            self.record_status = record_status

    @property
    def url(self):
        """Gets the url of this WebhookParams.  # noqa: E501


        :return: The url of this WebhookParams.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookParams.


        :param url: The url of this WebhookParams.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def molecule_service(self):
        """Gets the molecule_service of this WebhookParams.  # noqa: E501


        :return: The molecule_service of this WebhookParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._molecule_service

    @molecule_service.setter
    def molecule_service(self, molecule_service):
        """Sets the molecule_service of this WebhookParams.


        :param molecule_service: The molecule_service of this WebhookParams.  # noqa: E501
        :type: list[str]
        """
        if molecule_service is None:
            raise ValueError("Invalid value for `molecule_service`, must not be `None`")  # noqa: E501
        allowed_values = ["whitelist_admin", "whitelisted", "token_transfer", "token_balance", "token_supply_balance", "currency_transfer", "currency_balance", "transaction"]  # noqa: E501
        if not set((molecule_service_value.lower() for molecule_service_value in molecule_service)) \
                .issubset(set((value.lower() for value in allowed_values))):
            raise ValueError(
                "Invalid values for `molecule_service` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(molecule_service) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._molecule_service = molecule_service

    @property
    def is_active(self):
        """Gets the is_active of this WebhookParams.  # noqa: E501


        :return: The is_active of this WebhookParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this WebhookParams.


        :param is_active: The is_active of this WebhookParams.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def record_status(self):
        """Gets the record_status of this WebhookParams.  # noqa: E501


        :return: The record_status of this WebhookParams.  # noqa: E501
        :rtype: str
        """
        return self._record_status

    @record_status.setter
    def record_status(self, record_status):
        """Sets the record_status of this WebhookParams.


        :param record_status: The record_status of this WebhookParams.  # noqa: E501
        :type: str
        """

        self._record_status = record_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
