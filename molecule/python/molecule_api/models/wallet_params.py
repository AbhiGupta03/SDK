# coding: utf-8

"""
    Molecule API Documentation

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WalletParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wallet_key_id': 'str',
        'name': 'str',
        'type': 'str',
        'is_active': 'bool',
        'secondary_id': 'str',
        'record_status': 'str',
        'clients': 'list[WalletClients]',
        'metadata': 'object',
        'token_whitelists': 'list[TokenWhitelists]'
    }

    attribute_map = {
        'wallet_key_id': 'wallet_key_id',
        'name': 'name',
        'type': 'type',
        'is_active': 'is_active',
        'secondary_id': 'secondary_id',
        'record_status': 'record_status',
        'clients': 'clients',
        'metadata': 'metadata',
        'token_whitelists': 'token_whitelists'
    }

    def __init__(self, wallet_key_id=None, name=None, type=None, is_active=None, secondary_id=None, record_status=None, clients=None, metadata=None, token_whitelists=None):  # noqa: E501
        """WalletParams - a model defined in Swagger"""  # noqa: E501

        self._wallet_key_id = None
        self._name = None
        self._type = None
        self._is_active = None
        self._secondary_id = None
        self._record_status = None
        self._clients = None
        self._metadata = None
        self._token_whitelists = None
        self.discriminator = None

        if wallet_key_id is not None:
            self.wallet_key_id = wallet_key_id
        self.name = name
        self.type = type
        if is_active is not None:
            self.is_active = is_active
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if record_status is not None:
            self.record_status = record_status
        if clients is not None:
            self.clients = clients
        if metadata is not None:
            self.metadata = metadata
        if token_whitelists is not None:
            self.token_whitelists = token_whitelists

    @property
    def wallet_key_id(self):
        """Gets the wallet_key_id of this WalletParams.  # noqa: E501


        :return: The wallet_key_id of this WalletParams.  # noqa: E501
        :rtype: str
        """
        return self._wallet_key_id

    @wallet_key_id.setter
    def wallet_key_id(self, wallet_key_id):
        """Sets the wallet_key_id of this WalletParams.


        :param wallet_key_id: The wallet_key_id of this WalletParams.  # noqa: E501
        :type: str
        """

        self._wallet_key_id = wallet_key_id

    @property
    def name(self):
        """Gets the name of this WalletParams.  # noqa: E501


        :return: The name of this WalletParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WalletParams.


        :param name: The name of this WalletParams.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this WalletParams.  # noqa: E501


        :return: The type of this WalletParams.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WalletParams.


        :param type: The type of this WalletParams.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["individual", "business", "trust", "contract"]  # noqa: E501
        if type is not None and type.lower() not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_active(self):
        """Gets the is_active of this WalletParams.  # noqa: E501


        :return: The is_active of this WalletParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this WalletParams.


        :param is_active: The is_active of this WalletParams.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def secondary_id(self):
        """Gets the secondary_id of this WalletParams.  # noqa: E501


        :return: The secondary_id of this WalletParams.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this WalletParams.


        :param secondary_id: The secondary_id of this WalletParams.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def record_status(self):
        """Gets the record_status of this WalletParams.  # noqa: E501


        :return: The record_status of this WalletParams.  # noqa: E501
        :rtype: str
        """
        return self._record_status

    @record_status.setter
    def record_status(self, record_status):
        """Sets the record_status of this WalletParams.


        :param record_status: The record_status of this WalletParams.  # noqa: E501
        :type: str
        """

        self._record_status = record_status

    @property
    def clients(self):
        """Gets the clients of this WalletParams.  # noqa: E501


        :return: The clients of this WalletParams.  # noqa: E501
        :rtype: list[WalletClients]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this WalletParams.


        :param clients: The clients of this WalletParams.  # noqa: E501
        :type: list[WalletClients]
        """

        self._clients = clients

    @property
    def metadata(self):
        """Gets the metadata of this WalletParams.  # noqa: E501


        :return: The metadata of this WalletParams.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this WalletParams.


        :param metadata: The metadata of this WalletParams.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def token_whitelists(self):
        """Gets the token_whitelists of this WalletParams.  # noqa: E501


        :return: The token_whitelists of this WalletParams.  # noqa: E501
        :rtype: list[TokenWhitelists]
        """
        return self._token_whitelists

    @token_whitelists.setter
    def token_whitelists(self, token_whitelists):
        """Sets the token_whitelists of this WalletParams.


        :param token_whitelists: The token_whitelists of this WalletParams.  # noqa: E501
        :type: list[TokenWhitelists]
        """

        self._token_whitelists = token_whitelists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
