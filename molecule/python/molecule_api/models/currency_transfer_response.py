# coding: utf-8

"""
    Molecule API Documentation

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CurrencyTransferResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sender_wallet_id': 'str',
        'receiver_wallet_id': 'str',
        'currency_id': 'str',
        'amount': 'float',
        'transaction_hash': 'str',
        'is_active': 'bool',
        'record_status': 'str',
        'create_date': 'datetime',
        'update_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'sender_wallet_id': 'sender_wallet_id',
        'receiver_wallet_id': 'receiver_wallet_id',
        'currency_id': 'currency_id',
        'amount': 'amount',
        'transaction_hash': 'transaction_hash',
        'is_active': 'is_active',
        'record_status': 'record_status',
        'create_date': 'create_date',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, sender_wallet_id=None, receiver_wallet_id=None, currency_id=None, amount=None, transaction_hash=None, is_active=None, record_status=None, create_date=None, update_date=None):  # noqa: E501
        """CurrencyTransferResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._sender_wallet_id = None
        self._receiver_wallet_id = None
        self._currency_id = None
        self._amount = None
        self._transaction_hash = None
        self._is_active = None
        self._record_status = None
        self._create_date = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if sender_wallet_id is not None:
            self.sender_wallet_id = sender_wallet_id
        if receiver_wallet_id is not None:
            self.receiver_wallet_id = receiver_wallet_id
        if currency_id is not None:
            self.currency_id = currency_id
        if amount is not None:
            self.amount = amount
        if transaction_hash is not None:
            self.transaction_hash = transaction_hash
        if is_active is not None:
            self.is_active = is_active
        if record_status is not None:
            self.record_status = record_status
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this CurrencyTransferResponse.  # noqa: E501


        :return: The id of this CurrencyTransferResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrencyTransferResponse.


        :param id: The id of this CurrencyTransferResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sender_wallet_id(self):
        """Gets the sender_wallet_id of this CurrencyTransferResponse.  # noqa: E501


        :return: The sender_wallet_id of this CurrencyTransferResponse.  # noqa: E501
        :rtype: str
        """
        return self._sender_wallet_id

    @sender_wallet_id.setter
    def sender_wallet_id(self, sender_wallet_id):
        """Sets the sender_wallet_id of this CurrencyTransferResponse.


        :param sender_wallet_id: The sender_wallet_id of this CurrencyTransferResponse.  # noqa: E501
        :type: str
        """

        self._sender_wallet_id = sender_wallet_id

    @property
    def receiver_wallet_id(self):
        """Gets the receiver_wallet_id of this CurrencyTransferResponse.  # noqa: E501


        :return: The receiver_wallet_id of this CurrencyTransferResponse.  # noqa: E501
        :rtype: str
        """
        return self._receiver_wallet_id

    @receiver_wallet_id.setter
    def receiver_wallet_id(self, receiver_wallet_id):
        """Sets the receiver_wallet_id of this CurrencyTransferResponse.


        :param receiver_wallet_id: The receiver_wallet_id of this CurrencyTransferResponse.  # noqa: E501
        :type: str
        """

        self._receiver_wallet_id = receiver_wallet_id

    @property
    def currency_id(self):
        """Gets the currency_id of this CurrencyTransferResponse.  # noqa: E501


        :return: The currency_id of this CurrencyTransferResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this CurrencyTransferResponse.


        :param currency_id: The currency_id of this CurrencyTransferResponse.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def amount(self):
        """Gets the amount of this CurrencyTransferResponse.  # noqa: E501


        :return: The amount of this CurrencyTransferResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CurrencyTransferResponse.


        :param amount: The amount of this CurrencyTransferResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def transaction_hash(self):
        """Gets the transaction_hash of this CurrencyTransferResponse.  # noqa: E501


        :return: The transaction_hash of this CurrencyTransferResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash):
        """Sets the transaction_hash of this CurrencyTransferResponse.


        :param transaction_hash: The transaction_hash of this CurrencyTransferResponse.  # noqa: E501
        :type: str
        """

        self._transaction_hash = transaction_hash

    @property
    def is_active(self):
        """Gets the is_active of this CurrencyTransferResponse.  # noqa: E501


        :return: The is_active of this CurrencyTransferResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CurrencyTransferResponse.


        :param is_active: The is_active of this CurrencyTransferResponse.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def record_status(self):
        """Gets the record_status of this CurrencyTransferResponse.  # noqa: E501


        :return: The record_status of this CurrencyTransferResponse.  # noqa: E501
        :rtype: str
        """
        return self._record_status

    @record_status.setter
    def record_status(self, record_status):
        """Sets the record_status of this CurrencyTransferResponse.


        :param record_status: The record_status of this CurrencyTransferResponse.  # noqa: E501
        :type: str
        """

        self._record_status = record_status

    @property
    def create_date(self):
        """Gets the create_date of this CurrencyTransferResponse.  # noqa: E501


        :return: The create_date of this CurrencyTransferResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CurrencyTransferResponse.


        :param create_date: The create_date of this CurrencyTransferResponse.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this CurrencyTransferResponse.  # noqa: E501


        :return: The update_date of this CurrencyTransferResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this CurrencyTransferResponse.


        :param update_date: The update_date of this CurrencyTransferResponse.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencyTransferResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyTransferResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
