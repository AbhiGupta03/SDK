# coding: utf-8

"""
    Molecule API Documentation

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from molecule_api.api_client import ApiClient


class TokenApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def burn_token_using_post(self, token_burn_params, **kwargs):  # noqa: E501
        """Burn tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.burn_token_using_post(token_burn_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenBurnParams token_burn_params: Burns provided amount of existing tokens (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.burn_token_using_post_with_http_info(token_burn_params, **kwargs)  # noqa: E501
        else:
            (data) = self.burn_token_using_post_with_http_info(token_burn_params, **kwargs)  # noqa: E501
            return data

    def burn_token_using_post_with_http_info(self, token_burn_params, **kwargs):  # noqa: E501
        """Burn tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.burn_token_using_post_with_http_info(token_burn_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenBurnParams token_burn_params: Burns provided amount of existing tokens (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_burn_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method burn_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_burn_params' is set
        if ('token_burn_params' not in params or
                params['token_burn_params'] is None):
            raise ValueError("Missing the required parameter `token_burn_params` when calling `burn_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'token_burn_params' in params:
            body_params = params['token_burn_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token/burn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_token_using_post(self, token_params, **kwargs):  # noqa: E501
        """Creates a new Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_token_using_post(token_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenParams token_params: It enables a user to create a Token (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_token_using_post_with_http_info(token_params, **kwargs)  # noqa: E501
        else:
            (data) = self.create_token_using_post_with_http_info(token_params, **kwargs)  # noqa: E501
            return data

    def create_token_using_post_with_http_info(self, token_params, **kwargs):  # noqa: E501
        """Creates a new Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_token_using_post_with_http_info(token_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenParams token_params: It enables a user to create a Token (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_params' is set
        if ('token_params' not in params or
                params['token_params'] is None):
            raise ValueError("Missing the required parameter `token_params` when calling `create_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'token_params' in params:
            body_params = params['token_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_token_using_delete(self, token_id, **kwargs):  # noqa: E501
        """Delete Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_token_using_delete(token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: Token ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_token_using_delete_with_http_info(token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_token_using_delete_with_http_info(token_id, **kwargs)  # noqa: E501
            return data

    def delete_token_using_delete_with_http_info(self, token_id, **kwargs):  # noqa: E501
        """Delete Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_token_using_delete_with_http_info(token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: Token ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_token_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params or
                params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `delete_token_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token_id' in params:
            path_params['token_id'] = params['token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token/{token_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploy_token_using_post(self, token_deploy_params, **kwargs):  # noqa: E501
        """Deploys provided Token to network  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_token_using_post(token_deploy_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenDeployParams token_deploy_params: Deploys provided Token to network (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deploy_token_using_post_with_http_info(token_deploy_params, **kwargs)  # noqa: E501
        else:
            (data) = self.deploy_token_using_post_with_http_info(token_deploy_params, **kwargs)  # noqa: E501
            return data

    def deploy_token_using_post_with_http_info(self, token_deploy_params, **kwargs):  # noqa: E501
        """Deploys provided Token to network  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_token_using_post_with_http_info(token_deploy_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenDeployParams token_deploy_params: Deploys provided Token to network (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_deploy_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_deploy_params' is set
        if ('token_deploy_params' not in params or
                params['token_deploy_params'] is None):
            raise ValueError("Missing the required parameter `token_deploy_params` when calling `deploy_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'token_deploy_params' in params:
            body_params = params['token_deploy_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_all_using_get(self, **kwargs):  # noqa: E501
        """Fetch Token list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: To filter response Token list by page number
        :param int size: Number of records per page
        :param str order_by: Field to sort record list
        :param bool ascending: Sorting order
        :param bool get_latest: To fetch latest (one) record
        :return: PageTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_token_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_token_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_token_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetch Token list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: To filter response Token list by page number
        :param int size: Number of records per page
        :param str order_by: Field to sort record list
        :param bool ascending: Sorting order
        :param bool get_latest: To fetch latest (one) record
        :return: PageTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'order_by', 'ascending', 'get_latest']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'get_latest' in params:
            query_params.append(('get_latest', params['get_latest']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_using_get(self, token_id, **kwargs):  # noqa: E501
        """Fetch Token details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_using_get(token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: Token ID (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_token_using_get_with_http_info(token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_token_using_get_with_http_info(token_id, **kwargs)  # noqa: E501
            return data

    def get_token_using_get_with_http_info(self, token_id, **kwargs):  # noqa: E501
        """Fetch Token details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_using_get_with_http_info(token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: Token ID (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params or
                params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `get_token_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token_id' in params:
            path_params['token_id'] = params['token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token/{token_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mint_token_using_post(self, token_mint_params, **kwargs):  # noqa: E501
        """Mint new tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mint_token_using_post(token_mint_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenMintParams token_mint_params: Mint new tokens (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mint_token_using_post_with_http_info(token_mint_params, **kwargs)  # noqa: E501
        else:
            (data) = self.mint_token_using_post_with_http_info(token_mint_params, **kwargs)  # noqa: E501
            return data

    def mint_token_using_post_with_http_info(self, token_mint_params, **kwargs):  # noqa: E501
        """Mint new tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mint_token_using_post_with_http_info(token_mint_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenMintParams token_mint_params: Mint new tokens (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_mint_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mint_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_mint_params' is set
        if ('token_mint_params' not in params or
                params['token_mint_params'] is None):
            raise ValueError("Missing the required parameter `token_mint_params` when calling `mint_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'token_mint_params' in params:
            body_params = params['token_mint_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token/mint', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_token_using_put(self, token_id, **kwargs):  # noqa: E501
        """Update Token details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_token_using_put(token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: Token ID (required)
        :param TokenUpdateParams token_update_params: Token details to be updated
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_token_using_put_with_http_info(token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_token_using_put_with_http_info(token_id, **kwargs)  # noqa: E501
            return data

    def update_token_using_put_with_http_info(self, token_id, **kwargs):  # noqa: E501
        """Update Token details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_token_using_put_with_http_info(token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: Token ID (required)
        :param TokenUpdateParams token_update_params: Token details to be updated
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'token_update_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_token_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params or
                params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `update_token_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token_id' in params:
            path_params['token_id'] = params['token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'token_update_params' in params:
            body_params = params['token_update_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token/{token_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def whitelist_token_using_post(self, token_whitelist_params, **kwargs):  # noqa: E501
        """Whitelist token for provided wallet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.whitelist_token_using_post(token_whitelist_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenWhitelistParams token_whitelist_params: Whitelist token for provided wallet (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.whitelist_token_using_post_with_http_info(token_whitelist_params, **kwargs)  # noqa: E501
        else:
            (data) = self.whitelist_token_using_post_with_http_info(token_whitelist_params, **kwargs)  # noqa: E501
            return data

    def whitelist_token_using_post_with_http_info(self, token_whitelist_params, **kwargs):  # noqa: E501
        """Whitelist token for provided wallet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.whitelist_token_using_post_with_http_info(token_whitelist_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenWhitelistParams token_whitelist_params: Whitelist token for provided wallet (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_whitelist_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method whitelist_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_whitelist_params' is set
        if ('token_whitelist_params' not in params or
                params['token_whitelist_params'] is None):
            raise ValueError("Missing the required parameter `token_whitelist_params` when calling `whitelist_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'token_whitelist_params' in params:
            body_params = params['token_whitelist_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/token/whitelist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
