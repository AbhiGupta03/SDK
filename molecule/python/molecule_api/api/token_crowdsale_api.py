# coding: utf-8

"""
    Molecule API Documentation

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from molecule_api.api_client import ApiClient


class TokenCrowdsaleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def deploy_crowdsale_using_post(self, crowdsale_deploy_params, **kwargs):  # noqa: E501
        """Deploy token for Crowdsale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_crowdsale_using_post(crowdsale_deploy_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrowdsaleDeployParams crowdsale_deploy_params: Deploy token for Crowdsale (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deploy_crowdsale_using_post_with_http_info(crowdsale_deploy_params, **kwargs)  # noqa: E501
        else:
            (data) = self.deploy_crowdsale_using_post_with_http_info(crowdsale_deploy_params, **kwargs)  # noqa: E501
            return data

    def deploy_crowdsale_using_post_with_http_info(self, crowdsale_deploy_params, **kwargs):  # noqa: E501
        """Deploy token for Crowdsale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_crowdsale_using_post_with_http_info(crowdsale_deploy_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrowdsaleDeployParams crowdsale_deploy_params: Deploy token for Crowdsale (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crowdsale_deploy_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_crowdsale_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crowdsale_deploy_params' is set
        if ('crowdsale_deploy_params' not in params or
                params['crowdsale_deploy_params'] is None):
            raise ValueError("Missing the required parameter `crowdsale_deploy_params` when calling `deploy_crowdsale_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crowdsale_deploy_params' in params:
            body_params = params['crowdsale_deploy_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/crowdsale/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fund_crowdsale_using_post(self, crowdsale_fund_params, **kwargs):  # noqa: E501
        """Fund/add Tokens supply to Crowdsale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fund_crowdsale_using_post(crowdsale_fund_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrowdsaleFundParams crowdsale_fund_params: Fund provided Token's supply to Crowdsale (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fund_crowdsale_using_post_with_http_info(crowdsale_fund_params, **kwargs)  # noqa: E501
        else:
            (data) = self.fund_crowdsale_using_post_with_http_info(crowdsale_fund_params, **kwargs)  # noqa: E501
            return data

    def fund_crowdsale_using_post_with_http_info(self, crowdsale_fund_params, **kwargs):  # noqa: E501
        """Fund/add Tokens supply to Crowdsale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fund_crowdsale_using_post_with_http_info(crowdsale_fund_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrowdsaleFundParams crowdsale_fund_params: Fund provided Token's supply to Crowdsale (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crowdsale_fund_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fund_crowdsale_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crowdsale_fund_params' is set
        if ('crowdsale_fund_params' not in params or
                params['crowdsale_fund_params'] is None):
            raise ValueError("Missing the required parameter `crowdsale_fund_params` when calling `fund_crowdsale_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crowdsale_fund_params' in params:
            body_params = params['crowdsale_fund_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/crowdsale/fund', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchase_crowdsale_using_post(self, crowdsale_purchase_params, **kwargs):  # noqa: E501
        """Purchase Tokens from Crowdsale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_crowdsale_using_post(crowdsale_purchase_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrowdsalePurchaseParams crowdsale_purchase_params: Purchase Tokens (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchase_crowdsale_using_post_with_http_info(crowdsale_purchase_params, **kwargs)  # noqa: E501
        else:
            (data) = self.purchase_crowdsale_using_post_with_http_info(crowdsale_purchase_params, **kwargs)  # noqa: E501
            return data

    def purchase_crowdsale_using_post_with_http_info(self, crowdsale_purchase_params, **kwargs):  # noqa: E501
        """Purchase Tokens from Crowdsale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_crowdsale_using_post_with_http_info(crowdsale_purchase_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrowdsalePurchaseParams crowdsale_purchase_params: Purchase Tokens (required)
        :return: TransactionSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crowdsale_purchase_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchase_crowdsale_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crowdsale_purchase_params' is set
        if ('crowdsale_purchase_params' not in params or
                params['crowdsale_purchase_params'] is None):
            raise ValueError("Missing the required parameter `crowdsale_purchase_params` when calling `purchase_crowdsale_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crowdsale_purchase_params' in params:
            body_params = params['crowdsale_purchase_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/crowdsale/purchase', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
