=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'date'

module AtomApi
  class GoalAssetWeightConfig
    # Weight of US equities
    attr_accessor :us_equities

    # Weight of fixed income
    attr_accessor :fixed_income

    # Weight of international equities
    attr_accessor :intl_equities

    # Weight of emerging market equities
    attr_accessor :em_equities

    # Weight of commodities
    attr_accessor :commodities

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'us_equities' => :'US_Equities',
        :'fixed_income' => :'Fixed_Income',
        :'intl_equities' => :'Intl_Equities',
        :'em_equities' => :'EM_Equities',
        :'commodities' => :'Commodities'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'us_equities' => :'Float',
        :'fixed_income' => :'Float',
        :'intl_equities' => :'Float',
        :'em_equities' => :'Float',
        :'commodities' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'US_Equities')
        self.us_equities = attributes[:'US_Equities']
      end

      if attributes.has_key?(:'Fixed_Income')
        self.fixed_income = attributes[:'Fixed_Income']
      end

      if attributes.has_key?(:'Intl_Equities')
        self.intl_equities = attributes[:'Intl_Equities']
      end

      if attributes.has_key?(:'EM_Equities')
        self.em_equities = attributes[:'EM_Equities']
      end

      if attributes.has_key?(:'Commodities')
        self.commodities = attributes[:'Commodities']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@us_equities.nil? && @us_equities > 1
        invalid_properties.push('invalid value for "us_equities", must be smaller than or equal to 1.')
      end

      if !@us_equities.nil? && @us_equities < 0
        invalid_properties.push('invalid value for "us_equities", must be greater than or equal to 0.')
      end

      if !@fixed_income.nil? && @fixed_income > 1
        invalid_properties.push('invalid value for "fixed_income", must be smaller than or equal to 1.')
      end

      if !@fixed_income.nil? && @fixed_income < 0
        invalid_properties.push('invalid value for "fixed_income", must be greater than or equal to 0.')
      end

      if !@intl_equities.nil? && @intl_equities > 1
        invalid_properties.push('invalid value for "intl_equities", must be smaller than or equal to 1.')
      end

      if !@intl_equities.nil? && @intl_equities < 0
        invalid_properties.push('invalid value for "intl_equities", must be greater than or equal to 0.')
      end

      if !@em_equities.nil? && @em_equities > 1
        invalid_properties.push('invalid value for "em_equities", must be smaller than or equal to 1.')
      end

      if !@em_equities.nil? && @em_equities < 0
        invalid_properties.push('invalid value for "em_equities", must be greater than or equal to 0.')
      end

      if !@commodities.nil? && @commodities > 1
        invalid_properties.push('invalid value for "commodities", must be smaller than or equal to 1.')
      end

      if !@commodities.nil? && @commodities < 0
        invalid_properties.push('invalid value for "commodities", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@us_equities.nil? && @us_equities > 1
      return false if !@us_equities.nil? && @us_equities < 0
      return false if !@fixed_income.nil? && @fixed_income > 1
      return false if !@fixed_income.nil? && @fixed_income < 0
      return false if !@intl_equities.nil? && @intl_equities > 1
      return false if !@intl_equities.nil? && @intl_equities < 0
      return false if !@em_equities.nil? && @em_equities > 1
      return false if !@em_equities.nil? && @em_equities < 0
      return false if !@commodities.nil? && @commodities > 1
      return false if !@commodities.nil? && @commodities < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] us_equities Value to be assigned
    def us_equities=(us_equities)
      if !us_equities.nil? && us_equities > 1
        fail ArgumentError, 'invalid value for "us_equities", must be smaller than or equal to 1.'
      end

      if !us_equities.nil? && us_equities < 0
        fail ArgumentError, 'invalid value for "us_equities", must be greater than or equal to 0.'
      end

      @us_equities = us_equities
    end

    # Custom attribute writer method with validation
    # @param [Object] fixed_income Value to be assigned
    def fixed_income=(fixed_income)
      if !fixed_income.nil? && fixed_income > 1
        fail ArgumentError, 'invalid value for "fixed_income", must be smaller than or equal to 1.'
      end

      if !fixed_income.nil? && fixed_income < 0
        fail ArgumentError, 'invalid value for "fixed_income", must be greater than or equal to 0.'
      end

      @fixed_income = fixed_income
    end

    # Custom attribute writer method with validation
    # @param [Object] intl_equities Value to be assigned
    def intl_equities=(intl_equities)
      if !intl_equities.nil? && intl_equities > 1
        fail ArgumentError, 'invalid value for "intl_equities", must be smaller than or equal to 1.'
      end

      if !intl_equities.nil? && intl_equities < 0
        fail ArgumentError, 'invalid value for "intl_equities", must be greater than or equal to 0.'
      end

      @intl_equities = intl_equities
    end

    # Custom attribute writer method with validation
    # @param [Object] em_equities Value to be assigned
    def em_equities=(em_equities)
      if !em_equities.nil? && em_equities > 1
        fail ArgumentError, 'invalid value for "em_equities", must be smaller than or equal to 1.'
      end

      if !em_equities.nil? && em_equities < 0
        fail ArgumentError, 'invalid value for "em_equities", must be greater than or equal to 0.'
      end

      @em_equities = em_equities
    end

    # Custom attribute writer method with validation
    # @param [Object] commodities Value to be assigned
    def commodities=(commodities)
      if !commodities.nil? && commodities > 1
        fail ArgumentError, 'invalid value for "commodities", must be smaller than or equal to 1.'
      end

      if !commodities.nil? && commodities < 0
        fail ArgumentError, 'invalid value for "commodities", must be greater than or equal to 0.'
      end

      @commodities = commodities
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          us_equities == o.us_equities &&
          fixed_income == o.fixed_income &&
          intl_equities == o.intl_equities &&
          em_equities == o.em_equities &&
          commodities == o.commodities
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [us_equities, fixed_income, intl_equities, em_equities, commodities].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
