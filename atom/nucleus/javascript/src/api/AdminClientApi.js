/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminClient', 'model/PageAdminClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminClient'), require('../model/PageAdminClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.AdminClientApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.AdminClient, root.HydrogenNucleusApi.PageAdminClient);
  }
}(this, function(ApiClient, AdminClient, PageAdminClient) {
  'use strict';

  /**
   * AdminClient service.
   * @module api/AdminClientApi
   * @version 1.3.0
   */

  /**
   * Constructs a new AdminClientApi. 
   * @alias module:api/AdminClientApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAdminClientUsingPost operation.
     * @callback module:api/AdminClientApi~createAdminClientUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an admin client
     * Create an admin client
     * @param {module:model/AdminClient} client client
     * @param {module:api/AdminClientApi~createAdminClientUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminClient}
     */
    this.createAdminClientUsingPost = function(client, callback) {
      var postBody = client;

      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling createAdminClientUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AdminClient;

      return this.apiClient.adminCallApi(
        '/client', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, true, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAdminClientUsingGet operation.
     * @callback module:api/AdminClientApi~deleteAdminClientUsingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an admin client
     * Delete an admin client
     * @param {Number} clientId client_id
     * @param {module:api/AdminClientApi~deleteAdminClientUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAdminClientUsingGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteAdminClientUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.adminCallApi(
        '/client/{client_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, true, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdminClientUsingGet operation.
     * @callback module:api/AdminClientApi~getAdminClientUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an admin client
     * Get an admin client
     * @param {Number} clientId client_id
     * @param {module:api/AdminClientApi~getAdminClientUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminClient}
     */
    this.getAdminClientUsingGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getAdminClientUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AdminClient;

      return this.apiClient.adminCallApi(
        '/client/{client_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, true, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAdminClientUsingGet operation.
     * @callback module:api/AdminClientApi~getAllAdminClientUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAdminClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all admin clients
     * Get a list of all admin clients
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to username)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AdminClientApi~getAllAdminClientUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAdminClient}
     */
    this.getAllAdminClientUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAdminClient;

      return this.apiClient.adminCallApi(
        '/client', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, true, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAdminClientUsingPut operation.
     * @callback module:api/AdminClientApi~updateAdminClientUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an admin client
     * Update an admin client
     * @param {module:model/AdminClient} client client
     * @param {Number} clientId client_id
     * @param {module:api/AdminClientApi~updateAdminClientUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminClient}
     */
    this.updateAdminClientUsingPut = function(client, clientId, callback) {
      var postBody = client;

      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling updateAdminClientUsingPut");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateAdminClientUsingPut");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AdminClient;

      return this.apiClient.adminCallApi(
        '/client/{client_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, true, callback
      );
    }
  };

  return exports;
}));
