/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FinancialStatement', 'model/PageFinancialStatement'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FinancialStatement'), require('../model/PageFinancialStatement'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.FinancialStatementApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.FinancialStatement, root.HydrogenNucleusApi.PageFinancialStatement);
  }
}(this, function(ApiClient, FinancialStatement, PageFinancialStatement) {
  'use strict';

  /**
   * FinancialStatement service.
   * @module api/FinancialStatementApi
   * @version 1.9.2
   */

  /**
   * Constructs a new FinancialStatementApi. 
   * @alias module:api/FinancialStatementApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createFinancialStatementUsingPost operation.
     * @callback module:api/FinancialStatementApi~createFinancialStatementUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an financialStatement
     * Store stats pulled from financialStatement vendors.
     * @param {module:model/FinancialStatement} financialStatement financialStatement
     * @param {module:api/FinancialStatementApi~createFinancialStatementUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialStatement}
     */
    this.createFinancialStatementUsingPost = function(financialStatement, callback) {
      var postBody = financialStatement;

      // verify the required parameter 'financialStatement' is set
      if (financialStatement === undefined || financialStatement === null) {
        throw new Error("Missing the required parameter 'financialStatement' when calling createFinancialStatementUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = FinancialStatement;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_statement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFinancialStatementUsingDelete operation.
     * @callback module:api/FinancialStatementApi~deleteFinancialStatementUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an financialStatement
     * Permanently delete an financialStatement.
     * @param {String} financialStatementId UUID financialStatement_id
     * @param {module:api/FinancialStatementApi~deleteFinancialStatementUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFinancialStatementUsingDelete = function(financialStatementId, callback) {
      var postBody = null;

      // verify the required parameter 'financialStatementId' is set
      if (financialStatementId === undefined || financialStatementId === null) {
        throw new Error("Missing the required parameter 'financialStatementId' when calling deleteFinancialStatementUsingDelete");
      }


      var pathParams = {
        'financial_statement_id': financialStatementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_statement/{financial_statement_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinancialStatementAllUsingGet operation.
     * @callback module:api/FinancialStatementApi~getFinancialStatementAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageFinancialStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all financialStatement
     * Get information for all financialStatement for all clients defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FinancialStatementApi~getFinancialStatementAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageFinancialStatement}
     */
    this.getFinancialStatementAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageFinancialStatement;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_statement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinancialStatementUsingGet operation.
     * @callback module:api/FinancialStatementApi~getFinancialStatementUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an financialStatement
     * Retrieve the information for a specific financialStatement associated with a client.
     * @param {String} financialStatementId UUID financial_statement_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/FinancialStatementApi~getFinancialStatementUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialStatement}
     */
    this.getFinancialStatementUsingGet = function(financialStatementId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'financialStatementId' is set
      if (financialStatementId === undefined || financialStatementId === null) {
        throw new Error("Missing the required parameter 'financialStatementId' when calling getFinancialStatementUsingGet");
      }


      var pathParams = {
        'financial_statement_id': financialStatementId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = FinancialStatement;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_statement/{financial_statement_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFinancialStatementUsingPut operation.
     * @callback module:api/FinancialStatementApi~updateFinancialStatementUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an financialStatement
     * Update the information for an financialStatement.
     * @param {module:model/FinancialStatement} financialStatement financialStatement
     * @param {String} financialStatementId UUID financialStatement_id
     * @param {module:api/FinancialStatementApi~updateFinancialStatementUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialStatement}
     */
    this.updateFinancialStatementUsingPut = function(financialStatement, financialStatementId, callback) {
      var postBody = financialStatement;

      // verify the required parameter 'financialStatement' is set
      if (financialStatement === undefined || financialStatement === null) {
        throw new Error("Missing the required parameter 'financialStatement' when calling updateFinancialStatementUsingPut");
      }

      // verify the required parameter 'financialStatementId' is set
      if (financialStatementId === undefined || financialStatementId === null) {
        throw new Error("Missing the required parameter 'financialStatementId' when calling updateFinancialStatementUsingPut");
      }


      var pathParams = {
        'financial_statement_id': financialStatementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = FinancialStatement;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_statement/{financial_statement_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
