/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.8.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AvailableDateDoubleVO', 'model/Client', 'model/ClientStatus', 'model/PageClient', 'model/PageClientStatus', 'model/PagePortfolioTransaction', 'model/PortfolioHoldingAgg', 'model/VClientGoalViewData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AvailableDateDoubleVO'), require('../model/Client'), require('../model/ClientStatus'), require('../model/PageClient'), require('../model/PageClientStatus'), require('../model/PagePortfolioTransaction'), require('../model/PortfolioHoldingAgg'), require('../model/VClientGoalViewData'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.ClientApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.AvailableDateDoubleVO, root.HydrogenNucleusApi.Client, root.HydrogenNucleusApi.ClientStatus, root.HydrogenNucleusApi.PageClient, root.HydrogenNucleusApi.PageClientStatus, root.HydrogenNucleusApi.PagePortfolioTransaction, root.HydrogenNucleusApi.PortfolioHoldingAgg, root.HydrogenNucleusApi.VClientGoalViewData);
  }
}(this, function(ApiClient, AvailableDateDoubleVO, Client, ClientStatus, PageClient, PageClientStatus, PagePortfolioTransaction, PortfolioHoldingAgg, VClientGoalViewData) {
  'use strict';

  /**
   * Client service.
   * @module api/ClientApi
   * @version 1.8.0
   */

  /**
   * Constructs a new ClientApi. 
   * @alias module:api/ClientApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createClientStatusUsingPost operation.
     * @callback module:api/ClientApi~createClientStatusUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an client status
     * Create an client status record for an client.
     * @param {module:model/ClientStatus} clientStatusRequest clientStatusRequest
     * @param {module:api/ClientApi~createClientStatusUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientStatus}
     */
    this.createClientStatusUsingPost = function(clientStatusRequest, callback) {
      var postBody = clientStatusRequest;

      // verify the required parameter 'clientStatusRequest' is set
      if (clientStatusRequest === undefined || clientStatusRequest === null) {
        throw new Error("Missing the required parameter 'clientStatusRequest' when calling createClientStatusUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ClientStatus;

      return this.apiClient.callApi(
        '/client_status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClientUsingPost operation.
     * @callback module:api/ClientApi~createClientUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a client
     * Create a new client, or register a new user, with your firm.
     * @param {module:model/Client} clientRequest clientRequest
     * @param {module:api/ClientApi~createClientUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.createClientUsingPost = function(clientRequest, callback) {
      var postBody = clientRequest;

      // verify the required parameter 'clientRequest' is set
      if (clientRequest === undefined || clientRequest === null) {
        throw new Error("Missing the required parameter 'clientRequest' when calling createClientUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/client', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClientStatusUsingDelete operation.
     * @callback module:api/ClientApi~deleteClientStatusUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an client status
     * Permanently delete an client status record from an clientâ€™s history.
     * @param {String} clientStatusId UUID client_status_id
     * @param {module:api/ClientApi~deleteClientStatusUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteClientStatusUsingDelete = function(clientStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'clientStatusId' is set
      if (clientStatusId === undefined || clientStatusId === null) {
        throw new Error("Missing the required parameter 'clientStatusId' when calling deleteClientStatusUsingDelete");
      }


      var pathParams = {
        'client_status_id': clientStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/client_status/{client_status_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClientUsingDelete operation.
     * @callback module:api/ClientApi~deleteClientUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client
     * Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
     * @param {String} clientId UUID client_id
     * @param {module:api/ClientApi~deleteClientUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteClientUsingDelete = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteClientUsingDelete");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/client/{client_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientAccountOverviewUsingGet operation.
     * @callback module:api/ClientApi~getClientAccountOverviewUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client Account overview
     * @param {String} clientId UUID client_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {module:api/ClientApi~getClientAccountOverviewUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getClientAccountOverviewUsingGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientAccountOverviewUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/client/{client_id}/account_overview', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientAdvisorOverviewUsingGet operation.
     * @callback module:api/ClientApi~getClientAdvisorOverviewUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advisor overview
     * @param {String} clientId UUID client_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showClients show_clients (default to false)
     * @param {module:api/ClientApi~getClientAdvisorOverviewUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getClientAdvisorOverviewUsingGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientAdvisorOverviewUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'show_clients': opts['showClients'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/client/{client_id}/advisor_overview', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientAllUsingGet operation.
     * @callback module:api/ClientApi~getClientAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all clients
     * Get details for all clients registered with your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/ClientApi~getClientAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageClient}
     */
    this.getClientAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageClient;

      return this.apiClient.callApi(
        '/client', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientAssetSizeUsingGet operation.
     * @callback module:api/ClientApi~getClientAssetSizeUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableDateDoubleVO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client asset sizes
     * Get a list of asset sizes per date for a client.
     * @param {String} clientId UUID client_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion Currency Code
     * @param {Date} opts.endDate end date (default to null)
     * @param {Boolean} opts.excludeSubledger exclude_subledger (default to false)
     * @param {Boolean} opts.getLatest true or false
     * @param {String} opts.sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
     * @param {Date} opts.startDate start date (default to null)
     * @param {module:api/ClientApi~getClientAssetSizeUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableDateDoubleVO>}
     */
    this.getClientAssetSizeUsingGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientAssetSizeUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion'],
        'end_date': opts['endDate'],
        'exclude_subledger': opts['excludeSubledger'],
        'get_latest': opts['getLatest'],
        'sort_type': opts['sortType'],
        'start_date': opts['startDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [AvailableDateDoubleVO];

      return this.apiClient.callApi(
        '/client/{client_id}/asset_size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientGoalOverviewUsingGet operation.
     * @callback module:api/ClientApi~getClientGoalOverviewUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VClientGoalViewData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve client&#39;s goal details 
     * Retrieve client&#39;s goal details
     * @param {String} clientId UUID client_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.portfolioGoal portfolio_goal (default to false)
     * @param {module:api/ClientApi~getClientGoalOverviewUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VClientGoalViewData}
     */
    this.getClientGoalOverviewUsingGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientGoalOverviewUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'portfolio_goal': opts['portfolioGoal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = VClientGoalViewData;

      return this.apiClient.callApi(
        '/client/{client_id}/goal_overview', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientHoldingUsingGet operation.
     * @callback module:api/ClientApi~getClientHoldingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortfolioHoldingAgg>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client holdings
     * Get the information for all the securities that are currently being held by a client registered with your firm.
     * @param {String} clientId UUID client_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion Currency Code
     * @param {String} opts.endDate end date - yyyy-mm-dd
     * @param {Boolean} opts.getLatest true or false
     * @param {String} opts.startDate start date - yyyy-mm-dd
     * @param {module:api/ClientApi~getClientHoldingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortfolioHoldingAgg>}
     */
    this.getClientHoldingUsingGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientHoldingUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion'],
        'end_date': opts['endDate'],
        'get_latest': opts['getLatest'],
        'start_date': opts['startDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [PortfolioHoldingAgg];

      return this.apiClient.callApi(
        '/client/{client_id}/holding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientStatusAllUsingGet operation.
     * @callback module:api/ClientApi~getClientStatusAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageClientStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client statuses
     * Get the client status history information for all clients.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/ClientApi~getClientStatusAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageClientStatus}
     */
    this.getClientStatusAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageClientStatus;

      return this.apiClient.callApi(
        '/client_status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientStatusUsingGet operation.
     * @callback module:api/ClientApi~getClientStatusUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an client status
     * Retrieve the information for a specific client status record for an client.
     * @param {String} clientStatusId UUID client_status_id
     * @param {module:api/ClientApi~getClientStatusUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientStatus}
     */
    this.getClientStatusUsingGet = function(clientStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'clientStatusId' is set
      if (clientStatusId === undefined || clientStatusId === null) {
        throw new Error("Missing the required parameter 'clientStatusId' when calling getClientStatusUsingGet");
      }


      var pathParams = {
        'client_status_id': clientStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ClientStatus;

      return this.apiClient.callApi(
        '/client_status/{client_status_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientTransactionAllUsingGet operation.
     * @callback module:api/ClientApi~getClientTransactionAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client transactions
     * Get the information for all transactions under a client registered with your firm.
     * @param {String} clientId UUID client_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.endDate end date - yyyy-mm-dd
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {String} opts.startDate start date - yyyy-mm-dd
     * @param {module:api/ClientApi~getClientTransactionAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioTransaction}
     */
    this.getClientTransactionAllUsingGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientTransactionAllUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'end_date': opts['endDate'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
        'start_date': opts['startDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioTransaction;

      return this.apiClient.callApi(
        '/client/{client_id}/transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientUsingGet operation.
     * @callback module:api/ClientApi~getClientUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client
     * Retrieve the information for a client registered with your firm.
     * @param {String} clientId UUID client_id
     * @param {module:api/ClientApi~getClientUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.getClientUsingGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/client/{client_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientStatusUsingPut operation.
     * @callback module:api/ClientApi~updateClientStatusUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an client status
     * Update an client status record for an client.
     * @param {Object} clientStatus client_status
     * @param {String} clientStatusId UUID client_status_id
     * @param {module:api/ClientApi~updateClientStatusUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientStatus}
     */
    this.updateClientStatusUsingPut = function(clientStatus, clientStatusId, callback) {
      var postBody = clientStatus;

      // verify the required parameter 'clientStatus' is set
      if (clientStatus === undefined || clientStatus === null) {
        throw new Error("Missing the required parameter 'clientStatus' when calling updateClientStatusUsingPut");
      }

      // verify the required parameter 'clientStatusId' is set
      if (clientStatusId === undefined || clientStatusId === null) {
        throw new Error("Missing the required parameter 'clientStatusId' when calling updateClientStatusUsingPut");
      }


      var pathParams = {
        'client_status_id': clientStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ClientStatus;

      return this.apiClient.callApi(
        '/client_status/{client_status_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientUsingPut operation.
     * @callback module:api/ClientApi~updateClientUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client
     * Update the information for a client registered with your firm.
     * @param {Object} client client
     * @param {String} clientId UUID client_id
     * @param {module:api/ClientApi~updateClientUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.updateClientUsingPut = function(client, clientId, callback) {
      var postBody = client;

      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling updateClientUsingPut");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateClientUsingPut");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/client/{client_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
