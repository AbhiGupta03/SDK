# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AggregationAccountAggregateDataVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregation_account_balances': 'AggregationAccountBalanceAggregateDataVO',
        'aggregation_account_details': 'AggregationAccountDetailsAggregateDataVO',
        'aggregation_account_holdings': 'list[AggregationAccountHoldingAggregateDataVO]',
        'aggregation_account_id': 'str',
        'aggregation_account_transactions': 'list[AggregationAccountTransactionAggregateDataVO]'
    }

    attribute_map = {
        'aggregation_account_balances': 'aggregation_account_balances',
        'aggregation_account_details': 'aggregation_account_details',
        'aggregation_account_holdings': 'aggregation_account_holdings',
        'aggregation_account_id': 'aggregation_account_id',
        'aggregation_account_transactions': 'aggregation_account_transactions'
    }

    def __init__(self, aggregation_account_balances=None, aggregation_account_details=None, aggregation_account_holdings=None, aggregation_account_id=None, aggregation_account_transactions=None):  # noqa: E501
        """AggregationAccountAggregateDataVO - a model defined in Swagger"""  # noqa: E501

        self._aggregation_account_balances = None
        self._aggregation_account_details = None
        self._aggregation_account_holdings = None
        self._aggregation_account_id = None
        self._aggregation_account_transactions = None
        self.discriminator = None

        if aggregation_account_balances is not None:
            self.aggregation_account_balances = aggregation_account_balances
        if aggregation_account_details is not None:
            self.aggregation_account_details = aggregation_account_details
        if aggregation_account_holdings is not None:
            self.aggregation_account_holdings = aggregation_account_holdings
        if aggregation_account_id is not None:
            self.aggregation_account_id = aggregation_account_id
        if aggregation_account_transactions is not None:
            self.aggregation_account_transactions = aggregation_account_transactions

    @property
    def aggregation_account_balances(self):
        """Gets the aggregation_account_balances of this AggregationAccountAggregateDataVO.  # noqa: E501


        :return: The aggregation_account_balances of this AggregationAccountAggregateDataVO.  # noqa: E501
        :rtype: AggregationAccountBalanceAggregateDataVO
        """
        return self._aggregation_account_balances

    @aggregation_account_balances.setter
    def aggregation_account_balances(self, aggregation_account_balances):
        """Sets the aggregation_account_balances of this AggregationAccountAggregateDataVO.


        :param aggregation_account_balances: The aggregation_account_balances of this AggregationAccountAggregateDataVO.  # noqa: E501
        :type: AggregationAccountBalanceAggregateDataVO
        """

        self._aggregation_account_balances = aggregation_account_balances

    @property
    def aggregation_account_details(self):
        """Gets the aggregation_account_details of this AggregationAccountAggregateDataVO.  # noqa: E501


        :return: The aggregation_account_details of this AggregationAccountAggregateDataVO.  # noqa: E501
        :rtype: AggregationAccountDetailsAggregateDataVO
        """
        return self._aggregation_account_details

    @aggregation_account_details.setter
    def aggregation_account_details(self, aggregation_account_details):
        """Sets the aggregation_account_details of this AggregationAccountAggregateDataVO.


        :param aggregation_account_details: The aggregation_account_details of this AggregationAccountAggregateDataVO.  # noqa: E501
        :type: AggregationAccountDetailsAggregateDataVO
        """

        self._aggregation_account_details = aggregation_account_details

    @property
    def aggregation_account_holdings(self):
        """Gets the aggregation_account_holdings of this AggregationAccountAggregateDataVO.  # noqa: E501


        :return: The aggregation_account_holdings of this AggregationAccountAggregateDataVO.  # noqa: E501
        :rtype: list[AggregationAccountHoldingAggregateDataVO]
        """
        return self._aggregation_account_holdings

    @aggregation_account_holdings.setter
    def aggregation_account_holdings(self, aggregation_account_holdings):
        """Sets the aggregation_account_holdings of this AggregationAccountAggregateDataVO.


        :param aggregation_account_holdings: The aggregation_account_holdings of this AggregationAccountAggregateDataVO.  # noqa: E501
        :type: list[AggregationAccountHoldingAggregateDataVO]
        """

        self._aggregation_account_holdings = aggregation_account_holdings

    @property
    def aggregation_account_id(self):
        """Gets the aggregation_account_id of this AggregationAccountAggregateDataVO.  # noqa: E501


        :return: The aggregation_account_id of this AggregationAccountAggregateDataVO.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_account_id

    @aggregation_account_id.setter
    def aggregation_account_id(self, aggregation_account_id):
        """Sets the aggregation_account_id of this AggregationAccountAggregateDataVO.


        :param aggregation_account_id: The aggregation_account_id of this AggregationAccountAggregateDataVO.  # noqa: E501
        :type: str
        """

        self._aggregation_account_id = aggregation_account_id

    @property
    def aggregation_account_transactions(self):
        """Gets the aggregation_account_transactions of this AggregationAccountAggregateDataVO.  # noqa: E501


        :return: The aggregation_account_transactions of this AggregationAccountAggregateDataVO.  # noqa: E501
        :rtype: list[AggregationAccountTransactionAggregateDataVO]
        """
        return self._aggregation_account_transactions

    @aggregation_account_transactions.setter
    def aggregation_account_transactions(self, aggregation_account_transactions):
        """Sets the aggregation_account_transactions of this AggregationAccountAggregateDataVO.


        :param aggregation_account_transactions: The aggregation_account_transactions of this AggregationAccountAggregateDataVO.  # noqa: E501
        :type: list[AggregationAccountTransactionAggregateDataVO]
        """

        self._aggregation_account_transactions = aggregation_account_transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggregationAccountAggregateDataVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregationAccountAggregateDataVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
