# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AggregateDataByCategoryForClientFromDbVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_holder': 'str',
        'account_name': 'str',
        'account_number': 'str',
        'aggregation_account_balance_id': 'str',
        'aggregation_account_id': 'str',
        'available_balance': 'str',
        'available_credit': 'str',
        'balance': 'str',
        'balance_time_stamp': 'datetime',
        'category': 'str',
        'client_id': 'str',
        'currency_code': 'str',
        'financial_offer_id': 'str',
        'institution_name': 'str',
        'is_active': 'bool',
        'is_asset': 'bool',
        'mask': 'str',
        'metadata': 'dict(str, str)',
        'subcategory': 'str'
    }

    attribute_map = {
        'account_holder': 'account_holder',
        'account_name': 'account_name',
        'account_number': 'account_number',
        'aggregation_account_balance_id': 'aggregation_account_balance_id',
        'aggregation_account_id': 'aggregation_account_id',
        'available_balance': 'available_balance',
        'available_credit': 'available_credit',
        'balance': 'balance',
        'balance_time_stamp': 'balance_time_stamp',
        'category': 'category',
        'client_id': 'client_id',
        'currency_code': 'currency_code',
        'financial_offer_id': 'financial_offer_id',
        'institution_name': 'institution_name',
        'is_active': 'is_active',
        'is_asset': 'is_asset',
        'mask': 'mask',
        'metadata': 'metadata',
        'subcategory': 'subcategory'
    }

    def __init__(self, account_holder=None, account_name=None, account_number=None, aggregation_account_balance_id=None, aggregation_account_id=None, available_balance=None, available_credit=None, balance=None, balance_time_stamp=None, category=None, client_id=None, currency_code=None, financial_offer_id=None, institution_name=None, is_active=None, is_asset=None, mask=None, metadata=None, subcategory=None):  # noqa: E501
        """AggregateDataByCategoryForClientFromDbVO - a model defined in Swagger"""  # noqa: E501

        self._account_holder = None
        self._account_name = None
        self._account_number = None
        self._aggregation_account_balance_id = None
        self._aggregation_account_id = None
        self._available_balance = None
        self._available_credit = None
        self._balance = None
        self._balance_time_stamp = None
        self._category = None
        self._client_id = None
        self._currency_code = None
        self._financial_offer_id = None
        self._institution_name = None
        self._is_active = None
        self._is_asset = None
        self._mask = None
        self._metadata = None
        self._subcategory = None
        self.discriminator = None

        if account_holder is not None:
            self.account_holder = account_holder
        if account_name is not None:
            self.account_name = account_name
        if account_number is not None:
            self.account_number = account_number
        if aggregation_account_balance_id is not None:
            self.aggregation_account_balance_id = aggregation_account_balance_id
        if aggregation_account_id is not None:
            self.aggregation_account_id = aggregation_account_id
        if available_balance is not None:
            self.available_balance = available_balance
        if available_credit is not None:
            self.available_credit = available_credit
        if balance is not None:
            self.balance = balance
        if balance_time_stamp is not None:
            self.balance_time_stamp = balance_time_stamp
        if category is not None:
            self.category = category
        if client_id is not None:
            self.client_id = client_id
        if currency_code is not None:
            self.currency_code = currency_code
        if financial_offer_id is not None:
            self.financial_offer_id = financial_offer_id
        if institution_name is not None:
            self.institution_name = institution_name
        if is_active is not None:
            self.is_active = is_active
        if is_asset is not None:
            self.is_asset = is_asset
        if mask is not None:
            self.mask = mask
        if metadata is not None:
            self.metadata = metadata
        if subcategory is not None:
            self.subcategory = subcategory

    @property
    def account_holder(self):
        """Gets the account_holder of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The account_holder of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._account_holder

    @account_holder.setter
    def account_holder(self, account_holder):
        """Sets the account_holder of this AggregateDataByCategoryForClientFromDbVO.


        :param account_holder: The account_holder of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._account_holder = account_holder

    @property
    def account_name(self):
        """Gets the account_name of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The account_name of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AggregateDataByCategoryForClientFromDbVO.


        :param account_name: The account_name of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The account_number of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AggregateDataByCategoryForClientFromDbVO.


        :param account_number: The account_number of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def aggregation_account_balance_id(self):
        """Gets the aggregation_account_balance_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The aggregation_account_balance_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_account_balance_id

    @aggregation_account_balance_id.setter
    def aggregation_account_balance_id(self, aggregation_account_balance_id):
        """Sets the aggregation_account_balance_id of this AggregateDataByCategoryForClientFromDbVO.


        :param aggregation_account_balance_id: The aggregation_account_balance_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._aggregation_account_balance_id = aggregation_account_balance_id

    @property
    def aggregation_account_id(self):
        """Gets the aggregation_account_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The aggregation_account_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_account_id

    @aggregation_account_id.setter
    def aggregation_account_id(self, aggregation_account_id):
        """Sets the aggregation_account_id of this AggregateDataByCategoryForClientFromDbVO.


        :param aggregation_account_id: The aggregation_account_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._aggregation_account_id = aggregation_account_id

    @property
    def available_balance(self):
        """Gets the available_balance of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The available_balance of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this AggregateDataByCategoryForClientFromDbVO.


        :param available_balance: The available_balance of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._available_balance = available_balance

    @property
    def available_credit(self):
        """Gets the available_credit of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The available_credit of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit):
        """Sets the available_credit of this AggregateDataByCategoryForClientFromDbVO.


        :param available_credit: The available_credit of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._available_credit = available_credit

    @property
    def balance(self):
        """Gets the balance of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The balance of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AggregateDataByCategoryForClientFromDbVO.


        :param balance: The balance of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def balance_time_stamp(self):
        """Gets the balance_time_stamp of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The balance_time_stamp of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: datetime
        """
        return self._balance_time_stamp

    @balance_time_stamp.setter
    def balance_time_stamp(self, balance_time_stamp):
        """Sets the balance_time_stamp of this AggregateDataByCategoryForClientFromDbVO.


        :param balance_time_stamp: The balance_time_stamp of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: datetime
        """

        self._balance_time_stamp = balance_time_stamp

    @property
    def category(self):
        """Gets the category of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The category of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AggregateDataByCategoryForClientFromDbVO.


        :param category: The category of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def client_id(self):
        """Gets the client_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The client_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AggregateDataByCategoryForClientFromDbVO.


        :param client_id: The client_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def currency_code(self):
        """Gets the currency_code of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The currency_code of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AggregateDataByCategoryForClientFromDbVO.


        :param currency_code: The currency_code of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def financial_offer_id(self):
        """Gets the financial_offer_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The financial_offer_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._financial_offer_id

    @financial_offer_id.setter
    def financial_offer_id(self, financial_offer_id):
        """Sets the financial_offer_id of this AggregateDataByCategoryForClientFromDbVO.


        :param financial_offer_id: The financial_offer_id of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._financial_offer_id = financial_offer_id

    @property
    def institution_name(self):
        """Gets the institution_name of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The institution_name of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._institution_name

    @institution_name.setter
    def institution_name(self, institution_name):
        """Sets the institution_name of this AggregateDataByCategoryForClientFromDbVO.


        :param institution_name: The institution_name of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._institution_name = institution_name

    @property
    def is_active(self):
        """Gets the is_active of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The is_active of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AggregateDataByCategoryForClientFromDbVO.


        :param is_active: The is_active of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_asset(self):
        """Gets the is_asset of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The is_asset of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_asset

    @is_asset.setter
    def is_asset(self, is_asset):
        """Sets the is_asset of this AggregateDataByCategoryForClientFromDbVO.


        :param is_asset: The is_asset of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: bool
        """

        self._is_asset = is_asset

    @property
    def mask(self):
        """Gets the mask of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The mask of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this AggregateDataByCategoryForClientFromDbVO.


        :param mask: The mask of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._mask = mask

    @property
    def metadata(self):
        """Gets the metadata of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The metadata of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AggregateDataByCategoryForClientFromDbVO.


        :param metadata: The metadata of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def subcategory(self):
        """Gets the subcategory of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501


        :return: The subcategory of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this AggregateDataByCategoryForClientFromDbVO.


        :param subcategory: The subcategory of this AggregateDataByCategoryForClientFromDbVO.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggregateDataByCategoryForClientFromDbVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregateDataByCategoryForClientFromDbVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
