# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountOverviewVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_asset_size': 'float',
        'account_asset_size_date': 'datetime',
        'account_holdings': 'list[AccountHoldingVO]',
        'account_id': 'str',
        'account_name': 'str',
        'account_type_id': 'str',
        'account_type_name': 'str',
        'allocations': 'list[AllocationVO]',
        'clients': 'list[AccountClientsOverviewVO]',
        'deposits': 'list[DepositVO]',
        'withdrawals': 'list[WithdrawalVO]'
    }

    attribute_map = {
        'account_asset_size': 'account_asset_size',
        'account_asset_size_date': 'account_asset_size_date',
        'account_holdings': 'account_holdings',
        'account_id': 'account_id',
        'account_name': 'account_name',
        'account_type_id': 'account_type_id',
        'account_type_name': 'account_type_name',
        'allocations': 'allocations',
        'clients': 'clients',
        'deposits': 'deposits',
        'withdrawals': 'withdrawals'
    }

    def __init__(self, account_asset_size=None, account_asset_size_date=None, account_holdings=None, account_id=None, account_name=None, account_type_id=None, account_type_name=None, allocations=None, clients=None, deposits=None, withdrawals=None):  # noqa: E501
        """AccountOverviewVO - a model defined in Swagger"""  # noqa: E501

        self._account_asset_size = None
        self._account_asset_size_date = None
        self._account_holdings = None
        self._account_id = None
        self._account_name = None
        self._account_type_id = None
        self._account_type_name = None
        self._allocations = None
        self._clients = None
        self._deposits = None
        self._withdrawals = None
        self.discriminator = None

        if account_asset_size is not None:
            self.account_asset_size = account_asset_size
        if account_asset_size_date is not None:
            self.account_asset_size_date = account_asset_size_date
        if account_holdings is not None:
            self.account_holdings = account_holdings
        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if account_type_id is not None:
            self.account_type_id = account_type_id
        if account_type_name is not None:
            self.account_type_name = account_type_name
        if allocations is not None:
            self.allocations = allocations
        if clients is not None:
            self.clients = clients
        if deposits is not None:
            self.deposits = deposits
        if withdrawals is not None:
            self.withdrawals = withdrawals

    @property
    def account_asset_size(self):
        """Gets the account_asset_size of this AccountOverviewVO.  # noqa: E501


        :return: The account_asset_size of this AccountOverviewVO.  # noqa: E501
        :rtype: float
        """
        return self._account_asset_size

    @account_asset_size.setter
    def account_asset_size(self, account_asset_size):
        """Sets the account_asset_size of this AccountOverviewVO.


        :param account_asset_size: The account_asset_size of this AccountOverviewVO.  # noqa: E501
        :type: float
        """

        self._account_asset_size = account_asset_size

    @property
    def account_asset_size_date(self):
        """Gets the account_asset_size_date of this AccountOverviewVO.  # noqa: E501


        :return: The account_asset_size_date of this AccountOverviewVO.  # noqa: E501
        :rtype: datetime
        """
        return self._account_asset_size_date

    @account_asset_size_date.setter
    def account_asset_size_date(self, account_asset_size_date):
        """Sets the account_asset_size_date of this AccountOverviewVO.


        :param account_asset_size_date: The account_asset_size_date of this AccountOverviewVO.  # noqa: E501
        :type: datetime
        """

        self._account_asset_size_date = account_asset_size_date

    @property
    def account_holdings(self):
        """Gets the account_holdings of this AccountOverviewVO.  # noqa: E501


        :return: The account_holdings of this AccountOverviewVO.  # noqa: E501
        :rtype: list[AccountHoldingVO]
        """
        return self._account_holdings

    @account_holdings.setter
    def account_holdings(self, account_holdings):
        """Sets the account_holdings of this AccountOverviewVO.


        :param account_holdings: The account_holdings of this AccountOverviewVO.  # noqa: E501
        :type: list[AccountHoldingVO]
        """

        self._account_holdings = account_holdings

    @property
    def account_id(self):
        """Gets the account_id of this AccountOverviewVO.  # noqa: E501


        :return: The account_id of this AccountOverviewVO.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountOverviewVO.


        :param account_id: The account_id of this AccountOverviewVO.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this AccountOverviewVO.  # noqa: E501


        :return: The account_name of this AccountOverviewVO.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountOverviewVO.


        :param account_name: The account_name of this AccountOverviewVO.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_type_id(self):
        """Gets the account_type_id of this AccountOverviewVO.  # noqa: E501


        :return: The account_type_id of this AccountOverviewVO.  # noqa: E501
        :rtype: str
        """
        return self._account_type_id

    @account_type_id.setter
    def account_type_id(self, account_type_id):
        """Sets the account_type_id of this AccountOverviewVO.


        :param account_type_id: The account_type_id of this AccountOverviewVO.  # noqa: E501
        :type: str
        """

        self._account_type_id = account_type_id

    @property
    def account_type_name(self):
        """Gets the account_type_name of this AccountOverviewVO.  # noqa: E501


        :return: The account_type_name of this AccountOverviewVO.  # noqa: E501
        :rtype: str
        """
        return self._account_type_name

    @account_type_name.setter
    def account_type_name(self, account_type_name):
        """Sets the account_type_name of this AccountOverviewVO.


        :param account_type_name: The account_type_name of this AccountOverviewVO.  # noqa: E501
        :type: str
        """

        self._account_type_name = account_type_name

    @property
    def allocations(self):
        """Gets the allocations of this AccountOverviewVO.  # noqa: E501


        :return: The allocations of this AccountOverviewVO.  # noqa: E501
        :rtype: list[AllocationVO]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this AccountOverviewVO.


        :param allocations: The allocations of this AccountOverviewVO.  # noqa: E501
        :type: list[AllocationVO]
        """

        self._allocations = allocations

    @property
    def clients(self):
        """Gets the clients of this AccountOverviewVO.  # noqa: E501


        :return: The clients of this AccountOverviewVO.  # noqa: E501
        :rtype: list[AccountClientsOverviewVO]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this AccountOverviewVO.


        :param clients: The clients of this AccountOverviewVO.  # noqa: E501
        :type: list[AccountClientsOverviewVO]
        """

        self._clients = clients

    @property
    def deposits(self):
        """Gets the deposits of this AccountOverviewVO.  # noqa: E501


        :return: The deposits of this AccountOverviewVO.  # noqa: E501
        :rtype: list[DepositVO]
        """
        return self._deposits

    @deposits.setter
    def deposits(self, deposits):
        """Sets the deposits of this AccountOverviewVO.


        :param deposits: The deposits of this AccountOverviewVO.  # noqa: E501
        :type: list[DepositVO]
        """

        self._deposits = deposits

    @property
    def withdrawals(self):
        """Gets the withdrawals of this AccountOverviewVO.  # noqa: E501


        :return: The withdrawals of this AccountOverviewVO.  # noqa: E501
        :rtype: list[WithdrawalVO]
        """
        return self._withdrawals

    @withdrawals.setter
    def withdrawals(self, withdrawals):
        """Sets the withdrawals of this AccountOverviewVO.


        :param withdrawals: The withdrawals of this AccountOverviewVO.  # noqa: E501
        :type: list[WithdrawalVO]
        """

        self._withdrawals = withdrawals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountOverviewVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountOverviewVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
