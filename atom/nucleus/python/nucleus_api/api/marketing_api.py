# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nucleus_api.api_client import ApiClient


class MarketingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_campaign_data_using_post(self, campaign_data_request, **kwargs):  # noqa: E501
        """Create a campaign data record  # noqa: E501

        Create a new  campaign data record for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_data_using_post(campaign_data_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignData campaign_data_request: campaignDataRequest (required)
        :return: CampaignData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_campaign_data_using_post_with_http_info(campaign_data_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_campaign_data_using_post_with_http_info(campaign_data_request, **kwargs)  # noqa: E501
            return data

    def create_campaign_data_using_post_with_http_info(self, campaign_data_request, **kwargs):  # noqa: E501
        """Create a campaign data record  # noqa: E501

        Create a new  campaign data record for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_data_using_post_with_http_info(campaign_data_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignData campaign_data_request: campaignDataRequest (required)
        :return: CampaignData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_data_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_campaign_data_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_data_request' is set
        if ('campaign_data_request' not in params or
                params['campaign_data_request'] is None):
            raise ValueError("Missing the required parameter `campaign_data_request` when calling `create_campaign_data_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_data_request' in params:
            body_params = params['campaign_data_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_campaign_plan_using_post(self, campaign_plan_request, **kwargs):  # noqa: E501
        """Create a campaign plan  # noqa: E501

        Create a new campaign plan for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_plan_using_post(campaign_plan_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignPlan campaign_plan_request: campaignPlanRequest (required)
        :return: CampaignPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_campaign_plan_using_post_with_http_info(campaign_plan_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_campaign_plan_using_post_with_http_info(campaign_plan_request, **kwargs)  # noqa: E501
            return data

    def create_campaign_plan_using_post_with_http_info(self, campaign_plan_request, **kwargs):  # noqa: E501
        """Create a campaign plan  # noqa: E501

        Create a new campaign plan for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_plan_using_post_with_http_info(campaign_plan_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignPlan campaign_plan_request: campaignPlanRequest (required)
        :return: CampaignPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_plan_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_campaign_plan_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_plan_request' is set
        if ('campaign_plan_request' not in params or
                params['campaign_plan_request'] is None):
            raise ValueError("Missing the required parameter `campaign_plan_request` when calling `create_campaign_plan_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_plan_request' in params:
            body_params = params['campaign_plan_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_plan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_campaign_using_post(self, campaign_request, **kwargs):  # noqa: E501
        """Create a campaign  # noqa: E501

        Create a new campaign for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_using_post(campaign_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Campaign campaign_request: campaignRequest (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_campaign_using_post_with_http_info(campaign_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_campaign_using_post_with_http_info(campaign_request, **kwargs)  # noqa: E501
            return data

    def create_campaign_using_post_with_http_info(self, campaign_request, **kwargs):  # noqa: E501
        """Create a campaign  # noqa: E501

        Create a new campaign for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_using_post_with_http_info(campaign_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Campaign campaign_request: campaignRequest (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_campaign_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_request' is set
        if ('campaign_request' not in params or
                params['campaign_request'] is None):
            raise ValueError("Missing the required parameter `campaign_request` when calling `create_campaign_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_request' in params:
            body_params = params['campaign_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Campaign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_campaign_using_post(self, campaign_mapping_request, **kwargs):  # noqa: E501
        """Mark a client signing up through a campaign  # noqa: E501

        We are adding a campaign association to a clientId or ip.  We create this association because we are trying to measure how affective a campaign is in directing traffic to our website.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_campaign_using_post(campaign_mapping_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientCampaignMapping campaign_mapping_request: campaignMappingRequest (required)
        :return: ClientCampaignMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_campaign_using_post_with_http_info(campaign_mapping_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_campaign_using_post_with_http_info(campaign_mapping_request, **kwargs)  # noqa: E501
            return data

    def create_client_campaign_using_post_with_http_info(self, campaign_mapping_request, **kwargs):  # noqa: E501
        """Mark a client signing up through a campaign  # noqa: E501

        We are adding a campaign association to a clientId or ip.  We create this association because we are trying to measure how affective a campaign is in directing traffic to our website.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_campaign_using_post_with_http_info(campaign_mapping_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientCampaignMapping campaign_mapping_request: campaignMappingRequest (required)
        :return: ClientCampaignMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_mapping_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_campaign_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_mapping_request' is set
        if ('campaign_mapping_request' not in params or
                params['campaign_mapping_request'] is None):
            raise ValueError("Missing the required parameter `campaign_mapping_request` when calling `create_client_campaign_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_mapping_request' in params:
            body_params = params['campaign_mapping_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/client_campaign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCampaignMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_campaign_data_using_delete(self, campaign_data_id, **kwargs):  # noqa: E501
        """Delete a campaign data record  # noqa: E501

        Permanently delete a campaign data record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_data_using_delete(campaign_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_data_id: UUID campaign_data_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_campaign_data_using_delete_with_http_info(campaign_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_campaign_data_using_delete_with_http_info(campaign_data_id, **kwargs)  # noqa: E501
            return data

    def delete_campaign_data_using_delete_with_http_info(self, campaign_data_id, **kwargs):  # noqa: E501
        """Delete a campaign data record  # noqa: E501

        Permanently delete a campaign data record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_data_using_delete_with_http_info(campaign_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_data_id: UUID campaign_data_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_campaign_data_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_data_id' is set
        if ('campaign_data_id' not in params or
                params['campaign_data_id'] is None):
            raise ValueError("Missing the required parameter `campaign_data_id` when calling `delete_campaign_data_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_data_id' in params:
            path_params['campaign_data_id'] = params['campaign_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_data/{campaign_data_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_campaign_plan_using_delete(self, campaign_plan_id, **kwargs):  # noqa: E501
        """Delete a campaign plan  # noqa: E501

        Permanently delete a campaign plan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_plan_using_delete(campaign_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_plan_id: UUID campaign_plan_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_campaign_plan_using_delete_with_http_info(campaign_plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_campaign_plan_using_delete_with_http_info(campaign_plan_id, **kwargs)  # noqa: E501
            return data

    def delete_campaign_plan_using_delete_with_http_info(self, campaign_plan_id, **kwargs):  # noqa: E501
        """Delete a campaign plan  # noqa: E501

        Permanently delete a campaign plan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_plan_using_delete_with_http_info(campaign_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_plan_id: UUID campaign_plan_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_campaign_plan_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_plan_id' is set
        if ('campaign_plan_id' not in params or
                params['campaign_plan_id'] is None):
            raise ValueError("Missing the required parameter `campaign_plan_id` when calling `delete_campaign_plan_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_plan_id' in params:
            path_params['campaign_plan_id'] = params['campaign_plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_plan/{campaign_plan_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_campaign_using_delete(self, campaign_id, **kwargs):  # noqa: E501
        """Delete a campaign  # noqa: E501

        Permanently delete a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_using_delete(campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_id: Campaign Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_campaign_using_delete_with_http_info(campaign_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_campaign_using_delete_with_http_info(campaign_id, **kwargs)  # noqa: E501
            return data

    def delete_campaign_using_delete_with_http_info(self, campaign_id, **kwargs):  # noqa: E501
        """Delete a campaign  # noqa: E501

        Permanently delete a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_using_delete_with_http_info(campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_id: Campaign Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_campaign_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params or
                params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `delete_campaign_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_id' in params:
            path_params['campaign_id'] = params['campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign/{campaign_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_campaign_using_delete(self, client_campaign_id, **kwargs):  # noqa: E501
        """Delete a clients/ips pair under a campaign  # noqa: E501

        Permanently delete a clients/ips pair under a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_campaign_using_delete(client_campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_campaign_id: UUID client_campaign_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_campaign_using_delete_with_http_info(client_campaign_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_campaign_using_delete_with_http_info(client_campaign_id, **kwargs)  # noqa: E501
            return data

    def delete_client_campaign_using_delete_with_http_info(self, client_campaign_id, **kwargs):  # noqa: E501
        """Delete a clients/ips pair under a campaign  # noqa: E501

        Permanently delete a clients/ips pair under a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_campaign_using_delete_with_http_info(client_campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_campaign_id: UUID client_campaign_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_campaign_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_campaign_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_campaign_id' is set
        if ('client_campaign_id' not in params or
                params['client_campaign_id'] is None):
            raise ValueError("Missing the required parameter `client_campaign_id` when calling `delete_client_campaign_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_campaign_id' in params:
            path_params['client_campaign_id'] = params['client_campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/client_campaign/{client_campaign_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_campaign_all_using_get(self, **kwargs):  # noqa: E501
        """List all campaigns  # noqa: E501

        Get details for all campaigns defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCampaign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_campaign_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_campaign_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_campaign_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all campaigns  # noqa: E501

        Get details for all campaigns defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCampaign
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campaign_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageCampaign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_campaign_data_all_using_get(self, **kwargs):  # noqa: E501
        """List all campaign data  # noqa: E501

        Get details for all campaign data defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_data_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCampaignData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_campaign_data_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_campaign_data_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_campaign_data_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all campaign data  # noqa: E501

        Get details for all campaign data defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_data_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCampaignData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campaign_data_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageCampaignData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_campaign_data_using_get(self, campaign_data_id, **kwargs):  # noqa: E501
        """Retrieve a campaign data record  # noqa: E501

        Retrieve the information for a campaign data record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_data_using_get(campaign_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_data_id: UUID campaign_data_id (required)
        :return: CampaignData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_campaign_data_using_get_with_http_info(campaign_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_campaign_data_using_get_with_http_info(campaign_data_id, **kwargs)  # noqa: E501
            return data

    def get_campaign_data_using_get_with_http_info(self, campaign_data_id, **kwargs):  # noqa: E501
        """Retrieve a campaign data record  # noqa: E501

        Retrieve the information for a campaign data record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_data_using_get_with_http_info(campaign_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_data_id: UUID campaign_data_id (required)
        :return: CampaignData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campaign_data_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_data_id' is set
        if ('campaign_data_id' not in params or
                params['campaign_data_id'] is None):
            raise ValueError("Missing the required parameter `campaign_data_id` when calling `get_campaign_data_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_data_id' in params:
            path_params['campaign_data_id'] = params['campaign_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_data/{campaign_data_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_campaign_plan_all_using_get(self, **kwargs):  # noqa: E501
        """List all campaign plans  # noqa: E501

        Get details for all campaign plans defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_plan_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCampaignPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_campaign_plan_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_campaign_plan_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_campaign_plan_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all campaign plans  # noqa: E501

        Get details for all campaign plans defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_plan_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCampaignPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campaign_plan_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_plan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageCampaignPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_campaign_plan_using_get(self, campaign_plan_id, **kwargs):  # noqa: E501
        """Retrieve a campaign plan  # noqa: E501

        Retrieve the information for a campaign plan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_plan_using_get(campaign_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_plan_id: UUID campaign_plan_id (required)
        :return: CampaignPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_campaign_plan_using_get_with_http_info(campaign_plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_campaign_plan_using_get_with_http_info(campaign_plan_id, **kwargs)  # noqa: E501
            return data

    def get_campaign_plan_using_get_with_http_info(self, campaign_plan_id, **kwargs):  # noqa: E501
        """Retrieve a campaign plan  # noqa: E501

        Retrieve the information for a campaign plan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_plan_using_get_with_http_info(campaign_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_plan_id: UUID campaign_plan_id (required)
        :return: CampaignPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campaign_plan_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_plan_id' is set
        if ('campaign_plan_id' not in params or
                params['campaign_plan_id'] is None):
            raise ValueError("Missing the required parameter `campaign_plan_id` when calling `get_campaign_plan_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_plan_id' in params:
            path_params['campaign_plan_id'] = params['campaign_plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_plan/{campaign_plan_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_campaign_using_get(self, campaign_id, **kwargs):  # noqa: E501
        """Retrieve a campaign  # noqa: E501

        Retrieve the information for a campaign.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_using_get(campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_id: Campaign Id (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_campaign_using_get_with_http_info(campaign_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_campaign_using_get_with_http_info(campaign_id, **kwargs)  # noqa: E501
            return data

    def get_campaign_using_get_with_http_info(self, campaign_id, **kwargs):  # noqa: E501
        """Retrieve a campaign  # noqa: E501

        Retrieve the information for a campaign.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_campaign_using_get_with_http_info(campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str campaign_id: Campaign Id (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campaign_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params or
                params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `get_campaign_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_id' in params:
            path_params['campaign_id'] = params['campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign/{campaign_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Campaign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_campaign_all_using_get(self, **kwargs):  # noqa: E501
        """List all clients/ips under a campaign  # noqa: E501

        Get details for all clients/ips under a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_campaign_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageClientCampaignMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_campaign_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_client_campaign_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_client_campaign_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all clients/ips under a campaign  # noqa: E501

        Get details for all clients/ips under a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_campaign_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageClientCampaignMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_campaign_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/client_campaign', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageClientCampaignMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_campaign_using_get(self, client_campaign_id, **kwargs):  # noqa: E501
        """Retrieve a clients/ips pair under a campaign  # noqa: E501

        Retrieve the information for a clients/ips pair under a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_campaign_using_get(client_campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_campaign_id: UUID client_campaign_id (required)
        :return: ClientCampaignMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_campaign_using_get_with_http_info(client_campaign_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_campaign_using_get_with_http_info(client_campaign_id, **kwargs)  # noqa: E501
            return data

    def get_client_campaign_using_get_with_http_info(self, client_campaign_id, **kwargs):  # noqa: E501
        """Retrieve a clients/ips pair under a campaign  # noqa: E501

        Retrieve the information for a clients/ips pair under a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_campaign_using_get_with_http_info(client_campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_campaign_id: UUID client_campaign_id (required)
        :return: ClientCampaignMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_campaign_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_campaign_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_campaign_id' is set
        if ('client_campaign_id' not in params or
                params['client_campaign_id'] is None):
            raise ValueError("Missing the required parameter `client_campaign_id` when calling `get_client_campaign_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_campaign_id' in params:
            path_params['client_campaign_id'] = params['client_campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/client_campaign/{client_campaign_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCampaignMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_campaign_data_using_put(self, campaign_data, campaign_data_id, **kwargs):  # noqa: E501
        """Update a campaign data record  # noqa: E501

        Updated the information for a campaign data record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_data_using_put(campaign_data, campaign_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignPlan campaign_data: campaign_data (required)
        :param str campaign_data_id: UUID campaign_data_id (required)
        :return: CampaignData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_campaign_data_using_put_with_http_info(campaign_data, campaign_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_campaign_data_using_put_with_http_info(campaign_data, campaign_data_id, **kwargs)  # noqa: E501
            return data

    def update_campaign_data_using_put_with_http_info(self, campaign_data, campaign_data_id, **kwargs):  # noqa: E501
        """Update a campaign data record  # noqa: E501

        Updated the information for a campaign data record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_data_using_put_with_http_info(campaign_data, campaign_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignPlan campaign_data: campaign_data (required)
        :param str campaign_data_id: UUID campaign_data_id (required)
        :return: CampaignData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_data', 'campaign_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_data_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_data' is set
        if ('campaign_data' not in params or
                params['campaign_data'] is None):
            raise ValueError("Missing the required parameter `campaign_data` when calling `update_campaign_data_using_put`")  # noqa: E501
        # verify the required parameter 'campaign_data_id' is set
        if ('campaign_data_id' not in params or
                params['campaign_data_id'] is None):
            raise ValueError("Missing the required parameter `campaign_data_id` when calling `update_campaign_data_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_data_id' in params:
            path_params['campaign_data_id'] = params['campaign_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_data' in params:
            body_params = params['campaign_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_data/{campaign_data_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_campaign_plan_using_put(self, campaign_plan, campaign_plan_id, **kwargs):  # noqa: E501
        """Update a campaign plan  # noqa: E501

        Updated the information for a campaign plan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_plan_using_put(campaign_plan, campaign_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignPlan campaign_plan: campaign_plan (required)
        :param str campaign_plan_id: UUID campaign_plan_id (required)
        :return: CampaignPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_campaign_plan_using_put_with_http_info(campaign_plan, campaign_plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_campaign_plan_using_put_with_http_info(campaign_plan, campaign_plan_id, **kwargs)  # noqa: E501
            return data

    def update_campaign_plan_using_put_with_http_info(self, campaign_plan, campaign_plan_id, **kwargs):  # noqa: E501
        """Update a campaign plan  # noqa: E501

        Updated the information for a campaign plan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_plan_using_put_with_http_info(campaign_plan, campaign_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignPlan campaign_plan: campaign_plan (required)
        :param str campaign_plan_id: UUID campaign_plan_id (required)
        :return: CampaignPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_plan', 'campaign_plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_plan_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_plan' is set
        if ('campaign_plan' not in params or
                params['campaign_plan'] is None):
            raise ValueError("Missing the required parameter `campaign_plan` when calling `update_campaign_plan_using_put`")  # noqa: E501
        # verify the required parameter 'campaign_plan_id' is set
        if ('campaign_plan_id' not in params or
                params['campaign_plan_id'] is None):
            raise ValueError("Missing the required parameter `campaign_plan_id` when calling `update_campaign_plan_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_plan_id' in params:
            path_params['campaign_plan_id'] = params['campaign_plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_plan' in params:
            body_params = params['campaign_plan']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign_plan/{campaign_plan_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_campaign_using_put(self, campaign, campaign_id, **kwargs):  # noqa: E501
        """Update a campaign  # noqa: E501

        Updated the information for a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_using_put(campaign, campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Campaign campaign: campaign (required)
        :param str campaign_id: UUID campaign_id (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_campaign_using_put_with_http_info(campaign, campaign_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_campaign_using_put_with_http_info(campaign, campaign_id, **kwargs)  # noqa: E501
            return data

    def update_campaign_using_put_with_http_info(self, campaign, campaign_id, **kwargs):  # noqa: E501
        """Update a campaign  # noqa: E501

        Updated the information for a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_using_put_with_http_info(campaign, campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Campaign campaign: campaign (required)
        :param str campaign_id: UUID campaign_id (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign', 'campaign_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign' is set
        if ('campaign' not in params or
                params['campaign'] is None):
            raise ValueError("Missing the required parameter `campaign` when calling `update_campaign_using_put`")  # noqa: E501
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params or
                params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `update_campaign_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_id' in params:
            path_params['campaign_id'] = params['campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign' in params:
            body_params = params['campaign']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign/{campaign_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Campaign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_campaign_using_put(self, client_campaign_id, json_node, **kwargs):  # noqa: E501
        """Update a clients/ips pair under a campaign  # noqa: E501

        Updated the information for clients/ips pair under a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_campaign_using_put(client_campaign_id, json_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_campaign_id: UUID client_campaign_id (required)
        :param JsonNode json_node: jsonNode (required)
        :return: ClientCampaignMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_campaign_using_put_with_http_info(client_campaign_id, json_node, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_campaign_using_put_with_http_info(client_campaign_id, json_node, **kwargs)  # noqa: E501
            return data

    def update_client_campaign_using_put_with_http_info(self, client_campaign_id, json_node, **kwargs):  # noqa: E501
        """Update a clients/ips pair under a campaign  # noqa: E501

        Updated the information for clients/ips pair under a campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_campaign_using_put_with_http_info(client_campaign_id, json_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_campaign_id: UUID client_campaign_id (required)
        :param JsonNode json_node: jsonNode (required)
        :return: ClientCampaignMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_campaign_id', 'json_node']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_campaign_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_campaign_id' is set
        if ('client_campaign_id' not in params or
                params['client_campaign_id'] is None):
            raise ValueError("Missing the required parameter `client_campaign_id` when calling `update_client_campaign_using_put`")  # noqa: E501
        # verify the required parameter 'json_node' is set
        if ('json_node' not in params or
                params['json_node'] is None):
            raise ValueError("Missing the required parameter `json_node` when calling `update_client_campaign_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_campaign_id' in params:
            path_params['client_campaign_id'] = params['client_campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json_node' in params:
            body_params = params['json_node']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/client_campaign/{client_campaign_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCampaignMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
