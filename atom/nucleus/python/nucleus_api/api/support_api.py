# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nucleus_api.api_client import ApiClient


class SupportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_chat_using_post(self, chat_info_request, **kwargs):  # noqa: E501
        """Create a Chat  # noqa: E501

        Create a Chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_chat_using_post(chat_info_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChatInfo chat_info_request: chatInfoRequest (required)
        :return: ChatInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_chat_using_post_with_http_info(chat_info_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_chat_using_post_with_http_info(chat_info_request, **kwargs)  # noqa: E501
            return data

    def create_chat_using_post_with_http_info(self, chat_info_request, **kwargs):  # noqa: E501
        """Create a Chat  # noqa: E501

        Create a Chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_chat_using_post_with_http_info(chat_info_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChatInfo chat_info_request: chatInfoRequest (required)
        :return: ChatInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chat_info_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_chat_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chat_info_request' is set
        if ('chat_info_request' not in params or
                params['chat_info_request'] is None):
            raise ValueError("Missing the required parameter `chat_info_request` when calling `create_chat_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'chat_info_request' in params:
            body_params = params['chat_info_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/chat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChatInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_consultation_using_post(self, cio_consultation_request, **kwargs):  # noqa: E501
        """Create a CIO Consultation  # noqa: E501

        Create a new CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_consultation_using_post(cio_consultation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Consultation cio_consultation_request: cioConsultationRequest (required)
        :return: Consultation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_consultation_using_post_with_http_info(cio_consultation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_consultation_using_post_with_http_info(cio_consultation_request, **kwargs)  # noqa: E501
            return data

    def create_consultation_using_post_with_http_info(self, cio_consultation_request, **kwargs):  # noqa: E501
        """Create a CIO Consultation  # noqa: E501

        Create a new CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_consultation_using_post_with_http_info(cio_consultation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Consultation cio_consultation_request: cioConsultationRequest (required)
        :return: Consultation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cio_consultation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_consultation_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cio_consultation_request' is set
        if ('cio_consultation_request' not in params or
                params['cio_consultation_request'] is None):
            raise ValueError("Missing the required parameter `cio_consultation_request` when calling `create_consultation_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cio_consultation_request' in params:
            body_params = params['cio_consultation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/consultation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Consultation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_sale_using_post(self, sale_request, **kwargs):  # noqa: E501
        """Create a sales inquiry  # noqa: E501

        Create a new sales inquiry for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sale_using_post(sale_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sale sale_request: saleRequest (required)
        :return: Sale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_sale_using_post_with_http_info(sale_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_sale_using_post_with_http_info(sale_request, **kwargs)  # noqa: E501
            return data

    def create_sale_using_post_with_http_info(self, sale_request, **kwargs):  # noqa: E501
        """Create a sales inquiry  # noqa: E501

        Create a new sales inquiry for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sale_using_post_with_http_info(sale_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sale sale_request: saleRequest (required)
        :return: Sale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sale_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sale_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sale_request' is set
        if ('sale_request' not in params or
                params['sale_request'] is None):
            raise ValueError("Missing the required parameter `sale_request` when calling `create_sale_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sale_request' in params:
            body_params = params['sale_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sales', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sale',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_support_ticket_comment_using_post(self, support_ticker_comment_request, **kwargs):  # noqa: E501
        """Create a support ticket comment  # noqa: E501

        Create a new support ticket comment for a support ticket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_support_ticket_comment_using_post(support_ticker_comment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicketComment support_ticker_comment_request: supportTickerCommentRequest (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_support_ticket_comment_using_post_with_http_info(support_ticker_comment_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_support_ticket_comment_using_post_with_http_info(support_ticker_comment_request, **kwargs)  # noqa: E501
            return data

    def create_support_ticket_comment_using_post_with_http_info(self, support_ticker_comment_request, **kwargs):  # noqa: E501
        """Create a support ticket comment  # noqa: E501

        Create a new support ticket comment for a support ticket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_support_ticket_comment_using_post_with_http_info(support_ticker_comment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicketComment support_ticker_comment_request: supportTickerCommentRequest (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_ticker_comment_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_support_ticket_comment_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_ticker_comment_request' is set
        if ('support_ticker_comment_request' not in params or
                params['support_ticker_comment_request'] is None):
            raise ValueError("Missing the required parameter `support_ticker_comment_request` when calling `create_support_ticket_comment_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'support_ticker_comment_request' in params:
            body_params = params['support_ticker_comment_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket_comment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_support_ticket_using_post(self, support_ticket_request, **kwargs):  # noqa: E501
        """Create a support ticket  # noqa: E501

        Create a new support ticket for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_support_ticket_using_post(support_ticket_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicket support_ticket_request: supportTicketRequest (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_support_ticket_using_post_with_http_info(support_ticket_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_support_ticket_using_post_with_http_info(support_ticket_request, **kwargs)  # noqa: E501
            return data

    def create_support_ticket_using_post_with_http_info(self, support_ticket_request, **kwargs):  # noqa: E501
        """Create a support ticket  # noqa: E501

        Create a new support ticket for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_support_ticket_using_post_with_http_info(support_ticket_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicket support_ticket_request: supportTicketRequest (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_ticket_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_support_ticket_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_ticket_request' is set
        if ('support_ticket_request' not in params or
                params['support_ticket_request'] is None):
            raise ValueError("Missing the required parameter `support_ticket_request` when calling `create_support_ticket_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'support_ticket_request' in params:
            body_params = params['support_ticket_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_chat_using_delete(self, chat_id, **kwargs):  # noqa: E501
        """Delete a Chat  # noqa: E501

        Permanently delete a Chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_chat_using_delete(chat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chat_id: UUID chat_info_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_chat_using_delete_with_http_info(chat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_chat_using_delete_with_http_info(chat_id, **kwargs)  # noqa: E501
            return data

    def delete_chat_using_delete_with_http_info(self, chat_id, **kwargs):  # noqa: E501
        """Delete a Chat  # noqa: E501

        Permanently delete a Chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_chat_using_delete_with_http_info(chat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chat_id: UUID chat_info_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chat_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_chat_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chat_id' is set
        if ('chat_id' not in params or
                params['chat_id'] is None):
            raise ValueError("Missing the required parameter `chat_id` when calling `delete_chat_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chat_id' in params:
            path_params['chat_id'] = params['chat_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/chat/{chat_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_consultation_using_delete(self, consultation_id, **kwargs):  # noqa: E501
        """Delete a CIO Consultation  # noqa: E501

        Permanently delete a CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_consultation_using_delete(consultation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consultation_id: UUID consultation_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_consultation_using_delete_with_http_info(consultation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_consultation_using_delete_with_http_info(consultation_id, **kwargs)  # noqa: E501
            return data

    def delete_consultation_using_delete_with_http_info(self, consultation_id, **kwargs):  # noqa: E501
        """Delete a CIO Consultation  # noqa: E501

        Permanently delete a CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_consultation_using_delete_with_http_info(consultation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consultation_id: UUID consultation_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consultation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_consultation_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consultation_id' is set
        if ('consultation_id' not in params or
                params['consultation_id'] is None):
            raise ValueError("Missing the required parameter `consultation_id` when calling `delete_consultation_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consultation_id' in params:
            path_params['consultation_id'] = params['consultation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/consultation/{consultation_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sale_using_delete(self, sales_id, **kwargs):  # noqa: E501
        """Delete a sales inquiry  # noqa: E501

        Permanently delete a sales inquiry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sale_using_delete(sales_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sales_id: UUID sales_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sale_using_delete_with_http_info(sales_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sale_using_delete_with_http_info(sales_id, **kwargs)  # noqa: E501
            return data

    def delete_sale_using_delete_with_http_info(self, sales_id, **kwargs):  # noqa: E501
        """Delete a sales inquiry  # noqa: E501

        Permanently delete a sales inquiry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sale_using_delete_with_http_info(sales_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sales_id: UUID sales_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sale_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales_id' is set
        if ('sales_id' not in params or
                params['sales_id'] is None):
            raise ValueError("Missing the required parameter `sales_id` when calling `delete_sale_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sales_id' in params:
            path_params['sales_id'] = params['sales_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sales/{sales_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_support_ticket_comment_using_delete(self, support_ticket_comment_id, **kwargs):  # noqa: E501
        """Delete a support ticket comment  # noqa: E501

        Permanently delete a support ticket comment for a support ticket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_ticket_comment_using_delete(support_ticket_comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str support_ticket_comment_id: UUID support_ticket_comment_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_support_ticket_comment_using_delete_with_http_info(support_ticket_comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_support_ticket_comment_using_delete_with_http_info(support_ticket_comment_id, **kwargs)  # noqa: E501
            return data

    def delete_support_ticket_comment_using_delete_with_http_info(self, support_ticket_comment_id, **kwargs):  # noqa: E501
        """Delete a support ticket comment  # noqa: E501

        Permanently delete a support ticket comment for a support ticket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_ticket_comment_using_delete_with_http_info(support_ticket_comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str support_ticket_comment_id: UUID support_ticket_comment_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_ticket_comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_support_ticket_comment_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_ticket_comment_id' is set
        if ('support_ticket_comment_id' not in params or
                params['support_ticket_comment_id'] is None):
            raise ValueError("Missing the required parameter `support_ticket_comment_id` when calling `delete_support_ticket_comment_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'support_ticket_comment_id' in params:
            path_params['support_ticket_comment_id'] = params['support_ticket_comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket_comment/{support_ticket_comment_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_support_ticket_using_delete(self, support_ticket_id, **kwargs):  # noqa: E501
        """Delete a support ticket  # noqa: E501

        Permanently delete a support ticket for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_ticket_using_delete(support_ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str support_ticket_id: UUID support_ticket_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_support_ticket_using_delete_with_http_info(support_ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_support_ticket_using_delete_with_http_info(support_ticket_id, **kwargs)  # noqa: E501
            return data

    def delete_support_ticket_using_delete_with_http_info(self, support_ticket_id, **kwargs):  # noqa: E501
        """Delete a support ticket  # noqa: E501

        Permanently delete a support ticket for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_ticket_using_delete_with_http_info(support_ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str support_ticket_id: UUID support_ticket_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_ticket_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_support_ticket_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_ticket_id' is set
        if ('support_ticket_id' not in params or
                params['support_ticket_id'] is None):
            raise ValueError("Missing the required parameter `support_ticket_id` when calling `delete_support_ticket_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'support_ticket_id' in params:
            path_params['support_ticket_id'] = params['support_ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket/{support_ticket_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chat_all_using_get(self, **kwargs):  # noqa: E501
        """List all open chats  # noqa: E501

        Get details for all open chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageChatInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_chat_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_chat_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_chat_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all open chats  # noqa: E501

        Get details for all open chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageChatInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chat_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/chat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageChatInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chat_using_get(self, chat_id, **kwargs):  # noqa: E501
        """Retrieve a Chat  # noqa: E501

        Retrieve the information for a Chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_using_get(chat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chat_id: UUID chat_info_id (required)
        :return: ChatInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_chat_using_get_with_http_info(chat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_chat_using_get_with_http_info(chat_id, **kwargs)  # noqa: E501
            return data

    def get_chat_using_get_with_http_info(self, chat_id, **kwargs):  # noqa: E501
        """Retrieve a Chat  # noqa: E501

        Retrieve the information for a Chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_using_get_with_http_info(chat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chat_id: UUID chat_info_id (required)
        :return: ChatInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chat_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chat_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chat_id' is set
        if ('chat_id' not in params or
                params['chat_id'] is None):
            raise ValueError("Missing the required parameter `chat_id` when calling `get_chat_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chat_id' in params:
            path_params['chat_id'] = params['chat_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/chat/{chat_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChatInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_consultation_all_using_get(self, **kwargs):  # noqa: E501
        """List all CIO Consultation  # noqa: E501

        Get details for all CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consultation_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageConsultation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_consultation_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_consultation_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_consultation_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all CIO Consultation  # noqa: E501

        Get details for all CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consultation_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageConsultation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consultation_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/consultation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageConsultation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_consultation_using_get(self, consultation_id, **kwargs):  # noqa: E501
        """Retrieve a CIO Consultation  # noqa: E501

        Retrieve the information for a CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consultation_using_get(consultation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consultation_id: UUID consultation_id (required)
        :return: Consultation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_consultation_using_get_with_http_info(consultation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_consultation_using_get_with_http_info(consultation_id, **kwargs)  # noqa: E501
            return data

    def get_consultation_using_get_with_http_info(self, consultation_id, **kwargs):  # noqa: E501
        """Retrieve a CIO Consultation  # noqa: E501

        Retrieve the information for a CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consultation_using_get_with_http_info(consultation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consultation_id: UUID consultation_id (required)
        :return: Consultation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consultation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consultation_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consultation_id' is set
        if ('consultation_id' not in params or
                params['consultation_id'] is None):
            raise ValueError("Missing the required parameter `consultation_id` when calling `get_consultation_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consultation_id' in params:
            path_params['consultation_id'] = params['consultation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/consultation/{consultation_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Consultation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sale_all_using_get(self, **kwargs):  # noqa: E501
        """List all sales inquiries  # noqa: E501

        Get all sales inquiries defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sale_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageSale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sale_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sale_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sale_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all sales inquiries  # noqa: E501

        Get all sales inquiries defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sale_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageSale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sale_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sales', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageSale',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sale_using_get(self, sales_id, **kwargs):  # noqa: E501
        """Retrieve a sales record  # noqa: E501

        Retrieve the information for a sales record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sale_using_get(sales_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sales_id: UUID sales_id (required)
        :return: Sale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sale_using_get_with_http_info(sales_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sale_using_get_with_http_info(sales_id, **kwargs)  # noqa: E501
            return data

    def get_sale_using_get_with_http_info(self, sales_id, **kwargs):  # noqa: E501
        """Retrieve a sales record  # noqa: E501

        Retrieve the information for a sales record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sale_using_get_with_http_info(sales_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sales_id: UUID sales_id (required)
        :return: Sale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sale_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales_id' is set
        if ('sales_id' not in params or
                params['sales_id'] is None):
            raise ValueError("Missing the required parameter `sales_id` when calling `get_sale_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sales_id' in params:
            path_params['sales_id'] = params['sales_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sales/{sales_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sale',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_ticket_all_using_get(self, **kwargs):  # noqa: E501
        """List all support tickets  # noqa: E501

        Get the information for all support tickets defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageSupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_ticket_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_support_ticket_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_support_ticket_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all support tickets  # noqa: E501

        Get the information for all support tickets defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageSupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_ticket_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageSupportTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_ticket_comment_all_using_get(self, **kwargs):  # noqa: E501
        """List all support ticket comments  # noqa: E501

        Get the information for all support ticket comments defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_comment_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageSupportTicketComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_ticket_comment_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_support_ticket_comment_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_support_ticket_comment_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all support ticket comments  # noqa: E501

        Get the information for all support ticket comments defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_comment_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageSupportTicketComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_ticket_comment_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageSupportTicketComment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_ticket_comment_using_get(self, support_ticket_comment_id, **kwargs):  # noqa: E501
        """Retrieve a support ticket comment  # noqa: E501

        Retrieve the information for a support ticket comment defined for a support ticket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_comment_using_get(support_ticket_comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str support_ticket_comment_id: UUID support_ticket_comment_id (required)
        :return: SupportTicketComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_ticket_comment_using_get_with_http_info(support_ticket_comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_ticket_comment_using_get_with_http_info(support_ticket_comment_id, **kwargs)  # noqa: E501
            return data

    def get_support_ticket_comment_using_get_with_http_info(self, support_ticket_comment_id, **kwargs):  # noqa: E501
        """Retrieve a support ticket comment  # noqa: E501

        Retrieve the information for a support ticket comment defined for a support ticket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_comment_using_get_with_http_info(support_ticket_comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str support_ticket_comment_id: UUID support_ticket_comment_id (required)
        :return: SupportTicketComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_ticket_comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_ticket_comment_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_ticket_comment_id' is set
        if ('support_ticket_comment_id' not in params or
                params['support_ticket_comment_id'] is None):
            raise ValueError("Missing the required parameter `support_ticket_comment_id` when calling `get_support_ticket_comment_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'support_ticket_comment_id' in params:
            path_params['support_ticket_comment_id'] = params['support_ticket_comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket_comment/{support_ticket_comment_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicketComment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_ticket_using_get(self, support_ticket_id, **kwargs):  # noqa: E501
        """Retrieve a support ticket  # noqa: E501

        Retrieve the information for a support ticket defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_using_get(support_ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str support_ticket_id: UUID support_ticket_id (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_ticket_using_get_with_http_info(support_ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_ticket_using_get_with_http_info(support_ticket_id, **kwargs)  # noqa: E501
            return data

    def get_support_ticket_using_get_with_http_info(self, support_ticket_id, **kwargs):  # noqa: E501
        """Retrieve a support ticket  # noqa: E501

        Retrieve the information for a support ticket defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_using_get_with_http_info(support_ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str support_ticket_id: UUID support_ticket_id (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_ticket_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_ticket_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_ticket_id' is set
        if ('support_ticket_id' not in params or
                params['support_ticket_id'] is None):
            raise ValueError("Missing the required parameter `support_ticket_id` when calling `get_support_ticket_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'support_ticket_id' in params:
            path_params['support_ticket_id'] = params['support_ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket/{support_ticket_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_chat_using_put(self, chat_id, chat_info, **kwargs):  # noqa: E501
        """Update a Chat  # noqa: E501

        Updated the information for a Chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_chat_using_put(chat_id, chat_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chat_id: UUID chat_id (required)
        :param ChatInfo chat_info: chat_info (required)
        :return: ChatInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_chat_using_put_with_http_info(chat_id, chat_info, **kwargs)  # noqa: E501
        else:
            (data) = self.update_chat_using_put_with_http_info(chat_id, chat_info, **kwargs)  # noqa: E501
            return data

    def update_chat_using_put_with_http_info(self, chat_id, chat_info, **kwargs):  # noqa: E501
        """Update a Chat  # noqa: E501

        Updated the information for a Chat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_chat_using_put_with_http_info(chat_id, chat_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chat_id: UUID chat_id (required)
        :param ChatInfo chat_info: chat_info (required)
        :return: ChatInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chat_id', 'chat_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_chat_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chat_id' is set
        if ('chat_id' not in params or
                params['chat_id'] is None):
            raise ValueError("Missing the required parameter `chat_id` when calling `update_chat_using_put`")  # noqa: E501
        # verify the required parameter 'chat_info' is set
        if ('chat_info' not in params or
                params['chat_info'] is None):
            raise ValueError("Missing the required parameter `chat_info` when calling `update_chat_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chat_id' in params:
            path_params['chat_id'] = params['chat_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'chat_info' in params:
            body_params = params['chat_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/chat/{chat_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChatInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_consultation_using_put(self, consultation, consultation_id, **kwargs):  # noqa: E501
        """Update a CIO Consultation  # noqa: E501

        Updated the information CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_consultation_using_put(consultation, consultation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Consultation consultation: consultation (required)
        :param str consultation_id: UUID consultation_id (required)
        :return: Consultation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_consultation_using_put_with_http_info(consultation, consultation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_consultation_using_put_with_http_info(consultation, consultation_id, **kwargs)  # noqa: E501
            return data

    def update_consultation_using_put_with_http_info(self, consultation, consultation_id, **kwargs):  # noqa: E501
        """Update a CIO Consultation  # noqa: E501

        Updated the information CIO Consultation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_consultation_using_put_with_http_info(consultation, consultation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Consultation consultation: consultation (required)
        :param str consultation_id: UUID consultation_id (required)
        :return: Consultation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consultation', 'consultation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_consultation_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consultation' is set
        if ('consultation' not in params or
                params['consultation'] is None):
            raise ValueError("Missing the required parameter `consultation` when calling `update_consultation_using_put`")  # noqa: E501
        # verify the required parameter 'consultation_id' is set
        if ('consultation_id' not in params or
                params['consultation_id'] is None):
            raise ValueError("Missing the required parameter `consultation_id` when calling `update_consultation_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consultation_id' in params:
            path_params['consultation_id'] = params['consultation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'consultation' in params:
            body_params = params['consultation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/consultation/{consultation_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Consultation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_sale_using_put(self, sales, sales_id, **kwargs):  # noqa: E501
        """Update a sales inquiry  # noqa: E501

        Update the information for a sales inquiry.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sale_using_put(sales, sales_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sale sales: sales (required)
        :param str sales_id: UUID sales_id (required)
        :return: Sale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_sale_using_put_with_http_info(sales, sales_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_sale_using_put_with_http_info(sales, sales_id, **kwargs)  # noqa: E501
            return data

    def update_sale_using_put_with_http_info(self, sales, sales_id, **kwargs):  # noqa: E501
        """Update a sales inquiry  # noqa: E501

        Update the information for a sales inquiry.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sale_using_put_with_http_info(sales, sales_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sale sales: sales (required)
        :param str sales_id: UUID sales_id (required)
        :return: Sale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales', 'sales_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sale_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales' is set
        if ('sales' not in params or
                params['sales'] is None):
            raise ValueError("Missing the required parameter `sales` when calling `update_sale_using_put`")  # noqa: E501
        # verify the required parameter 'sales_id' is set
        if ('sales_id' not in params or
                params['sales_id'] is None):
            raise ValueError("Missing the required parameter `sales_id` when calling `update_sale_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sales_id' in params:
            path_params['sales_id'] = params['sales_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sales' in params:
            body_params = params['sales']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sales/{sales_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sale',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_support_ticket_comment_using_put(self, support_ticket_comment, support_ticket_comment_id, **kwargs):  # noqa: E501
        """Update a support ticket comment  # noqa: E501

        Update the information for a support ticket comments defined for a support ticket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_support_ticket_comment_using_put(support_ticket_comment, support_ticket_comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicketComment support_ticket_comment: support_ticket_comment (required)
        :param str support_ticket_comment_id: UUID support_ticket_comment_id (required)
        :return: SupportTicketComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_support_ticket_comment_using_put_with_http_info(support_ticket_comment, support_ticket_comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_support_ticket_comment_using_put_with_http_info(support_ticket_comment, support_ticket_comment_id, **kwargs)  # noqa: E501
            return data

    def update_support_ticket_comment_using_put_with_http_info(self, support_ticket_comment, support_ticket_comment_id, **kwargs):  # noqa: E501
        """Update a support ticket comment  # noqa: E501

        Update the information for a support ticket comments defined for a support ticket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_support_ticket_comment_using_put_with_http_info(support_ticket_comment, support_ticket_comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicketComment support_ticket_comment: support_ticket_comment (required)
        :param str support_ticket_comment_id: UUID support_ticket_comment_id (required)
        :return: SupportTicketComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_ticket_comment', 'support_ticket_comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_support_ticket_comment_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_ticket_comment' is set
        if ('support_ticket_comment' not in params or
                params['support_ticket_comment'] is None):
            raise ValueError("Missing the required parameter `support_ticket_comment` when calling `update_support_ticket_comment_using_put`")  # noqa: E501
        # verify the required parameter 'support_ticket_comment_id' is set
        if ('support_ticket_comment_id' not in params or
                params['support_ticket_comment_id'] is None):
            raise ValueError("Missing the required parameter `support_ticket_comment_id` when calling `update_support_ticket_comment_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'support_ticket_comment_id' in params:
            path_params['support_ticket_comment_id'] = params['support_ticket_comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'support_ticket_comment' in params:
            body_params = params['support_ticket_comment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket_comment/{support_ticket_comment_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicketComment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_support_ticket_using_put(self, support_ticket, support_ticket_id, **kwargs):  # noqa: E501
        """Update a support ticket  # noqa: E501

        Update the information for a support ticket defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_support_ticket_using_put(support_ticket, support_ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicket support_ticket: support_ticket (required)
        :param str support_ticket_id: UUID support_ticket_id (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_support_ticket_using_put_with_http_info(support_ticket, support_ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_support_ticket_using_put_with_http_info(support_ticket, support_ticket_id, **kwargs)  # noqa: E501
            return data

    def update_support_ticket_using_put_with_http_info(self, support_ticket, support_ticket_id, **kwargs):  # noqa: E501
        """Update a support ticket  # noqa: E501

        Update the information for a support ticket defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_support_ticket_using_put_with_http_info(support_ticket, support_ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicket support_ticket: support_ticket (required)
        :param str support_ticket_id: UUID support_ticket_id (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_ticket', 'support_ticket_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_support_ticket_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_ticket' is set
        if ('support_ticket' not in params or
                params['support_ticket'] is None):
            raise ValueError("Missing the required parameter `support_ticket` when calling `update_support_ticket_using_put`")  # noqa: E501
        # verify the required parameter 'support_ticket_id' is set
        if ('support_ticket_id' not in params or
                params['support_ticket_id'] is None):
            raise ValueError("Missing the required parameter `support_ticket_id` when calling `update_support_ticket_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'support_ticket_id' in params:
            path_params['support_ticket_id'] = params['support_ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'support_ticket' in params:
            body_params = params['support_ticket']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/support_ticket/{support_ticket_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
