# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AggregationAccountTransactionAggregateDataVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregation_account_transaction_id': 'str',
        'bank_credit': 'BankCredit',
        'create_date': 'datetime',
        'currency_code': 'str',
        'investment': 'Investment',
        'is_excluded_analysis': 'bool',
        'metadata': 'dict(str, str)',
        'secondary_id': 'str',
        'status': 'str',
        'transaction_date': 'datetime',
        'update_date': 'datetime'
    }

    attribute_map = {
        'aggregation_account_transaction_id': 'aggregation_account_transaction_id',
        'bank_credit': 'bank_credit',
        'create_date': 'create_date',
        'currency_code': 'currency_code',
        'investment': 'investment',
        'is_excluded_analysis': 'is_excluded_analysis',
        'metadata': 'metadata',
        'secondary_id': 'secondary_id',
        'status': 'status',
        'transaction_date': 'transaction_date',
        'update_date': 'update_date'
    }

    def __init__(self, aggregation_account_transaction_id=None, bank_credit=None, create_date=None, currency_code=None, investment=None, is_excluded_analysis=None, metadata=None, secondary_id=None, status=None, transaction_date=None, update_date=None):  # noqa: E501
        """AggregationAccountTransactionAggregateDataVO - a model defined in Swagger"""  # noqa: E501

        self._aggregation_account_transaction_id = None
        self._bank_credit = None
        self._create_date = None
        self._currency_code = None
        self._investment = None
        self._is_excluded_analysis = None
        self._metadata = None
        self._secondary_id = None
        self._status = None
        self._transaction_date = None
        self._update_date = None
        self.discriminator = None

        if aggregation_account_transaction_id is not None:
            self.aggregation_account_transaction_id = aggregation_account_transaction_id
        if bank_credit is not None:
            self.bank_credit = bank_credit
        if create_date is not None:
            self.create_date = create_date
        if currency_code is not None:
            self.currency_code = currency_code
        if investment is not None:
            self.investment = investment
        if is_excluded_analysis is not None:
            self.is_excluded_analysis = is_excluded_analysis
        if metadata is not None:
            self.metadata = metadata
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if status is not None:
            self.status = status
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if update_date is not None:
            self.update_date = update_date

    @property
    def aggregation_account_transaction_id(self):
        """Gets the aggregation_account_transaction_id of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The aggregation_account_transaction_id of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_account_transaction_id

    @aggregation_account_transaction_id.setter
    def aggregation_account_transaction_id(self, aggregation_account_transaction_id):
        """Sets the aggregation_account_transaction_id of this AggregationAccountTransactionAggregateDataVO.


        :param aggregation_account_transaction_id: The aggregation_account_transaction_id of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: str
        """

        self._aggregation_account_transaction_id = aggregation_account_transaction_id

    @property
    def bank_credit(self):
        """Gets the bank_credit of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The bank_credit of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: BankCredit
        """
        return self._bank_credit

    @bank_credit.setter
    def bank_credit(self, bank_credit):
        """Sets the bank_credit of this AggregationAccountTransactionAggregateDataVO.


        :param bank_credit: The bank_credit of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: BankCredit
        """

        self._bank_credit = bank_credit

    @property
    def create_date(self):
        """Gets the create_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The create_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this AggregationAccountTransactionAggregateDataVO.


        :param create_date: The create_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def currency_code(self):
        """Gets the currency_code of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The currency_code of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AggregationAccountTransactionAggregateDataVO.


        :param currency_code: The currency_code of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def investment(self):
        """Gets the investment of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The investment of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: Investment
        """
        return self._investment

    @investment.setter
    def investment(self, investment):
        """Sets the investment of this AggregationAccountTransactionAggregateDataVO.


        :param investment: The investment of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: Investment
        """

        self._investment = investment

    @property
    def is_excluded_analysis(self):
        """Gets the is_excluded_analysis of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The is_excluded_analysis of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_excluded_analysis

    @is_excluded_analysis.setter
    def is_excluded_analysis(self, is_excluded_analysis):
        """Sets the is_excluded_analysis of this AggregationAccountTransactionAggregateDataVO.


        :param is_excluded_analysis: The is_excluded_analysis of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: bool
        """

        self._is_excluded_analysis = is_excluded_analysis

    @property
    def metadata(self):
        """Gets the metadata of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The metadata of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AggregationAccountTransactionAggregateDataVO.


        :param metadata: The metadata of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def secondary_id(self):
        """Gets the secondary_id of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The secondary_id of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this AggregationAccountTransactionAggregateDataVO.


        :param secondary_id: The secondary_id of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def status(self):
        """Gets the status of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The status of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AggregationAccountTransactionAggregateDataVO.


        :param status: The status of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def transaction_date(self):
        """Gets the transaction_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The transaction_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this AggregationAccountTransactionAggregateDataVO.


        :param transaction_date: The transaction_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: datetime
        """

        self._transaction_date = transaction_date

    @property
    def update_date(self):
        """Gets the update_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501


        :return: The update_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this AggregationAccountTransactionAggregateDataVO.


        :param update_date: The update_date of this AggregationAccountTransactionAggregateDataVO.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggregationAccountTransactionAggregateDataVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregationAccountTransactionAggregateDataVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
