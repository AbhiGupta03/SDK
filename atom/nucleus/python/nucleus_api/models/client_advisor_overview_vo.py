# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientAdvisorOverviewVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'client_account_list': 'list[ClientAccountAdvisorVO]',
        'client_assets': 'ClientAssetsAdvisorVO',
        'client_id': 'str',
        'date_of_birth': 'datetime',
        'first_name': 'str',
        'gender': 'str',
        'income': 'int',
        'last_name': 'str'
    }

    attribute_map = {
        'age': 'age',
        'client_account_list': 'client_account_list',
        'client_assets': 'client_assets',
        'client_id': 'client_id',
        'date_of_birth': 'date_of_birth',
        'first_name': 'first_name',
        'gender': 'gender',
        'income': 'income',
        'last_name': 'last_name'
    }

    def __init__(self, age=None, client_account_list=None, client_assets=None, client_id=None, date_of_birth=None, first_name=None, gender=None, income=None, last_name=None):  # noqa: E501
        """ClientAdvisorOverviewVO - a model defined in Swagger"""  # noqa: E501

        self._age = None
        self._client_account_list = None
        self._client_assets = None
        self._client_id = None
        self._date_of_birth = None
        self._first_name = None
        self._gender = None
        self._income = None
        self._last_name = None
        self.discriminator = None

        if age is not None:
            self.age = age
        if client_account_list is not None:
            self.client_account_list = client_account_list
        if client_assets is not None:
            self.client_assets = client_assets
        if client_id is not None:
            self.client_id = client_id
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if first_name is not None:
            self.first_name = first_name
        if gender is not None:
            self.gender = gender
        if income is not None:
            self.income = income
        if last_name is not None:
            self.last_name = last_name

    @property
    def age(self):
        """Gets the age of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The age of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this ClientAdvisorOverviewVO.


        :param age: The age of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def client_account_list(self):
        """Gets the client_account_list of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The client_account_list of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: list[ClientAccountAdvisorVO]
        """
        return self._client_account_list

    @client_account_list.setter
    def client_account_list(self, client_account_list):
        """Sets the client_account_list of this ClientAdvisorOverviewVO.


        :param client_account_list: The client_account_list of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: list[ClientAccountAdvisorVO]
        """

        self._client_account_list = client_account_list

    @property
    def client_assets(self):
        """Gets the client_assets of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The client_assets of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: ClientAssetsAdvisorVO
        """
        return self._client_assets

    @client_assets.setter
    def client_assets(self, client_assets):
        """Sets the client_assets of this ClientAdvisorOverviewVO.


        :param client_assets: The client_assets of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: ClientAssetsAdvisorVO
        """

        self._client_assets = client_assets

    @property
    def client_id(self):
        """Gets the client_id of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The client_id of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClientAdvisorOverviewVO.


        :param client_id: The client_id of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The date_of_birth of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ClientAdvisorOverviewVO.


        :param date_of_birth: The date_of_birth of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def first_name(self):
        """Gets the first_name of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The first_name of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ClientAdvisorOverviewVO.


        :param first_name: The first_name of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The gender of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ClientAdvisorOverviewVO.


        :param gender: The gender of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def income(self):
        """Gets the income of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The income of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: int
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this ClientAdvisorOverviewVO.


        :param income: The income of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: int
        """

        self._income = income

    @property
    def last_name(self):
        """Gets the last_name of this ClientAdvisorOverviewVO.  # noqa: E501


        :return: The last_name of this ClientAdvisorOverviewVO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ClientAdvisorOverviewVO.


        :param last_name: The last_name of this ClientAdvisorOverviewVO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientAdvisorOverviewVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientAdvisorOverviewVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
