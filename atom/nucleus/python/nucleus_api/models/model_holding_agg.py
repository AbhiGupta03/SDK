# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelHoldingAgg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_class': 'str',
        'current_weight': 'float',
        'securities_id': 'int',
        'strategic_weight': 'float',
        'ticker': 'str'
    }

    attribute_map = {
        'asset_class': 'asset_class',
        'current_weight': 'current_weight',
        'securities_id': 'securities_id',
        'strategic_weight': 'strategic_weight',
        'ticker': 'ticker'
    }

    def __init__(self, asset_class=None, current_weight=None, securities_id=None, strategic_weight=None, ticker=None):  # noqa: E501
        """ModelHoldingAgg - a model defined in Swagger"""  # noqa: E501

        self._asset_class = None
        self._current_weight = None
        self._securities_id = None
        self._strategic_weight = None
        self._ticker = None
        self.discriminator = None

        if asset_class is not None:
            self.asset_class = asset_class
        if current_weight is not None:
            self.current_weight = current_weight
        if securities_id is not None:
            self.securities_id = securities_id
        if strategic_weight is not None:
            self.strategic_weight = strategic_weight
        if ticker is not None:
            self.ticker = ticker

    @property
    def asset_class(self):
        """Gets the asset_class of this ModelHoldingAgg.  # noqa: E501


        :return: The asset_class of this ModelHoldingAgg.  # noqa: E501
        :rtype: str
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class):
        """Sets the asset_class of this ModelHoldingAgg.


        :param asset_class: The asset_class of this ModelHoldingAgg.  # noqa: E501
        :type: str
        """

        self._asset_class = asset_class

    @property
    def current_weight(self):
        """Gets the current_weight of this ModelHoldingAgg.  # noqa: E501


        :return: The current_weight of this ModelHoldingAgg.  # noqa: E501
        :rtype: float
        """
        return self._current_weight

    @current_weight.setter
    def current_weight(self, current_weight):
        """Sets the current_weight of this ModelHoldingAgg.


        :param current_weight: The current_weight of this ModelHoldingAgg.  # noqa: E501
        :type: float
        """

        self._current_weight = current_weight

    @property
    def securities_id(self):
        """Gets the securities_id of this ModelHoldingAgg.  # noqa: E501


        :return: The securities_id of this ModelHoldingAgg.  # noqa: E501
        :rtype: int
        """
        return self._securities_id

    @securities_id.setter
    def securities_id(self, securities_id):
        """Sets the securities_id of this ModelHoldingAgg.


        :param securities_id: The securities_id of this ModelHoldingAgg.  # noqa: E501
        :type: int
        """

        self._securities_id = securities_id

    @property
    def strategic_weight(self):
        """Gets the strategic_weight of this ModelHoldingAgg.  # noqa: E501


        :return: The strategic_weight of this ModelHoldingAgg.  # noqa: E501
        :rtype: float
        """
        return self._strategic_weight

    @strategic_weight.setter
    def strategic_weight(self, strategic_weight):
        """Sets the strategic_weight of this ModelHoldingAgg.


        :param strategic_weight: The strategic_weight of this ModelHoldingAgg.  # noqa: E501
        :type: float
        """

        self._strategic_weight = strategic_weight

    @property
    def ticker(self):
        """Gets the ticker of this ModelHoldingAgg.  # noqa: E501


        :return: The ticker of this ModelHoldingAgg.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this ModelHoldingAgg.


        :param ticker: The ticker of this ModelHoldingAgg.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelHoldingAgg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelHoldingAgg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
