# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FinancialOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_rate': 'float',
        'campaign_id': 'str',
        'category': 'str',
        'client_review': 'str',
        'create_date': 'datetime',
        'currency_code': 'str',
        'description': 'str',
        'document_id': 'str',
        'fee_amount': 'float',
        'fee_type': 'str',
        'financial_rate': 'float',
        'financial_rate_term': 'float',
        'financial_rate_term_unit': 'str',
        'financial_rate_type': 'str',
        'id': 'str',
        'image': 'str',
        'institution_name': 'str',
        'is_active': 'bool',
        'metadata': 'dict(str, str)',
        'minimum_contribution': 'float',
        'minimum_contribution_term': 'float',
        'minimum_contribution_term_unit': 'str',
        'name': 'str',
        'node_map': 'list[AllocationNodeMap]',
        'offer_link': 'str',
        'offer_term': 'float',
        'offer_term_unit': 'str',
        'prerequisite': 'str',
        'prerequisite_type': 'str',
        'rating': 'str',
        'secondary_id': 'str',
        'subcategory': 'str',
        'update_date': 'datetime'
    }

    attribute_map = {
        'affiliate_rate': 'affiliate_rate',
        'campaign_id': 'campaign_id',
        'category': 'category',
        'client_review': 'client_review',
        'create_date': 'create_date',
        'currency_code': 'currency_code',
        'description': 'description',
        'document_id': 'document_id',
        'fee_amount': 'fee_amount',
        'fee_type': 'fee_type',
        'financial_rate': 'financial_rate',
        'financial_rate_term': 'financial_rate_term',
        'financial_rate_term_unit': 'financial_rate_term_unit',
        'financial_rate_type': 'financial_rate_type',
        'id': 'id',
        'image': 'image',
        'institution_name': 'institution_name',
        'is_active': 'is_active',
        'metadata': 'metadata',
        'minimum_contribution': 'minimum_contribution',
        'minimum_contribution_term': 'minimum_contribution_term',
        'minimum_contribution_term_unit': 'minimum_contribution_term_unit',
        'name': 'name',
        'node_map': 'node_map',
        'offer_link': 'offer_link',
        'offer_term': 'offer_term',
        'offer_term_unit': 'offer_term_unit',
        'prerequisite': 'prerequisite',
        'prerequisite_type': 'prerequisite_type',
        'rating': 'rating',
        'secondary_id': 'secondary_id',
        'subcategory': 'subcategory',
        'update_date': 'update_date'
    }

    def __init__(self, affiliate_rate=None, campaign_id=None, category=None, client_review=None, create_date=None, currency_code=None, description=None, document_id=None, fee_amount=None, fee_type=None, financial_rate=None, financial_rate_term=None, financial_rate_term_unit=None, financial_rate_type=None, id=None, image=None, institution_name=None, is_active=None, metadata=None, minimum_contribution=None, minimum_contribution_term=None, minimum_contribution_term_unit=None, name=None, node_map=None, offer_link=None, offer_term=None, offer_term_unit=None, prerequisite=None, prerequisite_type=None, rating=None, secondary_id=None, subcategory=None, update_date=None):  # noqa: E501
        """FinancialOffer - a model defined in Swagger"""  # noqa: E501

        self._affiliate_rate = None
        self._campaign_id = None
        self._category = None
        self._client_review = None
        self._create_date = None
        self._currency_code = None
        self._description = None
        self._document_id = None
        self._fee_amount = None
        self._fee_type = None
        self._financial_rate = None
        self._financial_rate_term = None
        self._financial_rate_term_unit = None
        self._financial_rate_type = None
        self._id = None
        self._image = None
        self._institution_name = None
        self._is_active = None
        self._metadata = None
        self._minimum_contribution = None
        self._minimum_contribution_term = None
        self._minimum_contribution_term_unit = None
        self._name = None
        self._node_map = None
        self._offer_link = None
        self._offer_term = None
        self._offer_term_unit = None
        self._prerequisite = None
        self._prerequisite_type = None
        self._rating = None
        self._secondary_id = None
        self._subcategory = None
        self._update_date = None
        self.discriminator = None

        if affiliate_rate is not None:
            self.affiliate_rate = affiliate_rate
        if campaign_id is not None:
            self.campaign_id = campaign_id
        self.category = category
        if client_review is not None:
            self.client_review = client_review
        if create_date is not None:
            self.create_date = create_date
        if currency_code is not None:
            self.currency_code = currency_code
        if description is not None:
            self.description = description
        if document_id is not None:
            self.document_id = document_id
        if fee_amount is not None:
            self.fee_amount = fee_amount
        if fee_type is not None:
            self.fee_type = fee_type
        if financial_rate is not None:
            self.financial_rate = financial_rate
        if financial_rate_term is not None:
            self.financial_rate_term = financial_rate_term
        if financial_rate_term_unit is not None:
            self.financial_rate_term_unit = financial_rate_term_unit
        if financial_rate_type is not None:
            self.financial_rate_type = financial_rate_type
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        self.institution_name = institution_name
        if is_active is not None:
            self.is_active = is_active
        if metadata is not None:
            self.metadata = metadata
        if minimum_contribution is not None:
            self.minimum_contribution = minimum_contribution
        if minimum_contribution_term is not None:
            self.minimum_contribution_term = minimum_contribution_term
        if minimum_contribution_term_unit is not None:
            self.minimum_contribution_term_unit = minimum_contribution_term_unit
        self.name = name
        if node_map is not None:
            self.node_map = node_map
        self.offer_link = offer_link
        if offer_term is not None:
            self.offer_term = offer_term
        if offer_term_unit is not None:
            self.offer_term_unit = offer_term_unit
        if prerequisite is not None:
            self.prerequisite = prerequisite
        if prerequisite_type is not None:
            self.prerequisite_type = prerequisite_type
        if rating is not None:
            self.rating = rating
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if subcategory is not None:
            self.subcategory = subcategory
        if update_date is not None:
            self.update_date = update_date

    @property
    def affiliate_rate(self):
        """Gets the affiliate_rate of this FinancialOffer.  # noqa: E501

        affiliateRate  # noqa: E501

        :return: The affiliate_rate of this FinancialOffer.  # noqa: E501
        :rtype: float
        """
        return self._affiliate_rate

    @affiliate_rate.setter
    def affiliate_rate(self, affiliate_rate):
        """Sets the affiliate_rate of this FinancialOffer.

        affiliateRate  # noqa: E501

        :param affiliate_rate: The affiliate_rate of this FinancialOffer.  # noqa: E501
        :type: float
        """

        self._affiliate_rate = affiliate_rate

    @property
    def campaign_id(self):
        """Gets the campaign_id of this FinancialOffer.  # noqa: E501

        campaignId  # noqa: E501

        :return: The campaign_id of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this FinancialOffer.

        campaignId  # noqa: E501

        :param campaign_id: The campaign_id of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def category(self):
        """Gets the category of this FinancialOffer.  # noqa: E501

        category  # noqa: E501

        :return: The category of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FinancialOffer.

        category  # noqa: E501

        :param category: The category of this FinancialOffer.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def client_review(self):
        """Gets the client_review of this FinancialOffer.  # noqa: E501


        :return: The client_review of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._client_review

    @client_review.setter
    def client_review(self, client_review):
        """Sets the client_review of this FinancialOffer.


        :param client_review: The client_review of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._client_review = client_review

    @property
    def create_date(self):
        """Gets the create_date of this FinancialOffer.  # noqa: E501


        :return: The create_date of this FinancialOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this FinancialOffer.


        :param create_date: The create_date of this FinancialOffer.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def currency_code(self):
        """Gets the currency_code of this FinancialOffer.  # noqa: E501

        currencyCode  # noqa: E501

        :return: The currency_code of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this FinancialOffer.

        currencyCode  # noqa: E501

        :param currency_code: The currency_code of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def description(self):
        """Gets the description of this FinancialOffer.  # noqa: E501

        description  # noqa: E501

        :return: The description of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FinancialOffer.

        description  # noqa: E501

        :param description: The description of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def document_id(self):
        """Gets the document_id of this FinancialOffer.  # noqa: E501


        :return: The document_id of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this FinancialOffer.


        :param document_id: The document_id of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def fee_amount(self):
        """Gets the fee_amount of this FinancialOffer.  # noqa: E501

        feeAmount  # noqa: E501

        :return: The fee_amount of this FinancialOffer.  # noqa: E501
        :rtype: float
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this FinancialOffer.

        feeAmount  # noqa: E501

        :param fee_amount: The fee_amount of this FinancialOffer.  # noqa: E501
        :type: float
        """

        self._fee_amount = fee_amount

    @property
    def fee_type(self):
        """Gets the fee_type of this FinancialOffer.  # noqa: E501


        :return: The fee_type of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this FinancialOffer.


        :param fee_type: The fee_type of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._fee_type = fee_type

    @property
    def financial_rate(self):
        """Gets the financial_rate of this FinancialOffer.  # noqa: E501

        financialRate  # noqa: E501

        :return: The financial_rate of this FinancialOffer.  # noqa: E501
        :rtype: float
        """
        return self._financial_rate

    @financial_rate.setter
    def financial_rate(self, financial_rate):
        """Sets the financial_rate of this FinancialOffer.

        financialRate  # noqa: E501

        :param financial_rate: The financial_rate of this FinancialOffer.  # noqa: E501
        :type: float
        """

        self._financial_rate = financial_rate

    @property
    def financial_rate_term(self):
        """Gets the financial_rate_term of this FinancialOffer.  # noqa: E501

        financialRateTerm  # noqa: E501

        :return: The financial_rate_term of this FinancialOffer.  # noqa: E501
        :rtype: float
        """
        return self._financial_rate_term

    @financial_rate_term.setter
    def financial_rate_term(self, financial_rate_term):
        """Sets the financial_rate_term of this FinancialOffer.

        financialRateTerm  # noqa: E501

        :param financial_rate_term: The financial_rate_term of this FinancialOffer.  # noqa: E501
        :type: float
        """

        self._financial_rate_term = financial_rate_term

    @property
    def financial_rate_term_unit(self):
        """Gets the financial_rate_term_unit of this FinancialOffer.  # noqa: E501

        financialRateTermUnit  # noqa: E501

        :return: The financial_rate_term_unit of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._financial_rate_term_unit

    @financial_rate_term_unit.setter
    def financial_rate_term_unit(self, financial_rate_term_unit):
        """Sets the financial_rate_term_unit of this FinancialOffer.

        financialRateTermUnit  # noqa: E501

        :param financial_rate_term_unit: The financial_rate_term_unit of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._financial_rate_term_unit = financial_rate_term_unit

    @property
    def financial_rate_type(self):
        """Gets the financial_rate_type of this FinancialOffer.  # noqa: E501

        financialRateType  # noqa: E501

        :return: The financial_rate_type of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._financial_rate_type

    @financial_rate_type.setter
    def financial_rate_type(self, financial_rate_type):
        """Sets the financial_rate_type of this FinancialOffer.

        financialRateType  # noqa: E501

        :param financial_rate_type: The financial_rate_type of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._financial_rate_type = financial_rate_type

    @property
    def id(self):
        """Gets the id of this FinancialOffer.  # noqa: E501


        :return: The id of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FinancialOffer.


        :param id: The id of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this FinancialOffer.  # noqa: E501

        image  # noqa: E501

        :return: The image of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this FinancialOffer.

        image  # noqa: E501

        :param image: The image of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def institution_name(self):
        """Gets the institution_name of this FinancialOffer.  # noqa: E501

        institution_name  # noqa: E501

        :return: The institution_name of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._institution_name

    @institution_name.setter
    def institution_name(self, institution_name):
        """Sets the institution_name of this FinancialOffer.

        institution_name  # noqa: E501

        :param institution_name: The institution_name of this FinancialOffer.  # noqa: E501
        :type: str
        """
        if institution_name is None:
            raise ValueError("Invalid value for `institution_name`, must not be `None`")  # noqa: E501

        self._institution_name = institution_name

    @property
    def is_active(self):
        """Gets the is_active of this FinancialOffer.  # noqa: E501

        is_active  # noqa: E501

        :return: The is_active of this FinancialOffer.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this FinancialOffer.

        is_active  # noqa: E501

        :param is_active: The is_active of this FinancialOffer.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def metadata(self):
        """Gets the metadata of this FinancialOffer.  # noqa: E501


        :return: The metadata of this FinancialOffer.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FinancialOffer.


        :param metadata: The metadata of this FinancialOffer.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def minimum_contribution(self):
        """Gets the minimum_contribution of this FinancialOffer.  # noqa: E501

        minimumContribution  # noqa: E501

        :return: The minimum_contribution of this FinancialOffer.  # noqa: E501
        :rtype: float
        """
        return self._minimum_contribution

    @minimum_contribution.setter
    def minimum_contribution(self, minimum_contribution):
        """Sets the minimum_contribution of this FinancialOffer.

        minimumContribution  # noqa: E501

        :param minimum_contribution: The minimum_contribution of this FinancialOffer.  # noqa: E501
        :type: float
        """

        self._minimum_contribution = minimum_contribution

    @property
    def minimum_contribution_term(self):
        """Gets the minimum_contribution_term of this FinancialOffer.  # noqa: E501

        minimumContributionTerm  # noqa: E501

        :return: The minimum_contribution_term of this FinancialOffer.  # noqa: E501
        :rtype: float
        """
        return self._minimum_contribution_term

    @minimum_contribution_term.setter
    def minimum_contribution_term(self, minimum_contribution_term):
        """Sets the minimum_contribution_term of this FinancialOffer.

        minimumContributionTerm  # noqa: E501

        :param minimum_contribution_term: The minimum_contribution_term of this FinancialOffer.  # noqa: E501
        :type: float
        """

        self._minimum_contribution_term = minimum_contribution_term

    @property
    def minimum_contribution_term_unit(self):
        """Gets the minimum_contribution_term_unit of this FinancialOffer.  # noqa: E501

        minimumContributionTermUnit  # noqa: E501

        :return: The minimum_contribution_term_unit of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._minimum_contribution_term_unit

    @minimum_contribution_term_unit.setter
    def minimum_contribution_term_unit(self, minimum_contribution_term_unit):
        """Sets the minimum_contribution_term_unit of this FinancialOffer.

        minimumContributionTermUnit  # noqa: E501

        :param minimum_contribution_term_unit: The minimum_contribution_term_unit of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._minimum_contribution_term_unit = minimum_contribution_term_unit

    @property
    def name(self):
        """Gets the name of this FinancialOffer.  # noqa: E501

        name  # noqa: E501

        :return: The name of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FinancialOffer.

        name  # noqa: E501

        :param name: The name of this FinancialOffer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def node_map(self):
        """Gets the node_map of this FinancialOffer.  # noqa: E501


        :return: The node_map of this FinancialOffer.  # noqa: E501
        :rtype: list[AllocationNodeMap]
        """
        return self._node_map

    @node_map.setter
    def node_map(self, node_map):
        """Sets the node_map of this FinancialOffer.


        :param node_map: The node_map of this FinancialOffer.  # noqa: E501
        :type: list[AllocationNodeMap]
        """

        self._node_map = node_map

    @property
    def offer_link(self):
        """Gets the offer_link of this FinancialOffer.  # noqa: E501

        offerLink  # noqa: E501

        :return: The offer_link of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._offer_link

    @offer_link.setter
    def offer_link(self, offer_link):
        """Sets the offer_link of this FinancialOffer.

        offerLink  # noqa: E501

        :param offer_link: The offer_link of this FinancialOffer.  # noqa: E501
        :type: str
        """
        if offer_link is None:
            raise ValueError("Invalid value for `offer_link`, must not be `None`")  # noqa: E501

        self._offer_link = offer_link

    @property
    def offer_term(self):
        """Gets the offer_term of this FinancialOffer.  # noqa: E501

        offerTerm  # noqa: E501

        :return: The offer_term of this FinancialOffer.  # noqa: E501
        :rtype: float
        """
        return self._offer_term

    @offer_term.setter
    def offer_term(self, offer_term):
        """Sets the offer_term of this FinancialOffer.

        offerTerm  # noqa: E501

        :param offer_term: The offer_term of this FinancialOffer.  # noqa: E501
        :type: float
        """

        self._offer_term = offer_term

    @property
    def offer_term_unit(self):
        """Gets the offer_term_unit of this FinancialOffer.  # noqa: E501

        offerTermUnit  # noqa: E501

        :return: The offer_term_unit of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._offer_term_unit

    @offer_term_unit.setter
    def offer_term_unit(self, offer_term_unit):
        """Sets the offer_term_unit of this FinancialOffer.

        offerTermUnit  # noqa: E501

        :param offer_term_unit: The offer_term_unit of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._offer_term_unit = offer_term_unit

    @property
    def prerequisite(self):
        """Gets the prerequisite of this FinancialOffer.  # noqa: E501

        prerequisite  # noqa: E501

        :return: The prerequisite of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._prerequisite

    @prerequisite.setter
    def prerequisite(self, prerequisite):
        """Sets the prerequisite of this FinancialOffer.

        prerequisite  # noqa: E501

        :param prerequisite: The prerequisite of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._prerequisite = prerequisite

    @property
    def prerequisite_type(self):
        """Gets the prerequisite_type of this FinancialOffer.  # noqa: E501


        :return: The prerequisite_type of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._prerequisite_type

    @prerequisite_type.setter
    def prerequisite_type(self, prerequisite_type):
        """Sets the prerequisite_type of this FinancialOffer.


        :param prerequisite_type: The prerequisite_type of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._prerequisite_type = prerequisite_type

    @property
    def rating(self):
        """Gets the rating of this FinancialOffer.  # noqa: E501

        rating  # noqa: E501

        :return: The rating of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this FinancialOffer.

        rating  # noqa: E501

        :param rating: The rating of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def secondary_id(self):
        """Gets the secondary_id of this FinancialOffer.  # noqa: E501


        :return: The secondary_id of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this FinancialOffer.


        :param secondary_id: The secondary_id of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def subcategory(self):
        """Gets the subcategory of this FinancialOffer.  # noqa: E501

        subcategory  # noqa: E501

        :return: The subcategory of this FinancialOffer.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this FinancialOffer.

        subcategory  # noqa: E501

        :param subcategory: The subcategory of this FinancialOffer.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    @property
    def update_date(self):
        """Gets the update_date of this FinancialOffer.  # noqa: E501


        :return: The update_date of this FinancialOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this FinancialOffer.


        :param update_date: The update_date of this FinancialOffer.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialOffer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
