# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdvisorOverviewVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_list': 'list[AccountAdvisorVO]',
        'client_list': 'list[ClientAdvisorOverviewVO]',
        'total_accounts_managed': 'int',
        'total_assets_managed': 'float',
        'total_clients_managed': 'int'
    }

    attribute_map = {
        'account_list': 'account_list',
        'client_list': 'client_list',
        'total_accounts_managed': 'total_accounts_managed',
        'total_assets_managed': 'total_assets_managed',
        'total_clients_managed': 'total_clients_managed'
    }

    def __init__(self, account_list=None, client_list=None, total_accounts_managed=None, total_assets_managed=None, total_clients_managed=None):  # noqa: E501
        """AdvisorOverviewVO - a model defined in Swagger"""  # noqa: E501

        self._account_list = None
        self._client_list = None
        self._total_accounts_managed = None
        self._total_assets_managed = None
        self._total_clients_managed = None
        self.discriminator = None

        if account_list is not None:
            self.account_list = account_list
        if client_list is not None:
            self.client_list = client_list
        if total_accounts_managed is not None:
            self.total_accounts_managed = total_accounts_managed
        if total_assets_managed is not None:
            self.total_assets_managed = total_assets_managed
        if total_clients_managed is not None:
            self.total_clients_managed = total_clients_managed

    @property
    def account_list(self):
        """Gets the account_list of this AdvisorOverviewVO.  # noqa: E501


        :return: The account_list of this AdvisorOverviewVO.  # noqa: E501
        :rtype: list[AccountAdvisorVO]
        """
        return self._account_list

    @account_list.setter
    def account_list(self, account_list):
        """Sets the account_list of this AdvisorOverviewVO.


        :param account_list: The account_list of this AdvisorOverviewVO.  # noqa: E501
        :type: list[AccountAdvisorVO]
        """

        self._account_list = account_list

    @property
    def client_list(self):
        """Gets the client_list of this AdvisorOverviewVO.  # noqa: E501


        :return: The client_list of this AdvisorOverviewVO.  # noqa: E501
        :rtype: list[ClientAdvisorOverviewVO]
        """
        return self._client_list

    @client_list.setter
    def client_list(self, client_list):
        """Sets the client_list of this AdvisorOverviewVO.


        :param client_list: The client_list of this AdvisorOverviewVO.  # noqa: E501
        :type: list[ClientAdvisorOverviewVO]
        """

        self._client_list = client_list

    @property
    def total_accounts_managed(self):
        """Gets the total_accounts_managed of this AdvisorOverviewVO.  # noqa: E501


        :return: The total_accounts_managed of this AdvisorOverviewVO.  # noqa: E501
        :rtype: int
        """
        return self._total_accounts_managed

    @total_accounts_managed.setter
    def total_accounts_managed(self, total_accounts_managed):
        """Sets the total_accounts_managed of this AdvisorOverviewVO.


        :param total_accounts_managed: The total_accounts_managed of this AdvisorOverviewVO.  # noqa: E501
        :type: int
        """

        self._total_accounts_managed = total_accounts_managed

    @property
    def total_assets_managed(self):
        """Gets the total_assets_managed of this AdvisorOverviewVO.  # noqa: E501


        :return: The total_assets_managed of this AdvisorOverviewVO.  # noqa: E501
        :rtype: float
        """
        return self._total_assets_managed

    @total_assets_managed.setter
    def total_assets_managed(self, total_assets_managed):
        """Sets the total_assets_managed of this AdvisorOverviewVO.


        :param total_assets_managed: The total_assets_managed of this AdvisorOverviewVO.  # noqa: E501
        :type: float
        """

        self._total_assets_managed = total_assets_managed

    @property
    def total_clients_managed(self):
        """Gets the total_clients_managed of this AdvisorOverviewVO.  # noqa: E501


        :return: The total_clients_managed of this AdvisorOverviewVO.  # noqa: E501
        :rtype: int
        """
        return self._total_clients_managed

    @total_clients_managed.setter
    def total_clients_managed(self, total_clients_managed):
        """Sets the total_clients_managed of this AdvisorOverviewVO.


        :param total_clients_managed: The total_clients_managed of this AdvisorOverviewVO.  # noqa: E501
        :type: int
        """

        self._total_clients_managed = total_clients_managed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvisorOverviewVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvisorOverviewVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
