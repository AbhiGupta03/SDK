# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Sale(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned': 'str',
        'close_time': 'date',
        'closed_by': 'str',
        'comments': 'str',
        'contacted': 'bool',
        'create_date': 'datetime',
        'email': 'str',
        'firm_name': 'str',
        'first_name': 'str',
        'id': 'str',
        'ip': 'str',
        'last_name': 'str',
        'metadata': 'dict(str, str)',
        'method': 'str',
        'notification': 'bool',
        'open_time': 'date',
        'phone': 'str',
        'questions': 'str',
        'referral_source': 'str',
        'secondary_id': 'str',
        'solution': 'str',
        'subject': 'str',
        'title': 'str',
        'update_date': 'datetime'
    }

    attribute_map = {
        'assigned': 'assigned',
        'close_time': 'close_time',
        'closed_by': 'closed_by',
        'comments': 'comments',
        'contacted': 'contacted',
        'create_date': 'create_date',
        'email': 'email',
        'firm_name': 'firm_name',
        'first_name': 'first_name',
        'id': 'id',
        'ip': 'ip',
        'last_name': 'last_name',
        'metadata': 'metadata',
        'method': 'method',
        'notification': 'notification',
        'open_time': 'open_time',
        'phone': 'phone',
        'questions': 'questions',
        'referral_source': 'referral_source',
        'secondary_id': 'secondary_id',
        'solution': 'solution',
        'subject': 'subject',
        'title': 'title',
        'update_date': 'update_date'
    }

    def __init__(self, assigned=None, close_time=None, closed_by=None, comments=None, contacted=None, create_date=None, email=None, firm_name=None, first_name=None, id=None, ip=None, last_name=None, metadata=None, method=None, notification=None, open_time=None, phone=None, questions=None, referral_source=None, secondary_id=None, solution=None, subject=None, title=None, update_date=None):  # noqa: E501
        """Sale - a model defined in Swagger"""  # noqa: E501

        self._assigned = None
        self._close_time = None
        self._closed_by = None
        self._comments = None
        self._contacted = None
        self._create_date = None
        self._email = None
        self._firm_name = None
        self._first_name = None
        self._id = None
        self._ip = None
        self._last_name = None
        self._metadata = None
        self._method = None
        self._notification = None
        self._open_time = None
        self._phone = None
        self._questions = None
        self._referral_source = None
        self._secondary_id = None
        self._solution = None
        self._subject = None
        self._title = None
        self._update_date = None
        self.discriminator = None

        if assigned is not None:
            self.assigned = assigned
        if close_time is not None:
            self.close_time = close_time
        if closed_by is not None:
            self.closed_by = closed_by
        if comments is not None:
            self.comments = comments
        if contacted is not None:
            self.contacted = contacted
        if create_date is not None:
            self.create_date = create_date
        if email is not None:
            self.email = email
        if firm_name is not None:
            self.firm_name = firm_name
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if ip is not None:
            self.ip = ip
        if last_name is not None:
            self.last_name = last_name
        if metadata is not None:
            self.metadata = metadata
        if method is not None:
            self.method = method
        if notification is not None:
            self.notification = notification
        if open_time is not None:
            self.open_time = open_time
        if phone is not None:
            self.phone = phone
        self.questions = questions
        if referral_source is not None:
            self.referral_source = referral_source
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if solution is not None:
            self.solution = solution
        if subject is not None:
            self.subject = subject
        if title is not None:
            self.title = title
        if update_date is not None:
            self.update_date = update_date

    @property
    def assigned(self):
        """Gets the assigned of this Sale.  # noqa: E501

        assigned  # noqa: E501

        :return: The assigned of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned):
        """Sets the assigned of this Sale.

        assigned  # noqa: E501

        :param assigned: The assigned of this Sale.  # noqa: E501
        :type: str
        """

        self._assigned = assigned

    @property
    def close_time(self):
        """Gets the close_time of this Sale.  # noqa: E501

        closeTime  # noqa: E501

        :return: The close_time of this Sale.  # noqa: E501
        :rtype: date
        """
        return self._close_time

    @close_time.setter
    def close_time(self, close_time):
        """Sets the close_time of this Sale.

        closeTime  # noqa: E501

        :param close_time: The close_time of this Sale.  # noqa: E501
        :type: date
        """

        self._close_time = close_time

    @property
    def closed_by(self):
        """Gets the closed_by of this Sale.  # noqa: E501

        closedBy  # noqa: E501

        :return: The closed_by of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._closed_by

    @closed_by.setter
    def closed_by(self, closed_by):
        """Sets the closed_by of this Sale.

        closedBy  # noqa: E501

        :param closed_by: The closed_by of this Sale.  # noqa: E501
        :type: str
        """

        self._closed_by = closed_by

    @property
    def comments(self):
        """Gets the comments of this Sale.  # noqa: E501

        comments  # noqa: E501

        :return: The comments of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Sale.

        comments  # noqa: E501

        :param comments: The comments of this Sale.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def contacted(self):
        """Gets the contacted of this Sale.  # noqa: E501

        contacted  # noqa: E501

        :return: The contacted of this Sale.  # noqa: E501
        :rtype: bool
        """
        return self._contacted

    @contacted.setter
    def contacted(self, contacted):
        """Sets the contacted of this Sale.

        contacted  # noqa: E501

        :param contacted: The contacted of this Sale.  # noqa: E501
        :type: bool
        """

        self._contacted = contacted

    @property
    def create_date(self):
        """Gets the create_date of this Sale.  # noqa: E501


        :return: The create_date of this Sale.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Sale.


        :param create_date: The create_date of this Sale.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def email(self):
        """Gets the email of this Sale.  # noqa: E501

        email  # noqa: E501

        :return: The email of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Sale.

        email  # noqa: E501

        :param email: The email of this Sale.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def firm_name(self):
        """Gets the firm_name of this Sale.  # noqa: E501

        firmName  # noqa: E501

        :return: The firm_name of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._firm_name

    @firm_name.setter
    def firm_name(self, firm_name):
        """Sets the firm_name of this Sale.

        firmName  # noqa: E501

        :param firm_name: The firm_name of this Sale.  # noqa: E501
        :type: str
        """

        self._firm_name = firm_name

    @property
    def first_name(self):
        """Gets the first_name of this Sale.  # noqa: E501

        firstName  # noqa: E501

        :return: The first_name of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Sale.

        firstName  # noqa: E501

        :param first_name: The first_name of this Sale.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Sale.  # noqa: E501


        :return: The id of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sale.


        :param id: The id of this Sale.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this Sale.  # noqa: E501

        ip  # noqa: E501

        :return: The ip of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Sale.

        ip  # noqa: E501

        :param ip: The ip of this Sale.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def last_name(self):
        """Gets the last_name of this Sale.  # noqa: E501

        lastName  # noqa: E501

        :return: The last_name of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Sale.

        lastName  # noqa: E501

        :param last_name: The last_name of this Sale.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def metadata(self):
        """Gets the metadata of this Sale.  # noqa: E501

        metadata  # noqa: E501

        :return: The metadata of this Sale.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Sale.

        metadata  # noqa: E501

        :param metadata: The metadata of this Sale.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def method(self):
        """Gets the method of this Sale.  # noqa: E501

        method  # noqa: E501

        :return: The method of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Sale.

        method  # noqa: E501

        :param method: The method of this Sale.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def notification(self):
        """Gets the notification of this Sale.  # noqa: E501


        :return: The notification of this Sale.  # noqa: E501
        :rtype: bool
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this Sale.


        :param notification: The notification of this Sale.  # noqa: E501
        :type: bool
        """

        self._notification = notification

    @property
    def open_time(self):
        """Gets the open_time of this Sale.  # noqa: E501

        openTime  # noqa: E501

        :return: The open_time of this Sale.  # noqa: E501
        :rtype: date
        """
        return self._open_time

    @open_time.setter
    def open_time(self, open_time):
        """Sets the open_time of this Sale.

        openTime  # noqa: E501

        :param open_time: The open_time of this Sale.  # noqa: E501
        :type: date
        """

        self._open_time = open_time

    @property
    def phone(self):
        """Gets the phone of this Sale.  # noqa: E501

        phone  # noqa: E501

        :return: The phone of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Sale.

        phone  # noqa: E501

        :param phone: The phone of this Sale.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def questions(self):
        """Gets the questions of this Sale.  # noqa: E501

        questions  # noqa: E501

        :return: The questions of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this Sale.

        questions  # noqa: E501

        :param questions: The questions of this Sale.  # noqa: E501
        :type: str
        """
        if questions is None:
            raise ValueError("Invalid value for `questions`, must not be `None`")  # noqa: E501

        self._questions = questions

    @property
    def referral_source(self):
        """Gets the referral_source of this Sale.  # noqa: E501

        referralSource  # noqa: E501

        :return: The referral_source of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._referral_source

    @referral_source.setter
    def referral_source(self, referral_source):
        """Sets the referral_source of this Sale.

        referralSource  # noqa: E501

        :param referral_source: The referral_source of this Sale.  # noqa: E501
        :type: str
        """

        self._referral_source = referral_source

    @property
    def secondary_id(self):
        """Gets the secondary_id of this Sale.  # noqa: E501


        :return: The secondary_id of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this Sale.


        :param secondary_id: The secondary_id of this Sale.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def solution(self):
        """Gets the solution of this Sale.  # noqa: E501


        :return: The solution of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this Sale.


        :param solution: The solution of this Sale.  # noqa: E501
        :type: str
        """

        self._solution = solution

    @property
    def subject(self):
        """Gets the subject of this Sale.  # noqa: E501

        subject  # noqa: E501

        :return: The subject of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Sale.

        subject  # noqa: E501

        :param subject: The subject of this Sale.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def title(self):
        """Gets the title of this Sale.  # noqa: E501

        title  # noqa: E501

        :return: The title of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Sale.

        title  # noqa: E501

        :param title: The title of this Sale.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def update_date(self):
        """Gets the update_date of this Sale.  # noqa: E501


        :return: The update_date of this Sale.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Sale.


        :param update_date: The update_date of this Sale.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sale, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
