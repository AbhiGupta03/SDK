# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortfolioAggregatedVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_classes': 'list[SecurityDetailVO]',
        'categories': 'list[SecurityDetailVO]',
        'create_date': 'datetime',
        'description': 'str',
        'industries': 'list[SecurityDetailVO]',
        'name': 'str',
        'portfolio_id': 'str',
        'sectors': 'list[SecurityDetailVO]',
        'security_classes': 'list[SecurityDetailVO]',
        'update_date': 'datetime',
        'weight': 'float'
    }

    attribute_map = {
        'asset_classes': 'asset_classes',
        'categories': 'categories',
        'create_date': 'create_date',
        'description': 'description',
        'industries': 'industries',
        'name': 'name',
        'portfolio_id': 'portfolio_id',
        'sectors': 'sectors',
        'security_classes': 'security_classes',
        'update_date': 'update_date',
        'weight': 'weight'
    }

    def __init__(self, asset_classes=None, categories=None, create_date=None, description=None, industries=None, name=None, portfolio_id=None, sectors=None, security_classes=None, update_date=None, weight=None):  # noqa: E501
        """PortfolioAggregatedVO - a model defined in Swagger"""  # noqa: E501

        self._asset_classes = None
        self._categories = None
        self._create_date = None
        self._description = None
        self._industries = None
        self._name = None
        self._portfolio_id = None
        self._sectors = None
        self._security_classes = None
        self._update_date = None
        self._weight = None
        self.discriminator = None

        if asset_classes is not None:
            self.asset_classes = asset_classes
        if categories is not None:
            self.categories = categories
        if create_date is not None:
            self.create_date = create_date
        if description is not None:
            self.description = description
        if industries is not None:
            self.industries = industries
        if name is not None:
            self.name = name
        if portfolio_id is not None:
            self.portfolio_id = portfolio_id
        if sectors is not None:
            self.sectors = sectors
        if security_classes is not None:
            self.security_classes = security_classes
        if update_date is not None:
            self.update_date = update_date
        if weight is not None:
            self.weight = weight

    @property
    def asset_classes(self):
        """Gets the asset_classes of this PortfolioAggregatedVO.  # noqa: E501


        :return: The asset_classes of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: list[SecurityDetailVO]
        """
        return self._asset_classes

    @asset_classes.setter
    def asset_classes(self, asset_classes):
        """Sets the asset_classes of this PortfolioAggregatedVO.


        :param asset_classes: The asset_classes of this PortfolioAggregatedVO.  # noqa: E501
        :type: list[SecurityDetailVO]
        """

        self._asset_classes = asset_classes

    @property
    def categories(self):
        """Gets the categories of this PortfolioAggregatedVO.  # noqa: E501


        :return: The categories of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: list[SecurityDetailVO]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this PortfolioAggregatedVO.


        :param categories: The categories of this PortfolioAggregatedVO.  # noqa: E501
        :type: list[SecurityDetailVO]
        """

        self._categories = categories

    @property
    def create_date(self):
        """Gets the create_date of this PortfolioAggregatedVO.  # noqa: E501


        :return: The create_date of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this PortfolioAggregatedVO.


        :param create_date: The create_date of this PortfolioAggregatedVO.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def description(self):
        """Gets the description of this PortfolioAggregatedVO.  # noqa: E501


        :return: The description of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PortfolioAggregatedVO.


        :param description: The description of this PortfolioAggregatedVO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def industries(self):
        """Gets the industries of this PortfolioAggregatedVO.  # noqa: E501


        :return: The industries of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: list[SecurityDetailVO]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this PortfolioAggregatedVO.


        :param industries: The industries of this PortfolioAggregatedVO.  # noqa: E501
        :type: list[SecurityDetailVO]
        """

        self._industries = industries

    @property
    def name(self):
        """Gets the name of this PortfolioAggregatedVO.  # noqa: E501


        :return: The name of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortfolioAggregatedVO.


        :param name: The name of this PortfolioAggregatedVO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this PortfolioAggregatedVO.  # noqa: E501


        :return: The portfolio_id of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this PortfolioAggregatedVO.


        :param portfolio_id: The portfolio_id of this PortfolioAggregatedVO.  # noqa: E501
        :type: str
        """

        self._portfolio_id = portfolio_id

    @property
    def sectors(self):
        """Gets the sectors of this PortfolioAggregatedVO.  # noqa: E501


        :return: The sectors of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: list[SecurityDetailVO]
        """
        return self._sectors

    @sectors.setter
    def sectors(self, sectors):
        """Sets the sectors of this PortfolioAggregatedVO.


        :param sectors: The sectors of this PortfolioAggregatedVO.  # noqa: E501
        :type: list[SecurityDetailVO]
        """

        self._sectors = sectors

    @property
    def security_classes(self):
        """Gets the security_classes of this PortfolioAggregatedVO.  # noqa: E501


        :return: The security_classes of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: list[SecurityDetailVO]
        """
        return self._security_classes

    @security_classes.setter
    def security_classes(self, security_classes):
        """Sets the security_classes of this PortfolioAggregatedVO.


        :param security_classes: The security_classes of this PortfolioAggregatedVO.  # noqa: E501
        :type: list[SecurityDetailVO]
        """

        self._security_classes = security_classes

    @property
    def update_date(self):
        """Gets the update_date of this PortfolioAggregatedVO.  # noqa: E501


        :return: The update_date of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this PortfolioAggregatedVO.


        :param update_date: The update_date of this PortfolioAggregatedVO.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def weight(self):
        """Gets the weight of this PortfolioAggregatedVO.  # noqa: E501


        :return: The weight of this PortfolioAggregatedVO.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this PortfolioAggregatedVO.


        :param weight: The weight of this PortfolioAggregatedVO.  # noqa: E501
        :type: float
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioAggregatedVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioAggregatedVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
