# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Campaign(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'campaign_category': 'str',
        'campaign_plan_id': 'str',
        'cookie_code': 'str',
        'create_date': 'datetime',
        'description': 'str',
        'end_date': 'date',
        'id': 'str',
        'is_acquisition': 'bool',
        'is_active': 'bool',
        'landing_page': 'str',
        'metadata': 'dict(str, str)',
        'rate': 'float',
        'secondary_id': 'str',
        'start_date': 'date',
        'title': 'str',
        'update_date': 'datetime',
        'utm_campaign': 'str',
        'utm_content': 'str',
        'utm_medium': 'str',
        'utm_source': 'str',
        'utm_term': 'str'
    }

    attribute_map = {
        'campaign_category': 'campaign_category',
        'campaign_plan_id': 'campaign_plan_id',
        'cookie_code': 'cookie_code',
        'create_date': 'create_date',
        'description': 'description',
        'end_date': 'end_date',
        'id': 'id',
        'is_acquisition': 'is_acquisition',
        'is_active': 'is_active',
        'landing_page': 'landing_page',
        'metadata': 'metadata',
        'rate': 'rate',
        'secondary_id': 'secondary_id',
        'start_date': 'start_date',
        'title': 'title',
        'update_date': 'update_date',
        'utm_campaign': 'utm_campaign',
        'utm_content': 'utm_content',
        'utm_medium': 'utm_medium',
        'utm_source': 'utm_source',
        'utm_term': 'utm_term'
    }

    def __init__(self, campaign_category=None, campaign_plan_id=None, cookie_code=None, create_date=None, description=None, end_date=None, id=None, is_acquisition=None, is_active=None, landing_page=None, metadata=None, rate=None, secondary_id=None, start_date=None, title=None, update_date=None, utm_campaign=None, utm_content=None, utm_medium=None, utm_source=None, utm_term=None):  # noqa: E501
        """Campaign - a model defined in Swagger"""  # noqa: E501

        self._campaign_category = None
        self._campaign_plan_id = None
        self._cookie_code = None
        self._create_date = None
        self._description = None
        self._end_date = None
        self._id = None
        self._is_acquisition = None
        self._is_active = None
        self._landing_page = None
        self._metadata = None
        self._rate = None
        self._secondary_id = None
        self._start_date = None
        self._title = None
        self._update_date = None
        self._utm_campaign = None
        self._utm_content = None
        self._utm_medium = None
        self._utm_source = None
        self._utm_term = None
        self.discriminator = None

        if campaign_category is not None:
            self.campaign_category = campaign_category
        if campaign_plan_id is not None:
            self.campaign_plan_id = campaign_plan_id
        if cookie_code is not None:
            self.cookie_code = cookie_code
        if create_date is not None:
            self.create_date = create_date
        self.description = description
        self.end_date = end_date
        if id is not None:
            self.id = id
        if is_acquisition is not None:
            self.is_acquisition = is_acquisition
        if is_active is not None:
            self.is_active = is_active
        if landing_page is not None:
            self.landing_page = landing_page
        if metadata is not None:
            self.metadata = metadata
        if rate is not None:
            self.rate = rate
        if secondary_id is not None:
            self.secondary_id = secondary_id
        self.start_date = start_date
        self.title = title
        if update_date is not None:
            self.update_date = update_date
        if utm_campaign is not None:
            self.utm_campaign = utm_campaign
        if utm_content is not None:
            self.utm_content = utm_content
        if utm_medium is not None:
            self.utm_medium = utm_medium
        if utm_source is not None:
            self.utm_source = utm_source
        if utm_term is not None:
            self.utm_term = utm_term

    @property
    def campaign_category(self):
        """Gets the campaign_category of this Campaign.  # noqa: E501


        :return: The campaign_category of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._campaign_category

    @campaign_category.setter
    def campaign_category(self, campaign_category):
        """Sets the campaign_category of this Campaign.


        :param campaign_category: The campaign_category of this Campaign.  # noqa: E501
        :type: str
        """

        self._campaign_category = campaign_category

    @property
    def campaign_plan_id(self):
        """Gets the campaign_plan_id of this Campaign.  # noqa: E501

        campaignPlanId  # noqa: E501

        :return: The campaign_plan_id of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._campaign_plan_id

    @campaign_plan_id.setter
    def campaign_plan_id(self, campaign_plan_id):
        """Sets the campaign_plan_id of this Campaign.

        campaignPlanId  # noqa: E501

        :param campaign_plan_id: The campaign_plan_id of this Campaign.  # noqa: E501
        :type: str
        """

        self._campaign_plan_id = campaign_plan_id

    @property
    def cookie_code(self):
        """Gets the cookie_code of this Campaign.  # noqa: E501

        cookieCode  # noqa: E501

        :return: The cookie_code of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._cookie_code

    @cookie_code.setter
    def cookie_code(self, cookie_code):
        """Sets the cookie_code of this Campaign.

        cookieCode  # noqa: E501

        :param cookie_code: The cookie_code of this Campaign.  # noqa: E501
        :type: str
        """

        self._cookie_code = cookie_code

    @property
    def create_date(self):
        """Gets the create_date of this Campaign.  # noqa: E501


        :return: The create_date of this Campaign.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Campaign.


        :param create_date: The create_date of this Campaign.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def description(self):
        """Gets the description of this Campaign.  # noqa: E501

        description  # noqa: E501

        :return: The description of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Campaign.

        description  # noqa: E501

        :param description: The description of this Campaign.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this Campaign.  # noqa: E501

        endDate  # noqa: E501

        :return: The end_date of this Campaign.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Campaign.

        endDate  # noqa: E501

        :param end_date: The end_date of this Campaign.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Campaign.  # noqa: E501


        :return: The id of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Campaign.


        :param id: The id of this Campaign.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_acquisition(self):
        """Gets the is_acquisition of this Campaign.  # noqa: E501

        isAcquisition  # noqa: E501

        :return: The is_acquisition of this Campaign.  # noqa: E501
        :rtype: bool
        """
        return self._is_acquisition

    @is_acquisition.setter
    def is_acquisition(self, is_acquisition):
        """Sets the is_acquisition of this Campaign.

        isAcquisition  # noqa: E501

        :param is_acquisition: The is_acquisition of this Campaign.  # noqa: E501
        :type: bool
        """

        self._is_acquisition = is_acquisition

    @property
    def is_active(self):
        """Gets the is_active of this Campaign.  # noqa: E501

        isActive  # noqa: E501

        :return: The is_active of this Campaign.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Campaign.

        isActive  # noqa: E501

        :param is_active: The is_active of this Campaign.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def landing_page(self):
        """Gets the landing_page of this Campaign.  # noqa: E501

        landingPage  # noqa: E501

        :return: The landing_page of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """Sets the landing_page of this Campaign.

        landingPage  # noqa: E501

        :param landing_page: The landing_page of this Campaign.  # noqa: E501
        :type: str
        """

        self._landing_page = landing_page

    @property
    def metadata(self):
        """Gets the metadata of this Campaign.  # noqa: E501


        :return: The metadata of this Campaign.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Campaign.


        :param metadata: The metadata of this Campaign.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def rate(self):
        """Gets the rate of this Campaign.  # noqa: E501

        rate  # noqa: E501

        :return: The rate of this Campaign.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Campaign.

        rate  # noqa: E501

        :param rate: The rate of this Campaign.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def secondary_id(self):
        """Gets the secondary_id of this Campaign.  # noqa: E501


        :return: The secondary_id of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this Campaign.


        :param secondary_id: The secondary_id of this Campaign.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def start_date(self):
        """Gets the start_date of this Campaign.  # noqa: E501

        startDate  # noqa: E501

        :return: The start_date of this Campaign.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Campaign.

        startDate  # noqa: E501

        :param start_date: The start_date of this Campaign.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def title(self):
        """Gets the title of this Campaign.  # noqa: E501

        title  # noqa: E501

        :return: The title of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Campaign.

        title  # noqa: E501

        :param title: The title of this Campaign.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def update_date(self):
        """Gets the update_date of this Campaign.  # noqa: E501


        :return: The update_date of this Campaign.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Campaign.


        :param update_date: The update_date of this Campaign.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def utm_campaign(self):
        """Gets the utm_campaign of this Campaign.  # noqa: E501

        utmCampaign  # noqa: E501

        :return: The utm_campaign of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """Sets the utm_campaign of this Campaign.

        utmCampaign  # noqa: E501

        :param utm_campaign: The utm_campaign of this Campaign.  # noqa: E501
        :type: str
        """

        self._utm_campaign = utm_campaign

    @property
    def utm_content(self):
        """Gets the utm_content of this Campaign.  # noqa: E501

        utmContent  # noqa: E501

        :return: The utm_content of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._utm_content

    @utm_content.setter
    def utm_content(self, utm_content):
        """Sets the utm_content of this Campaign.

        utmContent  # noqa: E501

        :param utm_content: The utm_content of this Campaign.  # noqa: E501
        :type: str
        """

        self._utm_content = utm_content

    @property
    def utm_medium(self):
        """Gets the utm_medium of this Campaign.  # noqa: E501

        utmMedium  # noqa: E501

        :return: The utm_medium of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._utm_medium

    @utm_medium.setter
    def utm_medium(self, utm_medium):
        """Sets the utm_medium of this Campaign.

        utmMedium  # noqa: E501

        :param utm_medium: The utm_medium of this Campaign.  # noqa: E501
        :type: str
        """

        self._utm_medium = utm_medium

    @property
    def utm_source(self):
        """Gets the utm_source of this Campaign.  # noqa: E501

        utmSource  # noqa: E501

        :return: The utm_source of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._utm_source

    @utm_source.setter
    def utm_source(self, utm_source):
        """Sets the utm_source of this Campaign.

        utmSource  # noqa: E501

        :param utm_source: The utm_source of this Campaign.  # noqa: E501
        :type: str
        """

        self._utm_source = utm_source

    @property
    def utm_term(self):
        """Gets the utm_term of this Campaign.  # noqa: E501

        utmTerm  # noqa: E501

        :return: The utm_term of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._utm_term

    @utm_term.setter
    def utm_term(self, utm_term):
        """Sets the utm_term of this Campaign.

        utmTerm  # noqa: E501

        :param utm_term: The utm_term of this Campaign.  # noqa: E501
        :type: str
        """

        self._utm_term = utm_term

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Campaign, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Campaign):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
