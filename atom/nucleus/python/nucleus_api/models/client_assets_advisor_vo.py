# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientAssetsAdvisorVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as_of_date': 'datetime',
        'total_assets': 'float'
    }

    attribute_map = {
        'as_of_date': 'as_of_date',
        'total_assets': 'total_assets'
    }

    def __init__(self, as_of_date=None, total_assets=None):  # noqa: E501
        """ClientAssetsAdvisorVO - a model defined in Swagger"""  # noqa: E501

        self._as_of_date = None
        self._total_assets = None
        self.discriminator = None

        if as_of_date is not None:
            self.as_of_date = as_of_date
        if total_assets is not None:
            self.total_assets = total_assets

    @property
    def as_of_date(self):
        """Gets the as_of_date of this ClientAssetsAdvisorVO.  # noqa: E501


        :return: The as_of_date of this ClientAssetsAdvisorVO.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this ClientAssetsAdvisorVO.


        :param as_of_date: The as_of_date of this ClientAssetsAdvisorVO.  # noqa: E501
        :type: datetime
        """

        self._as_of_date = as_of_date

    @property
    def total_assets(self):
        """Gets the total_assets of this ClientAssetsAdvisorVO.  # noqa: E501


        :return: The total_assets of this ClientAssetsAdvisorVO.  # noqa: E501
        :rtype: float
        """
        return self._total_assets

    @total_assets.setter
    def total_assets(self, total_assets):
        """Sets the total_assets of this ClientAssetsAdvisorVO.


        :param total_assets: The total_assets of this ClientAssetsAdvisorVO.  # noqa: E501
        :type: float
        """

        self._total_assets = total_assets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientAssetsAdvisorVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientAssetsAdvisorVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
