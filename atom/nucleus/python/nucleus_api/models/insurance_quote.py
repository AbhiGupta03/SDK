# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InsuranceQuote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coverages': 'list[InsuranceCoverageMap]',
        'create_date': 'datetime',
        'currency_code': 'str',
        'discounts': 'list[InsuranceDiscountMap]',
        'end_date': 'datetime',
        'financial_offer_id': 'str',
        'id': 'str',
        'is_active': 'bool',
        'metadata': 'dict(str, str)',
        'node_map': 'list[AllocationNodeMap]',
        'premium': 'float',
        'premium_duration': 'float',
        'premium_frequency': 'int',
        'premium_frequency_unit': 'str',
        'secondary_id': 'str',
        'start_date': 'datetime',
        'update_date': 'datetime'
    }

    attribute_map = {
        'coverages': 'coverages',
        'create_date': 'create_date',
        'currency_code': 'currency_code',
        'discounts': 'discounts',
        'end_date': 'end_date',
        'financial_offer_id': 'financial_offer_id',
        'id': 'id',
        'is_active': 'is_active',
        'metadata': 'metadata',
        'node_map': 'node_map',
        'premium': 'premium',
        'premium_duration': 'premium_duration',
        'premium_frequency': 'premium_frequency',
        'premium_frequency_unit': 'premium_frequency_unit',
        'secondary_id': 'secondary_id',
        'start_date': 'start_date',
        'update_date': 'update_date'
    }

    def __init__(self, coverages=None, create_date=None, currency_code=None, discounts=None, end_date=None, financial_offer_id=None, id=None, is_active=None, metadata=None, node_map=None, premium=None, premium_duration=None, premium_frequency=None, premium_frequency_unit=None, secondary_id=None, start_date=None, update_date=None):  # noqa: E501
        """InsuranceQuote - a model defined in Swagger"""  # noqa: E501

        self._coverages = None
        self._create_date = None
        self._currency_code = None
        self._discounts = None
        self._end_date = None
        self._financial_offer_id = None
        self._id = None
        self._is_active = None
        self._metadata = None
        self._node_map = None
        self._premium = None
        self._premium_duration = None
        self._premium_frequency = None
        self._premium_frequency_unit = None
        self._secondary_id = None
        self._start_date = None
        self._update_date = None
        self.discriminator = None

        if coverages is not None:
            self.coverages = coverages
        if create_date is not None:
            self.create_date = create_date
        self.currency_code = currency_code
        if discounts is not None:
            self.discounts = discounts
        if end_date is not None:
            self.end_date = end_date
        if financial_offer_id is not None:
            self.financial_offer_id = financial_offer_id
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if metadata is not None:
            self.metadata = metadata
        if node_map is not None:
            self.node_map = node_map
        self.premium = premium
        if premium_duration is not None:
            self.premium_duration = premium_duration
        if premium_frequency is not None:
            self.premium_frequency = premium_frequency
        self.premium_frequency_unit = premium_frequency_unit
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if start_date is not None:
            self.start_date = start_date
        if update_date is not None:
            self.update_date = update_date

    @property
    def coverages(self):
        """Gets the coverages of this InsuranceQuote.  # noqa: E501


        :return: The coverages of this InsuranceQuote.  # noqa: E501
        :rtype: list[InsuranceCoverageMap]
        """
        return self._coverages

    @coverages.setter
    def coverages(self, coverages):
        """Sets the coverages of this InsuranceQuote.


        :param coverages: The coverages of this InsuranceQuote.  # noqa: E501
        :type: list[InsuranceCoverageMap]
        """

        self._coverages = coverages

    @property
    def create_date(self):
        """Gets the create_date of this InsuranceQuote.  # noqa: E501


        :return: The create_date of this InsuranceQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this InsuranceQuote.


        :param create_date: The create_date of this InsuranceQuote.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def currency_code(self):
        """Gets the currency_code of this InsuranceQuote.  # noqa: E501

        currencyCode  # noqa: E501

        :return: The currency_code of this InsuranceQuote.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this InsuranceQuote.

        currencyCode  # noqa: E501

        :param currency_code: The currency_code of this InsuranceQuote.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def discounts(self):
        """Gets the discounts of this InsuranceQuote.  # noqa: E501


        :return: The discounts of this InsuranceQuote.  # noqa: E501
        :rtype: list[InsuranceDiscountMap]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this InsuranceQuote.


        :param discounts: The discounts of this InsuranceQuote.  # noqa: E501
        :type: list[InsuranceDiscountMap]
        """

        self._discounts = discounts

    @property
    def end_date(self):
        """Gets the end_date of this InsuranceQuote.  # noqa: E501


        :return: The end_date of this InsuranceQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this InsuranceQuote.


        :param end_date: The end_date of this InsuranceQuote.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def financial_offer_id(self):
        """Gets the financial_offer_id of this InsuranceQuote.  # noqa: E501

        financial_offer_id  # noqa: E501

        :return: The financial_offer_id of this InsuranceQuote.  # noqa: E501
        :rtype: str
        """
        return self._financial_offer_id

    @financial_offer_id.setter
    def financial_offer_id(self, financial_offer_id):
        """Sets the financial_offer_id of this InsuranceQuote.

        financial_offer_id  # noqa: E501

        :param financial_offer_id: The financial_offer_id of this InsuranceQuote.  # noqa: E501
        :type: str
        """

        self._financial_offer_id = financial_offer_id

    @property
    def id(self):
        """Gets the id of this InsuranceQuote.  # noqa: E501


        :return: The id of this InsuranceQuote.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InsuranceQuote.


        :param id: The id of this InsuranceQuote.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this InsuranceQuote.  # noqa: E501

        is_active  # noqa: E501

        :return: The is_active of this InsuranceQuote.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this InsuranceQuote.

        is_active  # noqa: E501

        :param is_active: The is_active of this InsuranceQuote.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def metadata(self):
        """Gets the metadata of this InsuranceQuote.  # noqa: E501


        :return: The metadata of this InsuranceQuote.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InsuranceQuote.


        :param metadata: The metadata of this InsuranceQuote.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def node_map(self):
        """Gets the node_map of this InsuranceQuote.  # noqa: E501


        :return: The node_map of this InsuranceQuote.  # noqa: E501
        :rtype: list[AllocationNodeMap]
        """
        return self._node_map

    @node_map.setter
    def node_map(self, node_map):
        """Sets the node_map of this InsuranceQuote.


        :param node_map: The node_map of this InsuranceQuote.  # noqa: E501
        :type: list[AllocationNodeMap]
        """

        self._node_map = node_map

    @property
    def premium(self):
        """Gets the premium of this InsuranceQuote.  # noqa: E501

        premium  # noqa: E501

        :return: The premium of this InsuranceQuote.  # noqa: E501
        :rtype: float
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this InsuranceQuote.

        premium  # noqa: E501

        :param premium: The premium of this InsuranceQuote.  # noqa: E501
        :type: float
        """
        if premium is None:
            raise ValueError("Invalid value for `premium`, must not be `None`")  # noqa: E501

        self._premium = premium

    @property
    def premium_duration(self):
        """Gets the premium_duration of this InsuranceQuote.  # noqa: E501

        premiumDuration  # noqa: E501

        :return: The premium_duration of this InsuranceQuote.  # noqa: E501
        :rtype: float
        """
        return self._premium_duration

    @premium_duration.setter
    def premium_duration(self, premium_duration):
        """Sets the premium_duration of this InsuranceQuote.

        premiumDuration  # noqa: E501

        :param premium_duration: The premium_duration of this InsuranceQuote.  # noqa: E501
        :type: float
        """

        self._premium_duration = premium_duration

    @property
    def premium_frequency(self):
        """Gets the premium_frequency of this InsuranceQuote.  # noqa: E501

        premiumFrequency  # noqa: E501

        :return: The premium_frequency of this InsuranceQuote.  # noqa: E501
        :rtype: int
        """
        return self._premium_frequency

    @premium_frequency.setter
    def premium_frequency(self, premium_frequency):
        """Sets the premium_frequency of this InsuranceQuote.

        premiumFrequency  # noqa: E501

        :param premium_frequency: The premium_frequency of this InsuranceQuote.  # noqa: E501
        :type: int
        """

        self._premium_frequency = premium_frequency

    @property
    def premium_frequency_unit(self):
        """Gets the premium_frequency_unit of this InsuranceQuote.  # noqa: E501

        premiumFrequencyUnit  # noqa: E501

        :return: The premium_frequency_unit of this InsuranceQuote.  # noqa: E501
        :rtype: str
        """
        return self._premium_frequency_unit

    @premium_frequency_unit.setter
    def premium_frequency_unit(self, premium_frequency_unit):
        """Sets the premium_frequency_unit of this InsuranceQuote.

        premiumFrequencyUnit  # noqa: E501

        :param premium_frequency_unit: The premium_frequency_unit of this InsuranceQuote.  # noqa: E501
        :type: str
        """
        if premium_frequency_unit is None:
            raise ValueError("Invalid value for `premium_frequency_unit`, must not be `None`")  # noqa: E501

        self._premium_frequency_unit = premium_frequency_unit

    @property
    def secondary_id(self):
        """Gets the secondary_id of this InsuranceQuote.  # noqa: E501


        :return: The secondary_id of this InsuranceQuote.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this InsuranceQuote.


        :param secondary_id: The secondary_id of this InsuranceQuote.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def start_date(self):
        """Gets the start_date of this InsuranceQuote.  # noqa: E501


        :return: The start_date of this InsuranceQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this InsuranceQuote.


        :param start_date: The start_date of this InsuranceQuote.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def update_date(self):
        """Gets the update_date of this InsuranceQuote.  # noqa: E501


        :return: The update_date of this InsuranceQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this InsuranceQuote.


        :param update_date: The update_date of this InsuranceQuote.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsuranceQuote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsuranceQuote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
