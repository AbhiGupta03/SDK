=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.7.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module AtomApi
  # Insurance Quote Object
  class InsuranceQuote
    attr_accessor :coverages

    attr_accessor :create_date

    # currencyCode
    attr_accessor :currency_code

    attr_accessor :discounts

    attr_accessor :end_date

    attr_accessor :id

    # is_active
    attr_accessor :is_active

    attr_accessor :metadata

    attr_accessor :node_map

    # premium
    attr_accessor :premium

    # premiumDuration
    attr_accessor :premium_duration

    # premiumFrequency
    attr_accessor :premium_frequency

    # premiumFrequencyUnit
    attr_accessor :premium_frequency_unit

    attr_accessor :secondary_id

    attr_accessor :start_date

    attr_accessor :update_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'coverages' => :'coverages',
        :'create_date' => :'create_date',
        :'currency_code' => :'currency_code',
        :'discounts' => :'discounts',
        :'end_date' => :'end_date',
        :'id' => :'id',
        :'is_active' => :'is_active',
        :'metadata' => :'metadata',
        :'node_map' => :'node_map',
        :'premium' => :'premium',
        :'premium_duration' => :'premium_duration',
        :'premium_frequency' => :'premium_frequency',
        :'premium_frequency_unit' => :'premium_frequency_unit',
        :'secondary_id' => :'secondary_id',
        :'start_date' => :'start_date',
        :'update_date' => :'update_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'coverages' => :'Array<InsuranceCoverageMap>',
        :'create_date' => :'DateTime',
        :'currency_code' => :'String',
        :'discounts' => :'Array<InsuranceDiscountMap>',
        :'end_date' => :'DateTime',
        :'id' => :'String',
        :'is_active' => :'BOOLEAN',
        :'metadata' => :'Hash<String, String>',
        :'node_map' => :'Array<AllocationNodeMap>',
        :'premium' => :'Float',
        :'premium_duration' => :'Float',
        :'premium_frequency' => :'Integer',
        :'premium_frequency_unit' => :'String',
        :'secondary_id' => :'String',
        :'start_date' => :'DateTime',
        :'update_date' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'coverages')
        if (value = attributes[:'coverages']).is_a?(Array)
          self.coverages = value
        end
      end

      if attributes.has_key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'discounts')
        if (value = attributes[:'discounts']).is_a?(Array)
          self.discounts = value
        end
      end

      if attributes.has_key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'is_active')
        self.is_active = attributes[:'is_active']
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'node_map')
        if (value = attributes[:'node_map']).is_a?(Array)
          self.node_map = value
        end
      end

      if attributes.has_key?(:'premium')
        self.premium = attributes[:'premium']
      end

      if attributes.has_key?(:'premium_duration')
        self.premium_duration = attributes[:'premium_duration']
      end

      if attributes.has_key?(:'premium_frequency')
        self.premium_frequency = attributes[:'premium_frequency']
      end

      if attributes.has_key?(:'premium_frequency_unit')
        self.premium_frequency_unit = attributes[:'premium_frequency_unit']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      if @premium.nil?
        invalid_properties.push('invalid value for "premium", premium cannot be nil.')
      end

      if @premium_frequency_unit.nil?
        invalid_properties.push('invalid value for "premium_frequency_unit", premium_frequency_unit cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @currency_code.nil?
      return false if @premium.nil?
      return false if @premium_frequency_unit.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          coverages == o.coverages &&
          create_date == o.create_date &&
          currency_code == o.currency_code &&
          discounts == o.discounts &&
          end_date == o.end_date &&
          id == o.id &&
          is_active == o.is_active &&
          metadata == o.metadata &&
          node_map == o.node_map &&
          premium == o.premium &&
          premium_duration == o.premium_duration &&
          premium_frequency == o.premium_frequency &&
          premium_frequency_unit == o.premium_frequency_unit &&
          secondary_id == o.secondary_id &&
          start_date == o.start_date &&
          update_date == o.update_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [coverages, create_date, currency_code, discounts, end_date, id, is_active, metadata, node_map, premium, premium_duration, premium_frequency, premium_frequency_unit, secondary_id, start_date, update_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
        def build_from_hash(attributes)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", attributes[self.class.attribute_map[key]])
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end
      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
def _deserialize(type, value)
  case type.to_sym
  when :DateTime
   value
  when :Date
    value
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :BOOLEAN
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    temp_model = AtomApi.const_get(type).new
    temp_model.build_from_hash(value)
  end
end# Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
