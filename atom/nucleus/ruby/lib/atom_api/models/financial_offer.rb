=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.7.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module AtomApi
  # Financial Offer Object
  class FinancialOffer
    # affiliateRate
    attr_accessor :affiliate_rate

    # campaignId
    attr_accessor :campaign_id

    # category
    attr_accessor :category

    attr_accessor :client_review

    attr_accessor :create_date

    # currencyCode
    attr_accessor :currency_code

    # description
    attr_accessor :description

    attr_accessor :document_id

    # feeAmount
    attr_accessor :fee_amount

    attr_accessor :fee_type

    # financialRate
    attr_accessor :financial_rate

    # financialRateTerm
    attr_accessor :financial_rate_term

    # financialRateTermUnit
    attr_accessor :financial_rate_term_unit

    # financialRateType
    attr_accessor :financial_rate_type

    attr_accessor :id

    # image
    attr_accessor :image

    # institution_name
    attr_accessor :institution_name

    # is_active
    attr_accessor :is_active

    attr_accessor :metadata

    # minimumContribution
    attr_accessor :minimum_contribution

    # minimumContributionTerm
    attr_accessor :minimum_contribution_term

    # minimumContributionTermUnit
    attr_accessor :minimum_contribution_term_unit

    # name
    attr_accessor :name

    attr_accessor :node_map

    # offerLink
    attr_accessor :offer_link

    # offerTerm
    attr_accessor :offer_term

    # offerTermUnit
    attr_accessor :offer_term_unit

    # prerequisite
    attr_accessor :prerequisite

    attr_accessor :prerequisite_type

    # rating
    attr_accessor :rating

    attr_accessor :secondary_id

    # subcategory
    attr_accessor :subcategory

    attr_accessor :update_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'affiliate_rate' => :'affiliate_rate',
        :'campaign_id' => :'campaign_id',
        :'category' => :'category',
        :'client_review' => :'client_review',
        :'create_date' => :'create_date',
        :'currency_code' => :'currency_code',
        :'description' => :'description',
        :'document_id' => :'document_id',
        :'fee_amount' => :'fee_amount',
        :'fee_type' => :'fee_type',
        :'financial_rate' => :'financial_rate',
        :'financial_rate_term' => :'financial_rate_term',
        :'financial_rate_term_unit' => :'financial_rate_term_unit',
        :'financial_rate_type' => :'financial_rate_type',
        :'id' => :'id',
        :'image' => :'image',
        :'institution_name' => :'institution_name',
        :'is_active' => :'is_active',
        :'metadata' => :'metadata',
        :'minimum_contribution' => :'minimum_contribution',
        :'minimum_contribution_term' => :'minimum_contribution_term',
        :'minimum_contribution_term_unit' => :'minimum_contribution_term_unit',
        :'name' => :'name',
        :'node_map' => :'node_map',
        :'offer_link' => :'offer_link',
        :'offer_term' => :'offer_term',
        :'offer_term_unit' => :'offer_term_unit',
        :'prerequisite' => :'prerequisite',
        :'prerequisite_type' => :'prerequisite_type',
        :'rating' => :'rating',
        :'secondary_id' => :'secondary_id',
        :'subcategory' => :'subcategory',
        :'update_date' => :'update_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'affiliate_rate' => :'Float',
        :'campaign_id' => :'String',
        :'category' => :'String',
        :'client_review' => :'String',
        :'create_date' => :'DateTime',
        :'currency_code' => :'String',
        :'description' => :'String',
        :'document_id' => :'String',
        :'fee_amount' => :'Float',
        :'fee_type' => :'String',
        :'financial_rate' => :'Float',
        :'financial_rate_term' => :'Float',
        :'financial_rate_term_unit' => :'String',
        :'financial_rate_type' => :'String',
        :'id' => :'String',
        :'image' => :'String',
        :'institution_name' => :'String',
        :'is_active' => :'BOOLEAN',
        :'metadata' => :'Hash<String, String>',
        :'minimum_contribution' => :'Float',
        :'minimum_contribution_term' => :'Float',
        :'minimum_contribution_term_unit' => :'String',
        :'name' => :'String',
        :'node_map' => :'Array<AllocationNodeMap>',
        :'offer_link' => :'String',
        :'offer_term' => :'Float',
        :'offer_term_unit' => :'String',
        :'prerequisite' => :'String',
        :'prerequisite_type' => :'String',
        :'rating' => :'String',
        :'secondary_id' => :'String',
        :'subcategory' => :'String',
        :'update_date' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'affiliate_rate')
        self.affiliate_rate = attributes[:'affiliate_rate']
      end

      if attributes.has_key?(:'campaign_id')
        self.campaign_id = attributes[:'campaign_id']
      end

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'client_review')
        self.client_review = attributes[:'client_review']
      end

      if attributes.has_key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'document_id')
        self.document_id = attributes[:'document_id']
      end

      if attributes.has_key?(:'fee_amount')
        self.fee_amount = attributes[:'fee_amount']
      end

      if attributes.has_key?(:'fee_type')
        self.fee_type = attributes[:'fee_type']
      end

      if attributes.has_key?(:'financial_rate')
        self.financial_rate = attributes[:'financial_rate']
      end

      if attributes.has_key?(:'financial_rate_term')
        self.financial_rate_term = attributes[:'financial_rate_term']
      end

      if attributes.has_key?(:'financial_rate_term_unit')
        self.financial_rate_term_unit = attributes[:'financial_rate_term_unit']
      end

      if attributes.has_key?(:'financial_rate_type')
        self.financial_rate_type = attributes[:'financial_rate_type']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.has_key?(:'institution_name')
        self.institution_name = attributes[:'institution_name']
      end

      if attributes.has_key?(:'is_active')
        self.is_active = attributes[:'is_active']
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'minimum_contribution')
        self.minimum_contribution = attributes[:'minimum_contribution']
      end

      if attributes.has_key?(:'minimum_contribution_term')
        self.minimum_contribution_term = attributes[:'minimum_contribution_term']
      end

      if attributes.has_key?(:'minimum_contribution_term_unit')
        self.minimum_contribution_term_unit = attributes[:'minimum_contribution_term_unit']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'node_map')
        if (value = attributes[:'node_map']).is_a?(Array)
          self.node_map = value
        end
      end

      if attributes.has_key?(:'offer_link')
        self.offer_link = attributes[:'offer_link']
      end

      if attributes.has_key?(:'offer_term')
        self.offer_term = attributes[:'offer_term']
      end

      if attributes.has_key?(:'offer_term_unit')
        self.offer_term_unit = attributes[:'offer_term_unit']
      end

      if attributes.has_key?(:'prerequisite')
        self.prerequisite = attributes[:'prerequisite']
      end

      if attributes.has_key?(:'prerequisite_type')
        self.prerequisite_type = attributes[:'prerequisite_type']
      end

      if attributes.has_key?(:'rating')
        self.rating = attributes[:'rating']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end

      if attributes.has_key?(:'subcategory')
        self.subcategory = attributes[:'subcategory']
      end

      if attributes.has_key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @category.nil?
        invalid_properties.push('invalid value for "category", category cannot be nil.')
      end

      if @institution_name.nil?
        invalid_properties.push('invalid value for "institution_name", institution_name cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @offer_link.nil?
        invalid_properties.push('invalid value for "offer_link", offer_link cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @category.nil?
      return false if @institution_name.nil?
      return false if @name.nil?
      return false if @offer_link.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          affiliate_rate == o.affiliate_rate &&
          campaign_id == o.campaign_id &&
          category == o.category &&
          client_review == o.client_review &&
          create_date == o.create_date &&
          currency_code == o.currency_code &&
          description == o.description &&
          document_id == o.document_id &&
          fee_amount == o.fee_amount &&
          fee_type == o.fee_type &&
          financial_rate == o.financial_rate &&
          financial_rate_term == o.financial_rate_term &&
          financial_rate_term_unit == o.financial_rate_term_unit &&
          financial_rate_type == o.financial_rate_type &&
          id == o.id &&
          image == o.image &&
          institution_name == o.institution_name &&
          is_active == o.is_active &&
          metadata == o.metadata &&
          minimum_contribution == o.minimum_contribution &&
          minimum_contribution_term == o.minimum_contribution_term &&
          minimum_contribution_term_unit == o.minimum_contribution_term_unit &&
          name == o.name &&
          node_map == o.node_map &&
          offer_link == o.offer_link &&
          offer_term == o.offer_term &&
          offer_term_unit == o.offer_term_unit &&
          prerequisite == o.prerequisite &&
          prerequisite_type == o.prerequisite_type &&
          rating == o.rating &&
          secondary_id == o.secondary_id &&
          subcategory == o.subcategory &&
          update_date == o.update_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [affiliate_rate, campaign_id, category, client_review, create_date, currency_code, description, document_id, fee_amount, fee_type, financial_rate, financial_rate_term, financial_rate_term_unit, financial_rate_type, id, image, institution_name, is_active, metadata, minimum_contribution, minimum_contribution_term, minimum_contribution_term_unit, name, node_map, offer_link, offer_term, offer_term_unit, prerequisite, prerequisite_type, rating, secondary_id, subcategory, update_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
        def build_from_hash(attributes)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", attributes[self.class.attribute_map[key]])
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end
      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
def _deserialize(type, value)
  case type.to_sym
  when :DateTime
   value
  when :Date
    value
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :BOOLEAN
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    temp_model = AtomApi.const_get(type).new
    temp_model.build_from_hash(value)
  end
end# Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
