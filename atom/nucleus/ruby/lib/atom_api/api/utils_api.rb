=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.7.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module AtomApi
  class UtilsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an account status
    # Create an account status record for an account.
    # @param account_status_request accountStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [AccountStatus]
    def create_account_status_using_post(account_status_request, opts = {})
      data, _status_code, _headers = create_account_status_using_post_with_http_info(account_status_request, opts)
      data
    end

    # Create an account status
    # Create an account status record for an account.
    # @param account_status_request accountStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountStatus, Fixnum, Hash)>] AccountStatus data, response status code and response headers
    def create_account_status_using_post_with_http_info(account_status_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.create_account_status_using_post ...'
      end
      # verify the required parameter 'account_status_request' is set
      if @api_client.config.client_side_validation && account_status_request.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_request' when calling UtilsApi.create_account_status_using_post"
      end
      # resource path
      local_var_path = '/account_status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account_status_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#create_account_status_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account stage
    # Create a new account stage
    # @param stage_request stageRequest
    # @param [Hash] opts the optional parameters
    # @return [Stage]
    def create_stage_using_post(stage_request, opts = {})
      data, _status_code, _headers = create_stage_using_post_with_http_info(stage_request, opts)
      data
    end

    # Create an account stage
    # Create a new account stage
    # @param stage_request stageRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Stage, Fixnum, Hash)>] Stage data, response status code and response headers
    def create_stage_using_post_with_http_info(stage_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.create_stage_using_post ...'
      end
      # verify the required parameter 'stage_request' is set
      if @api_client.config.client_side_validation && stage_request.nil?
        fail ArgumentError, "Missing the required parameter 'stage_request' when calling UtilsApi.create_stage_using_post"
      end
      # resource path
      local_var_path = '/stage'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(stage_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Stage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#create_stage_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a transaction code
    # Create a new transaction code for your firm.
    # @param transaction_request transactionRequest
    # @param [Hash] opts the optional parameters
    # @return [TransactionCode]
    def create_transaction_code_using_post(transaction_request, opts = {})
      data, _status_code, _headers = create_transaction_code_using_post_with_http_info(transaction_request, opts)
      data
    end

    # Create a transaction code
    # Create a new transaction code for your firm.
    # @param transaction_request transactionRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionCode, Fixnum, Hash)>] TransactionCode data, response status code and response headers
    def create_transaction_code_using_post_with_http_info(transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.create_transaction_code_using_post ...'
      end
      # verify the required parameter 'transaction_request' is set
      if @api_client.config.client_side_validation && transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_request' when calling UtilsApi.create_transaction_code_using_post"
      end
      # resource path
      local_var_path = '/transaction_code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transaction_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#create_transaction_code_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account status
    # Permanently delete an account status record from an account’s history.
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_status_using_delete(account_status_id, opts = {})
      delete_account_status_using_delete_with_http_info(account_status_id, opts)
      nil
    end

    # Delete an account status
    # Permanently delete an account status record from an account’s history.
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_status_using_delete_with_http_info(account_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.delete_account_status_using_delete ...'
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling UtilsApi.delete_account_status_using_delete"
      end
      # resource path
      local_var_path = '/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#delete_account_status_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account stage
    # Permanently delete an account stage.
    # @param stage_id UUID stage_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_stage_using_delete(stage_id, opts = {})
      delete_stage_using_delete_with_http_info(stage_id, opts)
      nil
    end

    # Delete an account stage
    # Permanently delete an account stage.
    # @param stage_id UUID stage_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_stage_using_delete_with_http_info(stage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.delete_stage_using_delete ...'
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling UtilsApi.delete_stage_using_delete"
      end
      # resource path
      local_var_path = '/stage/{stage_id}'.sub('{' + 'stage_id' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#delete_stage_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a transaction code
    # Permanently delete a transaction code for your firm.
    # @param transaction_code_id UUID transaction_code_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transaction_code_using_delete(transaction_code_id, opts = {})
      delete_transaction_code_using_delete_with_http_info(transaction_code_id, opts)
      nil
    end

    # Delete a transaction code
    # Permanently delete a transaction code for your firm.
    # @param transaction_code_id UUID transaction_code_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transaction_code_using_delete_with_http_info(transaction_code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.delete_transaction_code_using_delete ...'
      end
      # verify the required parameter 'transaction_code_id' is set
      if @api_client.config.client_side_validation && transaction_code_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_code_id' when calling UtilsApi.delete_transaction_code_using_delete"
      end
      # resource path
      local_var_path = '/transaction_code/{transaction_code_id}'.sub('{' + 'transaction_code_id' + '}', transaction_code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#delete_transaction_code_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account statuses
    # Get the account status history information for all accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAccountStatus]
    def get_account_status_all_using_get(opts = {})
      data, _status_code, _headers = get_account_status_all_using_get_with_http_info(opts)
      data
    end

    # List all account statuses
    # Get the account status history information for all accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAccountStatus, Fixnum, Hash)>] PageAccountStatus data, response status code and response headers
    def get_account_status_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.get_account_status_all_using_get ...'
      end
      # resource path
      local_var_path = '/account_status'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAccountStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#get_account_status_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account status
    # Retrieve the information for a specific account status record for an account.
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [AccountStatus]
    def get_account_status_using_get(account_status_id, opts = {})
      data, _status_code, _headers = get_account_status_using_get_with_http_info(account_status_id, opts)
      data
    end

    # Retrieve an account status
    # Retrieve the information for a specific account status record for an account.
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountStatus, Fixnum, Hash)>] AccountStatus data, response status code and response headers
    def get_account_status_using_get_with_http_info(account_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.get_account_status_using_get ...'
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling UtilsApi.get_account_status_using_get"
      end
      # resource path
      local_var_path = '/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#get_account_status_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account stages
    # Get the information for all possible account stages.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageStage]
    def get_stage_all_using_get(opts = {})
      data, _status_code, _headers = get_stage_all_using_get_with_http_info(opts)
      data
    end

    # List all account stages
    # Get the information for all possible account stages.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageStage, Fixnum, Hash)>] PageStage data, response status code and response headers
    def get_stage_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.get_stage_all_using_get ...'
      end
      # resource path
      local_var_path = '/stage'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageStage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#get_stage_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account stage
    # Retrieve the information for a specific account stage.
    # @param stage_id UUID stage_id
    # @param [Hash] opts the optional parameters
    # @return [Stage]
    def get_stage_using_get(stage_id, opts = {})
      data, _status_code, _headers = get_stage_using_get_with_http_info(stage_id, opts)
      data
    end

    # Retrieve an account stage
    # Retrieve the information for a specific account stage.
    # @param stage_id UUID stage_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Stage, Fixnum, Hash)>] Stage data, response status code and response headers
    def get_stage_using_get_with_http_info(stage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.get_stage_using_get ...'
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling UtilsApi.get_stage_using_get"
      end
      # resource path
      local_var_path = '/stage/{stage_id}'.sub('{' + 'stage_id' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Stage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#get_stage_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all transaction codes
    # Get the information for all transaction codes defined by your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageTransactionCode]
    def get_transaction_code_all_using_get(opts = {})
      data, _status_code, _headers = get_transaction_code_all_using_get_with_http_info(opts)
      data
    end

    # List all transaction codes
    # Get the information for all transaction codes defined by your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageTransactionCode, Fixnum, Hash)>] PageTransactionCode data, response status code and response headers
    def get_transaction_code_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.get_transaction_code_all_using_get ...'
      end
      # resource path
      local_var_path = '/transaction_code'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransactionCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#get_transaction_code_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a transaction code
    # Retrieve the information for a transaction code defined by your firm.
    # @param transaction_code_id UUID transaction_code_id
    # @param [Hash] opts the optional parameters
    # @return [TransactionCode]
    def get_transaction_code_using_get(transaction_code_id, opts = {})
      data, _status_code, _headers = get_transaction_code_using_get_with_http_info(transaction_code_id, opts)
      data
    end

    # Retrieve a transaction code
    # Retrieve the information for a transaction code defined by your firm.
    # @param transaction_code_id UUID transaction_code_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionCode, Fixnum, Hash)>] TransactionCode data, response status code and response headers
    def get_transaction_code_using_get_with_http_info(transaction_code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.get_transaction_code_using_get ...'
      end
      # verify the required parameter 'transaction_code_id' is set
      if @api_client.config.client_side_validation && transaction_code_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_code_id' when calling UtilsApi.get_transaction_code_using_get"
      end
      # resource path
      local_var_path = '/transaction_code/{transaction_code_id}'.sub('{' + 'transaction_code_id' + '}', transaction_code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#get_transaction_code_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account status
    # Update an account status record for an account.
    # @param account_status account_status
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [AccountStatus]
    def update_account_status_using_put(account_status, account_status_id, opts = {})
      data, _status_code, _headers = update_account_status_using_put_with_http_info(account_status, account_status_id, opts)
      data
    end

    # Update an account status
    # Update an account status record for an account.
    # @param account_status account_status
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountStatus, Fixnum, Hash)>] AccountStatus data, response status code and response headers
    def update_account_status_using_put_with_http_info(account_status, account_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.update_account_status_using_put ...'
      end
      # verify the required parameter 'account_status' is set
      if @api_client.config.client_side_validation && account_status.nil?
        fail ArgumentError, "Missing the required parameter 'account_status' when calling UtilsApi.update_account_status_using_put"
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling UtilsApi.update_account_status_using_put"
      end
      # resource path
      local_var_path = '/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account_status)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#update_account_status_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account stage
    # Update the information for an account stage.
    # @param stage stage
    # @param stage_id UUID stage_id
    # @param [Hash] opts the optional parameters
    # @return [Stage]
    def update_stage_using_put(stage, stage_id, opts = {})
      data, _status_code, _headers = update_stage_using_put_with_http_info(stage, stage_id, opts)
      data
    end

    # Update an account stage
    # Update the information for an account stage.
    # @param stage stage
    # @param stage_id UUID stage_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Stage, Fixnum, Hash)>] Stage data, response status code and response headers
    def update_stage_using_put_with_http_info(stage, stage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.update_stage_using_put ...'
      end
      # verify the required parameter 'stage' is set
      if @api_client.config.client_side_validation && stage.nil?
        fail ArgumentError, "Missing the required parameter 'stage' when calling UtilsApi.update_stage_using_put"
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling UtilsApi.update_stage_using_put"
      end
      # resource path
      local_var_path = '/stage/{stage_id}'.sub('{' + 'stage_id' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(stage)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Stage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#update_stage_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a transaction code
    # Update a transaction code for your firm.
    # @param transaction_code transaction_code
    # @param transaction_code_id UUID transaction_code_id
    # @param [Hash] opts the optional parameters
    # @return [TransactionCode]
    def update_transaction_code_using_put(transaction_code, transaction_code_id, opts = {})
      data, _status_code, _headers = update_transaction_code_using_put_with_http_info(transaction_code, transaction_code_id, opts)
      data
    end

    # Update a transaction code
    # Update a transaction code for your firm.
    # @param transaction_code transaction_code
    # @param transaction_code_id UUID transaction_code_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionCode, Fixnum, Hash)>] TransactionCode data, response status code and response headers
    def update_transaction_code_using_put_with_http_info(transaction_code, transaction_code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.update_transaction_code_using_put ...'
      end
      # verify the required parameter 'transaction_code' is set
      if @api_client.config.client_side_validation && transaction_code.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_code' when calling UtilsApi.update_transaction_code_using_put"
      end
      # verify the required parameter 'transaction_code_id' is set
      if @api_client.config.client_side_validation && transaction_code_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_code_id' when calling UtilsApi.update_transaction_code_using_put"
      end
      # resource path
      local_var_path = '/transaction_code/{transaction_code_id}'.sub('{' + 'transaction_code_id' + '}', transaction_code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transaction_code)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#update_transaction_code_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
