=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.8.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module NucleusApi
  class SupportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Chat
    # Create a Chat
    # @param chat_info_request chatInfoRequest
    # @param [Hash] opts the optional parameters
    # @return [ChatInfo]
    def create_chat_using_post(chat_info_request, opts = {})
      data, _status_code, _headers = create_chat_using_post_with_http_info(chat_info_request, opts)
      data
    end

    # Create a Chat
    # Create a Chat
    # @param chat_info_request chatInfoRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChatInfo, Fixnum, Hash)>] ChatInfo data, response status code and response headers
    def create_chat_using_post_with_http_info(chat_info_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.create_chat_using_post ...'
      end
      # verify the required parameter 'chat_info_request' is set
      if @api_client.config.client_side_validation && chat_info_request.nil?
        fail ArgumentError, "Missing the required parameter 'chat_info_request' when calling SupportApi.create_chat_using_post"
      end
      # resource path
      local_var_path = '/chat'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(chat_info_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChatInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#create_chat_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a CIO Consultation
    # Create a new CIO Consultation
    # @param cio_consultation_request cioConsultationRequest
    # @param [Hash] opts the optional parameters
    # @return [Consultation]
    def create_consultation_using_post(cio_consultation_request, opts = {})
      data, _status_code, _headers = create_consultation_using_post_with_http_info(cio_consultation_request, opts)
      data
    end

    # Create a CIO Consultation
    # Create a new CIO Consultation
    # @param cio_consultation_request cioConsultationRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Consultation, Fixnum, Hash)>] Consultation data, response status code and response headers
    def create_consultation_using_post_with_http_info(cio_consultation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.create_consultation_using_post ...'
      end
      # verify the required parameter 'cio_consultation_request' is set
      if @api_client.config.client_side_validation && cio_consultation_request.nil?
        fail ArgumentError, "Missing the required parameter 'cio_consultation_request' when calling SupportApi.create_consultation_using_post"
      end
      # resource path
      local_var_path = '/consultation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cio_consultation_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Consultation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#create_consultation_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a sales inquiry
    # Create a new sales inquiry for your firm.
    # @param sale_request saleRequest
    # @param [Hash] opts the optional parameters
    # @return [Sale]
    def create_sale_using_post(sale_request, opts = {})
      data, _status_code, _headers = create_sale_using_post_with_http_info(sale_request, opts)
      data
    end

    # Create a sales inquiry
    # Create a new sales inquiry for your firm.
    # @param sale_request saleRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Sale, Fixnum, Hash)>] Sale data, response status code and response headers
    def create_sale_using_post_with_http_info(sale_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.create_sale_using_post ...'
      end
      # verify the required parameter 'sale_request' is set
      if @api_client.config.client_side_validation && sale_request.nil?
        fail ArgumentError, "Missing the required parameter 'sale_request' when calling SupportApi.create_sale_using_post"
      end
      # resource path
      local_var_path = '/sales'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sale_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Sale')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#create_sale_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a support ticket comment
    # Create a new support ticket comment for a support ticket.
    # @param support_ticker_comment_request supportTickerCommentRequest
    # @param [Hash] opts the optional parameters
    # @return [SupportTicket]
    def create_support_ticket_comment_using_post(support_ticker_comment_request, opts = {})
      data, _status_code, _headers = create_support_ticket_comment_using_post_with_http_info(support_ticker_comment_request, opts)
      data
    end

    # Create a support ticket comment
    # Create a new support ticket comment for a support ticket.
    # @param support_ticker_comment_request supportTickerCommentRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportTicket, Fixnum, Hash)>] SupportTicket data, response status code and response headers
    def create_support_ticket_comment_using_post_with_http_info(support_ticker_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.create_support_ticket_comment_using_post ...'
      end
      # verify the required parameter 'support_ticker_comment_request' is set
      if @api_client.config.client_side_validation && support_ticker_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticker_comment_request' when calling SupportApi.create_support_ticket_comment_using_post"
      end
      # resource path
      local_var_path = '/support_ticket_comment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(support_ticker_comment_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupportTicket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#create_support_ticket_comment_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a support ticket
    # Create a new support ticket for your firm.
    # @param support_ticket_request supportTicketRequest
    # @param [Hash] opts the optional parameters
    # @return [SupportTicket]
    def create_support_ticket_using_post(support_ticket_request, opts = {})
      data, _status_code, _headers = create_support_ticket_using_post_with_http_info(support_ticket_request, opts)
      data
    end

    # Create a support ticket
    # Create a new support ticket for your firm.
    # @param support_ticket_request supportTicketRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportTicket, Fixnum, Hash)>] SupportTicket data, response status code and response headers
    def create_support_ticket_using_post_with_http_info(support_ticket_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.create_support_ticket_using_post ...'
      end
      # verify the required parameter 'support_ticket_request' is set
      if @api_client.config.client_side_validation && support_ticket_request.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_request' when calling SupportApi.create_support_ticket_using_post"
      end
      # resource path
      local_var_path = '/support_ticket'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(support_ticket_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupportTicket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#create_support_ticket_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Chat
    # Permanently delete a Chat
    # @param chat_id UUID chat_info_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_chat_using_delete(chat_id, opts = {})
      delete_chat_using_delete_with_http_info(chat_id, opts)
      nil
    end

    # Delete a Chat
    # Permanently delete a Chat
    # @param chat_id UUID chat_info_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_chat_using_delete_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.delete_chat_using_delete ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling SupportApi.delete_chat_using_delete"
      end
      # resource path
      local_var_path = '/chat/{chat_id}'.sub('{' + 'chat_id' + '}', chat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#delete_chat_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a CIO Consultation
    # Permanently delete a CIO Consultation
    # @param consultation_id UUID consultation_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_consultation_using_delete(consultation_id, opts = {})
      delete_consultation_using_delete_with_http_info(consultation_id, opts)
      nil
    end

    # Delete a CIO Consultation
    # Permanently delete a CIO Consultation
    # @param consultation_id UUID consultation_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_consultation_using_delete_with_http_info(consultation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.delete_consultation_using_delete ...'
      end
      # verify the required parameter 'consultation_id' is set
      if @api_client.config.client_side_validation && consultation_id.nil?
        fail ArgumentError, "Missing the required parameter 'consultation_id' when calling SupportApi.delete_consultation_using_delete"
      end
      # resource path
      local_var_path = '/consultation/{consultation_id}'.sub('{' + 'consultation_id' + '}', consultation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#delete_consultation_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a sales inquiry
    # Permanently delete a sales inquiry.
    # @param sales_id UUID sales_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sale_using_delete(sales_id, opts = {})
      delete_sale_using_delete_with_http_info(sales_id, opts)
      nil
    end

    # Delete a sales inquiry
    # Permanently delete a sales inquiry.
    # @param sales_id UUID sales_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sale_using_delete_with_http_info(sales_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.delete_sale_using_delete ...'
      end
      # verify the required parameter 'sales_id' is set
      if @api_client.config.client_side_validation && sales_id.nil?
        fail ArgumentError, "Missing the required parameter 'sales_id' when calling SupportApi.delete_sale_using_delete"
      end
      # resource path
      local_var_path = '/sales/{sales_id}'.sub('{' + 'sales_id' + '}', sales_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#delete_sale_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a support ticket comment
    # Permanently delete a support ticket comment for a support ticket.
    # @param support_ticket_comment_id UUID support_ticket_comment_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_support_ticket_comment_using_delete(support_ticket_comment_id, opts = {})
      delete_support_ticket_comment_using_delete_with_http_info(support_ticket_comment_id, opts)
      nil
    end

    # Delete a support ticket comment
    # Permanently delete a support ticket comment for a support ticket.
    # @param support_ticket_comment_id UUID support_ticket_comment_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_support_ticket_comment_using_delete_with_http_info(support_ticket_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.delete_support_ticket_comment_using_delete ...'
      end
      # verify the required parameter 'support_ticket_comment_id' is set
      if @api_client.config.client_side_validation && support_ticket_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_comment_id' when calling SupportApi.delete_support_ticket_comment_using_delete"
      end
      # resource path
      local_var_path = '/support_ticket_comment/{support_ticket_comment_id}'.sub('{' + 'support_ticket_comment_id' + '}', support_ticket_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#delete_support_ticket_comment_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a support ticket
    # Permanently delete a support ticket for your firm.
    # @param support_ticket_id UUID support_ticket_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_support_ticket_using_delete(support_ticket_id, opts = {})
      delete_support_ticket_using_delete_with_http_info(support_ticket_id, opts)
      nil
    end

    # Delete a support ticket
    # Permanently delete a support ticket for your firm.
    # @param support_ticket_id UUID support_ticket_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_support_ticket_using_delete_with_http_info(support_ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.delete_support_ticket_using_delete ...'
      end
      # verify the required parameter 'support_ticket_id' is set
      if @api_client.config.client_side_validation && support_ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_id' when calling SupportApi.delete_support_ticket_using_delete"
      end
      # resource path
      local_var_path = '/support_ticket/{support_ticket_id}'.sub('{' + 'support_ticket_id' + '}', support_ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#delete_support_ticket_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all open chats
    # Get details for all open chat
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageChatInfo]
    def get_chat_all_using_get(opts = {})
      data, _status_code, _headers = get_chat_all_using_get_with_http_info(opts)
      data
    end

    # List all open chats
    # Get details for all open chat
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageChatInfo, Fixnum, Hash)>] PageChatInfo data, response status code and response headers
    def get_chat_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_chat_all_using_get ...'
      end
      # resource path
      local_var_path = '/chat'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageChatInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_chat_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a Chat
    # Retrieve the information for a Chat
    # @param chat_id UUID chat_info_id
    # @param [Hash] opts the optional parameters
    # @return [ChatInfo]
    def get_chat_using_get(chat_id, opts = {})
      data, _status_code, _headers = get_chat_using_get_with_http_info(chat_id, opts)
      data
    end

    # Retrieve a Chat
    # Retrieve the information for a Chat
    # @param chat_id UUID chat_info_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChatInfo, Fixnum, Hash)>] ChatInfo data, response status code and response headers
    def get_chat_using_get_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_chat_using_get ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling SupportApi.get_chat_using_get"
      end
      # resource path
      local_var_path = '/chat/{chat_id}'.sub('{' + 'chat_id' + '}', chat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChatInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_chat_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all CIO Consultation
    # Get details for all CIO Consultation
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageConsultation]
    def get_consultation_all_using_get(opts = {})
      data, _status_code, _headers = get_consultation_all_using_get_with_http_info(opts)
      data
    end

    # List all CIO Consultation
    # Get details for all CIO Consultation
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageConsultation, Fixnum, Hash)>] PageConsultation data, response status code and response headers
    def get_consultation_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_consultation_all_using_get ...'
      end
      # resource path
      local_var_path = '/consultation'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageConsultation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_consultation_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a CIO Consultation
    # Retrieve the information for a CIO Consultation
    # @param consultation_id UUID consultation_id
    # @param [Hash] opts the optional parameters
    # @return [Consultation]
    def get_consultation_using_get(consultation_id, opts = {})
      data, _status_code, _headers = get_consultation_using_get_with_http_info(consultation_id, opts)
      data
    end

    # Retrieve a CIO Consultation
    # Retrieve the information for a CIO Consultation
    # @param consultation_id UUID consultation_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Consultation, Fixnum, Hash)>] Consultation data, response status code and response headers
    def get_consultation_using_get_with_http_info(consultation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_consultation_using_get ...'
      end
      # verify the required parameter 'consultation_id' is set
      if @api_client.config.client_side_validation && consultation_id.nil?
        fail ArgumentError, "Missing the required parameter 'consultation_id' when calling SupportApi.get_consultation_using_get"
      end
      # resource path
      local_var_path = '/consultation/{consultation_id}'.sub('{' + 'consultation_id' + '}', consultation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Consultation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_consultation_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all sales inquiries
    # Get all sales inquiries defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageSale]
    def get_sale_all_using_get(opts = {})
      data, _status_code, _headers = get_sale_all_using_get_with_http_info(opts)
      data
    end

    # List all sales inquiries
    # Get all sales inquiries defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageSale, Fixnum, Hash)>] PageSale data, response status code and response headers
    def get_sale_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_sale_all_using_get ...'
      end
      # resource path
      local_var_path = '/sales'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageSale')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_sale_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a sales record
    # Retrieve the information for a sales record
    # @param sales_id UUID sales_id
    # @param [Hash] opts the optional parameters
    # @return [Sale]
    def get_sale_using_get(sales_id, opts = {})
      data, _status_code, _headers = get_sale_using_get_with_http_info(sales_id, opts)
      data
    end

    # Retrieve a sales record
    # Retrieve the information for a sales record
    # @param sales_id UUID sales_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Sale, Fixnum, Hash)>] Sale data, response status code and response headers
    def get_sale_using_get_with_http_info(sales_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_sale_using_get ...'
      end
      # verify the required parameter 'sales_id' is set
      if @api_client.config.client_side_validation && sales_id.nil?
        fail ArgumentError, "Missing the required parameter 'sales_id' when calling SupportApi.get_sale_using_get"
      end
      # resource path
      local_var_path = '/sales/{sales_id}'.sub('{' + 'sales_id' + '}', sales_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Sale')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_sale_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all support tickets
    # Get the information for all support tickets defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageSupportTicket]
    def get_support_ticket_all_using_get(opts = {})
      data, _status_code, _headers = get_support_ticket_all_using_get_with_http_info(opts)
      data
    end

    # List all support tickets
    # Get the information for all support tickets defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageSupportTicket, Fixnum, Hash)>] PageSupportTicket data, response status code and response headers
    def get_support_ticket_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_support_ticket_all_using_get ...'
      end
      # resource path
      local_var_path = '/support_ticket'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageSupportTicket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_support_ticket_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all support ticket comments
    # Get the information for all support ticket comments defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageSupportTicketComment]
    def get_support_ticket_comment_all_using_get(opts = {})
      data, _status_code, _headers = get_support_ticket_comment_all_using_get_with_http_info(opts)
      data
    end

    # List all support ticket comments
    # Get the information for all support ticket comments defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageSupportTicketComment, Fixnum, Hash)>] PageSupportTicketComment data, response status code and response headers
    def get_support_ticket_comment_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_support_ticket_comment_all_using_get ...'
      end
      # resource path
      local_var_path = '/support_ticket_comment'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageSupportTicketComment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_support_ticket_comment_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a support ticket comment
    # Retrieve the information for a support ticket comment defined for a support ticket.
    # @param support_ticket_comment_id UUID support_ticket_comment_id
    # @param [Hash] opts the optional parameters
    # @return [SupportTicketComment]
    def get_support_ticket_comment_using_get(support_ticket_comment_id, opts = {})
      data, _status_code, _headers = get_support_ticket_comment_using_get_with_http_info(support_ticket_comment_id, opts)
      data
    end

    # Retrieve a support ticket comment
    # Retrieve the information for a support ticket comment defined for a support ticket.
    # @param support_ticket_comment_id UUID support_ticket_comment_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportTicketComment, Fixnum, Hash)>] SupportTicketComment data, response status code and response headers
    def get_support_ticket_comment_using_get_with_http_info(support_ticket_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_support_ticket_comment_using_get ...'
      end
      # verify the required parameter 'support_ticket_comment_id' is set
      if @api_client.config.client_side_validation && support_ticket_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_comment_id' when calling SupportApi.get_support_ticket_comment_using_get"
      end
      # resource path
      local_var_path = '/support_ticket_comment/{support_ticket_comment_id}'.sub('{' + 'support_ticket_comment_id' + '}', support_ticket_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupportTicketComment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_support_ticket_comment_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a support ticket
    # Retrieve the information for a support ticket defined for your firm.
    # @param support_ticket_id UUID support_ticket_id
    # @param [Hash] opts the optional parameters
    # @return [SupportTicket]
    def get_support_ticket_using_get(support_ticket_id, opts = {})
      data, _status_code, _headers = get_support_ticket_using_get_with_http_info(support_ticket_id, opts)
      data
    end

    # Retrieve a support ticket
    # Retrieve the information for a support ticket defined for your firm.
    # @param support_ticket_id UUID support_ticket_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportTicket, Fixnum, Hash)>] SupportTicket data, response status code and response headers
    def get_support_ticket_using_get_with_http_info(support_ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_support_ticket_using_get ...'
      end
      # verify the required parameter 'support_ticket_id' is set
      if @api_client.config.client_side_validation && support_ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_id' when calling SupportApi.get_support_ticket_using_get"
      end
      # resource path
      local_var_path = '/support_ticket/{support_ticket_id}'.sub('{' + 'support_ticket_id' + '}', support_ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupportTicket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_support_ticket_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Chat
    # Updated the information for a Chat
    # @param chat_id UUID chat_id
    # @param chat_info chat_info
    # @param [Hash] opts the optional parameters
    # @return [ChatInfo]
    def update_chat_using_put(chat_id, chat_info, opts = {})
      data, _status_code, _headers = update_chat_using_put_with_http_info(chat_id, chat_info, opts)
      data
    end

    # Update a Chat
    # Updated the information for a Chat
    # @param chat_id UUID chat_id
    # @param chat_info chat_info
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChatInfo, Fixnum, Hash)>] ChatInfo data, response status code and response headers
    def update_chat_using_put_with_http_info(chat_id, chat_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.update_chat_using_put ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling SupportApi.update_chat_using_put"
      end
      # verify the required parameter 'chat_info' is set
      if @api_client.config.client_side_validation && chat_info.nil?
        fail ArgumentError, "Missing the required parameter 'chat_info' when calling SupportApi.update_chat_using_put"
      end
      # resource path
      local_var_path = '/chat/{chat_id}'.sub('{' + 'chat_id' + '}', chat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(chat_info)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChatInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#update_chat_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a CIO Consultation
    # Updated the information CIO Consultation
    # @param consultation consultation
    # @param consultation_id UUID consultation_id
    # @param [Hash] opts the optional parameters
    # @return [Consultation]
    def update_consultation_using_put(consultation, consultation_id, opts = {})
      data, _status_code, _headers = update_consultation_using_put_with_http_info(consultation, consultation_id, opts)
      data
    end

    # Update a CIO Consultation
    # Updated the information CIO Consultation
    # @param consultation consultation
    # @param consultation_id UUID consultation_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Consultation, Fixnum, Hash)>] Consultation data, response status code and response headers
    def update_consultation_using_put_with_http_info(consultation, consultation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.update_consultation_using_put ...'
      end
      # verify the required parameter 'consultation' is set
      if @api_client.config.client_side_validation && consultation.nil?
        fail ArgumentError, "Missing the required parameter 'consultation' when calling SupportApi.update_consultation_using_put"
      end
      # verify the required parameter 'consultation_id' is set
      if @api_client.config.client_side_validation && consultation_id.nil?
        fail ArgumentError, "Missing the required parameter 'consultation_id' when calling SupportApi.update_consultation_using_put"
      end
      # resource path
      local_var_path = '/consultation/{consultation_id}'.sub('{' + 'consultation_id' + '}', consultation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(consultation)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Consultation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#update_consultation_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a sales inquiry
    # Update the information for a sales inquiry. 
    # @param sales sales
    # @param sales_id UUID sales_id
    # @param [Hash] opts the optional parameters
    # @return [Sale]
    def update_sale_using_put(sales, sales_id, opts = {})
      data, _status_code, _headers = update_sale_using_put_with_http_info(sales, sales_id, opts)
      data
    end

    # Update a sales inquiry
    # Update the information for a sales inquiry. 
    # @param sales sales
    # @param sales_id UUID sales_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Sale, Fixnum, Hash)>] Sale data, response status code and response headers
    def update_sale_using_put_with_http_info(sales, sales_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.update_sale_using_put ...'
      end
      # verify the required parameter 'sales' is set
      if @api_client.config.client_side_validation && sales.nil?
        fail ArgumentError, "Missing the required parameter 'sales' when calling SupportApi.update_sale_using_put"
      end
      # verify the required parameter 'sales_id' is set
      if @api_client.config.client_side_validation && sales_id.nil?
        fail ArgumentError, "Missing the required parameter 'sales_id' when calling SupportApi.update_sale_using_put"
      end
      # resource path
      local_var_path = '/sales/{sales_id}'.sub('{' + 'sales_id' + '}', sales_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sales)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Sale')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#update_sale_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a support ticket comment
    # Update the information for a support ticket comments defined for a support ticket.
    # @param support_ticket_comment support_ticket_comment
    # @param support_ticket_comment_id UUID support_ticket_comment_id
    # @param [Hash] opts the optional parameters
    # @return [SupportTicketComment]
    def update_support_ticket_comment_using_put(support_ticket_comment, support_ticket_comment_id, opts = {})
      data, _status_code, _headers = update_support_ticket_comment_using_put_with_http_info(support_ticket_comment, support_ticket_comment_id, opts)
      data
    end

    # Update a support ticket comment
    # Update the information for a support ticket comments defined for a support ticket.
    # @param support_ticket_comment support_ticket_comment
    # @param support_ticket_comment_id UUID support_ticket_comment_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportTicketComment, Fixnum, Hash)>] SupportTicketComment data, response status code and response headers
    def update_support_ticket_comment_using_put_with_http_info(support_ticket_comment, support_ticket_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.update_support_ticket_comment_using_put ...'
      end
      # verify the required parameter 'support_ticket_comment' is set
      if @api_client.config.client_side_validation && support_ticket_comment.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_comment' when calling SupportApi.update_support_ticket_comment_using_put"
      end
      # verify the required parameter 'support_ticket_comment_id' is set
      if @api_client.config.client_side_validation && support_ticket_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_comment_id' when calling SupportApi.update_support_ticket_comment_using_put"
      end
      # resource path
      local_var_path = '/support_ticket_comment/{support_ticket_comment_id}'.sub('{' + 'support_ticket_comment_id' + '}', support_ticket_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(support_ticket_comment)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupportTicketComment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#update_support_ticket_comment_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a support ticket
    # Update the information for a support ticket defined for your firm.
    # @param support_ticket support_ticket
    # @param support_ticket_id UUID support_ticket_id
    # @param [Hash] opts the optional parameters
    # @return [SupportTicket]
    def update_support_ticket_using_put(support_ticket, support_ticket_id, opts = {})
      data, _status_code, _headers = update_support_ticket_using_put_with_http_info(support_ticket, support_ticket_id, opts)
      data
    end

    # Update a support ticket
    # Update the information for a support ticket defined for your firm.
    # @param support_ticket support_ticket
    # @param support_ticket_id UUID support_ticket_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportTicket, Fixnum, Hash)>] SupportTicket data, response status code and response headers
    def update_support_ticket_using_put_with_http_info(support_ticket, support_ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.update_support_ticket_using_put ...'
      end
      # verify the required parameter 'support_ticket' is set
      if @api_client.config.client_side_validation && support_ticket.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket' when calling SupportApi.update_support_ticket_using_put"
      end
      # verify the required parameter 'support_ticket_id' is set
      if @api_client.config.client_side_validation && support_ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_id' when calling SupportApi.update_support_ticket_using_put"
      end
      # resource path
      local_var_path = '/support_ticket/{support_ticket_id}'.sub('{' + 'support_ticket_id' + '}', support_ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(support_ticket)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupportTicket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#update_support_ticket_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
