=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.8.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module NucleusApi
  class PerformanceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Account Performance
    # Get information on the performance of an account using IRR (Internal Rate of Return). You must provide the unique account_id.
    # @param account_id Account Id -/account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type - /statistics
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Object]
    def get_account_performance_using_get(account_id, opts = {})
      data, _status_code, _headers = get_account_performance_using_get_with_http_info(account_id, opts)
      data
    end

    # Account Performance
    # Get information on the performance of an account using IRR (Internal Rate of Return). You must provide the unique account_id.
    # @param account_id Account Id -/account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type - /statistics
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_account_performance_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_account_performance_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PerformanceApi.get_account_performance_using_get"
      end
      # resource path
      local_var_path = '/account/{account_id}/performance'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'benchmark_id'] = opts[:'benchmark_id'] if !opts[:'benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_account_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Allocation Performance
    # Get information on the performance of an allocation using TWR (Time Weighted Return). You must provide the unique allocation_id.
    # @param allocation_id Allocation Id -/allocation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Tenant Benchmark Id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [BOOLEAN] :is_current_weight is_current_weight (default to true)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type found under the Statistics banner
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Hash<String, Object>]
    def get_allocation_performance_using_get(allocation_id, opts = {})
      data, _status_code, _headers = get_allocation_performance_using_get_with_http_info(allocation_id, opts)
      data
    end

    # Allocation Performance
    # Get information on the performance of an allocation using TWR (Time Weighted Return). You must provide the unique allocation_id.
    # @param allocation_id Allocation Id -/allocation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Tenant Benchmark Id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [BOOLEAN] :is_current_weight is_current_weight
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type found under the Statistics banner
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_allocation_performance_using_get_with_http_info(allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_allocation_performance_using_get ...'
      end
      # verify the required parameter 'allocation_id' is set
      if @api_client.config.client_side_validation && allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_id' when calling PerformanceApi.get_allocation_performance_using_get"
      end
      # resource path
      local_var_path = '/allocation/{allocation_id}/performance'.sub('{' + 'allocation_id' + '}', allocation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'benchmark_id'] = opts[:'benchmark_id'] if !opts[:'benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'is_current_weight'] = opts[:'is_current_weight'] if !opts[:'is_current_weight'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_allocation_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Benchmark Performance
    # Get information on the performance of a benchmark using TWR (Time Weighted Return). You must provide the unique benchmark_id.
    # @param benchmark_id Benchmark Id - /benchmark
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :comparison_benchmark_id comparison_benchmark_id
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat Stat type - /statistics endpoint
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Object]
    def get_benchmark_performance_using_get(benchmark_id, opts = {})
      data, _status_code, _headers = get_benchmark_performance_using_get_with_http_info(benchmark_id, opts)
      data
    end

    # Benchmark Performance
    # Get information on the performance of a benchmark using TWR (Time Weighted Return). You must provide the unique benchmark_id.
    # @param benchmark_id Benchmark Id - /benchmark
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :comparison_benchmark_id comparison_benchmark_id
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat Stat type - /statistics endpoint
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_benchmark_performance_using_get_with_http_info(benchmark_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_benchmark_performance_using_get ...'
      end
      # verify the required parameter 'benchmark_id' is set
      if @api_client.config.client_side_validation && benchmark_id.nil?
        fail ArgumentError, "Missing the required parameter 'benchmark_id' when calling PerformanceApi.get_benchmark_performance_using_get"
      end
      # resource path
      local_var_path = '/benchmark/{benchmark_id}/performance'.sub('{' + 'benchmark_id' + '}', benchmark_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'comparison_benchmark_id'] = opts[:'comparison_benchmark_id'] if !opts[:'comparison_benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_benchmark_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Client Performance
    # Get information on the performance of a client using IRR (Internal Rate of Return). You must provide the unique client_id.
    # @param client_id Client Id -/client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type -- /statistics
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Object]
    def get_client_performance_using_get(client_id, opts = {})
      data, _status_code, _headers = get_client_performance_using_get_with_http_info(client_id, opts)
      data
    end

    # Client Performance
    # Get information on the performance of a client using IRR (Internal Rate of Return). You must provide the unique client_id.
    # @param client_id Client Id -/client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type -- /statistics
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_client_performance_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_client_performance_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling PerformanceApi.get_client_performance_using_get"
      end
      # resource path
      local_var_path = '/client/{client_id}/performance'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'benchmark_id'] = opts[:'benchmark_id'] if !opts[:'benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_client_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Goal Performance
    # Get information on the performance of a goal using IRR (Internal Rate of Return). You must provide the unique goal_id.
    # @param client_id client_id
    # @param goal_id Goal Id - /account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
    # @option opts [Date] :end_date end date (default to null)
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal (default to false)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date (default to null)
    # @option opts [String] :stat A stat type - /statistics
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Object]
    def get_goal_performance_using_get(client_id, goal_id, opts = {})
      data, _status_code, _headers = get_goal_performance_using_get_with_http_info(client_id, goal_id, opts)
      data
    end

    # Goal Performance
    # Get information on the performance of a goal using IRR (Internal Rate of Return). You must provide the unique goal_id.
    # @param client_id client_id
    # @param goal_id Goal Id - /account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type - /statistics
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_goal_performance_using_get_with_http_info(client_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_goal_performance_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling PerformanceApi.get_goal_performance_using_get"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling PerformanceApi.get_goal_performance_using_get"
      end
      # resource path
      local_var_path = '/goal/{goal_id}/performance'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_id'] = client_id
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'benchmark_id'] = opts[:'benchmark_id'] if !opts[:'benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'portfolio_goal'] = opts[:'portfolio_goal'] if !opts[:'portfolio_goal'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_goal_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Household Performance
    # Get information on the performance of a Household using IRR (Internal Rate of Return). You must provide the unique household_id.
    # @param household_id Household Id -/household
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type -- /statistics
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Object]
    def get_household_client_performance_using_get(household_id, opts = {})
      data, _status_code, _headers = get_household_client_performance_using_get_with_http_info(household_id, opts)
      data
    end

    # Household Performance
    # Get information on the performance of a Household using IRR (Internal Rate of Return). You must provide the unique household_id.
    # @param household_id Household Id -/household
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type -- /statistics
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_household_client_performance_using_get_with_http_info(household_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_household_client_performance_using_get ...'
      end
      # verify the required parameter 'household_id' is set
      if @api_client.config.client_side_validation && household_id.nil?
        fail ArgumentError, "Missing the required parameter 'household_id' when calling PerformanceApi.get_household_client_performance_using_get"
      end
      # resource path
      local_var_path = '/household/{household_id}/performance'.sub('{' + 'household_id' + '}', household_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'benchmark_id'] = opts[:'benchmark_id'] if !opts[:'benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_household_client_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Model Performance
    # Get information on the performance of a model using TWR (Time Weighted Return). You must provide the unique model_id.
    # @param model_id Model Id - /model
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Tenant Benchmark Id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat Stat Type
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Object]
    def get_model_performance_using_get(model_id, opts = {})
      data, _status_code, _headers = get_model_performance_using_get_with_http_info(model_id, opts)
      data
    end

    # Model Performance
    # Get information on the performance of a model using TWR (Time Weighted Return). You must provide the unique model_id.
    # @param model_id Model Id - /model
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Tenant Benchmark Id -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat Stat Type
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_model_performance_using_get_with_http_info(model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_model_performance_using_get ...'
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling PerformanceApi.get_model_performance_using_get"
      end
      # resource path
      local_var_path = '/model/{model_id}/performance'.sub('{' + 'model_id' + '}', model_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'benchmark_id'] = opts[:'benchmark_id'] if !opts[:'benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_model_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Portfolio Performance
    # Get information on the performance of a portfolio using IRR (Internal Rate of Return). You must provide the unique portfolio_id.
    # @param portfolio_id Portfolio Id -/portoflio
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type - /statistics endpoint to get types
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Object]
    def get_portfolio_performance_using_get(portfolio_id, opts = {})
      data, _status_code, _headers = get_portfolio_performance_using_get_with_http_info(portfolio_id, opts)
      data
    end

    # Portfolio Performance
    # Get information on the performance of a portfolio using IRR (Internal Rate of Return). You must provide the unique portfolio_id.
    # @param portfolio_id Portfolio Id -/portoflio
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :benchmark_id Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark
    # @option opts [Date] :end_date end date
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date start date
    # @option opts [String] :stat A stat type - /statistics endpoint to get types
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_portfolio_performance_using_get_with_http_info(portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_portfolio_performance_using_get ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling PerformanceApi.get_portfolio_performance_using_get"
      end
      # resource path
      local_var_path = '/portfolio/{portfolio_id}/performance'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'benchmark_id'] = opts[:'benchmark_id'] if !opts[:'benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_portfolio_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Security Performance
    # Get performance statistics for a security using TWR (Time Weighted Return). You must provide the unique security_id
    # @param security_id security_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :bench_ticker Bench Ticker for security - (default: ^GSPC) 
    # @option opts [String] :benchmark_id benchmark_id
    # @option opts [Date] :end_date Ending parameter for time window
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date Starting parameter for time window
    # @option opts [String] :stat A stat type - /statistics endpoint
    # @option opts [String] :ticker Ticker for security
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Object]
    def get_security_performance_using_get(security_id, opts = {})
      data, _status_code, _headers = get_security_performance_using_get_with_http_info(security_id, opts)
      data
    end

    # Security Performance
    # Get performance statistics for a security using TWR (Time Weighted Return). You must provide the unique security_id
    # @param security_id security_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
    # @option opts [String] :bench_ticker Bench Ticker for security - (default: ^GSPC) 
    # @option opts [String] :benchmark_id benchmark_id
    # @option opts [Date] :end_date Ending parameter for time window
    # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
    # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
    # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
    # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
    # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
    # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
    # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
    # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
    # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
    # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
    # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
    # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
    # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
    # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
    # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
    # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
    # @option opts [Date] :start_date Starting parameter for time window
    # @option opts [String] :stat A stat type - /statistics endpoint
    # @option opts [String] :ticker Ticker for security
    # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_security_performance_using_get_with_http_info(security_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_security_performance_using_get ...'
      end
      # verify the required parameter 'security_id' is set
      if @api_client.config.client_side_validation && security_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_id' when calling PerformanceApi.get_security_performance_using_get"
      end
      # resource path
      local_var_path = '/security/{security_id}/performance'.sub('{' + 'security_id' + '}', security_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active_premium_period'] = opts[:'active_premium_period'] if !opts[:'active_premium_period'].nil?
      query_params[:'annualized_return_period'] = opts[:'annualized_return_period'] if !opts[:'annualized_return_period'].nil?
      query_params[:'benchTicker'] = opts[:'bench_ticker'] if !opts[:'bench_ticker'].nil?
      query_params[:'benchmark_id'] = opts[:'benchmark_id'] if !opts[:'benchmark_id'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'hist_factor'] = opts[:'hist_factor'] if !opts[:'hist_factor'].nil?
      query_params[:'mar_down_side_deviation'] = opts[:'mar_down_side_deviation'] if !opts[:'mar_down_side_deviation'].nil?
      query_params[:'max_percentile_monte_carlo'] = opts[:'max_percentile_monte_carlo'] if !opts[:'max_percentile_monte_carlo'].nil?
      query_params[:'mean_percentile_monte_carlo'] = opts[:'mean_percentile_monte_carlo'] if !opts[:'mean_percentile_monte_carlo'].nil?
      query_params[:'min_percentile_monte_carlo'] = opts[:'min_percentile_monte_carlo'] if !opts[:'min_percentile_monte_carlo'].nil?
      query_params[:'moving_average_n_day'] = opts[:'moving_average_n_day'] if !opts[:'moving_average_n_day'].nil?
      query_params[:'n_day_returns'] = opts[:'n_day_returns'] if !opts[:'n_day_returns'].nil?
      query_params[:'n_path_monte_carlo'] = opts[:'n_path_monte_carlo'] if !opts[:'n_path_monte_carlo'].nil?
      query_params[:'n_rolling_max_drawdown'] = opts[:'n_rolling_max_drawdown'] if !opts[:'n_rolling_max_drawdown'].nil?
      query_params[:'n_rolling_volatility'] = opts[:'n_rolling_volatility'] if !opts[:'n_rolling_volatility'].nil?
      query_params[:'num_sim_monte_carlo'] = opts[:'num_sim_monte_carlo'] if !opts[:'num_sim_monte_carlo'].nil?
      query_params[:'period_type'] = opts[:'period_type'] if !opts[:'period_type'].nil?
      query_params[:'risk_free_alpha'] = opts[:'risk_free_alpha'] if !opts[:'risk_free_alpha'].nil?
      query_params[:'risk_free_sharpe'] = opts[:'risk_free_sharpe'] if !opts[:'risk_free_sharpe'].nil?
      query_params[:'risk_free_sortino'] = opts[:'risk_free_sortino'] if !opts[:'risk_free_sortino'].nil?
      query_params[:'risk_free_treynor'] = opts[:'risk_free_treynor'] if !opts[:'risk_free_treynor'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'stat'] = opts[:'stat'] if !opts[:'stat'].nil?
      query_params[:'ticker'] = opts[:'ticker'] if !opts[:'ticker'].nil?
      query_params[:'var_conf_interval'] = opts[:'var_conf_interval'] if !opts[:'var_conf_interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_security_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
