=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.8.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module NucleusApi
  class MarketingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a campaign data record
    # Create a new  campaign data record for your firm.
    # @param campaign_data_request campaignDataRequest
    # @param [Hash] opts the optional parameters
    # @return [CampaignData]
    def create_campaign_data_using_post(campaign_data_request, opts = {})
      data, _status_code, _headers = create_campaign_data_using_post_with_http_info(campaign_data_request, opts)
      data
    end

    # Create a campaign data record
    # Create a new  campaign data record for your firm.
    # @param campaign_data_request campaignDataRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampaignData, Fixnum, Hash)>] CampaignData data, response status code and response headers
    def create_campaign_data_using_post_with_http_info(campaign_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.create_campaign_data_using_post ...'
      end
      # verify the required parameter 'campaign_data_request' is set
      if @api_client.config.client_side_validation && campaign_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_data_request' when calling MarketingApi.create_campaign_data_using_post"
      end
      # resource path
      local_var_path = '/campaign_data'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign_data_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampaignData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#create_campaign_data_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a campaign plan
    # Create a new campaign plan for your firm.
    # @param campaign_plan_request campaignPlanRequest
    # @param [Hash] opts the optional parameters
    # @return [CampaignPlan]
    def create_campaign_plan_using_post(campaign_plan_request, opts = {})
      data, _status_code, _headers = create_campaign_plan_using_post_with_http_info(campaign_plan_request, opts)
      data
    end

    # Create a campaign plan
    # Create a new campaign plan for your firm.
    # @param campaign_plan_request campaignPlanRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampaignPlan, Fixnum, Hash)>] CampaignPlan data, response status code and response headers
    def create_campaign_plan_using_post_with_http_info(campaign_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.create_campaign_plan_using_post ...'
      end
      # verify the required parameter 'campaign_plan_request' is set
      if @api_client.config.client_side_validation && campaign_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_plan_request' when calling MarketingApi.create_campaign_plan_using_post"
      end
      # resource path
      local_var_path = '/campaign_plan'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign_plan_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampaignPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#create_campaign_plan_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a campaign
    # Create a new campaign for your firm.
    # @param campaign_request campaignRequest
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def create_campaign_using_post(campaign_request, opts = {})
      data, _status_code, _headers = create_campaign_using_post_with_http_info(campaign_request, opts)
      data
    end

    # Create a campaign
    # Create a new campaign for your firm.
    # @param campaign_request campaignRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Fixnum, Hash)>] Campaign data, response status code and response headers
    def create_campaign_using_post_with_http_info(campaign_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.create_campaign_using_post ...'
      end
      # verify the required parameter 'campaign_request' is set
      if @api_client.config.client_side_validation && campaign_request.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_request' when calling MarketingApi.create_campaign_using_post"
      end
      # resource path
      local_var_path = '/campaign'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Campaign')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#create_campaign_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark a client signing up through a campaign
    # We are adding a campaign association to a clientId or ip.  We create this association because we are trying to measure how affective a campaign is in directing traffic to our website.  
    # @param campaign_mapping_request campaignMappingRequest
    # @param [Hash] opts the optional parameters
    # @return [ClientCampaignMapping]
    def create_client_campaign_using_post(campaign_mapping_request, opts = {})
      data, _status_code, _headers = create_client_campaign_using_post_with_http_info(campaign_mapping_request, opts)
      data
    end

    # Mark a client signing up through a campaign
    # We are adding a campaign association to a clientId or ip.  We create this association because we are trying to measure how affective a campaign is in directing traffic to our website.  
    # @param campaign_mapping_request campaignMappingRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientCampaignMapping, Fixnum, Hash)>] ClientCampaignMapping data, response status code and response headers
    def create_client_campaign_using_post_with_http_info(campaign_mapping_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.create_client_campaign_using_post ...'
      end
      # verify the required parameter 'campaign_mapping_request' is set
      if @api_client.config.client_side_validation && campaign_mapping_request.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_mapping_request' when calling MarketingApi.create_client_campaign_using_post"
      end
      # resource path
      local_var_path = '/client_campaign'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign_mapping_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientCampaignMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#create_client_campaign_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a campaign data record
    # Permanently delete a campaign data record
    # @param campaign_data_id UUID campaign_data_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_campaign_data_using_delete(campaign_data_id, opts = {})
      delete_campaign_data_using_delete_with_http_info(campaign_data_id, opts)
      nil
    end

    # Delete a campaign data record
    # Permanently delete a campaign data record
    # @param campaign_data_id UUID campaign_data_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_campaign_data_using_delete_with_http_info(campaign_data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.delete_campaign_data_using_delete ...'
      end
      # verify the required parameter 'campaign_data_id' is set
      if @api_client.config.client_side_validation && campaign_data_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_data_id' when calling MarketingApi.delete_campaign_data_using_delete"
      end
      # resource path
      local_var_path = '/campaign_data/{campaign_data_id}'.sub('{' + 'campaign_data_id' + '}', campaign_data_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#delete_campaign_data_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a campaign plan
    # Permanently delete a campaign plan
    # @param campaign_plan_id UUID campaign_plan_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_campaign_plan_using_delete(campaign_plan_id, opts = {})
      delete_campaign_plan_using_delete_with_http_info(campaign_plan_id, opts)
      nil
    end

    # Delete a campaign plan
    # Permanently delete a campaign plan
    # @param campaign_plan_id UUID campaign_plan_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_campaign_plan_using_delete_with_http_info(campaign_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.delete_campaign_plan_using_delete ...'
      end
      # verify the required parameter 'campaign_plan_id' is set
      if @api_client.config.client_side_validation && campaign_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_plan_id' when calling MarketingApi.delete_campaign_plan_using_delete"
      end
      # resource path
      local_var_path = '/campaign_plan/{campaign_plan_id}'.sub('{' + 'campaign_plan_id' + '}', campaign_plan_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#delete_campaign_plan_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a campaign
    # Permanently delete a campaign
    # @param campaign_id Campaign Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_campaign_using_delete(campaign_id, opts = {})
      delete_campaign_using_delete_with_http_info(campaign_id, opts)
      nil
    end

    # Delete a campaign
    # Permanently delete a campaign
    # @param campaign_id Campaign Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_campaign_using_delete_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.delete_campaign_using_delete ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling MarketingApi.delete_campaign_using_delete"
      end
      # resource path
      local_var_path = '/campaign/{campaign_id}'.sub('{' + 'campaign_id' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#delete_campaign_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a clients/ips pair under a campaign
    # Permanently delete a clients/ips pair under a campaign
    # @param client_campaign_id UUID client_campaign_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_client_campaign_using_delete(client_campaign_id, opts = {})
      delete_client_campaign_using_delete_with_http_info(client_campaign_id, opts)
      nil
    end

    # Delete a clients/ips pair under a campaign
    # Permanently delete a clients/ips pair under a campaign
    # @param client_campaign_id UUID client_campaign_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_client_campaign_using_delete_with_http_info(client_campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.delete_client_campaign_using_delete ...'
      end
      # verify the required parameter 'client_campaign_id' is set
      if @api_client.config.client_side_validation && client_campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_campaign_id' when calling MarketingApi.delete_client_campaign_using_delete"
      end
      # resource path
      local_var_path = '/client_campaign/{client_campaign_id}'.sub('{' + 'client_campaign_id' + '}', client_campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#delete_client_campaign_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all campaigns
    # Get details for all campaigns defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageCampaign]
    def get_campaign_all_using_get(opts = {})
      data, _status_code, _headers = get_campaign_all_using_get_with_http_info(opts)
      data
    end

    # List all campaigns
    # Get details for all campaigns defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageCampaign, Fixnum, Hash)>] PageCampaign data, response status code and response headers
    def get_campaign_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.get_campaign_all_using_get ...'
      end
      # resource path
      local_var_path = '/campaign'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampaign')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#get_campaign_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all campaign data
    # Get details for all campaign data defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageCampaignData]
    def get_campaign_data_all_using_get(opts = {})
      data, _status_code, _headers = get_campaign_data_all_using_get_with_http_info(opts)
      data
    end

    # List all campaign data
    # Get details for all campaign data defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageCampaignData, Fixnum, Hash)>] PageCampaignData data, response status code and response headers
    def get_campaign_data_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.get_campaign_data_all_using_get ...'
      end
      # resource path
      local_var_path = '/campaign_data'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampaignData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#get_campaign_data_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a campaign data record
    # Retrieve the information for a campaign data record
    # @param campaign_data_id UUID campaign_data_id
    # @param [Hash] opts the optional parameters
    # @return [CampaignData]
    def get_campaign_data_using_get(campaign_data_id, opts = {})
      data, _status_code, _headers = get_campaign_data_using_get_with_http_info(campaign_data_id, opts)
      data
    end

    # Retrieve a campaign data record
    # Retrieve the information for a campaign data record
    # @param campaign_data_id UUID campaign_data_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampaignData, Fixnum, Hash)>] CampaignData data, response status code and response headers
    def get_campaign_data_using_get_with_http_info(campaign_data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.get_campaign_data_using_get ...'
      end
      # verify the required parameter 'campaign_data_id' is set
      if @api_client.config.client_side_validation && campaign_data_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_data_id' when calling MarketingApi.get_campaign_data_using_get"
      end
      # resource path
      local_var_path = '/campaign_data/{campaign_data_id}'.sub('{' + 'campaign_data_id' + '}', campaign_data_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampaignData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#get_campaign_data_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all campaign plans
    # Get details for all campaign plans defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageCampaignPlan]
    def get_campaign_plan_all_using_get(opts = {})
      data, _status_code, _headers = get_campaign_plan_all_using_get_with_http_info(opts)
      data
    end

    # List all campaign plans
    # Get details for all campaign plans defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageCampaignPlan, Fixnum, Hash)>] PageCampaignPlan data, response status code and response headers
    def get_campaign_plan_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.get_campaign_plan_all_using_get ...'
      end
      # resource path
      local_var_path = '/campaign_plan'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampaignPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#get_campaign_plan_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a campaign plan
    # Retrieve the information for a campaign plan
    # @param campaign_plan_id UUID campaign_plan_id
    # @param [Hash] opts the optional parameters
    # @return [CampaignPlan]
    def get_campaign_plan_using_get(campaign_plan_id, opts = {})
      data, _status_code, _headers = get_campaign_plan_using_get_with_http_info(campaign_plan_id, opts)
      data
    end

    # Retrieve a campaign plan
    # Retrieve the information for a campaign plan
    # @param campaign_plan_id UUID campaign_plan_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampaignPlan, Fixnum, Hash)>] CampaignPlan data, response status code and response headers
    def get_campaign_plan_using_get_with_http_info(campaign_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.get_campaign_plan_using_get ...'
      end
      # verify the required parameter 'campaign_plan_id' is set
      if @api_client.config.client_side_validation && campaign_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_plan_id' when calling MarketingApi.get_campaign_plan_using_get"
      end
      # resource path
      local_var_path = '/campaign_plan/{campaign_plan_id}'.sub('{' + 'campaign_plan_id' + '}', campaign_plan_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampaignPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#get_campaign_plan_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a campaign
    # Retrieve the information for a campaign.
    # @param campaign_id Campaign Id
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def get_campaign_using_get(campaign_id, opts = {})
      data, _status_code, _headers = get_campaign_using_get_with_http_info(campaign_id, opts)
      data
    end

    # Retrieve a campaign
    # Retrieve the information for a campaign.
    # @param campaign_id Campaign Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Fixnum, Hash)>] Campaign data, response status code and response headers
    def get_campaign_using_get_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.get_campaign_using_get ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling MarketingApi.get_campaign_using_get"
      end
      # resource path
      local_var_path = '/campaign/{campaign_id}'.sub('{' + 'campaign_id' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Campaign')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#get_campaign_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all clients/ips under a campaign
    # Get details for all clients/ips under a campaign
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageClientCampaignMapping]
    def get_client_campaign_all_using_get(opts = {})
      data, _status_code, _headers = get_client_campaign_all_using_get_with_http_info(opts)
      data
    end

    # List all clients/ips under a campaign
    # Get details for all clients/ips under a campaign
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageClientCampaignMapping, Fixnum, Hash)>] PageClientCampaignMapping data, response status code and response headers
    def get_client_campaign_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.get_client_campaign_all_using_get ...'
      end
      # resource path
      local_var_path = '/client_campaign'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageClientCampaignMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#get_client_campaign_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a clients/ips pair under a campaign
    # Retrieve the information for a clients/ips pair under a campaign
    # @param client_campaign_id UUID client_campaign_id
    # @param [Hash] opts the optional parameters
    # @return [ClientCampaignMapping]
    def get_client_campaign_using_get(client_campaign_id, opts = {})
      data, _status_code, _headers = get_client_campaign_using_get_with_http_info(client_campaign_id, opts)
      data
    end

    # Retrieve a clients/ips pair under a campaign
    # Retrieve the information for a clients/ips pair under a campaign
    # @param client_campaign_id UUID client_campaign_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientCampaignMapping, Fixnum, Hash)>] ClientCampaignMapping data, response status code and response headers
    def get_client_campaign_using_get_with_http_info(client_campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.get_client_campaign_using_get ...'
      end
      # verify the required parameter 'client_campaign_id' is set
      if @api_client.config.client_side_validation && client_campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_campaign_id' when calling MarketingApi.get_client_campaign_using_get"
      end
      # resource path
      local_var_path = '/client_campaign/{client_campaign_id}'.sub('{' + 'client_campaign_id' + '}', client_campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientCampaignMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#get_client_campaign_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a campaign data record
    # Updated the information for a campaign data record
    # @param campaign_data campaign_data
    # @param campaign_data_id UUID campaign_data_id
    # @param [Hash] opts the optional parameters
    # @return [CampaignData]
    def update_campaign_data_using_put(campaign_data, campaign_data_id, opts = {})
      data, _status_code, _headers = update_campaign_data_using_put_with_http_info(campaign_data, campaign_data_id, opts)
      data
    end

    # Update a campaign data record
    # Updated the information for a campaign data record
    # @param campaign_data campaign_data
    # @param campaign_data_id UUID campaign_data_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampaignData, Fixnum, Hash)>] CampaignData data, response status code and response headers
    def update_campaign_data_using_put_with_http_info(campaign_data, campaign_data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.update_campaign_data_using_put ...'
      end
      # verify the required parameter 'campaign_data' is set
      if @api_client.config.client_side_validation && campaign_data.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_data' when calling MarketingApi.update_campaign_data_using_put"
      end
      # verify the required parameter 'campaign_data_id' is set
      if @api_client.config.client_side_validation && campaign_data_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_data_id' when calling MarketingApi.update_campaign_data_using_put"
      end
      # resource path
      local_var_path = '/campaign_data/{campaign_data_id}'.sub('{' + 'campaign_data_id' + '}', campaign_data_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign_data)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampaignData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#update_campaign_data_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a campaign plan
    # Updated the information for a campaign plan
    # @param campaign_plan campaign_plan
    # @param campaign_plan_id UUID campaign_plan_id
    # @param [Hash] opts the optional parameters
    # @return [CampaignPlan]
    def update_campaign_plan_using_put(campaign_plan, campaign_plan_id, opts = {})
      data, _status_code, _headers = update_campaign_plan_using_put_with_http_info(campaign_plan, campaign_plan_id, opts)
      data
    end

    # Update a campaign plan
    # Updated the information for a campaign plan
    # @param campaign_plan campaign_plan
    # @param campaign_plan_id UUID campaign_plan_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampaignPlan, Fixnum, Hash)>] CampaignPlan data, response status code and response headers
    def update_campaign_plan_using_put_with_http_info(campaign_plan, campaign_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.update_campaign_plan_using_put ...'
      end
      # verify the required parameter 'campaign_plan' is set
      if @api_client.config.client_side_validation && campaign_plan.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_plan' when calling MarketingApi.update_campaign_plan_using_put"
      end
      # verify the required parameter 'campaign_plan_id' is set
      if @api_client.config.client_side_validation && campaign_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_plan_id' when calling MarketingApi.update_campaign_plan_using_put"
      end
      # resource path
      local_var_path = '/campaign_plan/{campaign_plan_id}'.sub('{' + 'campaign_plan_id' + '}', campaign_plan_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign_plan)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampaignPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#update_campaign_plan_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a campaign
    # Updated the information for a campaign
    # @param campaign campaign
    # @param campaign_id UUID campaign_id
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def update_campaign_using_put(campaign, campaign_id, opts = {})
      data, _status_code, _headers = update_campaign_using_put_with_http_info(campaign, campaign_id, opts)
      data
    end

    # Update a campaign
    # Updated the information for a campaign
    # @param campaign campaign
    # @param campaign_id UUID campaign_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Fixnum, Hash)>] Campaign data, response status code and response headers
    def update_campaign_using_put_with_http_info(campaign, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.update_campaign_using_put ...'
      end
      # verify the required parameter 'campaign' is set
      if @api_client.config.client_side_validation && campaign.nil?
        fail ArgumentError, "Missing the required parameter 'campaign' when calling MarketingApi.update_campaign_using_put"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling MarketingApi.update_campaign_using_put"
      end
      # resource path
      local_var_path = '/campaign/{campaign_id}'.sub('{' + 'campaign_id' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Campaign')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#update_campaign_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a clients/ips pair under a campaign
    # Updated the information for clients/ips pair under a campaign
    # @param client_campaign_id UUID client_campaign_id
    # @param json_node jsonNode
    # @param [Hash] opts the optional parameters
    # @return [ClientCampaignMapping]
    def update_client_campaign_using_put(client_campaign_id, json_node, opts = {})
      data, _status_code, _headers = update_client_campaign_using_put_with_http_info(client_campaign_id, json_node, opts)
      data
    end

    # Update a clients/ips pair under a campaign
    # Updated the information for clients/ips pair under a campaign
    # @param client_campaign_id UUID client_campaign_id
    # @param json_node jsonNode
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientCampaignMapping, Fixnum, Hash)>] ClientCampaignMapping data, response status code and response headers
    def update_client_campaign_using_put_with_http_info(client_campaign_id, json_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketingApi.update_client_campaign_using_put ...'
      end
      # verify the required parameter 'client_campaign_id' is set
      if @api_client.config.client_side_validation && client_campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_campaign_id' when calling MarketingApi.update_client_campaign_using_put"
      end
      # verify the required parameter 'json_node' is set
      if @api_client.config.client_side_validation && json_node.nil?
        fail ArgumentError, "Missing the required parameter 'json_node' when calling MarketingApi.update_client_campaign_using_put"
      end
      # resource path
      local_var_path = '/client_campaign/{client_campaign_id}'.sub('{' + 'client_campaign_id' + '}', client_campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(json_node)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientCampaignMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketingApi#update_client_campaign_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
