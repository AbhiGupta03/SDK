=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.2
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module NucleusApi
  # Invoice Object
  class Invoice
    # businessId
    attr_accessor :business_id

    # client_id
    attr_accessor :client_id

    # contact_id
    attr_accessor :contact_id

    attr_accessor :create_date

    # currency_code
    attr_accessor :currency_code

    # department
    attr_accessor :department

    # description
    attr_accessor :description

    # document_id
    attr_accessor :document_id

    # due_date
    attr_accessor :due_date

    attr_accessor :id

    # invoice_date
    attr_accessor :invoice_date

    # invoice_name
    attr_accessor :invoice_name

    # invoice_number
    attr_accessor :invoice_number

    # is_active
    attr_accessor :is_active

    # is_bill
    attr_accessor :is_bill

    # lineItems
    attr_accessor :line_items

    attr_accessor :metadata

    # paymentInstructions
    attr_accessor :payment_instructions

    # paymentTerms
    attr_accessor :payment_terms

    attr_accessor :secondary_id

    # status
    attr_accessor :status

    # totalAmount
    attr_accessor :total_amount

    # totalDiscount
    attr_accessor :total_discount

    # totalDue
    attr_accessor :total_due

    # totalSubtotal
    attr_accessor :total_subtotal

    # totalTax
    attr_accessor :total_tax

    attr_accessor :update_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'business_id' => :'business_id',
        :'client_id' => :'client_id',
        :'contact_id' => :'contact_id',
        :'create_date' => :'create_date',
        :'currency_code' => :'currency_code',
        :'department' => :'department',
        :'description' => :'description',
        :'document_id' => :'document_id',
        :'due_date' => :'due_date',
        :'id' => :'id',
        :'invoice_date' => :'invoice_date',
        :'invoice_name' => :'invoice_name',
        :'invoice_number' => :'invoice_number',
        :'is_active' => :'is_active',
        :'is_bill' => :'is_bill',
        :'line_items' => :'line_items',
        :'metadata' => :'metadata',
        :'payment_instructions' => :'payment_instructions',
        :'payment_terms' => :'payment_terms',
        :'secondary_id' => :'secondary_id',
        :'status' => :'status',
        :'total_amount' => :'total_amount',
        :'total_discount' => :'total_discount',
        :'total_due' => :'total_due',
        :'total_subtotal' => :'total_subtotal',
        :'total_tax' => :'total_tax',
        :'update_date' => :'update_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'business_id' => :'String',
        :'client_id' => :'String',
        :'contact_id' => :'String',
        :'create_date' => :'DateTime',
        :'currency_code' => :'String',
        :'department' => :'String',
        :'description' => :'String',
        :'document_id' => :'String',
        :'due_date' => :'DateTime',
        :'id' => :'String',
        :'invoice_date' => :'Date',
        :'invoice_name' => :'String',
        :'invoice_number' => :'String',
        :'is_active' => :'BOOLEAN',
        :'is_bill' => :'BOOLEAN',
        :'line_items' => :'Array<LineItems>',
        :'metadata' => :'Hash<String, String>',
        :'payment_instructions' => :'String',
        :'payment_terms' => :'String',
        :'secondary_id' => :'String',
        :'status' => :'String',
        :'total_amount' => :'Float',
        :'total_discount' => :'Float',
        :'total_due' => :'Float',
        :'total_subtotal' => :'Float',
        :'total_tax' => :'Float',
        :'update_date' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'business_id')
        self.business_id = attributes[:'business_id']
      end

      if attributes.has_key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.has_key?(:'contact_id')
        self.contact_id = attributes[:'contact_id']
      end

      if attributes.has_key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'document_id')
        self.document_id = attributes[:'document_id']
      end

      if attributes.has_key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'invoice_date')
        self.invoice_date = attributes[:'invoice_date']
      end

      if attributes.has_key?(:'invoice_name')
        self.invoice_name = attributes[:'invoice_name']
      end

      if attributes.has_key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.has_key?(:'is_active')
        self.is_active = attributes[:'is_active']
      end

      if attributes.has_key?(:'is_bill')
        self.is_bill = attributes[:'is_bill']
      end

      if attributes.has_key?(:'line_items')
        if (value = attributes[:'line_items']).is_a?(Array)
          self.line_items = value
        end
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'payment_instructions')
        self.payment_instructions = attributes[:'payment_instructions']
      end

      if attributes.has_key?(:'payment_terms')
        self.payment_terms = attributes[:'payment_terms']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'total_amount')
        self.total_amount = attributes[:'total_amount']
      end

      if attributes.has_key?(:'total_discount')
        self.total_discount = attributes[:'total_discount']
      end

      if attributes.has_key?(:'total_due')
        self.total_due = attributes[:'total_due']
      end

      if attributes.has_key?(:'total_subtotal')
        self.total_subtotal = attributes[:'total_subtotal']
      end

      if attributes.has_key?(:'total_tax')
        self.total_tax = attributes[:'total_tax']
      end

      if attributes.has_key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @contact_id.nil?
        invalid_properties.push('invalid value for "contact_id", contact_id cannot be nil.')
      end

      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      if @due_date.nil?
        invalid_properties.push('invalid value for "due_date", due_date cannot be nil.')
      end

      if @invoice_date.nil?
        invalid_properties.push('invalid value for "invoice_date", invoice_date cannot be nil.')
      end

      if @invoice_number.nil?
        invalid_properties.push('invalid value for "invoice_number", invoice_number cannot be nil.')
      end

      if @total_amount.nil?
        invalid_properties.push('invalid value for "total_amount", total_amount cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @contact_id.nil?
      return false if @currency_code.nil?
      return false if @due_date.nil?
      return false if @invoice_date.nil?
      return false if @invoice_number.nil?
      return false if @total_amount.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          business_id == o.business_id &&
          client_id == o.client_id &&
          contact_id == o.contact_id &&
          create_date == o.create_date &&
          currency_code == o.currency_code &&
          department == o.department &&
          description == o.description &&
          document_id == o.document_id &&
          due_date == o.due_date &&
          id == o.id &&
          invoice_date == o.invoice_date &&
          invoice_name == o.invoice_name &&
          invoice_number == o.invoice_number &&
          is_active == o.is_active &&
          is_bill == o.is_bill &&
          line_items == o.line_items &&
          metadata == o.metadata &&
          payment_instructions == o.payment_instructions &&
          payment_terms == o.payment_terms &&
          secondary_id == o.secondary_id &&
          status == o.status &&
          total_amount == o.total_amount &&
          total_discount == o.total_discount &&
          total_due == o.total_due &&
          total_subtotal == o.total_subtotal &&
          total_tax == o.total_tax &&
          update_date == o.update_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [business_id, client_id, contact_id, create_date, currency_code, department, description, document_id, due_date, id, invoice_date, invoice_name, invoice_number, is_active, is_bill, line_items, metadata, payment_instructions, payment_terms, secondary_id, status, total_amount, total_discount, total_due, total_subtotal, total_tax, update_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
# Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        (value)
      when :Date
        (value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NucleusApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end


    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
