=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.8.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'spec_helper'
require 'json'

# Unit tests for NucleusApi::SupportApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SupportApi' do
  before do
    # run before each test
    @instance = NucleusApi::SupportApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SupportApi' do
    it 'should create an instance of SupportApi' do
      expect(@instance).to be_instance_of(NucleusApi::SupportApi)
    end
  end

  # unit tests for create_chat_using_post
  # Create a Chat
  # Create a Chat
  # @param chat_info_request chatInfoRequest
  # @param [Hash] opts the optional parameters
  # @return [ChatInfo]
  describe 'create_chat_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_consultation_using_post
  # Create a CIO Consultation
  # Create a new CIO Consultation
  # @param cio_consultation_request cioConsultationRequest
  # @param [Hash] opts the optional parameters
  # @return [Consultation]
  describe 'create_consultation_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_sale_using_post
  # Create a sales inquiry
  # Create a new sales inquiry for your firm.
  # @param sale_request saleRequest
  # @param [Hash] opts the optional parameters
  # @return [Sale]
  describe 'create_sale_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_support_ticket_comment_using_post
  # Create a support ticket comment
  # Create a new support ticket comment for a support ticket.
  # @param support_ticker_comment_request supportTickerCommentRequest
  # @param [Hash] opts the optional parameters
  # @return [SupportTicket]
  describe 'create_support_ticket_comment_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_support_ticket_using_post
  # Create a support ticket
  # Create a new support ticket for your firm.
  # @param support_ticket_request supportTicketRequest
  # @param [Hash] opts the optional parameters
  # @return [SupportTicket]
  describe 'create_support_ticket_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_chat_using_delete
  # Delete a Chat
  # Permanently delete a Chat
  # @param chat_id UUID chat_info_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_chat_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_consultation_using_delete
  # Delete a CIO Consultation
  # Permanently delete a CIO Consultation
  # @param consultation_id UUID consultation_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_consultation_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_sale_using_delete
  # Delete a sales inquiry
  # Permanently delete a sales inquiry.
  # @param sales_id UUID sales_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_sale_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_support_ticket_comment_using_delete
  # Delete a support ticket comment
  # Permanently delete a support ticket comment for a support ticket.
  # @param support_ticket_comment_id UUID support_ticket_comment_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_support_ticket_comment_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_support_ticket_using_delete
  # Delete a support ticket
  # Permanently delete a support ticket for your firm.
  # @param support_ticket_id UUID support_ticket_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_support_ticket_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat_all_using_get
  # List all open chats
  # Get details for all open chat
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageChatInfo]
  describe 'get_chat_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat_using_get
  # Retrieve a Chat
  # Retrieve the information for a Chat
  # @param chat_id UUID chat_info_id
  # @param [Hash] opts the optional parameters
  # @return [ChatInfo]
  describe 'get_chat_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_consultation_all_using_get
  # List all CIO Consultation
  # Get details for all CIO Consultation
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageConsultation]
  describe 'get_consultation_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_consultation_using_get
  # Retrieve a CIO Consultation
  # Retrieve the information for a CIO Consultation
  # @param consultation_id UUID consultation_id
  # @param [Hash] opts the optional parameters
  # @return [Consultation]
  describe 'get_consultation_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sale_all_using_get
  # List all sales inquiries
  # Get all sales inquiries defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageSale]
  describe 'get_sale_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sale_using_get
  # Retrieve a sales record
  # Retrieve the information for a sales record
  # @param sales_id UUID sales_id
  # @param [Hash] opts the optional parameters
  # @return [Sale]
  describe 'get_sale_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_support_ticket_all_using_get
  # List all support tickets
  # Get the information for all support tickets defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageSupportTicket]
  describe 'get_support_ticket_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_support_ticket_comment_all_using_get
  # List all support ticket comments
  # Get the information for all support ticket comments defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageSupportTicketComment]
  describe 'get_support_ticket_comment_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_support_ticket_comment_using_get
  # Retrieve a support ticket comment
  # Retrieve the information for a support ticket comment defined for a support ticket.
  # @param support_ticket_comment_id UUID support_ticket_comment_id
  # @param [Hash] opts the optional parameters
  # @return [SupportTicketComment]
  describe 'get_support_ticket_comment_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_support_ticket_using_get
  # Retrieve a support ticket
  # Retrieve the information for a support ticket defined for your firm.
  # @param support_ticket_id UUID support_ticket_id
  # @param [Hash] opts the optional parameters
  # @return [SupportTicket]
  describe 'get_support_ticket_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_chat_using_put
  # Update a Chat
  # Updated the information for a Chat
  # @param chat_id UUID chat_id
  # @param chat_info chat_info
  # @param [Hash] opts the optional parameters
  # @return [ChatInfo]
  describe 'update_chat_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_consultation_using_put
  # Update a CIO Consultation
  # Updated the information CIO Consultation
  # @param consultation consultation
  # @param consultation_id UUID consultation_id
  # @param [Hash] opts the optional parameters
  # @return [Consultation]
  describe 'update_consultation_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_sale_using_put
  # Update a sales inquiry
  # Update the information for a sales inquiry. 
  # @param sales sales
  # @param sales_id UUID sales_id
  # @param [Hash] opts the optional parameters
  # @return [Sale]
  describe 'update_sale_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_support_ticket_comment_using_put
  # Update a support ticket comment
  # Update the information for a support ticket comments defined for a support ticket.
  # @param support_ticket_comment support_ticket_comment
  # @param support_ticket_comment_id UUID support_ticket_comment_id
  # @param [Hash] opts the optional parameters
  # @return [SupportTicketComment]
  describe 'update_support_ticket_comment_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_support_ticket_using_put
  # Update a support ticket
  # Update the information for a support ticket defined for your firm.
  # @param support_ticket support_ticket
  # @param support_ticket_id UUID support_ticket_id
  # @param [Hash] opts the optional parameters
  # @return [SupportTicket]
  describe 'update_support_ticket_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
