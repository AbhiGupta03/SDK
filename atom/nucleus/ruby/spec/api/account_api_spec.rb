=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.7.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'spec_helper'
require 'json'

# Unit tests for AtomApi::AccountApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AccountApi' do
  before do
    # run before each test
    @instance = AtomApi::AccountApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AccountApi' do
    it 'should create an instance of AccountApi' do
      expect(@instance).to be_instance_of(AtomApi::AccountApi)
    end
  end

  # unit tests for create_account_allocation_mapping_using_post
  # Create an account allocation
  # Create an account-allocation mapping for an account.
  # @param alloc_request allocRequest
  # @param [Hash] opts the optional parameters
  # @return [AccountAllocationMapping]
  describe 'create_account_allocation_mapping_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_account_type_using_post
  # Create an account type
  # Create a new account type for your firm.
  # @param account_type_request accountTypeRequest
  # @param [Hash] opts the optional parameters
  # @return [AccountType]
  describe 'create_account_type_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_account_using_post
  # Create an account
  # Create an account under a client.
  # @param client_account_request clientAccountRequest
  # @param [Hash] opts the optional parameters
  # @return [Account]
  describe 'create_account_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_allocation_mapping_using_delete
  # Delete an account allocation
  # Permanently delete an account-allocation mapping for an account.
  # @param account_allocation_id UUID account_allocation_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_allocation_mapping_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_permission_using_delete
  # Delete an account permission
  # Delete an account permission
  # @param account_id account_id
  # @param [Hash] opts the optional parameters
  # @return [AccountPermissionVO]
  describe 'delete_account_permission_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_type_using_delete
  # Delete an account type
  # Permanently delete a possible account type defined for your firm.
  # @param account_type_id UUID account_type_id
  # @param account_type_id2 account_type_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_type_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_using_delete
  # Delete an account
  # Permanently delete an account under a client.
  # @param account_id UUID account_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_all_using_get
  # List all accounts
  # Get information for all accounts for all clients defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageAccount]
  describe 'get_account_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_allocation_mapping_all_using_get
  # List all account allocations
  # Get information for all account-allocation mappings for all accounts defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageAccountAllocationMapping]
  describe 'get_account_allocation_mapping_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_allocation_mapping_using_get
  # Retrieve an account allocation
  # Retrieve the information for a specific account-allocation mapping for an account.
  # @param account_allocation_id UUID account_allocation_id
  # @param [Hash] opts the optional parameters
  # @return [AccountAllocationMapping]
  describe 'get_account_allocation_mapping_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_asset_size_agg_all_using_get
  # List all account asset sizes
  # Get a list of asset sizes by date for an account.
  # @param account_id Account Id
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :end_date end date
  # @option opts [BOOLEAN] :exclude_subledger exclude_subledger
  # @option opts [BOOLEAN] :get_latest true or false
  # @option opts [String] :sort_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
  # @option opts [Date] :start_date start date
  # @return [Array<AvailableDateDoubleVO>]
  describe 'get_account_asset_size_agg_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_asset_size_all_using_get
  # List all account asset sizes
  # Get information for all account asset sizes
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageVAccountAssetSize]
  describe 'get_account_asset_size_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_overview_using_get
  # List all Account overview
  # @param account_id UUID account_id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :order_by order_by
  # @return [AccountOverviewVO]
  describe 'get_account_overview_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_permission_using_get
  # Get an account permission
  # Get an account permission
  # @param account_id account_id
  # @param [Hash] opts the optional parameters
  # @return [AccountPermissionVO]
  describe 'get_account_permission_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_type_all_using_get
  # List all account types
  # List all account types defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageAccountType]
  describe 'get_account_type_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_type_using_get
  # Get an Account Type
  # Get an account types defined for your firm.
  # @param account_type_id UUID account_type_id
  # @param account_type_id2 account_type_id
  # @param [Hash] opts the optional parameters
  # @return [AccountType]
  describe 'get_account_type_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_using_get
  # Retrieve an account
  # Retrieve the information for a specific account associated with a client.
  # @param account_id UUID account_id
  # @param [Hash] opts the optional parameters
  # @return [Account]
  describe 'get_account_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_account_permission_using_get
  # List all account permission
  # List all account permission
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageAccountPermissionVO]
  describe 'get_all_account_permission_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_holding_agg_all_using_get
  # List all account holdings
  # Get information for all the securities that are currently being held by an account.
  # @param account_id UUID account_id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :end_date end date 
  # @option opts [BOOLEAN] :get_latest true or false
  # @option opts [String] :start_date start date 
  # @return [Array<PortfolioHoldingAgg>]
  describe 'get_portfolio_holding_agg_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_transaction_agg_all_using_get
  # List all account transactions
  # Get the information for all transactions for an account.
  # @param account_id UUID account_id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [DateTime] :end_date end_date
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @option opts [DateTime] :start_date start_date
  # @return [PagePortfolioTransaction]
  describe 'get_portfolio_transaction_agg_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_account_and_related_permission_using_post
  # create an account permission
  # create an account permission
  # @param acl_client_permission_vo aclClientPermissionVO
  # @param [Hash] opts the optional parameters
  # @return [AccountPermissionVO]
  describe 'insert_account_and_related_permission_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for subscribe_account_using_post
  # Subscribe an account
  # After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
  # @param account_id UUID account_id
  # @param alloc_request allocRequest
  # @param [Hash] opts the optional parameters
  # @return [Array<Portfolio>]
  describe 'subscribe_account_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_allocation_mapping_using_put
  # Update an account allocation
  # Update the information for an account-allocation mapping.
  # @param account_allocation_id UUID account_allocation_id
  # @param [Hash] opts the optional parameters
  # @option opts [AccountAllocationMapping] :account_allocation_mapping account_allocation_mapping
  # @return [AccountAllocationMapping]
  describe 'update_account_allocation_mapping_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_type_using_put
  # Update an account type
  # Update the information for a possible account type defined for your firm.
  # @param account_type account_type
  # @param account_type_id UUID account_type_id
  # @param [Hash] opts the optional parameters
  # @return [AccountType]
  describe 'update_account_type_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_using_put
  # Update an account
  # Update the information for an account.
  # @param account account
  # @param account_id UUID account_id
  # @param [Hash] opts the optional parameters
  # @return [Account]
  describe 'update_account_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_client_account_permission_using_put
  # Update an account permission
  # Update an account permission
  # @param account_id account_id
  # @param acl_client_permission_vo aclClientPermissionVO
  # @param [Hash] opts the optional parameters
  # @return [AccountPermissionVO]
  describe 'update_client_account_permission_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
