=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.7.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'spec_helper'
require 'json'

# Unit tests for AtomApi::PerformanceApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PerformanceApi' do
  before do
    # run before each test
    @instance = AtomApi::PerformanceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PerformanceApi' do
    it 'should create an instance of PerformanceApi' do
      expect(@instance).to be_instance_of(AtomApi::PerformanceApi)
    end
  end

  # unit tests for get_account_performance_using_get
  # Account Performance
  # Get information on the performance of an account using IRR (Internal Rate of Return). You must provide the unique account_id.
  # @param account_id Account Id -/account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
  # @option opts [Date] :end_date end date
  # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
  # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
  # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
  # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
  # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
  # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
  # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
  # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
  # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
  # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
  # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
  # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
  # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
  # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
  # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
  # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
  # @option opts [Date] :start_date start date
  # @option opts [String] :stat A stat type - /statistics
  # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
  # @return [Object]
  describe 'get_account_performance_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_performance_using_get
  # Allocation Performance
  # Get information on the performance of an allocation using TWR (Time Weighted Return). You must provide the unique allocation_id.
  # @param allocation_id Allocation Id -/allocation
  # @param [Hash] opts the optional parameters
  # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :benchmark_id Tenant Benchmark Id -/benchmark
  # @option opts [Date] :end_date end date
  # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
  # @option opts [BOOLEAN] :is_current_weight is_current_weight
  # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
  # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
  # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
  # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
  # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
  # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
  # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
  # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
  # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
  # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
  # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
  # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
  # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
  # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
  # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
  # @option opts [Date] :start_date start date
  # @option opts [String] :stat A stat type found under the Statistics banner
  # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
  # @return [Hash<String, Object>]
  describe 'get_allocation_performance_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_benchmark_performance_using_get
  # Benchmark Performance
  # Get information on the performance of a benchmark using TWR (Time Weighted Return). You must provide the unique benchmark_id.
  # @param benchmark_id Benchmark Id - /benchmark
  # @param [Hash] opts the optional parameters
  # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :comparison_benchmark_id comparison_benchmark_id
  # @option opts [Date] :end_date end date
  # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
  # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
  # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
  # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
  # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
  # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
  # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
  # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
  # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
  # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
  # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
  # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
  # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
  # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
  # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
  # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
  # @option opts [Date] :start_date start date
  # @option opts [String] :stat Stat type - /statistics endpoint
  # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
  # @return [Object]
  describe 'get_benchmark_performance_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_performance_using_get
  # Client Performance
  # Get information on the performance of a client using IRR (Internal Rate of Return). You must provide the unique client_id.
  # @param client_id Client Id -/client
  # @param [Hash] opts the optional parameters
  # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
  # @option opts [Date] :end_date end date
  # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
  # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
  # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
  # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
  # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
  # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
  # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
  # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
  # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
  # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
  # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
  # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
  # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
  # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
  # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
  # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
  # @option opts [Date] :start_date start date
  # @option opts [String] :stat A stat type -- /statistics
  # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
  # @return [Object]
  describe 'get_client_performance_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal_performance_using_get
  # Goal Performance
  # Get information on the performance of a goal using IRR (Internal Rate of Return). You must provide the unique goal_id.
  # @param client_id Client associated with the account - /client
  # @param goal_id Goal Id - /account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :benchmark_id Client Benchmark or Tenant Benchmark id -/benchmark
  # @option opts [Date] :end_date end date
  # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
  # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
  # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
  # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
  # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
  # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
  # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
  # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
  # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
  # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
  # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
  # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
  # @option opts [BOOLEAN] :portfolio_goal portfolio_goal
  # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
  # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
  # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
  # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
  # @option opts [Date] :start_date start date
  # @option opts [String] :stat A stat type - /statistics
  # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
  # @return [Object]
  describe 'get_goal_performance_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_performance_using_get
  # Model Performance
  # Get information on the performance of a model using TWR (Time Weighted Return). You must provide the unique model_id.
  # @param model_id Model Id - /model
  # @param [Hash] opts the optional parameters
  # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :benchmark_id Tenant Benchmark Id -/benchmark
  # @option opts [Date] :end_date end date
  # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
  # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
  # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
  # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
  # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
  # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
  # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
  # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
  # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
  # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
  # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
  # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
  # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
  # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
  # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
  # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
  # @option opts [Date] :start_date start date
  # @option opts [String] :stat Stat Type
  # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
  # @return [Object]
  describe 'get_model_performance_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_performance_using_get
  # Portfolio Performance
  # Get information on the performance of a portfolio using IRR (Internal Rate of Return). You must provide the unique portfolio_id.
  # @param account_id Account Id -/account
  # @param client_id Client Id -/client
  # @param portfolio_id portfolio_id
  # @param portfolioid Portfolio Id -/portoflio
  # @param [Hash] opts the optional parameters
  # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :benchmark_id Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark
  # @option opts [Date] :end_date end date
  # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
  # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
  # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
  # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
  # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
  # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
  # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
  # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
  # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
  # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
  # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
  # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
  # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
  # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
  # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
  # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
  # @option opts [Date] :start_date start date
  # @option opts [String] :stat A stat type - /statistics endpoint to get types
  # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
  # @return [Object]
  describe 'get_portfolio_performance_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_security_performance_using_get
  # Security Performance
  # Get performance statistics for a security using TWR (Time Weighted Return). You must provide the unique security_id
  # @param security_id security_id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :active_premium_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :annualized_return_period Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
  # @option opts [String] :bench_ticker Bench Ticker for security - (default: ^GSPC) 
  # @option opts [String] :benchmark_id benchmark_id
  # @option opts [Date] :end_date Ending parameter for time window
  # @option opts [Float] :hist_factor Histogram factor- (statId: 39, default: 5)
  # @option opts [Float] :mar_down_side_deviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
  # @option opts [Float] :max_percentile_monte_carlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
  # @option opts [Float] :mean_percentile_monte_carlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
  # @option opts [Float] :min_percentile_monte_carlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
  # @option opts [Integer] :moving_average_n_day number of days for moving average n-day - (statId: 18, default: 7)
  # @option opts [Integer] :n_day_returns number of days for Rolling n-day returns - (statId: 2, default: 7)  
  # @option opts [Integer] :n_path_monte_carlo number of points for a simulation- (statId: 62, default: 100)
  # @option opts [Integer] :n_rolling_max_drawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
  # @option opts [Integer] :n_rolling_volatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
  # @option opts [Integer] :num_sim_monte_carlo number of simulations - (statId: 62, default: 1000) 
  # @option opts [String] :period_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
  # @option opts [Float] :risk_free_alpha risk free val alpha - (statId: 52, default: 0)
  # @option opts [Float] :risk_free_sharpe risk free val sharpe- (statId: 49, default: 0) 
  # @option opts [Float] :risk_free_sortino risk free val sortino - (statId: 56, default: 0)
  # @option opts [Float] :risk_free_treynor risk free val treynor- (statId: 51, default: 0) 
  # @option opts [Date] :start_date Starting parameter for time window
  # @option opts [String] :stat A stat type - /statistics endpoint
  # @option opts [String] :ticker Ticker for security
  # @option opts [Float] :var_conf_interval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
  # @return [Object]
  describe 'get_security_performance_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
