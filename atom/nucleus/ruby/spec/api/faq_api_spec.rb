=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.7.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'spec_helper'
require 'json'

# Unit tests for NucleusApi::FAQApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'FAQApi' do
  before do
    # run before each test
    @instance = NucleusApi::FAQApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FAQApi' do
    it 'should create an instance of FAQApi' do
      expect(@instance).to be_instance_of(NucleusApi::FAQApi)
    end
  end

  # unit tests for create_faq_using_post
  # Create a FAQ
  # Create a new FAQ
  # @param faq_request faqRequest
  # @param [Hash] opts the optional parameters
  # @return [Faq]
  describe 'create_faq_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_faq_using_delete
  # Delete a FAQ
  # Permanently delete a FAQ
  # @param faq_id UUID faq_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_faq_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_faq_all_using_get
  # List all FAQ
  # Get the information for all FAQ
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageFaq]
  describe 'get_faq_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_faq_using_get
  # Retrieve a FAQ
  # Retrieve the information for a FAQ
  # @param faq_id UUID faq_id
  # @param [Hash] opts the optional parameters
  # @return [Faq]
  describe 'get_faq_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_faq_using_put
  # Update a FAQ
  # Update the information for a FAQ
  # @param faq faq
  # @param faq_id UUID faq_id
  # @param [Hash] opts the optional parameters
  # @return [Faq]
  describe 'update_faq_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
