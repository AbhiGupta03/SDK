<?php
/**
 * InsuranceApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\nucleus\ApiException;
use com\hydrogen\nucleus\Configuration;
use com\hydrogen\nucleus\HeaderSelector;
use com\hydrogen\nucleus\ObjectSerializer;

/**
 * InsuranceApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InsuranceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createInsuranceCoverageUsingPost
     *
     * Create a insurance coverage request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insuranceCoverage (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceCoverage
     */
    public function createInsuranceCoverageUsingPost($insurance_coverage)
    {
        list($response) = $this->createInsuranceCoverageUsingPostWithHttpInfo($insurance_coverage);
        return $response;
    }

    /**
     * Operation createInsuranceCoverageUsingPostWithHttpInfo
     *
     * Create a insurance coverage request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insuranceCoverage (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceCoverage, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInsuranceCoverageUsingPostWithHttpInfo($insurance_coverage)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceCoverage';
        $request = $this->createInsuranceCoverageUsingPostRequest($insurance_coverage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceCoverage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInsuranceCoverageUsingPostAsync
     *
     * Create a insurance coverage request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insuranceCoverage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInsuranceCoverageUsingPostAsync($insurance_coverage)
    {
        return $this->createInsuranceCoverageUsingPostAsyncWithHttpInfo($insurance_coverage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInsuranceCoverageUsingPostAsyncWithHttpInfo
     *
     * Create a insurance coverage request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insuranceCoverage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInsuranceCoverageUsingPostAsyncWithHttpInfo($insurance_coverage)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceCoverage';
        $request = $this->createInsuranceCoverageUsingPostRequest($insurance_coverage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInsuranceCoverageUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insuranceCoverage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInsuranceCoverageUsingPostRequest($insurance_coverage)
    {
        // verify the required parameter 'insurance_coverage' is set
        if ($insurance_coverage === null || (is_array($insurance_coverage) && count($insurance_coverage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_coverage when calling createInsuranceCoverageUsingPost'
            );
        }

        $resourcePath = '/insurance_coverage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($insurance_coverage)) {
            $_tempBody = $insurance_coverage;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInsuranceDiscountUsingPost
     *
     * Create a insurance discount request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insuranceDiscount (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceDiscount
     */
    public function createInsuranceDiscountUsingPost($insurance_discount)
    {
        list($response) = $this->createInsuranceDiscountUsingPostWithHttpInfo($insurance_discount);
        return $response;
    }

    /**
     * Operation createInsuranceDiscountUsingPostWithHttpInfo
     *
     * Create a insurance discount request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insuranceDiscount (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceDiscount, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInsuranceDiscountUsingPostWithHttpInfo($insurance_discount)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceDiscount';
        $request = $this->createInsuranceDiscountUsingPostRequest($insurance_discount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceDiscount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInsuranceDiscountUsingPostAsync
     *
     * Create a insurance discount request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insuranceDiscount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInsuranceDiscountUsingPostAsync($insurance_discount)
    {
        return $this->createInsuranceDiscountUsingPostAsyncWithHttpInfo($insurance_discount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInsuranceDiscountUsingPostAsyncWithHttpInfo
     *
     * Create a insurance discount request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insuranceDiscount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInsuranceDiscountUsingPostAsyncWithHttpInfo($insurance_discount)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceDiscount';
        $request = $this->createInsuranceDiscountUsingPostRequest($insurance_discount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInsuranceDiscountUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insuranceDiscount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInsuranceDiscountUsingPostRequest($insurance_discount)
    {
        // verify the required parameter 'insurance_discount' is set
        if ($insurance_discount === null || (is_array($insurance_discount) && count($insurance_discount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_discount when calling createInsuranceDiscountUsingPost'
            );
        }

        $resourcePath = '/insurance_discount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($insurance_discount)) {
            $_tempBody = $insurance_discount;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInsuranceQuoteUsingPost
     *
     * Create a insuranceQuote request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insuranceQuote (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceQuote
     */
    public function createInsuranceQuoteUsingPost($insurance_quote)
    {
        list($response) = $this->createInsuranceQuoteUsingPostWithHttpInfo($insurance_quote);
        return $response;
    }

    /**
     * Operation createInsuranceQuoteUsingPostWithHttpInfo
     *
     * Create a insuranceQuote request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insuranceQuote (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInsuranceQuoteUsingPostWithHttpInfo($insurance_quote)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceQuote';
        $request = $this->createInsuranceQuoteUsingPostRequest($insurance_quote);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInsuranceQuoteUsingPostAsync
     *
     * Create a insuranceQuote request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insuranceQuote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInsuranceQuoteUsingPostAsync($insurance_quote)
    {
        return $this->createInsuranceQuoteUsingPostAsyncWithHttpInfo($insurance_quote)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInsuranceQuoteUsingPostAsyncWithHttpInfo
     *
     * Create a insuranceQuote request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insuranceQuote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInsuranceQuoteUsingPostAsyncWithHttpInfo($insurance_quote)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceQuote';
        $request = $this->createInsuranceQuoteUsingPostRequest($insurance_quote);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInsuranceQuoteUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insuranceQuote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInsuranceQuoteUsingPostRequest($insurance_quote)
    {
        // verify the required parameter 'insurance_quote' is set
        if ($insurance_quote === null || (is_array($insurance_quote) && count($insurance_quote) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_quote when calling createInsuranceQuoteUsingPost'
            );
        }

        $resourcePath = '/insurance_quote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($insurance_quote)) {
            $_tempBody = $insurance_quote;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInsuranceCoverageUsingDelete
     *
     * Delete an insurance coverage request
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInsuranceCoverageUsingDelete($insurance_coverage_id)
    {
        $this->deleteInsuranceCoverageUsingDeleteWithHttpInfo($insurance_coverage_id);
    }

    /**
     * Operation deleteInsuranceCoverageUsingDeleteWithHttpInfo
     *
     * Delete an insurance coverage request
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInsuranceCoverageUsingDeleteWithHttpInfo($insurance_coverage_id)
    {
        $returnType = '';
        $request = $this->deleteInsuranceCoverageUsingDeleteRequest($insurance_coverage_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInsuranceCoverageUsingDeleteAsync
     *
     * Delete an insurance coverage request
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInsuranceCoverageUsingDeleteAsync($insurance_coverage_id)
    {
        return $this->deleteInsuranceCoverageUsingDeleteAsyncWithHttpInfo($insurance_coverage_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInsuranceCoverageUsingDeleteAsyncWithHttpInfo
     *
     * Delete an insurance coverage request
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInsuranceCoverageUsingDeleteAsyncWithHttpInfo($insurance_coverage_id)
    {
        $returnType = '';
        $request = $this->deleteInsuranceCoverageUsingDeleteRequest($insurance_coverage_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInsuranceCoverageUsingDelete'
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInsuranceCoverageUsingDeleteRequest($insurance_coverage_id)
    {
        // verify the required parameter 'insurance_coverage_id' is set
        if ($insurance_coverage_id === null || (is_array($insurance_coverage_id) && count($insurance_coverage_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_coverage_id when calling deleteInsuranceCoverageUsingDelete'
            );
        }

        $resourcePath = '/insurance_coverage/{insurance_coverage_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_coverage_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_coverage_id' . '}',
                ObjectSerializer::toPathValue($insurance_coverage_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInsuranceDiscountUsingDelete
     *
     * Delete an insurance discount request
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInsuranceDiscountUsingDelete($insurance_discount_id)
    {
        $this->deleteInsuranceDiscountUsingDeleteWithHttpInfo($insurance_discount_id);
    }

    /**
     * Operation deleteInsuranceDiscountUsingDeleteWithHttpInfo
     *
     * Delete an insurance discount request
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInsuranceDiscountUsingDeleteWithHttpInfo($insurance_discount_id)
    {
        $returnType = '';
        $request = $this->deleteInsuranceDiscountUsingDeleteRequest($insurance_discount_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInsuranceDiscountUsingDeleteAsync
     *
     * Delete an insurance discount request
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInsuranceDiscountUsingDeleteAsync($insurance_discount_id)
    {
        return $this->deleteInsuranceDiscountUsingDeleteAsyncWithHttpInfo($insurance_discount_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInsuranceDiscountUsingDeleteAsyncWithHttpInfo
     *
     * Delete an insurance discount request
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInsuranceDiscountUsingDeleteAsyncWithHttpInfo($insurance_discount_id)
    {
        $returnType = '';
        $request = $this->deleteInsuranceDiscountUsingDeleteRequest($insurance_discount_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInsuranceDiscountUsingDelete'
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInsuranceDiscountUsingDeleteRequest($insurance_discount_id)
    {
        // verify the required parameter 'insurance_discount_id' is set
        if ($insurance_discount_id === null || (is_array($insurance_discount_id) && count($insurance_discount_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_discount_id when calling deleteInsuranceDiscountUsingDelete'
            );
        }

        $resourcePath = '/insurance_discount/{insurance_discount_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_discount_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_discount_id' . '}',
                ObjectSerializer::toPathValue($insurance_discount_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInsuranceQuoteUsingDelete
     *
     * Delete a insuranceQuote request
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInsuranceQuoteUsingDelete($insurance_quote, $insurance_quote_id)
    {
        $this->deleteInsuranceQuoteUsingDeleteWithHttpInfo($insurance_quote, $insurance_quote_id);
    }

    /**
     * Operation deleteInsuranceQuoteUsingDeleteWithHttpInfo
     *
     * Delete a insuranceQuote request
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInsuranceQuoteUsingDeleteWithHttpInfo($insurance_quote, $insurance_quote_id)
    {
        $returnType = '';
        $request = $this->deleteInsuranceQuoteUsingDeleteRequest($insurance_quote, $insurance_quote_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInsuranceQuoteUsingDeleteAsync
     *
     * Delete a insuranceQuote request
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInsuranceQuoteUsingDeleteAsync($insurance_quote, $insurance_quote_id)
    {
        return $this->deleteInsuranceQuoteUsingDeleteAsyncWithHttpInfo($insurance_quote, $insurance_quote_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInsuranceQuoteUsingDeleteAsyncWithHttpInfo
     *
     * Delete a insuranceQuote request
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInsuranceQuoteUsingDeleteAsyncWithHttpInfo($insurance_quote, $insurance_quote_id)
    {
        $returnType = '';
        $request = $this->deleteInsuranceQuoteUsingDeleteRequest($insurance_quote, $insurance_quote_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInsuranceQuoteUsingDelete'
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInsuranceQuoteUsingDeleteRequest($insurance_quote, $insurance_quote_id)
    {
        // verify the required parameter 'insurance_quote' is set
        if ($insurance_quote === null || (is_array($insurance_quote) && count($insurance_quote) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_quote when calling deleteInsuranceQuoteUsingDelete'
            );
        }
        // verify the required parameter 'insurance_quote_id' is set
        if ($insurance_quote_id === null || (is_array($insurance_quote_id) && count($insurance_quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_quote_id when calling deleteInsuranceQuoteUsingDelete'
            );
        }

        $resourcePath = '/insurance_quote/{insurance_quote_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_quote !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_quote' . '}',
                ObjectSerializer::toPathValue($insurance_quote),
                $resourcePath
            );
        }
        // path params
        if ($insurance_quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_quote_id' . '}',
                ObjectSerializer::toPathValue($insurance_quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInsuranceCoverageAllUsingGet
     *
     * Get all insurance coverage request
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageInsuranceCoverage_
     */
    public function getInsuranceCoverageAllUsingGet($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getInsuranceCoverageAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getInsuranceCoverageAllUsingGetWithHttpInfo
     *
     * Get all insurance coverage request
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageInsuranceCoverage_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInsuranceCoverageAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageInsuranceCoverage_';
        $request = $this->getInsuranceCoverageAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageInsuranceCoverage_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInsuranceCoverageAllUsingGetAsync
     *
     * Get all insurance coverage request
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceCoverageAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getInsuranceCoverageAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInsuranceCoverageAllUsingGetAsyncWithHttpInfo
     *
     * Get all insurance coverage request
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceCoverageAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageInsuranceCoverage_';
        $request = $this->getInsuranceCoverageAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInsuranceCoverageAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInsuranceCoverageAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/insurance_coverage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInsuranceCoverageUsingGet
     *
     * Get a insurance coverage request
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceCoverage
     */
    public function getInsuranceCoverageUsingGet($insurance_coverage_id)
    {
        list($response) = $this->getInsuranceCoverageUsingGetWithHttpInfo($insurance_coverage_id);
        return $response;
    }

    /**
     * Operation getInsuranceCoverageUsingGetWithHttpInfo
     *
     * Get a insurance coverage request
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceCoverage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInsuranceCoverageUsingGetWithHttpInfo($insurance_coverage_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceCoverage';
        $request = $this->getInsuranceCoverageUsingGetRequest($insurance_coverage_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceCoverage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInsuranceCoverageUsingGetAsync
     *
     * Get a insurance coverage request
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceCoverageUsingGetAsync($insurance_coverage_id)
    {
        return $this->getInsuranceCoverageUsingGetAsyncWithHttpInfo($insurance_coverage_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInsuranceCoverageUsingGetAsyncWithHttpInfo
     *
     * Get a insurance coverage request
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceCoverageUsingGetAsyncWithHttpInfo($insurance_coverage_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceCoverage';
        $request = $this->getInsuranceCoverageUsingGetRequest($insurance_coverage_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInsuranceCoverageUsingGet'
     *
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInsuranceCoverageUsingGetRequest($insurance_coverage_id)
    {
        // verify the required parameter 'insurance_coverage_id' is set
        if ($insurance_coverage_id === null || (is_array($insurance_coverage_id) && count($insurance_coverage_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_coverage_id when calling getInsuranceCoverageUsingGet'
            );
        }

        $resourcePath = '/insurance_coverage/{insurance_coverage_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_coverage_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_coverage_id' . '}',
                ObjectSerializer::toPathValue($insurance_coverage_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInsuranceDiscountAllUsingGet
     *
     * Get all insurance discount request
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageInsuranceDiscount_
     */
    public function getInsuranceDiscountAllUsingGet($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getInsuranceDiscountAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getInsuranceDiscountAllUsingGetWithHttpInfo
     *
     * Get all insurance discount request
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageInsuranceDiscount_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInsuranceDiscountAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageInsuranceDiscount_';
        $request = $this->getInsuranceDiscountAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageInsuranceDiscount_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInsuranceDiscountAllUsingGetAsync
     *
     * Get all insurance discount request
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceDiscountAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getInsuranceDiscountAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInsuranceDiscountAllUsingGetAsyncWithHttpInfo
     *
     * Get all insurance discount request
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceDiscountAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageInsuranceDiscount_';
        $request = $this->getInsuranceDiscountAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInsuranceDiscountAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInsuranceDiscountAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/insurance_discount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInsuranceDiscountUsingGet
     *
     * Get a insurance discount request
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceDiscount
     */
    public function getInsuranceDiscountUsingGet($insurance_discount_id)
    {
        list($response) = $this->getInsuranceDiscountUsingGetWithHttpInfo($insurance_discount_id);
        return $response;
    }

    /**
     * Operation getInsuranceDiscountUsingGetWithHttpInfo
     *
     * Get a insurance discount request
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceDiscount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInsuranceDiscountUsingGetWithHttpInfo($insurance_discount_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceDiscount';
        $request = $this->getInsuranceDiscountUsingGetRequest($insurance_discount_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceDiscount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInsuranceDiscountUsingGetAsync
     *
     * Get a insurance discount request
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceDiscountUsingGetAsync($insurance_discount_id)
    {
        return $this->getInsuranceDiscountUsingGetAsyncWithHttpInfo($insurance_discount_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInsuranceDiscountUsingGetAsyncWithHttpInfo
     *
     * Get a insurance discount request
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceDiscountUsingGetAsyncWithHttpInfo($insurance_discount_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceDiscount';
        $request = $this->getInsuranceDiscountUsingGetRequest($insurance_discount_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInsuranceDiscountUsingGet'
     *
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInsuranceDiscountUsingGetRequest($insurance_discount_id)
    {
        // verify the required parameter 'insurance_discount_id' is set
        if ($insurance_discount_id === null || (is_array($insurance_discount_id) && count($insurance_discount_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_discount_id when calling getInsuranceDiscountUsingGet'
            );
        }

        $resourcePath = '/insurance_discount/{insurance_discount_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_discount_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_discount_id' . '}',
                ObjectSerializer::toPathValue($insurance_discount_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInsuranceQuoteAllUsingGet
     *
     * List all insuranceQuote requests
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageInsuranceQuote_
     */
    public function getInsuranceQuoteAllUsingGet($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getInsuranceQuoteAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getInsuranceQuoteAllUsingGetWithHttpInfo
     *
     * List all insuranceQuote requests
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageInsuranceQuote_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInsuranceQuoteAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageInsuranceQuote_';
        $request = $this->getInsuranceQuoteAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageInsuranceQuote_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInsuranceQuoteAllUsingGetAsync
     *
     * List all insuranceQuote requests
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceQuoteAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getInsuranceQuoteAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInsuranceQuoteAllUsingGetAsyncWithHttpInfo
     *
     * List all insuranceQuote requests
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceQuoteAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageInsuranceQuote_';
        $request = $this->getInsuranceQuoteAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInsuranceQuoteAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInsuranceQuoteAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/insurance_quote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInsuranceQuoteUsingGet
     *
     * Retrieve a insuranceQuote request
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceQuote
     */
    public function getInsuranceQuoteUsingGet($insurance_quote, $insurance_quote_id)
    {
        list($response) = $this->getInsuranceQuoteUsingGetWithHttpInfo($insurance_quote, $insurance_quote_id);
        return $response;
    }

    /**
     * Operation getInsuranceQuoteUsingGetWithHttpInfo
     *
     * Retrieve a insuranceQuote request
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInsuranceQuoteUsingGetWithHttpInfo($insurance_quote, $insurance_quote_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceQuote';
        $request = $this->getInsuranceQuoteUsingGetRequest($insurance_quote, $insurance_quote_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInsuranceQuoteUsingGetAsync
     *
     * Retrieve a insuranceQuote request
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceQuoteUsingGetAsync($insurance_quote, $insurance_quote_id)
    {
        return $this->getInsuranceQuoteUsingGetAsyncWithHttpInfo($insurance_quote, $insurance_quote_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInsuranceQuoteUsingGetAsyncWithHttpInfo
     *
     * Retrieve a insuranceQuote request
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInsuranceQuoteUsingGetAsyncWithHttpInfo($insurance_quote, $insurance_quote_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceQuote';
        $request = $this->getInsuranceQuoteUsingGetRequest($insurance_quote, $insurance_quote_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInsuranceQuoteUsingGet'
     *
     * @param  string $insurance_quote UUID insurance_quote_id (required)
     * @param  string $insurance_quote_id insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInsuranceQuoteUsingGetRequest($insurance_quote, $insurance_quote_id)
    {
        // verify the required parameter 'insurance_quote' is set
        if ($insurance_quote === null || (is_array($insurance_quote) && count($insurance_quote) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_quote when calling getInsuranceQuoteUsingGet'
            );
        }
        // verify the required parameter 'insurance_quote_id' is set
        if ($insurance_quote_id === null || (is_array($insurance_quote_id) && count($insurance_quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_quote_id when calling getInsuranceQuoteUsingGet'
            );
        }

        $resourcePath = '/insurance_quote/{insurance_quote_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_quote !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_quote' . '}',
                ObjectSerializer::toPathValue($insurance_quote),
                $resourcePath
            );
        }
        // path params
        if ($insurance_quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_quote_id' . '}',
                ObjectSerializer::toPathValue($insurance_quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInsuranceCoverageUsingPut
     *
     * Update a insurance coverage request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insurance_coverage (required)
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceCoverage
     */
    public function updateInsuranceCoverageUsingPut($insurance_coverage, $insurance_coverage_id)
    {
        list($response) = $this->updateInsuranceCoverageUsingPutWithHttpInfo($insurance_coverage, $insurance_coverage_id);
        return $response;
    }

    /**
     * Operation updateInsuranceCoverageUsingPutWithHttpInfo
     *
     * Update a insurance coverage request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insurance_coverage (required)
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceCoverage, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInsuranceCoverageUsingPutWithHttpInfo($insurance_coverage, $insurance_coverage_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceCoverage';
        $request = $this->updateInsuranceCoverageUsingPutRequest($insurance_coverage, $insurance_coverage_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceCoverage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInsuranceCoverageUsingPutAsync
     *
     * Update a insurance coverage request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insurance_coverage (required)
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInsuranceCoverageUsingPutAsync($insurance_coverage, $insurance_coverage_id)
    {
        return $this->updateInsuranceCoverageUsingPutAsyncWithHttpInfo($insurance_coverage, $insurance_coverage_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInsuranceCoverageUsingPutAsyncWithHttpInfo
     *
     * Update a insurance coverage request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insurance_coverage (required)
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInsuranceCoverageUsingPutAsyncWithHttpInfo($insurance_coverage, $insurance_coverage_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceCoverage';
        $request = $this->updateInsuranceCoverageUsingPutRequest($insurance_coverage, $insurance_coverage_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInsuranceCoverageUsingPut'
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceCoverage $insurance_coverage insurance_coverage (required)
     * @param  string $insurance_coverage_id UUID insurance_coverage_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInsuranceCoverageUsingPutRequest($insurance_coverage, $insurance_coverage_id)
    {
        // verify the required parameter 'insurance_coverage' is set
        if ($insurance_coverage === null || (is_array($insurance_coverage) && count($insurance_coverage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_coverage when calling updateInsuranceCoverageUsingPut'
            );
        }
        // verify the required parameter 'insurance_coverage_id' is set
        if ($insurance_coverage_id === null || (is_array($insurance_coverage_id) && count($insurance_coverage_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_coverage_id when calling updateInsuranceCoverageUsingPut'
            );
        }

        $resourcePath = '/insurance_coverage/{insurance_coverage_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_coverage_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_coverage_id' . '}',
                ObjectSerializer::toPathValue($insurance_coverage_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($insurance_coverage)) {
            $_tempBody = $insurance_coverage;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInsuranceDiscountUsingPut
     *
     * Update an insurance discount
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insurance_discount (required)
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceDiscount
     */
    public function updateInsuranceDiscountUsingPut($insurance_discount, $insurance_discount_id)
    {
        list($response) = $this->updateInsuranceDiscountUsingPutWithHttpInfo($insurance_discount, $insurance_discount_id);
        return $response;
    }

    /**
     * Operation updateInsuranceDiscountUsingPutWithHttpInfo
     *
     * Update an insurance discount
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insurance_discount (required)
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceDiscount, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInsuranceDiscountUsingPutWithHttpInfo($insurance_discount, $insurance_discount_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceDiscount';
        $request = $this->updateInsuranceDiscountUsingPutRequest($insurance_discount, $insurance_discount_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceDiscount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInsuranceDiscountUsingPutAsync
     *
     * Update an insurance discount
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insurance_discount (required)
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInsuranceDiscountUsingPutAsync($insurance_discount, $insurance_discount_id)
    {
        return $this->updateInsuranceDiscountUsingPutAsyncWithHttpInfo($insurance_discount, $insurance_discount_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInsuranceDiscountUsingPutAsyncWithHttpInfo
     *
     * Update an insurance discount
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insurance_discount (required)
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInsuranceDiscountUsingPutAsyncWithHttpInfo($insurance_discount, $insurance_discount_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceDiscount';
        $request = $this->updateInsuranceDiscountUsingPutRequest($insurance_discount, $insurance_discount_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInsuranceDiscountUsingPut'
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceDiscount $insurance_discount insurance_discount (required)
     * @param  string $insurance_discount_id UUID insurance_discount_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInsuranceDiscountUsingPutRequest($insurance_discount, $insurance_discount_id)
    {
        // verify the required parameter 'insurance_discount' is set
        if ($insurance_discount === null || (is_array($insurance_discount) && count($insurance_discount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_discount when calling updateInsuranceDiscountUsingPut'
            );
        }
        // verify the required parameter 'insurance_discount_id' is set
        if ($insurance_discount_id === null || (is_array($insurance_discount_id) && count($insurance_discount_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_discount_id when calling updateInsuranceDiscountUsingPut'
            );
        }

        $resourcePath = '/insurance_discount/{insurance_discount_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_discount_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_discount_id' . '}',
                ObjectSerializer::toPathValue($insurance_discount_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($insurance_discount)) {
            $_tempBody = $insurance_discount;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInsuranceQuoteUsingPut
     *
     * Update a insuranceQuote request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insurance_quote (required)
     * @param  string $insurance_quote_id UUID insurance_quote_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\InsuranceQuote
     */
    public function updateInsuranceQuoteUsingPut($insurance_quote, $insurance_quote_id)
    {
        list($response) = $this->updateInsuranceQuoteUsingPutWithHttpInfo($insurance_quote, $insurance_quote_id);
        return $response;
    }

    /**
     * Operation updateInsuranceQuoteUsingPutWithHttpInfo
     *
     * Update a insuranceQuote request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insurance_quote (required)
     * @param  string $insurance_quote_id UUID insurance_quote_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\InsuranceQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInsuranceQuoteUsingPutWithHttpInfo($insurance_quote, $insurance_quote_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceQuote';
        $request = $this->updateInsuranceQuoteUsingPutRequest($insurance_quote, $insurance_quote_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\InsuranceQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInsuranceQuoteUsingPutAsync
     *
     * Update a insuranceQuote request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insurance_quote (required)
     * @param  string $insurance_quote_id UUID insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInsuranceQuoteUsingPutAsync($insurance_quote, $insurance_quote_id)
    {
        return $this->updateInsuranceQuoteUsingPutAsyncWithHttpInfo($insurance_quote, $insurance_quote_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInsuranceQuoteUsingPutAsyncWithHttpInfo
     *
     * Update a insuranceQuote request
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insurance_quote (required)
     * @param  string $insurance_quote_id UUID insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInsuranceQuoteUsingPutAsyncWithHttpInfo($insurance_quote, $insurance_quote_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\InsuranceQuote';
        $request = $this->updateInsuranceQuoteUsingPutRequest($insurance_quote, $insurance_quote_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInsuranceQuoteUsingPut'
     *
     * @param  \com\hydrogen\nucleus\Model\InsuranceQuote $insurance_quote insurance_quote (required)
     * @param  string $insurance_quote_id UUID insurance_quote_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInsuranceQuoteUsingPutRequest($insurance_quote, $insurance_quote_id)
    {
        // verify the required parameter 'insurance_quote' is set
        if ($insurance_quote === null || (is_array($insurance_quote) && count($insurance_quote) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_quote when calling updateInsuranceQuoteUsingPut'
            );
        }
        // verify the required parameter 'insurance_quote_id' is set
        if ($insurance_quote_id === null || (is_array($insurance_quote_id) && count($insurance_quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insurance_quote_id when calling updateInsuranceQuoteUsingPut'
            );
        }

        $resourcePath = '/insurance_quote/{insurance_quote_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($insurance_quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'insurance_quote_id' . '}',
                ObjectSerializer::toPathValue($insurance_quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($insurance_quote)) {
            $_tempBody = $insurance_quote;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
