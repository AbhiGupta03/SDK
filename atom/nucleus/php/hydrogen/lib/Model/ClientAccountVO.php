<?php
/**
 * ClientAccountVO
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\Model;

use \ArrayAccess;
use \com\hydrogen\ObjectSerializer;

/**
 * ClientAccountVO Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientAccountVO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientAccountVO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accounts' => '\com\hydrogen\Model\AccountVO[]',
        'client_asset_size' => 'double',
        'client_asset_size_date' => '\DateTime',
        'client_first_name' => 'string',
        'client_id' => 'string',
        'client_last_name' => 'string',
        'deposits' => '\com\hydrogen\Model\DepositAccountVO[]',
        'withdrawals' => '\com\hydrogen\Model\WithdrawalAccountVO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accounts' => null,
        'client_asset_size' => 'double',
        'client_asset_size_date' => 'date-time',
        'client_first_name' => null,
        'client_id' => 'uuid',
        'client_last_name' => null,
        'deposits' => null,
        'withdrawals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'client_asset_size' => 'client_asset_size',
        'client_asset_size_date' => 'client_asset_size_date',
        'client_first_name' => 'client_first_name',
        'client_id' => 'client_id',
        'client_last_name' => 'client_last_name',
        'deposits' => 'deposits',
        'withdrawals' => 'withdrawals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'client_asset_size' => 'setClientAssetSize',
        'client_asset_size_date' => 'setClientAssetSizeDate',
        'client_first_name' => 'setClientFirstName',
        'client_id' => 'setClientId',
        'client_last_name' => 'setClientLastName',
        'deposits' => 'setDeposits',
        'withdrawals' => 'setWithdrawals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'client_asset_size' => 'getClientAssetSize',
        'client_asset_size_date' => 'getClientAssetSizeDate',
        'client_first_name' => 'getClientFirstName',
        'client_id' => 'getClientId',
        'client_last_name' => 'getClientLastName',
        'deposits' => 'getDeposits',
        'withdrawals' => 'getWithdrawals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['client_asset_size'] = isset($data['client_asset_size']) ? $data['client_asset_size'] : null;
        $this->container['client_asset_size_date'] = isset($data['client_asset_size_date']) ? $data['client_asset_size_date'] : null;
        $this->container['client_first_name'] = isset($data['client_first_name']) ? $data['client_first_name'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_last_name'] = isset($data['client_last_name']) ? $data['client_last_name'] : null;
        $this->container['deposits'] = isset($data['deposits']) ? $data['deposits'] : null;
        $this->container['withdrawals'] = isset($data['withdrawals']) ? $data['withdrawals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return \com\hydrogen\Model\AccountVO[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \com\hydrogen\Model\AccountVO[] $accounts accounts
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets client_asset_size
     *
     * @return double
     */
    public function getClientAssetSize()
    {
        return $this->container['client_asset_size'];
    }

    /**
     * Sets client_asset_size
     *
     * @param double $client_asset_size client_asset_size
     *
     * @return $this
     */
    public function setClientAssetSize($client_asset_size)
    {
        $this->container['client_asset_size'] = $client_asset_size;

        return $this;
    }

    /**
     * Gets client_asset_size_date
     *
     * @return \DateTime
     */
    public function getClientAssetSizeDate()
    {
        return $this->container['client_asset_size_date'];
    }

    /**
     * Sets client_asset_size_date
     *
     * @param \DateTime $client_asset_size_date client_asset_size_date
     *
     * @return $this
     */
    public function setClientAssetSizeDate($client_asset_size_date)
    {
        $this->container['client_asset_size_date'] = $client_asset_size_date;

        return $this;
    }

    /**
     * Gets client_first_name
     *
     * @return string
     */
    public function getClientFirstName()
    {
        return $this->container['client_first_name'];
    }

    /**
     * Sets client_first_name
     *
     * @param string $client_first_name client_first_name
     *
     * @return $this
     */
    public function setClientFirstName($client_first_name)
    {
        $this->container['client_first_name'] = $client_first_name;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_last_name
     *
     * @return string
     */
    public function getClientLastName()
    {
        return $this->container['client_last_name'];
    }

    /**
     * Sets client_last_name
     *
     * @param string $client_last_name client_last_name
     *
     * @return $this
     */
    public function setClientLastName($client_last_name)
    {
        $this->container['client_last_name'] = $client_last_name;

        return $this;
    }

    /**
     * Gets deposits
     *
     * @return \com\hydrogen\Model\DepositAccountVO[]
     */
    public function getDeposits()
    {
        return $this->container['deposits'];
    }

    /**
     * Sets deposits
     *
     * @param \com\hydrogen\Model\DepositAccountVO[] $deposits deposits
     *
     * @return $this
     */
    public function setDeposits($deposits)
    {
        $this->container['deposits'] = $deposits;

        return $this;
    }

    /**
     * Gets withdrawals
     *
     * @return \com\hydrogen\Model\WithdrawalAccountVO[]
     */
    public function getWithdrawals()
    {
        return $this->container['withdrawals'];
    }

    /**
     * Sets withdrawals
     *
     * @param \com\hydrogen\Model\WithdrawalAccountVO[] $withdrawals withdrawals
     *
     * @return $this
     */
    public function setWithdrawals($withdrawals)
    {
        $this->container['withdrawals'] = $withdrawals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


