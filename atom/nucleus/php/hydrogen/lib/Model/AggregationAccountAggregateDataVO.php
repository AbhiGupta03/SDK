<?php
/**
 * AggregationAccountAggregateDataVO
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * AggregationAccountAggregateDataVO Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregationAccountAggregateDataVO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AggregationAccountAggregateDataVO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aggregation_account_balances' => '\com\hydrogen\nucleus\Model\AggregationAccountBalanceAggregateDataVO',
        'aggregation_account_details' => '\com\hydrogen\nucleus\Model\AggregationAccountDetailsAggregateDataVO',
        'aggregation_account_holdings' => '\com\hydrogen\nucleus\Model\AggregationAccountHoldingAggregateDataVO[]',
        'aggregation_account_id' => 'string',
        'aggregation_account_transactions' => '\com\hydrogen\nucleus\Model\AggregationAccountTransactionAggregateDataVO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aggregation_account_balances' => null,
        'aggregation_account_details' => null,
        'aggregation_account_holdings' => null,
        'aggregation_account_id' => 'uuid',
        'aggregation_account_transactions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregation_account_balances' => 'aggregation_account_balances',
        'aggregation_account_details' => 'aggregation_account_details',
        'aggregation_account_holdings' => 'aggregation_account_holdings',
        'aggregation_account_id' => 'aggregation_account_id',
        'aggregation_account_transactions' => 'aggregation_account_transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregation_account_balances' => 'setAggregationAccountBalances',
        'aggregation_account_details' => 'setAggregationAccountDetails',
        'aggregation_account_holdings' => 'setAggregationAccountHoldings',
        'aggregation_account_id' => 'setAggregationAccountId',
        'aggregation_account_transactions' => 'setAggregationAccountTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregation_account_balances' => 'getAggregationAccountBalances',
        'aggregation_account_details' => 'getAggregationAccountDetails',
        'aggregation_account_holdings' => 'getAggregationAccountHoldings',
        'aggregation_account_id' => 'getAggregationAccountId',
        'aggregation_account_transactions' => 'getAggregationAccountTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregation_account_balances'] = isset($data['aggregation_account_balances']) ? $data['aggregation_account_balances'] : null;
        $this->container['aggregation_account_details'] = isset($data['aggregation_account_details']) ? $data['aggregation_account_details'] : null;
        $this->container['aggregation_account_holdings'] = isset($data['aggregation_account_holdings']) ? $data['aggregation_account_holdings'] : null;
        $this->container['aggregation_account_id'] = isset($data['aggregation_account_id']) ? $data['aggregation_account_id'] : null;
        $this->container['aggregation_account_transactions'] = isset($data['aggregation_account_transactions']) ? $data['aggregation_account_transactions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregation_account_balances
     *
     * @return \com\hydrogen\nucleus\Model\AggregationAccountBalanceAggregateDataVO
     */
    public function getAggregationAccountBalances()
    {
        return $this->container['aggregation_account_balances'];
    }

    /**
     * Sets aggregation_account_balances
     *
     * @param \com\hydrogen\nucleus\Model\AggregationAccountBalanceAggregateDataVO $aggregation_account_balances aggregation_account_balances
     *
     * @return $this
     */
    public function setAggregationAccountBalances($aggregation_account_balances)
    {
        $this->container['aggregation_account_balances'] = $aggregation_account_balances;

        return $this;
    }

    /**
     * Gets aggregation_account_details
     *
     * @return \com\hydrogen\nucleus\Model\AggregationAccountDetailsAggregateDataVO
     */
    public function getAggregationAccountDetails()
    {
        return $this->container['aggregation_account_details'];
    }

    /**
     * Sets aggregation_account_details
     *
     * @param \com\hydrogen\nucleus\Model\AggregationAccountDetailsAggregateDataVO $aggregation_account_details aggregation_account_details
     *
     * @return $this
     */
    public function setAggregationAccountDetails($aggregation_account_details)
    {
        $this->container['aggregation_account_details'] = $aggregation_account_details;

        return $this;
    }

    /**
     * Gets aggregation_account_holdings
     *
     * @return \com\hydrogen\nucleus\Model\AggregationAccountHoldingAggregateDataVO[]
     */
    public function getAggregationAccountHoldings()
    {
        return $this->container['aggregation_account_holdings'];
    }

    /**
     * Sets aggregation_account_holdings
     *
     * @param \com\hydrogen\nucleus\Model\AggregationAccountHoldingAggregateDataVO[] $aggregation_account_holdings aggregation_account_holdings
     *
     * @return $this
     */
    public function setAggregationAccountHoldings($aggregation_account_holdings)
    {
        $this->container['aggregation_account_holdings'] = $aggregation_account_holdings;

        return $this;
    }

    /**
     * Gets aggregation_account_id
     *
     * @return string
     */
    public function getAggregationAccountId()
    {
        return $this->container['aggregation_account_id'];
    }

    /**
     * Sets aggregation_account_id
     *
     * @param string $aggregation_account_id aggregation_account_id
     *
     * @return $this
     */
    public function setAggregationAccountId($aggregation_account_id)
    {
        $this->container['aggregation_account_id'] = $aggregation_account_id;

        return $this;
    }

    /**
     * Gets aggregation_account_transactions
     *
     * @return \com\hydrogen\nucleus\Model\AggregationAccountTransactionAggregateDataVO[]
     */
    public function getAggregationAccountTransactions()
    {
        return $this->container['aggregation_account_transactions'];
    }

    /**
     * Sets aggregation_account_transactions
     *
     * @param \com\hydrogen\nucleus\Model\AggregationAccountTransactionAggregateDataVO[] $aggregation_account_transactions aggregation_account_transactions
     *
     * @return $this
     */
    public function setAggregationAccountTransactions($aggregation_account_transactions)
    {
        $this->container['aggregation_account_transactions'] = $aggregation_account_transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


