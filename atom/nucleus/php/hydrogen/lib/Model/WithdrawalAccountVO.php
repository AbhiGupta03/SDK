<?php
/**
 * WithdrawalAccountVO
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\Model;

use \ArrayAccess;
use \com\hydrogen\ObjectSerializer;

/**
 * WithdrawalAccountVO Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WithdrawalAccountVO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WithdrawalAccountVO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'withdrawal_account_id' => 'string',
        'withdrawal_account_name' => 'string',
        'withdrawal_amount' => 'double',
        'withdrawal_date' => '\DateTime',
        'withdrawal_direction' => 'string',
        'withdrawal_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'withdrawal_account_id' => 'uuid',
        'withdrawal_account_name' => null,
        'withdrawal_amount' => 'double',
        'withdrawal_date' => 'date-time',
        'withdrawal_direction' => null,
        'withdrawal_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'withdrawal_account_id' => 'withdrawal_account_id',
        'withdrawal_account_name' => 'withdrawal_account_name',
        'withdrawal_amount' => 'withdrawal_amount',
        'withdrawal_date' => 'withdrawal_date',
        'withdrawal_direction' => 'withdrawal_direction',
        'withdrawal_id' => 'withdrawal_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'withdrawal_account_id' => 'setWithdrawalAccountId',
        'withdrawal_account_name' => 'setWithdrawalAccountName',
        'withdrawal_amount' => 'setWithdrawalAmount',
        'withdrawal_date' => 'setWithdrawalDate',
        'withdrawal_direction' => 'setWithdrawalDirection',
        'withdrawal_id' => 'setWithdrawalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'withdrawal_account_id' => 'getWithdrawalAccountId',
        'withdrawal_account_name' => 'getWithdrawalAccountName',
        'withdrawal_amount' => 'getWithdrawalAmount',
        'withdrawal_date' => 'getWithdrawalDate',
        'withdrawal_direction' => 'getWithdrawalDirection',
        'withdrawal_id' => 'getWithdrawalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['withdrawal_account_id'] = isset($data['withdrawal_account_id']) ? $data['withdrawal_account_id'] : null;
        $this->container['withdrawal_account_name'] = isset($data['withdrawal_account_name']) ? $data['withdrawal_account_name'] : null;
        $this->container['withdrawal_amount'] = isset($data['withdrawal_amount']) ? $data['withdrawal_amount'] : null;
        $this->container['withdrawal_date'] = isset($data['withdrawal_date']) ? $data['withdrawal_date'] : null;
        $this->container['withdrawal_direction'] = isset($data['withdrawal_direction']) ? $data['withdrawal_direction'] : null;
        $this->container['withdrawal_id'] = isset($data['withdrawal_id']) ? $data['withdrawal_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets withdrawal_account_id
     *
     * @return string
     */
    public function getWithdrawalAccountId()
    {
        return $this->container['withdrawal_account_id'];
    }

    /**
     * Sets withdrawal_account_id
     *
     * @param string $withdrawal_account_id withdrawal_account_id
     *
     * @return $this
     */
    public function setWithdrawalAccountId($withdrawal_account_id)
    {
        $this->container['withdrawal_account_id'] = $withdrawal_account_id;

        return $this;
    }

    /**
     * Gets withdrawal_account_name
     *
     * @return string
     */
    public function getWithdrawalAccountName()
    {
        return $this->container['withdrawal_account_name'];
    }

    /**
     * Sets withdrawal_account_name
     *
     * @param string $withdrawal_account_name withdrawal_account_name
     *
     * @return $this
     */
    public function setWithdrawalAccountName($withdrawal_account_name)
    {
        $this->container['withdrawal_account_name'] = $withdrawal_account_name;

        return $this;
    }

    /**
     * Gets withdrawal_amount
     *
     * @return double
     */
    public function getWithdrawalAmount()
    {
        return $this->container['withdrawal_amount'];
    }

    /**
     * Sets withdrawal_amount
     *
     * @param double $withdrawal_amount withdrawal_amount
     *
     * @return $this
     */
    public function setWithdrawalAmount($withdrawal_amount)
    {
        $this->container['withdrawal_amount'] = $withdrawal_amount;

        return $this;
    }

    /**
     * Gets withdrawal_date
     *
     * @return \DateTime
     */
    public function getWithdrawalDate()
    {
        return $this->container['withdrawal_date'];
    }

    /**
     * Sets withdrawal_date
     *
     * @param \DateTime $withdrawal_date withdrawal_date
     *
     * @return $this
     */
    public function setWithdrawalDate($withdrawal_date)
    {
        $this->container['withdrawal_date'] = $withdrawal_date;

        return $this;
    }

    /**
     * Gets withdrawal_direction
     *
     * @return string
     */
    public function getWithdrawalDirection()
    {
        return $this->container['withdrawal_direction'];
    }

    /**
     * Sets withdrawal_direction
     *
     * @param string $withdrawal_direction withdrawal_direction
     *
     * @return $this
     */
    public function setWithdrawalDirection($withdrawal_direction)
    {
        $this->container['withdrawal_direction'] = $withdrawal_direction;

        return $this;
    }

    /**
     * Gets withdrawal_id
     *
     * @return string
     */
    public function getWithdrawalId()
    {
        return $this->container['withdrawal_id'];
    }

    /**
     * Sets withdrawal_id
     *
     * @param string $withdrawal_id withdrawal_id
     *
     * @return $this
     */
    public function setWithdrawalId($withdrawal_id)
    {
        $this->container['withdrawal_id'] = $withdrawal_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


