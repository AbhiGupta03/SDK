<?php
/**
 * ModelHoldingAgg
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * ModelHoldingAgg Class Doc Comment
 *
 * @category Class
 * @description ModelHoldingAgg Object
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelHoldingAgg implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModelHoldingAgg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'asset_class' => 'string',
        'current_weight' => 'double',
        'securities_id' => 'int',
        'strategic_weight' => 'double',
        'ticker' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'asset_class' => null,
        'current_weight' => 'double',
        'securities_id' => 'int64',
        'strategic_weight' => 'double',
        'ticker' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset_class' => 'asset_class',
        'current_weight' => 'current_weight',
        'securities_id' => 'securities_id',
        'strategic_weight' => 'strategic_weight',
        'ticker' => 'ticker'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset_class' => 'setAssetClass',
        'current_weight' => 'setCurrentWeight',
        'securities_id' => 'setSecuritiesId',
        'strategic_weight' => 'setStrategicWeight',
        'ticker' => 'setTicker'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset_class' => 'getAssetClass',
        'current_weight' => 'getCurrentWeight',
        'securities_id' => 'getSecuritiesId',
        'strategic_weight' => 'getStrategicWeight',
        'ticker' => 'getTicker'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asset_class'] = isset($data['asset_class']) ? $data['asset_class'] : null;
        $this->container['current_weight'] = isset($data['current_weight']) ? $data['current_weight'] : null;
        $this->container['securities_id'] = isset($data['securities_id']) ? $data['securities_id'] : null;
        $this->container['strategic_weight'] = isset($data['strategic_weight']) ? $data['strategic_weight'] : null;
        $this->container['ticker'] = isset($data['ticker']) ? $data['ticker'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset_class
     *
     * @return string
     */
    public function getAssetClass()
    {
        return $this->container['asset_class'];
    }

    /**
     * Sets asset_class
     *
     * @param string $asset_class asset_class
     *
     * @return $this
     */
    public function setAssetClass($asset_class)
    {
        $this->container['asset_class'] = $asset_class;

        return $this;
    }

    /**
     * Gets current_weight
     *
     * @return double
     */
    public function getCurrentWeight()
    {
        return $this->container['current_weight'];
    }

    /**
     * Sets current_weight
     *
     * @param double $current_weight current_weight
     *
     * @return $this
     */
    public function setCurrentWeight($current_weight)
    {
        $this->container['current_weight'] = $current_weight;

        return $this;
    }

    /**
     * Gets securities_id
     *
     * @return int
     */
    public function getSecuritiesId()
    {
        return $this->container['securities_id'];
    }

    /**
     * Sets securities_id
     *
     * @param int $securities_id securities_id
     *
     * @return $this
     */
    public function setSecuritiesId($securities_id)
    {
        $this->container['securities_id'] = $securities_id;

        return $this;
    }

    /**
     * Gets strategic_weight
     *
     * @return double
     */
    public function getStrategicWeight()
    {
        return $this->container['strategic_weight'];
    }

    /**
     * Sets strategic_weight
     *
     * @param double $strategic_weight strategic_weight
     *
     * @return $this
     */
    public function setStrategicWeight($strategic_weight)
    {
        $this->container['strategic_weight'] = $strategic_weight;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string $ticker ticker
     *
     * @return $this
     */
    public function setTicker($ticker)
    {
        $this->container['ticker'] = $ticker;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


