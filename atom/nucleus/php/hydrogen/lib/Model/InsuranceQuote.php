<?php
/**
 * InsuranceQuote
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * InsuranceQuote Class Doc Comment
 *
 * @category Class
 * @description Insurance Quote Object
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InsuranceQuote implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InsuranceQuote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coverages' => '\com\hydrogen\nucleus\Model\InsuranceCoverageMap[]',
        'create_date' => '\DateTime',
        'currency_code' => 'string',
        'discounts' => '\com\hydrogen\nucleus\Model\InsuranceDiscountMap[]',
        'end_date' => '\DateTime',
        'id' => 'string',
        'is_active' => 'bool',
        'metadata' => 'map[string,string]',
        'node_map' => '\com\hydrogen\nucleus\Model\AllocationNodeMap[]',
        'premium' => 'double',
        'premium_duration' => 'double',
        'premium_frequency' => 'int',
        'premium_frequency_unit' => 'string',
        'secondary_id' => 'string',
        'start_date' => '\DateTime',
        'update_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coverages' => null,
        'create_date' => 'date-time',
        'currency_code' => null,
        'discounts' => null,
        'end_date' => 'date-time',
        'id' => 'uuid',
        'is_active' => null,
        'metadata' => null,
        'node_map' => null,
        'premium' => 'double',
        'premium_duration' => 'double',
        'premium_frequency' => 'int32',
        'premium_frequency_unit' => null,
        'secondary_id' => null,
        'start_date' => 'date-time',
        'update_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coverages' => 'coverages',
        'create_date' => 'create_date',
        'currency_code' => 'currency_code',
        'discounts' => 'discounts',
        'end_date' => 'end_date',
        'id' => 'id',
        'is_active' => 'is_active',
        'metadata' => 'metadata',
        'node_map' => 'node_map',
        'premium' => 'premium',
        'premium_duration' => 'premium_duration',
        'premium_frequency' => 'premium_frequency',
        'premium_frequency_unit' => 'premium_frequency_unit',
        'secondary_id' => 'secondary_id',
        'start_date' => 'start_date',
        'update_date' => 'update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coverages' => 'setCoverages',
        'create_date' => 'setCreateDate',
        'currency_code' => 'setCurrencyCode',
        'discounts' => 'setDiscounts',
        'end_date' => 'setEndDate',
        'id' => 'setId',
        'is_active' => 'setIsActive',
        'metadata' => 'setMetadata',
        'node_map' => 'setNodeMap',
        'premium' => 'setPremium',
        'premium_duration' => 'setPremiumDuration',
        'premium_frequency' => 'setPremiumFrequency',
        'premium_frequency_unit' => 'setPremiumFrequencyUnit',
        'secondary_id' => 'setSecondaryId',
        'start_date' => 'setStartDate',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coverages' => 'getCoverages',
        'create_date' => 'getCreateDate',
        'currency_code' => 'getCurrencyCode',
        'discounts' => 'getDiscounts',
        'end_date' => 'getEndDate',
        'id' => 'getId',
        'is_active' => 'getIsActive',
        'metadata' => 'getMetadata',
        'node_map' => 'getNodeMap',
        'premium' => 'getPremium',
        'premium_duration' => 'getPremiumDuration',
        'premium_frequency' => 'getPremiumFrequency',
        'premium_frequency_unit' => 'getPremiumFrequencyUnit',
        'secondary_id' => 'getSecondaryId',
        'start_date' => 'getStartDate',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coverages'] = isset($data['coverages']) ? $data['coverages'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['node_map'] = isset($data['node_map']) ? $data['node_map'] : null;
        $this->container['premium'] = isset($data['premium']) ? $data['premium'] : null;
        $this->container['premium_duration'] = isset($data['premium_duration']) ? $data['premium_duration'] : null;
        $this->container['premium_frequency'] = isset($data['premium_frequency']) ? $data['premium_frequency'] : null;
        $this->container['premium_frequency_unit'] = isset($data['premium_frequency_unit']) ? $data['premium_frequency_unit'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['premium'] === null) {
            $invalidProperties[] = "'premium' can't be null";
        }
        if ($this->container['premium_frequency_unit'] === null) {
            $invalidProperties[] = "'premium_frequency_unit' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coverages
     *
     * @return \com\hydrogen\nucleus\Model\InsuranceCoverageMap[]
     */
    public function getCoverages()
    {
        return $this->container['coverages'];
    }

    /**
     * Sets coverages
     *
     * @param \com\hydrogen\nucleus\Model\InsuranceCoverageMap[] $coverages coverages
     *
     * @return $this
     */
    public function setCoverages($coverages)
    {
        $this->container['coverages'] = $coverages;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \com\hydrogen\nucleus\Model\InsuranceDiscountMap[]
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \com\hydrogen\nucleus\Model\InsuranceDiscountMap[] $discounts discounts
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets node_map
     *
     * @return \com\hydrogen\nucleus\Model\AllocationNodeMap[]
     */
    public function getNodeMap()
    {
        return $this->container['node_map'];
    }

    /**
     * Sets node_map
     *
     * @param \com\hydrogen\nucleus\Model\AllocationNodeMap[] $node_map node_map
     *
     * @return $this
     */
    public function setNodeMap($node_map)
    {
        $this->container['node_map'] = $node_map;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return double
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param double $premium premium
     *
     * @return $this
     */
    public function setPremium($premium)
    {
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets premium_duration
     *
     * @return double
     */
    public function getPremiumDuration()
    {
        return $this->container['premium_duration'];
    }

    /**
     * Sets premium_duration
     *
     * @param double $premium_duration premiumDuration
     *
     * @return $this
     */
    public function setPremiumDuration($premium_duration)
    {
        $this->container['premium_duration'] = $premium_duration;

        return $this;
    }

    /**
     * Gets premium_frequency
     *
     * @return int
     */
    public function getPremiumFrequency()
    {
        return $this->container['premium_frequency'];
    }

    /**
     * Sets premium_frequency
     *
     * @param int $premium_frequency premiumFrequency
     *
     * @return $this
     */
    public function setPremiumFrequency($premium_frequency)
    {
        $this->container['premium_frequency'] = $premium_frequency;

        return $this;
    }

    /**
     * Gets premium_frequency_unit
     *
     * @return string
     */
    public function getPremiumFrequencyUnit()
    {
        return $this->container['premium_frequency_unit'];
    }

    /**
     * Sets premium_frequency_unit
     *
     * @param string $premium_frequency_unit premiumFrequencyUnit
     *
     * @return $this
     */
    public function setPremiumFrequencyUnit($premium_frequency_unit)
    {
        $this->container['premium_frequency_unit'] = $premium_frequency_unit;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


