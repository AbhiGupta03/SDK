<?php
/**
 * AccountVO
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * AccountVO Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountVO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountVO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_asset_size' => 'double',
        'account_asset_size_date' => '\DateTime',
        'account_created_date' => '\DateTime',
        'account_id' => 'string',
        'account_name' => 'string',
        'account_secondary_id' => 'string',
        'account_type' => 'string',
        'account_updated_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_asset_size' => 'double',
        'account_asset_size_date' => 'date-time',
        'account_created_date' => 'date-time',
        'account_id' => 'uuid',
        'account_name' => null,
        'account_secondary_id' => null,
        'account_type' => null,
        'account_updated_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_asset_size' => 'account_asset_size',
        'account_asset_size_date' => 'account_asset_size_date',
        'account_created_date' => 'account_created_date',
        'account_id' => 'account_id',
        'account_name' => 'account_name',
        'account_secondary_id' => 'account_secondary_id',
        'account_type' => 'account_type',
        'account_updated_date' => 'account_updated_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_asset_size' => 'setAccountAssetSize',
        'account_asset_size_date' => 'setAccountAssetSizeDate',
        'account_created_date' => 'setAccountCreatedDate',
        'account_id' => 'setAccountId',
        'account_name' => 'setAccountName',
        'account_secondary_id' => 'setAccountSecondaryId',
        'account_type' => 'setAccountType',
        'account_updated_date' => 'setAccountUpdatedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_asset_size' => 'getAccountAssetSize',
        'account_asset_size_date' => 'getAccountAssetSizeDate',
        'account_created_date' => 'getAccountCreatedDate',
        'account_id' => 'getAccountId',
        'account_name' => 'getAccountName',
        'account_secondary_id' => 'getAccountSecondaryId',
        'account_type' => 'getAccountType',
        'account_updated_date' => 'getAccountUpdatedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_asset_size'] = isset($data['account_asset_size']) ? $data['account_asset_size'] : null;
        $this->container['account_asset_size_date'] = isset($data['account_asset_size_date']) ? $data['account_asset_size_date'] : null;
        $this->container['account_created_date'] = isset($data['account_created_date']) ? $data['account_created_date'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['account_secondary_id'] = isset($data['account_secondary_id']) ? $data['account_secondary_id'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['account_updated_date'] = isset($data['account_updated_date']) ? $data['account_updated_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_asset_size
     *
     * @return double
     */
    public function getAccountAssetSize()
    {
        return $this->container['account_asset_size'];
    }

    /**
     * Sets account_asset_size
     *
     * @param double $account_asset_size account_asset_size
     *
     * @return $this
     */
    public function setAccountAssetSize($account_asset_size)
    {
        $this->container['account_asset_size'] = $account_asset_size;

        return $this;
    }

    /**
     * Gets account_asset_size_date
     *
     * @return \DateTime
     */
    public function getAccountAssetSizeDate()
    {
        return $this->container['account_asset_size_date'];
    }

    /**
     * Sets account_asset_size_date
     *
     * @param \DateTime $account_asset_size_date account_asset_size_date
     *
     * @return $this
     */
    public function setAccountAssetSizeDate($account_asset_size_date)
    {
        $this->container['account_asset_size_date'] = $account_asset_size_date;

        return $this;
    }

    /**
     * Gets account_created_date
     *
     * @return \DateTime
     */
    public function getAccountCreatedDate()
    {
        return $this->container['account_created_date'];
    }

    /**
     * Sets account_created_date
     *
     * @param \DateTime $account_created_date account_created_date
     *
     * @return $this
     */
    public function setAccountCreatedDate($account_created_date)
    {
        $this->container['account_created_date'] = $account_created_date;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_secondary_id
     *
     * @return string
     */
    public function getAccountSecondaryId()
    {
        return $this->container['account_secondary_id'];
    }

    /**
     * Sets account_secondary_id
     *
     * @param string $account_secondary_id account_secondary_id
     *
     * @return $this
     */
    public function setAccountSecondaryId($account_secondary_id)
    {
        $this->container['account_secondary_id'] = $account_secondary_id;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type account_type
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets account_updated_date
     *
     * @return \DateTime
     */
    public function getAccountUpdatedDate()
    {
        return $this->container['account_updated_date'];
    }

    /**
     * Sets account_updated_date
     *
     * @param \DateTime $account_updated_date account_updated_date
     *
     * @return $this
     */
    public function setAccountUpdatedDate($account_updated_date)
    {
        $this->container['account_updated_date'] = $account_updated_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


