<?php
/**
 * Campaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\Model;

use \ArrayAccess;
use \com\hydrogen\ObjectSerializer;

/**
 * Campaign Class Doc Comment
 *
 * @category Class
 * @description Campaign Object
 * @package  com\hydrogen
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Campaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Campaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'campaign_category' => 'string',
        'campaign_plan_id' => 'string',
        'cookie_code' => 'string',
        'create_date' => '\DateTime',
        'description' => 'string',
        'end_date' => '\DateTime',
        'id' => 'string',
        'is_acquisition' => 'bool',
        'is_active' => 'bool',
        'landing_page' => 'string',
        'metadata' => 'map[string,string]',
        'rate' => 'double',
        'secondary_id' => 'string',
        'start_date' => '\DateTime',
        'title' => 'string',
        'update_date' => '\DateTime',
        'utm_campaign' => 'string',
        'utm_content' => 'string',
        'utm_medium' => 'string',
        'utm_source' => 'string',
        'utm_term' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'campaign_category' => null,
        'campaign_plan_id' => 'uuid',
        'cookie_code' => null,
        'create_date' => 'date-time',
        'description' => null,
        'end_date' => 'date-time',
        'id' => 'uuid',
        'is_acquisition' => null,
        'is_active' => null,
        'landing_page' => null,
        'metadata' => null,
        'rate' => 'double',
        'secondary_id' => null,
        'start_date' => 'date-time',
        'title' => null,
        'update_date' => 'date-time',
        'utm_campaign' => null,
        'utm_content' => null,
        'utm_medium' => null,
        'utm_source' => null,
        'utm_term' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_category' => 'campaign_category',
        'campaign_plan_id' => 'campaign_plan_id',
        'cookie_code' => 'cookie_code',
        'create_date' => 'create_date',
        'description' => 'description',
        'end_date' => 'end_date',
        'id' => 'id',
        'is_acquisition' => 'is_acquisition',
        'is_active' => 'is_active',
        'landing_page' => 'landing_page',
        'metadata' => 'metadata',
        'rate' => 'rate',
        'secondary_id' => 'secondary_id',
        'start_date' => 'start_date',
        'title' => 'title',
        'update_date' => 'update_date',
        'utm_campaign' => 'utm_campaign',
        'utm_content' => 'utm_content',
        'utm_medium' => 'utm_medium',
        'utm_source' => 'utm_source',
        'utm_term' => 'utm_term'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_category' => 'setCampaignCategory',
        'campaign_plan_id' => 'setCampaignPlanId',
        'cookie_code' => 'setCookieCode',
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'end_date' => 'setEndDate',
        'id' => 'setId',
        'is_acquisition' => 'setIsAcquisition',
        'is_active' => 'setIsActive',
        'landing_page' => 'setLandingPage',
        'metadata' => 'setMetadata',
        'rate' => 'setRate',
        'secondary_id' => 'setSecondaryId',
        'start_date' => 'setStartDate',
        'title' => 'setTitle',
        'update_date' => 'setUpdateDate',
        'utm_campaign' => 'setUtmCampaign',
        'utm_content' => 'setUtmContent',
        'utm_medium' => 'setUtmMedium',
        'utm_source' => 'setUtmSource',
        'utm_term' => 'setUtmTerm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_category' => 'getCampaignCategory',
        'campaign_plan_id' => 'getCampaignPlanId',
        'cookie_code' => 'getCookieCode',
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'end_date' => 'getEndDate',
        'id' => 'getId',
        'is_acquisition' => 'getIsAcquisition',
        'is_active' => 'getIsActive',
        'landing_page' => 'getLandingPage',
        'metadata' => 'getMetadata',
        'rate' => 'getRate',
        'secondary_id' => 'getSecondaryId',
        'start_date' => 'getStartDate',
        'title' => 'getTitle',
        'update_date' => 'getUpdateDate',
        'utm_campaign' => 'getUtmCampaign',
        'utm_content' => 'getUtmContent',
        'utm_medium' => 'getUtmMedium',
        'utm_source' => 'getUtmSource',
        'utm_term' => 'getUtmTerm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaign_category'] = isset($data['campaign_category']) ? $data['campaign_category'] : null;
        $this->container['campaign_plan_id'] = isset($data['campaign_plan_id']) ? $data['campaign_plan_id'] : null;
        $this->container['cookie_code'] = isset($data['cookie_code']) ? $data['cookie_code'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_acquisition'] = isset($data['is_acquisition']) ? $data['is_acquisition'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['landing_page'] = isset($data['landing_page']) ? $data['landing_page'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['utm_campaign'] = isset($data['utm_campaign']) ? $data['utm_campaign'] : null;
        $this->container['utm_content'] = isset($data['utm_content']) ? $data['utm_content'] : null;
        $this->container['utm_medium'] = isset($data['utm_medium']) ? $data['utm_medium'] : null;
        $this->container['utm_source'] = isset($data['utm_source']) ? $data['utm_source'] : null;
        $this->container['utm_term'] = isset($data['utm_term']) ? $data['utm_term'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_category
     *
     * @return string
     */
    public function getCampaignCategory()
    {
        return $this->container['campaign_category'];
    }

    /**
     * Sets campaign_category
     *
     * @param string $campaign_category campaign_category
     *
     * @return $this
     */
    public function setCampaignCategory($campaign_category)
    {
        $this->container['campaign_category'] = $campaign_category;

        return $this;
    }

    /**
     * Gets campaign_plan_id
     *
     * @return string
     */
    public function getCampaignPlanId()
    {
        return $this->container['campaign_plan_id'];
    }

    /**
     * Sets campaign_plan_id
     *
     * @param string $campaign_plan_id campaignPlanId
     *
     * @return $this
     */
    public function setCampaignPlanId($campaign_plan_id)
    {
        $this->container['campaign_plan_id'] = $campaign_plan_id;

        return $this;
    }

    /**
     * Gets cookie_code
     *
     * @return string
     */
    public function getCookieCode()
    {
        return $this->container['cookie_code'];
    }

    /**
     * Sets cookie_code
     *
     * @param string $cookie_code cookieCode
     *
     * @return $this
     */
    public function setCookieCode($cookie_code)
    {
        $this->container['cookie_code'] = $cookie_code;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date endDate
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_acquisition
     *
     * @return bool
     */
    public function getIsAcquisition()
    {
        return $this->container['is_acquisition'];
    }

    /**
     * Sets is_acquisition
     *
     * @param bool $is_acquisition isAcquisition
     *
     * @return $this
     */
    public function setIsAcquisition($is_acquisition)
    {
        $this->container['is_acquisition'] = $is_acquisition;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active isActive
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets landing_page
     *
     * @return string
     */
    public function getLandingPage()
    {
        return $this->container['landing_page'];
    }

    /**
     * Sets landing_page
     *
     * @param string $landing_page landingPage
     *
     * @return $this
     */
    public function setLandingPage($landing_page)
    {
        $this->container['landing_page'] = $landing_page;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date startDate
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets utm_campaign
     *
     * @return string
     */
    public function getUtmCampaign()
    {
        return $this->container['utm_campaign'];
    }

    /**
     * Sets utm_campaign
     *
     * @param string $utm_campaign utmCampaign
     *
     * @return $this
     */
    public function setUtmCampaign($utm_campaign)
    {
        $this->container['utm_campaign'] = $utm_campaign;

        return $this;
    }

    /**
     * Gets utm_content
     *
     * @return string
     */
    public function getUtmContent()
    {
        return $this->container['utm_content'];
    }

    /**
     * Sets utm_content
     *
     * @param string $utm_content utmContent
     *
     * @return $this
     */
    public function setUtmContent($utm_content)
    {
        $this->container['utm_content'] = $utm_content;

        return $this;
    }

    /**
     * Gets utm_medium
     *
     * @return string
     */
    public function getUtmMedium()
    {
        return $this->container['utm_medium'];
    }

    /**
     * Sets utm_medium
     *
     * @param string $utm_medium utmMedium
     *
     * @return $this
     */
    public function setUtmMedium($utm_medium)
    {
        $this->container['utm_medium'] = $utm_medium;

        return $this;
    }

    /**
     * Gets utm_source
     *
     * @return string
     */
    public function getUtmSource()
    {
        return $this->container['utm_source'];
    }

    /**
     * Sets utm_source
     *
     * @param string $utm_source utmSource
     *
     * @return $this
     */
    public function setUtmSource($utm_source)
    {
        $this->container['utm_source'] = $utm_source;

        return $this;
    }

    /**
     * Gets utm_term
     *
     * @return string
     */
    public function getUtmTerm()
    {
        return $this->container['utm_term'];
    }

    /**
     * Sets utm_term
     *
     * @param string $utm_term utmTerm
     *
     * @return $this
     */
    public function setUtmTerm($utm_term)
    {
        $this->container['utm_term'] = $utm_term;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


