<?php
/**
 * AccountOverviewVO
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Atom API
 *
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\Model;

use \ArrayAccess;
use \com\hydrogen\ObjectSerializer;

/**
 * AccountOverviewVO Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountOverviewVO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountOverviewVO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_asset_size' => 'double',
        'account_asset_size_date' => '\DateTime',
        'account_holdings' => '\com\hydrogen\Model\AccountHoldingVO[]',
        'account_id' => 'string',
        'account_name' => 'string',
        'account_type_id' => 'string',
        'account_type_name' => 'string',
        'allocations' => '\com\hydrogen\Model\AllocationVO[]',
        'clients' => '\com\hydrogen\Model\AccountClientsOverviewVO[]',
        'deposits' => '\com\hydrogen\Model\DepositVO[]',
        'withdrawals' => '\com\hydrogen\Model\WithdrawalVO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_asset_size' => 'double',
        'account_asset_size_date' => 'date-time',
        'account_holdings' => null,
        'account_id' => 'uuid',
        'account_name' => null,
        'account_type_id' => 'uuid',
        'account_type_name' => null,
        'allocations' => null,
        'clients' => null,
        'deposits' => null,
        'withdrawals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_asset_size' => 'account_asset_size',
        'account_asset_size_date' => 'account_asset_size_date',
        'account_holdings' => 'account_holdings',
        'account_id' => 'account_id',
        'account_name' => 'account_name',
        'account_type_id' => 'account_type_id',
        'account_type_name' => 'account_type_name',
        'allocations' => 'allocations',
        'clients' => 'clients',
        'deposits' => 'deposits',
        'withdrawals' => 'withdrawals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_asset_size' => 'setAccountAssetSize',
        'account_asset_size_date' => 'setAccountAssetSizeDate',
        'account_holdings' => 'setAccountHoldings',
        'account_id' => 'setAccountId',
        'account_name' => 'setAccountName',
        'account_type_id' => 'setAccountTypeId',
        'account_type_name' => 'setAccountTypeName',
        'allocations' => 'setAllocations',
        'clients' => 'setClients',
        'deposits' => 'setDeposits',
        'withdrawals' => 'setWithdrawals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_asset_size' => 'getAccountAssetSize',
        'account_asset_size_date' => 'getAccountAssetSizeDate',
        'account_holdings' => 'getAccountHoldings',
        'account_id' => 'getAccountId',
        'account_name' => 'getAccountName',
        'account_type_id' => 'getAccountTypeId',
        'account_type_name' => 'getAccountTypeName',
        'allocations' => 'getAllocations',
        'clients' => 'getClients',
        'deposits' => 'getDeposits',
        'withdrawals' => 'getWithdrawals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_asset_size'] = isset($data['account_asset_size']) ? $data['account_asset_size'] : null;
        $this->container['account_asset_size_date'] = isset($data['account_asset_size_date']) ? $data['account_asset_size_date'] : null;
        $this->container['account_holdings'] = isset($data['account_holdings']) ? $data['account_holdings'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['account_type_id'] = isset($data['account_type_id']) ? $data['account_type_id'] : null;
        $this->container['account_type_name'] = isset($data['account_type_name']) ? $data['account_type_name'] : null;
        $this->container['allocations'] = isset($data['allocations']) ? $data['allocations'] : null;
        $this->container['clients'] = isset($data['clients']) ? $data['clients'] : null;
        $this->container['deposits'] = isset($data['deposits']) ? $data['deposits'] : null;
        $this->container['withdrawals'] = isset($data['withdrawals']) ? $data['withdrawals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_asset_size
     *
     * @return double
     */
    public function getAccountAssetSize()
    {
        return $this->container['account_asset_size'];
    }

    /**
     * Sets account_asset_size
     *
     * @param double $account_asset_size account_asset_size
     *
     * @return $this
     */
    public function setAccountAssetSize($account_asset_size)
    {
        $this->container['account_asset_size'] = $account_asset_size;

        return $this;
    }

    /**
     * Gets account_asset_size_date
     *
     * @return \DateTime
     */
    public function getAccountAssetSizeDate()
    {
        return $this->container['account_asset_size_date'];
    }

    /**
     * Sets account_asset_size_date
     *
     * @param \DateTime $account_asset_size_date account_asset_size_date
     *
     * @return $this
     */
    public function setAccountAssetSizeDate($account_asset_size_date)
    {
        $this->container['account_asset_size_date'] = $account_asset_size_date;

        return $this;
    }

    /**
     * Gets account_holdings
     *
     * @return \com\hydrogen\Model\AccountHoldingVO[]
     */
    public function getAccountHoldings()
    {
        return $this->container['account_holdings'];
    }

    /**
     * Sets account_holdings
     *
     * @param \com\hydrogen\Model\AccountHoldingVO[] $account_holdings account_holdings
     *
     * @return $this
     */
    public function setAccountHoldings($account_holdings)
    {
        $this->container['account_holdings'] = $account_holdings;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_type_id
     *
     * @return string
     */
    public function getAccountTypeId()
    {
        return $this->container['account_type_id'];
    }

    /**
     * Sets account_type_id
     *
     * @param string $account_type_id account_type_id
     *
     * @return $this
     */
    public function setAccountTypeId($account_type_id)
    {
        $this->container['account_type_id'] = $account_type_id;

        return $this;
    }

    /**
     * Gets account_type_name
     *
     * @return string
     */
    public function getAccountTypeName()
    {
        return $this->container['account_type_name'];
    }

    /**
     * Sets account_type_name
     *
     * @param string $account_type_name account_type_name
     *
     * @return $this
     */
    public function setAccountTypeName($account_type_name)
    {
        $this->container['account_type_name'] = $account_type_name;

        return $this;
    }

    /**
     * Gets allocations
     *
     * @return \com\hydrogen\Model\AllocationVO[]
     */
    public function getAllocations()
    {
        return $this->container['allocations'];
    }

    /**
     * Sets allocations
     *
     * @param \com\hydrogen\Model\AllocationVO[] $allocations allocations
     *
     * @return $this
     */
    public function setAllocations($allocations)
    {
        $this->container['allocations'] = $allocations;

        return $this;
    }

    /**
     * Gets clients
     *
     * @return \com\hydrogen\Model\AccountClientsOverviewVO[]
     */
    public function getClients()
    {
        return $this->container['clients'];
    }

    /**
     * Sets clients
     *
     * @param \com\hydrogen\Model\AccountClientsOverviewVO[] $clients clients
     *
     * @return $this
     */
    public function setClients($clients)
    {
        $this->container['clients'] = $clients;

        return $this;
    }

    /**
     * Gets deposits
     *
     * @return \com\hydrogen\Model\DepositVO[]
     */
    public function getDeposits()
    {
        return $this->container['deposits'];
    }

    /**
     * Sets deposits
     *
     * @param \com\hydrogen\Model\DepositVO[] $deposits deposits
     *
     * @return $this
     */
    public function setDeposits($deposits)
    {
        $this->container['deposits'] = $deposits;

        return $this;
    }

    /**
     * Gets withdrawals
     *
     * @return \com\hydrogen\Model\WithdrawalVO[]
     */
    public function getWithdrawals()
    {
        return $this->container['withdrawals'];
    }

    /**
     * Sets withdrawals
     *
     * @param \com\hydrogen\Model\WithdrawalVO[] $withdrawals withdrawals
     *
     * @return $this
     */
    public function setWithdrawals($withdrawals)
    {
        $this->container['withdrawals'] = $withdrawals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


