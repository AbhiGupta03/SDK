/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.api;

import com.hydrogen.ApiCallback;
import com.hydrogen.ApiClient;
import com.hydrogen.ApiException;
import com.hydrogen.Pair;
import com.hydrogen.ProgressResponseBody;
import com.hydrogen.model.AvailableDateDoubleVO;
import com.hydrogen.model.ClientHydro;
import com.hydrogen.model.PageClientHydro;
import com.hydrogen.ApiResponse;
import com.hydrogen.Configuration;
import com.hydrogen.ProgressRequestBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.model.AdvisorOverviewVO;
import com.hydrogen.model.Client;
import com.hydrogen.model.ClientAccountVO;
import com.hydrogen.model.ClientAnalyticsResponse;
import com.hydrogen.model.ClientStatus;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import com.hydrogen.model.PageClient;
import com.hydrogen.model.PageClientStatus;
import com.hydrogen.model.PagePortfolioTransaction;
import com.hydrogen.model.PortfolioHoldingAgg;
import java.util.UUID;
import com.hydrogen.model.VClientGoalViewData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientApi {
    private ApiClient apiClient;

    public ClientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createClientHydroUsingPost
     * @param clientHydro clientHydro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClientHydroUsingPostCall(ClientHydro clientHydro, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientHydro;

        // create path and map variables
        String localVarPath = "/client_hydro";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClientHydroUsingPostValidateBeforeCall(ClientHydro clientHydro, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientHydro' is set
        if (clientHydro == null) {
            throw new ApiException("Missing the required parameter 'clientHydro' when calling createClientHydroUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createClientHydroUsingPostCall(clientHydro, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a client-hydro relationship
     * Create an client-hydro relationship under a client.
     * @param clientHydro clientHydro (required)
     * @return ClientHydro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientHydro createClientHydroUsingPost(ClientHydro clientHydro) throws ApiException {
        ApiResponse<ClientHydro> resp = createClientHydroUsingPostWithHttpInfo(clientHydro);
        return resp.getData();
    }

    /**
     * Create a client-hydro relationship
     * Create an client-hydro relationship under a client.
     * @param clientHydro clientHydro (required)
     * @return ApiResponse&lt;ClientHydro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientHydro> createClientHydroUsingPostWithHttpInfo(ClientHydro clientHydro) throws ApiException {
        com.squareup.okhttp.Call call = createClientHydroUsingPostValidateBeforeCall(clientHydro, null, null);
        Type localVarReturnType = new TypeToken<ClientHydro>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a client-hydro relationship (asynchronously)
     * Create an client-hydro relationship under a client.
     * @param clientHydro clientHydro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClientHydroUsingPostAsync(ClientHydro clientHydro, final ApiCallback<ClientHydro> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClientHydroUsingPostValidateBeforeCall(clientHydro, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientHydro>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClientStatusUsingPost
     * @param clientStatusRequest clientStatusRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClientStatusUsingPostCall(ClientStatus clientStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientStatusRequest;

        // create path and map variables
        String localVarPath = "/client_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClientStatusUsingPostValidateBeforeCall(ClientStatus clientStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientStatusRequest' is set
        if (clientStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'clientStatusRequest' when calling createClientStatusUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createClientStatusUsingPostCall(clientStatusRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an client status
     * Create an client status record for an client.
     * @param clientStatusRequest clientStatusRequest (required)
     * @return ClientStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientStatus createClientStatusUsingPost(ClientStatus clientStatusRequest) throws ApiException {
        ApiResponse<ClientStatus> resp = createClientStatusUsingPostWithHttpInfo(clientStatusRequest);
        return resp.getData();
    }

    /**
     * Create an client status
     * Create an client status record for an client.
     * @param clientStatusRequest clientStatusRequest (required)
     * @return ApiResponse&lt;ClientStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientStatus> createClientStatusUsingPostWithHttpInfo(ClientStatus clientStatusRequest) throws ApiException {
        com.squareup.okhttp.Call call = createClientStatusUsingPostValidateBeforeCall(clientStatusRequest, null, null);
        Type localVarReturnType = new TypeToken<ClientStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an client status (asynchronously)
     * Create an client status record for an client.
     * @param clientStatusRequest clientStatusRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClientStatusUsingPostAsync(ClientStatus clientStatusRequest, final ApiCallback<ClientStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClientStatusUsingPostValidateBeforeCall(clientStatusRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClientUsingPost
     * @param clientRequest clientRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClientUsingPostCall(Client clientRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientRequest;

        // create path and map variables
        String localVarPath = "/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClientUsingPostValidateBeforeCall(Client clientRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientRequest' is set
        if (clientRequest == null) {
            throw new ApiException("Missing the required parameter 'clientRequest' when calling createClientUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createClientUsingPostCall(clientRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a client
     * Create a new client, or register a new user, with your firm.
     * @param clientRequest clientRequest (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Client createClientUsingPost(Client clientRequest) throws ApiException {
        ApiResponse<Client> resp = createClientUsingPostWithHttpInfo(clientRequest);
        return resp.getData();
    }

    /**
     * Create a client
     * Create a new client, or register a new user, with your firm.
     * @param clientRequest clientRequest (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Client> createClientUsingPostWithHttpInfo(Client clientRequest) throws ApiException {
        com.squareup.okhttp.Call call = createClientUsingPostValidateBeforeCall(clientRequest, null, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a client (asynchronously)
     * Create a new client, or register a new user, with your firm.
     * @param clientRequest clientRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClientUsingPostAsync(Client clientRequest, final ApiCallback<Client> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClientUsingPostValidateBeforeCall(clientRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteClientHydroUsingDelete
     * @param clientHydroId UUID client_hydro_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteClientHydroUsingDeleteCall(UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client_hydro/{client_hydro_id}"
            .replaceAll("\\{" + "client_hydro_id" + "\\}", apiClient.escapeString(clientHydroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClientHydroUsingDeleteValidateBeforeCall(UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientHydroId' is set
        if (clientHydroId == null) {
            throw new ApiException("Missing the required parameter 'clientHydroId' when calling deleteClientHydroUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClientHydroUsingDeleteCall(clientHydroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a client-hydro relationship
     * Permanently delete a client-hydro relationship for a Hydro ID and a client.
     * @param clientHydroId UUID client_hydro_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteClientHydroUsingDelete(UUID clientHydroId) throws ApiException {
        deleteClientHydroUsingDeleteWithHttpInfo(clientHydroId);
    }

    /**
     * Delete a client-hydro relationship
     * Permanently delete a client-hydro relationship for a Hydro ID and a client.
     * @param clientHydroId UUID client_hydro_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteClientHydroUsingDeleteWithHttpInfo(UUID clientHydroId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientHydroUsingDeleteValidateBeforeCall(clientHydroId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a client-hydro relationship (asynchronously)
     * Permanently delete a client-hydro relationship for a Hydro ID and a client.
     * @param clientHydroId UUID client_hydro_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClientHydroUsingDeleteAsync(UUID clientHydroId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientHydroUsingDeleteValidateBeforeCall(clientHydroId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteClientStatusUsingDelete
     * @param clientStatusId UUID client_status_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteClientStatusUsingDeleteCall(UUID clientStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client_status/{client_status_id}"
            .replaceAll("\\{" + "client_status_id" + "\\}", apiClient.escapeString(clientStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClientStatusUsingDeleteValidateBeforeCall(UUID clientStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientStatusId' is set
        if (clientStatusId == null) {
            throw new ApiException("Missing the required parameter 'clientStatusId' when calling deleteClientStatusUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClientStatusUsingDeleteCall(clientStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an client status
     * Permanently delete an client status record from an client’s history.
     * @param clientStatusId UUID client_status_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteClientStatusUsingDelete(UUID clientStatusId) throws ApiException {
        deleteClientStatusUsingDeleteWithHttpInfo(clientStatusId);
    }

    /**
     * Delete an client status
     * Permanently delete an client status record from an client’s history.
     * @param clientStatusId UUID client_status_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteClientStatusUsingDeleteWithHttpInfo(UUID clientStatusId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientStatusUsingDeleteValidateBeforeCall(clientStatusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an client status (asynchronously)
     * Permanently delete an client status record from an client’s history.
     * @param clientStatusId UUID client_status_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClientStatusUsingDeleteAsync(UUID clientStatusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientStatusUsingDeleteValidateBeforeCall(clientStatusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteClientUsingDelete
     * @param clientId UUID client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteClientUsingDeleteCall(UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClientUsingDeleteValidateBeforeCall(UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteClientUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClientUsingDeleteCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a client
     * Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
     * @param clientId UUID client_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteClientUsingDelete(UUID clientId) throws ApiException {
        deleteClientUsingDeleteWithHttpInfo(clientId);
    }

    /**
     * Delete a client
     * Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
     * @param clientId UUID client_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteClientUsingDeleteWithHttpInfo(UUID clientId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientUsingDeleteValidateBeforeCall(clientId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a client (asynchronously)
     * Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
     * @param clientId UUID client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClientUsingDeleteAsync(UUID clientId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientUsingDeleteValidateBeforeCall(clientId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getClientAccountOverviewUsingGet
     * @param clientId UUID client_id (required)
     * @param ascending ascending (optional, default to false)
     * @param orderBy order_by (optional, default to update_date)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientAccountOverviewUsingGetCall(UUID clientId, Boolean ascending, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}/account_overview"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientAccountOverviewUsingGetValidateBeforeCall(UUID clientId, Boolean ascending, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientAccountOverviewUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientAccountOverviewUsingGetCall(clientId, ascending, orderBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client Account overview
     * 
     * @param clientId UUID client_id (required)
     * @param ascending ascending (optional, default to false)
     * @param orderBy order_by (optional, default to update_date)
     * @return ClientAccountVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientAccountVO getClientAccountOverviewUsingGet(UUID clientId, Boolean ascending, String orderBy) throws ApiException {
        ApiResponse<ClientAccountVO> resp = getClientAccountOverviewUsingGetWithHttpInfo(clientId, ascending, orderBy);
        return resp.getData();
    }

    /**
     * List all client Account overview
     * 
     * @param clientId UUID client_id (required)
     * @param ascending ascending (optional, default to false)
     * @param orderBy order_by (optional, default to update_date)
     * @return ApiResponse&lt;ClientAccountVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientAccountVO> getClientAccountOverviewUsingGetWithHttpInfo(UUID clientId, Boolean ascending, String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = getClientAccountOverviewUsingGetValidateBeforeCall(clientId, ascending, orderBy, null, null);
        Type localVarReturnType = new TypeToken<ClientAccountVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client Account overview (asynchronously)
     * 
     * @param clientId UUID client_id (required)
     * @param ascending ascending (optional, default to false)
     * @param orderBy order_by (optional, default to update_date)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientAccountOverviewUsingGetAsync(UUID clientId, Boolean ascending, String orderBy, final ApiCallback<ClientAccountVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientAccountOverviewUsingGetValidateBeforeCall(clientId, ascending, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientAccountVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientAdvisorOverviewUsingGet
     * @param clientId UUID client_id (required)
     * @param showClients show_clients (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientAdvisorOverviewUsingGetCall(UUID clientId, Boolean showClients, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}/advisor_overview"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showClients != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_clients", showClients));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientAdvisorOverviewUsingGetValidateBeforeCall(UUID clientId, Boolean showClients, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientAdvisorOverviewUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientAdvisorOverviewUsingGetCall(clientId, showClients, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Advisor overview
     * 
     * @param clientId UUID client_id (required)
     * @param showClients show_clients (optional, default to false)
     * @return AdvisorOverviewVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdvisorOverviewVO getClientAdvisorOverviewUsingGet(UUID clientId, Boolean showClients) throws ApiException {
        ApiResponse<AdvisorOverviewVO> resp = getClientAdvisorOverviewUsingGetWithHttpInfo(clientId, showClients);
        return resp.getData();
    }

    /**
     * Advisor overview
     * 
     * @param clientId UUID client_id (required)
     * @param showClients show_clients (optional, default to false)
     * @return ApiResponse&lt;AdvisorOverviewVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdvisorOverviewVO> getClientAdvisorOverviewUsingGetWithHttpInfo(UUID clientId, Boolean showClients) throws ApiException {
        com.squareup.okhttp.Call call = getClientAdvisorOverviewUsingGetValidateBeforeCall(clientId, showClients, null, null);
        Type localVarReturnType = new TypeToken<AdvisorOverviewVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Advisor overview (asynchronously)
     * 
     * @param clientId UUID client_id (required)
     * @param showClients show_clients (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientAdvisorOverviewUsingGetAsync(UUID clientId, Boolean showClients, final ApiCallback<AdvisorOverviewVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientAdvisorOverviewUsingGetValidateBeforeCall(clientId, showClients, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdvisorOverviewVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClientAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all clients
     * Get details for all clients registered with your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageClient getClientAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageClient> resp = getClientAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all clients
     * Get details for all clients registered with your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageClient> getClientAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getClientAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageClient>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all clients (asynchronously)
     * Get details for all clients registered with your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageClient> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageClient>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientAssetSizeUsingGet
     * @param clientId UUID client_id (required)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger exclude_subledger (optional, default to false)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientAssetSizeUsingGetCall(UUID clientId, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}/asset_size"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (excludeSubledger != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_subledger", excludeSubledger));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (sortType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_type", sortType));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientAssetSizeUsingGetValidateBeforeCall(UUID clientId, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientAssetSizeUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientAssetSizeUsingGetCall(clientId, endDate, excludeSubledger, getLatest, sortType, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client asset sizes
     * Get a list of asset sizes per date for a client.
     * @param clientId UUID client_id (required)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger exclude_subledger (optional, default to false)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @return List&lt;AvailableDateDoubleVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AvailableDateDoubleVO> getClientAssetSizeUsingGet(UUID clientId, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate) throws ApiException {
        ApiResponse<List<AvailableDateDoubleVO>> resp = getClientAssetSizeUsingGetWithHttpInfo(clientId, endDate, excludeSubledger, getLatest, sortType, startDate);
        return resp.getData();
    }

    /**
     * List all client asset sizes
     * Get a list of asset sizes per date for a client.
     * @param clientId UUID client_id (required)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger exclude_subledger (optional, default to false)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @return ApiResponse&lt;List&lt;AvailableDateDoubleVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AvailableDateDoubleVO>> getClientAssetSizeUsingGetWithHttpInfo(UUID clientId, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getClientAssetSizeUsingGetValidateBeforeCall(clientId, endDate, excludeSubledger, getLatest, sortType, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client asset sizes (asynchronously)
     * Get a list of asset sizes per date for a client.
     * @param clientId UUID client_id (required)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger exclude_subledger (optional, default to false)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientAssetSizeUsingGetAsync(UUID clientId, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ApiCallback<List<AvailableDateDoubleVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientAssetSizeUsingGetValidateBeforeCall(clientId, endDate, excludeSubledger, getLatest, sortType, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientGoalOverviewUsingGet
     * @param clientId UUID client_id (required)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientGoalOverviewUsingGetCall(UUID clientId, Boolean portfolioGoal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}/goal_overview"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioGoal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_goal", portfolioGoal));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientGoalOverviewUsingGetValidateBeforeCall(UUID clientId, Boolean portfolioGoal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientGoalOverviewUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientGoalOverviewUsingGetCall(clientId, portfolioGoal, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client&#39;s goal details 
     * Retrieve client&#39;s goal details
     * @param clientId UUID client_id (required)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @return VClientGoalViewData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VClientGoalViewData getClientGoalOverviewUsingGet(UUID clientId, Boolean portfolioGoal) throws ApiException {
        ApiResponse<VClientGoalViewData> resp = getClientGoalOverviewUsingGetWithHttpInfo(clientId, portfolioGoal);
        return resp.getData();
    }

    /**
     * Retrieve client&#39;s goal details 
     * Retrieve client&#39;s goal details
     * @param clientId UUID client_id (required)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @return ApiResponse&lt;VClientGoalViewData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VClientGoalViewData> getClientGoalOverviewUsingGetWithHttpInfo(UUID clientId, Boolean portfolioGoal) throws ApiException {
        com.squareup.okhttp.Call call = getClientGoalOverviewUsingGetValidateBeforeCall(clientId, portfolioGoal, null, null);
        Type localVarReturnType = new TypeToken<VClientGoalViewData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client&#39;s goal details  (asynchronously)
     * Retrieve client&#39;s goal details
     * @param clientId UUID client_id (required)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientGoalOverviewUsingGetAsync(UUID clientId, Boolean portfolioGoal, final ApiCallback<VClientGoalViewData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientGoalOverviewUsingGetValidateBeforeCall(clientId, portfolioGoal, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VClientGoalViewData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientHoldingUsingGet
     * @param clientId UUID client_id (required)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param getLatest true or false (optional)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientHoldingUsingGetCall(UUID clientId, String endDate, Boolean getLatest, String startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}/holding"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientHoldingUsingGetValidateBeforeCall(UUID clientId, String endDate, Boolean getLatest, String startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientHoldingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientHoldingUsingGetCall(clientId, endDate, getLatest, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client holdings
     * Get the information for all the securities that are currently being held by a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param getLatest true or false (optional)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @return List&lt;PortfolioHoldingAgg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PortfolioHoldingAgg> getClientHoldingUsingGet(UUID clientId, String endDate, Boolean getLatest, String startDate) throws ApiException {
        ApiResponse<List<PortfolioHoldingAgg>> resp = getClientHoldingUsingGetWithHttpInfo(clientId, endDate, getLatest, startDate);
        return resp.getData();
    }

    /**
     * List all client holdings
     * Get the information for all the securities that are currently being held by a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param getLatest true or false (optional)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @return ApiResponse&lt;List&lt;PortfolioHoldingAgg&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PortfolioHoldingAgg>> getClientHoldingUsingGetWithHttpInfo(UUID clientId, String endDate, Boolean getLatest, String startDate) throws ApiException {
        com.squareup.okhttp.Call call = getClientHoldingUsingGetValidateBeforeCall(clientId, endDate, getLatest, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<PortfolioHoldingAgg>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client holdings (asynchronously)
     * Get the information for all the securities that are currently being held by a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param getLatest true or false (optional)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientHoldingUsingGetAsync(UUID clientId, String endDate, Boolean getLatest, String startDate, final ApiCallback<List<PortfolioHoldingAgg>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientHoldingUsingGetValidateBeforeCall(clientId, endDate, getLatest, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PortfolioHoldingAgg>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientHydroAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientHydroAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client_hydro";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientHydroAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClientHydroAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client-hydro relationship
     * Get information for all client-hydro relationships for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageClientHydro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageClientHydro getClientHydroAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageClientHydro> resp = getClientHydroAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all client-hydro relationship
     * Get information for all client-hydro relationships for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageClientHydro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageClientHydro> getClientHydroAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getClientHydroAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageClientHydro>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client-hydro relationship (asynchronously)
     * Get information for all client-hydro relationships for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientHydroAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageClientHydro> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientHydroAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageClientHydro>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientHydroUsingGet
     * @param clientHydroId UUID client_hydro_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientHydroUsingGetCall(UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client_hydro/{client_hydro_id}"
            .replaceAll("\\{" + "client_hydro_id" + "\\}", apiClient.escapeString(clientHydroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientHydroUsingGetValidateBeforeCall(UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientHydroId' is set
        if (clientHydroId == null) {
            throw new ApiException("Missing the required parameter 'clientHydroId' when calling getClientHydroUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientHydroUsingGetCall(clientHydroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a client-hydro relationship
     * Retrieve the information for a specific client-hydro relationship.
     * @param clientHydroId UUID client_hydro_id (required)
     * @return ClientHydro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientHydro getClientHydroUsingGet(UUID clientHydroId) throws ApiException {
        ApiResponse<ClientHydro> resp = getClientHydroUsingGetWithHttpInfo(clientHydroId);
        return resp.getData();
    }

    /**
     * Retrieve a client-hydro relationship
     * Retrieve the information for a specific client-hydro relationship.
     * @param clientHydroId UUID client_hydro_id (required)
     * @return ApiResponse&lt;ClientHydro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientHydro> getClientHydroUsingGetWithHttpInfo(UUID clientHydroId) throws ApiException {
        com.squareup.okhttp.Call call = getClientHydroUsingGetValidateBeforeCall(clientHydroId, null, null);
        Type localVarReturnType = new TypeToken<ClientHydro>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a client-hydro relationship (asynchronously)
     * Retrieve the information for a specific client-hydro relationship.
     * @param clientHydroId UUID client_hydro_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientHydroUsingGetAsync(UUID clientHydroId, final ApiCallback<ClientHydro> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientHydroUsingGetValidateBeforeCall(clientHydroId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientHydro>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientStatusAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientStatusAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientStatusAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClientStatusAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client statuses
     * Get the client status history information for all clients.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageClientStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageClientStatus getClientStatusAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageClientStatus> resp = getClientStatusAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all client statuses
     * Get the client status history information for all clients.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageClientStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageClientStatus> getClientStatusAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getClientStatusAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageClientStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client statuses (asynchronously)
     * Get the client status history information for all clients.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientStatusAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageClientStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientStatusAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageClientStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientStatusUsingGet
     * @param clientStatusId UUID client_status_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientStatusUsingGetCall(UUID clientStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client_status/{client_status_id}"
            .replaceAll("\\{" + "client_status_id" + "\\}", apiClient.escapeString(clientStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientStatusUsingGetValidateBeforeCall(UUID clientStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientStatusId' is set
        if (clientStatusId == null) {
            throw new ApiException("Missing the required parameter 'clientStatusId' when calling getClientStatusUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientStatusUsingGetCall(clientStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an client status
     * Retrieve the information for a specific client status record for an client.
     * @param clientStatusId UUID client_status_id (required)
     * @return ClientStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientStatus getClientStatusUsingGet(UUID clientStatusId) throws ApiException {
        ApiResponse<ClientStatus> resp = getClientStatusUsingGetWithHttpInfo(clientStatusId);
        return resp.getData();
    }

    /**
     * Retrieve an client status
     * Retrieve the information for a specific client status record for an client.
     * @param clientStatusId UUID client_status_id (required)
     * @return ApiResponse&lt;ClientStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientStatus> getClientStatusUsingGetWithHttpInfo(UUID clientStatusId) throws ApiException {
        com.squareup.okhttp.Call call = getClientStatusUsingGetValidateBeforeCall(clientStatusId, null, null);
        Type localVarReturnType = new TypeToken<ClientStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an client status (asynchronously)
     * Retrieve the information for a specific client status record for an client.
     * @param clientStatusId UUID client_status_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientStatusUsingGetAsync(UUID clientStatusId, final ApiCallback<ClientStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientStatusUsingGetValidateBeforeCall(clientStatusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientTransactionUsingGet
     * @param clientId UUID client_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end_date (optional, default to null)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start_date (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientTransactionUsingGetCall(UUID clientId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Integer size, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}/transaction"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientTransactionUsingGetValidateBeforeCall(UUID clientId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Integer size, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientTransactionUsingGetCall(clientId, ascending, endDate, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client transactions
     * Get the information for all transactions under a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end_date (optional, default to null)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start_date (optional, default to null)
     * @return PagePortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioTransaction getClientTransactionUsingGet(UUID clientId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Integer size, OffsetDateTime startDate) throws ApiException {
        ApiResponse<PagePortfolioTransaction> resp = getClientTransactionUsingGetWithHttpInfo(clientId, ascending, endDate, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all client transactions
     * Get the information for all transactions under a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end_date (optional, default to null)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start_date (optional, default to null)
     * @return ApiResponse&lt;PagePortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioTransaction> getClientTransactionUsingGetWithHttpInfo(UUID clientId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Integer size, OffsetDateTime startDate) throws ApiException {
        com.squareup.okhttp.Call call = getClientTransactionUsingGetValidateBeforeCall(clientId, ascending, endDate, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client transactions (asynchronously)
     * Get the information for all transactions under a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end_date (optional, default to null)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start_date (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientTransactionUsingGetAsync(UUID clientId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Integer size, OffsetDateTime startDate, final ApiCallback<PagePortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientTransactionUsingGetValidateBeforeCall(clientId, ascending, endDate, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientUsingGet
     * @param clientId UUID client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientUsingGetCall(UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientUsingGetValidateBeforeCall(UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientUsingGetCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a client
     * Retrieve the information for a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Client getClientUsingGet(UUID clientId) throws ApiException {
        ApiResponse<Client> resp = getClientUsingGetWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Retrieve a client
     * Retrieve the information for a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Client> getClientUsingGetWithHttpInfo(UUID clientId) throws ApiException {
        com.squareup.okhttp.Call call = getClientUsingGetValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a client (asynchronously)
     * Retrieve the information for a client registered with your firm.
     * @param clientId UUID client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientUsingGetAsync(UUID clientId, final ApiCallback<Client> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientUsingGetValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTotalClientsUsingGet
     * @param asOfDate as_of_date (optional, default to #{new java.util.Date()})
     * @param clientId client_id (optional)
     * @param endDate end_date (optional)
     * @param showHistory show_history (optional, default to false)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTotalClientsUsingGetCall(OffsetDateTime asOfDate, String clientId, OffsetDateTime endDate, Boolean showHistory, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/total_clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asOfDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("as_of_date", asOfDate));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (showHistory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_history", showHistory));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTotalClientsUsingGetValidateBeforeCall(OffsetDateTime asOfDate, String clientId, OffsetDateTime endDate, Boolean showHistory, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTotalClientsUsingGetCall(asOfDate, clientId, endDate, showHistory, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * total clients
     * 
     * @param asOfDate as_of_date (optional, default to #{new java.util.Date()})
     * @param clientId client_id (optional)
     * @param endDate end_date (optional)
     * @param showHistory show_history (optional, default to false)
     * @param startDate start_date (optional)
     * @return ClientAnalyticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientAnalyticsResponse getTotalClientsUsingGet(OffsetDateTime asOfDate, String clientId, OffsetDateTime endDate, Boolean showHistory, OffsetDateTime startDate) throws ApiException {
        ApiResponse<ClientAnalyticsResponse> resp = getTotalClientsUsingGetWithHttpInfo(asOfDate, clientId, endDate, showHistory, startDate);
        return resp.getData();
    }

    /**
     * total clients
     * 
     * @param asOfDate as_of_date (optional, default to #{new java.util.Date()})
     * @param clientId client_id (optional)
     * @param endDate end_date (optional)
     * @param showHistory show_history (optional, default to false)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;ClientAnalyticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientAnalyticsResponse> getTotalClientsUsingGetWithHttpInfo(OffsetDateTime asOfDate, String clientId, OffsetDateTime endDate, Boolean showHistory, OffsetDateTime startDate) throws ApiException {
        com.squareup.okhttp.Call call = getTotalClientsUsingGetValidateBeforeCall(asOfDate, clientId, endDate, showHistory, startDate, null, null);
        Type localVarReturnType = new TypeToken<ClientAnalyticsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * total clients (asynchronously)
     * 
     * @param asOfDate as_of_date (optional, default to #{new java.util.Date()})
     * @param clientId client_id (optional)
     * @param endDate end_date (optional)
     * @param showHistory show_history (optional, default to false)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTotalClientsUsingGetAsync(OffsetDateTime asOfDate, String clientId, OffsetDateTime endDate, Boolean showHistory, OffsetDateTime startDate, final ApiCallback<ClientAnalyticsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTotalClientsUsingGetValidateBeforeCall(asOfDate, clientId, endDate, showHistory, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientAnalyticsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientHydroUsingPut
     * @param clientHydro client_hydro (required)
     * @param clientHydroId UUID client_hydro_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClientHydroUsingPutCall(ClientHydro clientHydro, UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientHydro;

        // create path and map variables
        String localVarPath = "/client_hydro/{client_hydro_id}"
            .replaceAll("\\{" + "client_hydro_id" + "\\}", apiClient.escapeString(clientHydroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientHydroUsingPutValidateBeforeCall(ClientHydro clientHydro, UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientHydro' is set
        if (clientHydro == null) {
            throw new ApiException("Missing the required parameter 'clientHydro' when calling updateClientHydroUsingPut(Async)");
        }
        
        // verify the required parameter 'clientHydroId' is set
        if (clientHydroId == null) {
            throw new ApiException("Missing the required parameter 'clientHydroId' when calling updateClientHydroUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientHydroUsingPutCall(clientHydro, clientHydroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a client-hydro relationship
     * Update the information for a client-hydro relationship.
     * @param clientHydro client_hydro (required)
     * @param clientHydroId UUID client_hydro_id (required)
     * @return ClientHydro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientHydro updateClientHydroUsingPut(ClientHydro clientHydro, UUID clientHydroId) throws ApiException {
        ApiResponse<ClientHydro> resp = updateClientHydroUsingPutWithHttpInfo(clientHydro, clientHydroId);
        return resp.getData();
    }

    /**
     * Update a client-hydro relationship
     * Update the information for a client-hydro relationship.
     * @param clientHydro client_hydro (required)
     * @param clientHydroId UUID client_hydro_id (required)
     * @return ApiResponse&lt;ClientHydro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientHydro> updateClientHydroUsingPutWithHttpInfo(ClientHydro clientHydro, UUID clientHydroId) throws ApiException {
        com.squareup.okhttp.Call call = updateClientHydroUsingPutValidateBeforeCall(clientHydro, clientHydroId, null, null);
        Type localVarReturnType = new TypeToken<ClientHydro>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a client-hydro relationship (asynchronously)
     * Update the information for a client-hydro relationship.
     * @param clientHydro client_hydro (required)
     * @param clientHydroId UUID client_hydro_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientHydroUsingPutAsync(ClientHydro clientHydro, UUID clientHydroId, final ApiCallback<ClientHydro> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientHydroUsingPutValidateBeforeCall(clientHydro, clientHydroId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientHydro>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientStatusUsingPut
     * @param clientStatus client_status (required)
     * @param clientStatusId UUID client_status_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClientStatusUsingPutCall(ClientStatus clientStatus, UUID clientStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientStatus;

        // create path and map variables
        String localVarPath = "/client_status/{client_status_id}"
            .replaceAll("\\{" + "client_status_id" + "\\}", apiClient.escapeString(clientStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientStatusUsingPutValidateBeforeCall(ClientStatus clientStatus, UUID clientStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientStatus' is set
        if (clientStatus == null) {
            throw new ApiException("Missing the required parameter 'clientStatus' when calling updateClientStatusUsingPut(Async)");
        }
        
        // verify the required parameter 'clientStatusId' is set
        if (clientStatusId == null) {
            throw new ApiException("Missing the required parameter 'clientStatusId' when calling updateClientStatusUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientStatusUsingPutCall(clientStatus, clientStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an client status
     * Update an client status record for an client.
     * @param clientStatus client_status (required)
     * @param clientStatusId UUID client_status_id (required)
     * @return ClientStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientStatus updateClientStatusUsingPut(ClientStatus clientStatus, UUID clientStatusId) throws ApiException {
        ApiResponse<ClientStatus> resp = updateClientStatusUsingPutWithHttpInfo(clientStatus, clientStatusId);
        return resp.getData();
    }

    /**
     * Update an client status
     * Update an client status record for an client.
     * @param clientStatus client_status (required)
     * @param clientStatusId UUID client_status_id (required)
     * @return ApiResponse&lt;ClientStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientStatus> updateClientStatusUsingPutWithHttpInfo(ClientStatus clientStatus, UUID clientStatusId) throws ApiException {
        com.squareup.okhttp.Call call = updateClientStatusUsingPutValidateBeforeCall(clientStatus, clientStatusId, null, null);
        Type localVarReturnType = new TypeToken<ClientStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an client status (asynchronously)
     * Update an client status record for an client.
     * @param clientStatus client_status (required)
     * @param clientStatusId UUID client_status_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientStatusUsingPutAsync(ClientStatus clientStatus, UUID clientStatusId, final ApiCallback<ClientStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientStatusUsingPutValidateBeforeCall(clientStatus, clientStatusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientUsingPut
     * @param client client (required)
     * @param clientId UUID client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClientUsingPutCall(Client client, UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = client;

        // create path and map variables
        String localVarPath = "/client/{client_id}"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientUsingPutValidateBeforeCall(Client client, UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling updateClientUsingPut(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateClientUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientUsingPutCall(client, clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a client
     * Update the information for a client registered with your firm.
     * @param client client (required)
     * @param clientId UUID client_id (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Client updateClientUsingPut(Client client, UUID clientId) throws ApiException {
        ApiResponse<Client> resp = updateClientUsingPutWithHttpInfo(client, clientId);
        return resp.getData();
    }

    /**
     * Update a client
     * Update the information for a client registered with your firm.
     * @param client client (required)
     * @param clientId UUID client_id (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Client> updateClientUsingPutWithHttpInfo(Client client, UUID clientId) throws ApiException {
        com.squareup.okhttp.Call call = updateClientUsingPutValidateBeforeCall(client, clientId, null, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a client (asynchronously)
     * Update the information for a client registered with your firm.
     * @param client client (required)
     * @param clientId UUID client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientUsingPutAsync(Client client, UUID clientId, final ApiCallback<Client> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientUsingPutValidateBeforeCall(client, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
