/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressResponseBody;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.ProgressRequestBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.LocalDate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PerformanceApi {
    private ApiClient apiClient;

    public PerformanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PerformanceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAccountPerformanceUsingGet
     * @param accountId Account Id -/account (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type - /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountPerformanceUsingGetCall(UUID accountId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{account_id}/performance"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activePremiumPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_premium_period", activePremiumPeriod));
        if (annualizedReturnPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("annualized_return_period", annualizedReturnPeriod));
        if (benchmarkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("benchmark_id", benchmarkId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (histFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hist_factor", histFactor));
        if (marDownSideDeviation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mar_down_side_deviation", marDownSideDeviation));
        if (maxPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_percentile_monte_carlo", maxPercentileMonteCarlo));
        if (meanPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mean_percentile_monte_carlo", meanPercentileMonteCarlo));
        if (minPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_percentile_monte_carlo", minPercentileMonteCarlo));
        if (movingAverageNDay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moving_average_n_day", movingAverageNDay));
        if (nDayReturns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_day_returns", nDayReturns));
        if (nPathMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_path_monte_carlo", nPathMonteCarlo));
        if (nRollingMaxDrawdown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_max_drawdown", nRollingMaxDrawdown));
        if (nRollingVolatility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_volatility", nRollingVolatility));
        if (numSimMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num_sim_monte_carlo", numSimMonteCarlo));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (riskFreeAlpha != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_alpha", riskFreeAlpha));
        if (riskFreeSharpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sharpe", riskFreeSharpe));
        if (riskFreeSortino != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sortino", riskFreeSortino));
        if (riskFreeTreynor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_treynor", riskFreeTreynor));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (varConfInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("var_conf_interval", varConfInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountPerformanceUsingGetValidateBeforeCall(UUID accountId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountPerformanceUsingGetCall(accountId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Account Performance
     * Get information on the performance of an account using IRR (Internal Rate of Return). You must provide the unique account_id.
     * @param accountId Account Id -/account (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type - /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAccountPerformanceUsingGet(UUID accountId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        ApiResponse<Object> resp = getAccountPerformanceUsingGetWithHttpInfo(accountId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);
        return resp.getData();
    }

    /**
     * Account Performance
     * Get information on the performance of an account using IRR (Internal Rate of Return). You must provide the unique account_id.
     * @param accountId Account Id -/account (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type - /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAccountPerformanceUsingGetWithHttpInfo(UUID accountId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        com.squareup.okhttp.Call call = getAccountPerformanceUsingGetValidateBeforeCall(accountId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Account Performance (asynchronously)
     * Get information on the performance of an account using IRR (Internal Rate of Return). You must provide the unique account_id.
     * @param accountId Account Id -/account (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type - /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountPerformanceUsingGetAsync(UUID accountId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountPerformanceUsingGetValidateBeforeCall(accountId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationPerformanceUsingGet
     * @param allocationId Allocation Id -/allocation (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Tenant Benchmark Id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param isCurrentWeight is_current_weight (optional, default to true)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type found under the Statistics banner (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationPerformanceUsingGetCall(UUID allocationId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Boolean isCurrentWeight, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/allocation/{allocation_id}/performance"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activePremiumPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_premium_period", activePremiumPeriod));
        if (annualizedReturnPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("annualized_return_period", annualizedReturnPeriod));
        if (benchmarkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("benchmark_id", benchmarkId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (histFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hist_factor", histFactor));
        if (isCurrentWeight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_current_weight", isCurrentWeight));
        if (marDownSideDeviation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mar_down_side_deviation", marDownSideDeviation));
        if (maxPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_percentile_monte_carlo", maxPercentileMonteCarlo));
        if (meanPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mean_percentile_monte_carlo", meanPercentileMonteCarlo));
        if (minPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_percentile_monte_carlo", minPercentileMonteCarlo));
        if (movingAverageNDay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moving_average_n_day", movingAverageNDay));
        if (nDayReturns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_day_returns", nDayReturns));
        if (nPathMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_path_monte_carlo", nPathMonteCarlo));
        if (nRollingMaxDrawdown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_max_drawdown", nRollingMaxDrawdown));
        if (nRollingVolatility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_volatility", nRollingVolatility));
        if (numSimMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num_sim_monte_carlo", numSimMonteCarlo));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (riskFreeAlpha != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_alpha", riskFreeAlpha));
        if (riskFreeSharpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sharpe", riskFreeSharpe));
        if (riskFreeSortino != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sortino", riskFreeSortino));
        if (riskFreeTreynor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_treynor", riskFreeTreynor));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (varConfInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("var_conf_interval", varConfInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationPerformanceUsingGetValidateBeforeCall(UUID allocationId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Boolean isCurrentWeight, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationPerformanceUsingGetCall(allocationId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, isCurrentWeight, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allocation Performance
     * Get information on the performance of an allocation using TWR (Time Weighted Return). You must provide the unique allocation_id.
     * @param allocationId Allocation Id -/allocation (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Tenant Benchmark Id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param isCurrentWeight is_current_weight (optional, default to true)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type found under the Statistics banner (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> getAllocationPerformanceUsingGet(UUID allocationId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Boolean isCurrentWeight, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        ApiResponse<Map<String, Object>> resp = getAllocationPerformanceUsingGetWithHttpInfo(allocationId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, isCurrentWeight, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);
        return resp.getData();
    }

    /**
     * Allocation Performance
     * Get information on the performance of an allocation using TWR (Time Weighted Return). You must provide the unique allocation_id.
     * @param allocationId Allocation Id -/allocation (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Tenant Benchmark Id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param isCurrentWeight is_current_weight (optional, default to true)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type found under the Statistics banner (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> getAllocationPerformanceUsingGetWithHttpInfo(UUID allocationId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Boolean isCurrentWeight, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationPerformanceUsingGetValidateBeforeCall(allocationId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, isCurrentWeight, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allocation Performance (asynchronously)
     * Get information on the performance of an allocation using TWR (Time Weighted Return). You must provide the unique allocation_id.
     * @param allocationId Allocation Id -/allocation (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Tenant Benchmark Id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param isCurrentWeight is_current_weight (optional, default to true)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type found under the Statistics banner (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationPerformanceUsingGetAsync(UUID allocationId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Boolean isCurrentWeight, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationPerformanceUsingGetValidateBeforeCall(allocationId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, isCurrentWeight, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBenchmarkPerformanceUsingGet
     * @param benchmarkId Benchmark Id - /benchmark (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param comparisonBenchmarkId comparison_benchmark_id (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat Stat type - /statistics endpoint (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBenchmarkPerformanceUsingGetCall(UUID benchmarkId, String activePremiumPeriod, String annualizedReturnPeriod, UUID comparisonBenchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/benchmark/{benchmark_id}/performance"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activePremiumPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_premium_period", activePremiumPeriod));
        if (annualizedReturnPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("annualized_return_period", annualizedReturnPeriod));
        if (comparisonBenchmarkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comparison_benchmark_id", comparisonBenchmarkId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (histFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hist_factor", histFactor));
        if (marDownSideDeviation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mar_down_side_deviation", marDownSideDeviation));
        if (maxPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_percentile_monte_carlo", maxPercentileMonteCarlo));
        if (meanPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mean_percentile_monte_carlo", meanPercentileMonteCarlo));
        if (minPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_percentile_monte_carlo", minPercentileMonteCarlo));
        if (movingAverageNDay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moving_average_n_day", movingAverageNDay));
        if (nDayReturns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_day_returns", nDayReturns));
        if (nPathMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_path_monte_carlo", nPathMonteCarlo));
        if (nRollingMaxDrawdown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_max_drawdown", nRollingMaxDrawdown));
        if (nRollingVolatility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_volatility", nRollingVolatility));
        if (numSimMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num_sim_monte_carlo", numSimMonteCarlo));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (riskFreeAlpha != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_alpha", riskFreeAlpha));
        if (riskFreeSharpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sharpe", riskFreeSharpe));
        if (riskFreeSortino != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sortino", riskFreeSortino));
        if (riskFreeTreynor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_treynor", riskFreeTreynor));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (varConfInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("var_conf_interval", varConfInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBenchmarkPerformanceUsingGetValidateBeforeCall(UUID benchmarkId, String activePremiumPeriod, String annualizedReturnPeriod, UUID comparisonBenchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling getBenchmarkPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBenchmarkPerformanceUsingGetCall(benchmarkId, activePremiumPeriod, annualizedReturnPeriod, comparisonBenchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Benchmark Performance
     * Get information on the performance of a benchmark using TWR (Time Weighted Return). You must provide the unique benchmark_id.
     * @param benchmarkId Benchmark Id - /benchmark (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param comparisonBenchmarkId comparison_benchmark_id (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat Stat type - /statistics endpoint (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getBenchmarkPerformanceUsingGet(UUID benchmarkId, String activePremiumPeriod, String annualizedReturnPeriod, UUID comparisonBenchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        ApiResponse<Object> resp = getBenchmarkPerformanceUsingGetWithHttpInfo(benchmarkId, activePremiumPeriod, annualizedReturnPeriod, comparisonBenchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);
        return resp.getData();
    }

    /**
     * Benchmark Performance
     * Get information on the performance of a benchmark using TWR (Time Weighted Return). You must provide the unique benchmark_id.
     * @param benchmarkId Benchmark Id - /benchmark (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param comparisonBenchmarkId comparison_benchmark_id (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat Stat type - /statistics endpoint (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getBenchmarkPerformanceUsingGetWithHttpInfo(UUID benchmarkId, String activePremiumPeriod, String annualizedReturnPeriod, UUID comparisonBenchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        com.squareup.okhttp.Call call = getBenchmarkPerformanceUsingGetValidateBeforeCall(benchmarkId, activePremiumPeriod, annualizedReturnPeriod, comparisonBenchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Benchmark Performance (asynchronously)
     * Get information on the performance of a benchmark using TWR (Time Weighted Return). You must provide the unique benchmark_id.
     * @param benchmarkId Benchmark Id - /benchmark (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param comparisonBenchmarkId comparison_benchmark_id (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat Stat type - /statistics endpoint (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBenchmarkPerformanceUsingGetAsync(UUID benchmarkId, String activePremiumPeriod, String annualizedReturnPeriod, UUID comparisonBenchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBenchmarkPerformanceUsingGetValidateBeforeCall(benchmarkId, activePremiumPeriod, annualizedReturnPeriod, comparisonBenchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientPerformanceUsingGet
     * @param clientId Client Id -/client (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type -- /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientPerformanceUsingGetCall(UUID clientId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}/performance"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activePremiumPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_premium_period", activePremiumPeriod));
        if (annualizedReturnPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("annualized_return_period", annualizedReturnPeriod));
        if (benchmarkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("benchmark_id", benchmarkId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (histFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hist_factor", histFactor));
        if (marDownSideDeviation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mar_down_side_deviation", marDownSideDeviation));
        if (maxPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_percentile_monte_carlo", maxPercentileMonteCarlo));
        if (meanPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mean_percentile_monte_carlo", meanPercentileMonteCarlo));
        if (minPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_percentile_monte_carlo", minPercentileMonteCarlo));
        if (movingAverageNDay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moving_average_n_day", movingAverageNDay));
        if (nDayReturns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_day_returns", nDayReturns));
        if (nPathMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_path_monte_carlo", nPathMonteCarlo));
        if (nRollingMaxDrawdown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_max_drawdown", nRollingMaxDrawdown));
        if (nRollingVolatility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_volatility", nRollingVolatility));
        if (numSimMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num_sim_monte_carlo", numSimMonteCarlo));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (riskFreeAlpha != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_alpha", riskFreeAlpha));
        if (riskFreeSharpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sharpe", riskFreeSharpe));
        if (riskFreeSortino != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sortino", riskFreeSortino));
        if (riskFreeTreynor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_treynor", riskFreeTreynor));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (varConfInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("var_conf_interval", varConfInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientPerformanceUsingGetValidateBeforeCall(UUID clientId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientPerformanceUsingGetCall(clientId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client Performance
     * Get information on the performance of a client using IRR (Internal Rate of Return). You must provide the unique client_id.
     * @param clientId Client Id -/client (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type -- /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getClientPerformanceUsingGet(UUID clientId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        ApiResponse<Object> resp = getClientPerformanceUsingGetWithHttpInfo(clientId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);
        return resp.getData();
    }

    /**
     * Client Performance
     * Get information on the performance of a client using IRR (Internal Rate of Return). You must provide the unique client_id.
     * @param clientId Client Id -/client (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type -- /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getClientPerformanceUsingGetWithHttpInfo(UUID clientId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        com.squareup.okhttp.Call call = getClientPerformanceUsingGetValidateBeforeCall(clientId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client Performance (asynchronously)
     * Get information on the performance of a client using IRR (Internal Rate of Return). You must provide the unique client_id.
     * @param clientId Client Id -/client (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type -- /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientPerformanceUsingGetAsync(UUID clientId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientPerformanceUsingGetValidateBeforeCall(clientId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalPerformanceUsingGet
     * @param clientId Client associated with the account - /client (required)
     * @param goalId Goal Id - /account (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional, default to null)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional, default to null)
     * @param stat A stat type - /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGoalPerformanceUsingGetCall(UUID clientId, UUID goalId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Boolean portfolioGoal, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}/performance"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activePremiumPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_premium_period", activePremiumPeriod));
        if (annualizedReturnPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("annualized_return_period", annualizedReturnPeriod));
        if (benchmarkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("benchmark_id", benchmarkId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (histFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hist_factor", histFactor));
        if (marDownSideDeviation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mar_down_side_deviation", marDownSideDeviation));
        if (maxPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_percentile_monte_carlo", maxPercentileMonteCarlo));
        if (meanPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mean_percentile_monte_carlo", meanPercentileMonteCarlo));
        if (minPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_percentile_monte_carlo", minPercentileMonteCarlo));
        if (movingAverageNDay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moving_average_n_day", movingAverageNDay));
        if (nDayReturns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_day_returns", nDayReturns));
        if (nPathMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_path_monte_carlo", nPathMonteCarlo));
        if (nRollingMaxDrawdown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_max_drawdown", nRollingMaxDrawdown));
        if (nRollingVolatility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_volatility", nRollingVolatility));
        if (numSimMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num_sim_monte_carlo", numSimMonteCarlo));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (portfolioGoal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_goal", portfolioGoal));
        if (riskFreeAlpha != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_alpha", riskFreeAlpha));
        if (riskFreeSharpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sharpe", riskFreeSharpe));
        if (riskFreeSortino != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sortino", riskFreeSortino));
        if (riskFreeTreynor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_treynor", riskFreeTreynor));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (varConfInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("var_conf_interval", varConfInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalPerformanceUsingGetValidateBeforeCall(UUID clientId, UUID goalId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Boolean portfolioGoal, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getGoalPerformanceUsingGet(Async)");
        }
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalPerformanceUsingGetCall(clientId, goalId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, portfolioGoal, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal Performance
     * Get information on the performance of a goal using IRR (Internal Rate of Return). You must provide the unique goal_id.
     * @param clientId Client associated with the account - /client (required)
     * @param goalId Goal Id - /account (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional, default to null)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional, default to null)
     * @param stat A stat type - /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getGoalPerformanceUsingGet(UUID clientId, UUID goalId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Boolean portfolioGoal, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        ApiResponse<Object> resp = getGoalPerformanceUsingGetWithHttpInfo(clientId, goalId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, portfolioGoal, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);
        return resp.getData();
    }

    /**
     * Goal Performance
     * Get information on the performance of a goal using IRR (Internal Rate of Return). You must provide the unique goal_id.
     * @param clientId Client associated with the account - /client (required)
     * @param goalId Goal Id - /account (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional, default to null)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional, default to null)
     * @param stat A stat type - /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getGoalPerformanceUsingGetWithHttpInfo(UUID clientId, UUID goalId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Boolean portfolioGoal, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        com.squareup.okhttp.Call call = getGoalPerformanceUsingGetValidateBeforeCall(clientId, goalId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, portfolioGoal, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal Performance (asynchronously)
     * Get information on the performance of a goal using IRR (Internal Rate of Return). You must provide the unique goal_id.
     * @param clientId Client associated with the account - /client (required)
     * @param goalId Goal Id - /account (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark (optional)
     * @param endDate end date (optional, default to null)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional, default to null)
     * @param stat A stat type - /statistics (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGoalPerformanceUsingGetAsync(UUID clientId, UUID goalId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Boolean portfolioGoal, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalPerformanceUsingGetValidateBeforeCall(clientId, goalId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, portfolioGoal, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelPerformanceUsingGet
     * @param modelId Model Id - /model (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Tenant Benchmark Id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat Stat Type (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelPerformanceUsingGetCall(UUID modelId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/model/{model_id}/performance"
            .replaceAll("\\{" + "model_id" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activePremiumPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_premium_period", activePremiumPeriod));
        if (annualizedReturnPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("annualized_return_period", annualizedReturnPeriod));
        if (benchmarkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("benchmark_id", benchmarkId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (histFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hist_factor", histFactor));
        if (marDownSideDeviation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mar_down_side_deviation", marDownSideDeviation));
        if (maxPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_percentile_monte_carlo", maxPercentileMonteCarlo));
        if (meanPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mean_percentile_monte_carlo", meanPercentileMonteCarlo));
        if (minPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_percentile_monte_carlo", minPercentileMonteCarlo));
        if (movingAverageNDay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moving_average_n_day", movingAverageNDay));
        if (nDayReturns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_day_returns", nDayReturns));
        if (nPathMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_path_monte_carlo", nPathMonteCarlo));
        if (nRollingMaxDrawdown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_max_drawdown", nRollingMaxDrawdown));
        if (nRollingVolatility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_volatility", nRollingVolatility));
        if (numSimMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num_sim_monte_carlo", numSimMonteCarlo));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (riskFreeAlpha != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_alpha", riskFreeAlpha));
        if (riskFreeSharpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sharpe", riskFreeSharpe));
        if (riskFreeSortino != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sortino", riskFreeSortino));
        if (riskFreeTreynor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_treynor", riskFreeTreynor));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (varConfInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("var_conf_interval", varConfInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelPerformanceUsingGetValidateBeforeCall(UUID modelId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModelPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelPerformanceUsingGetCall(modelId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Model Performance
     * Get information on the performance of a model using TWR (Time Weighted Return). You must provide the unique model_id.
     * @param modelId Model Id - /model (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Tenant Benchmark Id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat Stat Type (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getModelPerformanceUsingGet(UUID modelId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        ApiResponse<Object> resp = getModelPerformanceUsingGetWithHttpInfo(modelId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);
        return resp.getData();
    }

    /**
     * Model Performance
     * Get information on the performance of a model using TWR (Time Weighted Return). You must provide the unique model_id.
     * @param modelId Model Id - /model (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Tenant Benchmark Id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat Stat Type (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getModelPerformanceUsingGetWithHttpInfo(UUID modelId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        com.squareup.okhttp.Call call = getModelPerformanceUsingGetValidateBeforeCall(modelId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Model Performance (asynchronously)
     * Get information on the performance of a model using TWR (Time Weighted Return). You must provide the unique model_id.
     * @param modelId Model Id - /model (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Tenant Benchmark Id -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat Stat Type (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelPerformanceUsingGetAsync(UUID modelId, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelPerformanceUsingGetValidateBeforeCall(modelId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioPerformanceUsingGet
     * @param accountId Account Id -/account (required)
     * @param clientId Client Id -/client (required)
     * @param portfolioId portfolio_id (required)
     * @param portfolioid Portfolio Id -/portoflio (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type - /statistics endpoint to get types (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPerformanceUsingGetCall(UUID accountId, UUID clientId, UUID portfolioId, UUID portfolioid, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/{portfolio_id}/performance"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "portfolioid" + "\\}", apiClient.escapeString(portfolioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activePremiumPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_premium_period", activePremiumPeriod));
        if (annualizedReturnPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("annualized_return_period", annualizedReturnPeriod));
        if (benchmarkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("benchmark_id", benchmarkId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (histFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hist_factor", histFactor));
        if (marDownSideDeviation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mar_down_side_deviation", marDownSideDeviation));
        if (maxPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_percentile_monte_carlo", maxPercentileMonteCarlo));
        if (meanPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mean_percentile_monte_carlo", meanPercentileMonteCarlo));
        if (minPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_percentile_monte_carlo", minPercentileMonteCarlo));
        if (movingAverageNDay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moving_average_n_day", movingAverageNDay));
        if (nDayReturns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_day_returns", nDayReturns));
        if (nPathMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_path_monte_carlo", nPathMonteCarlo));
        if (nRollingMaxDrawdown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_max_drawdown", nRollingMaxDrawdown));
        if (nRollingVolatility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_volatility", nRollingVolatility));
        if (numSimMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num_sim_monte_carlo", numSimMonteCarlo));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (riskFreeAlpha != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_alpha", riskFreeAlpha));
        if (riskFreeSharpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sharpe", riskFreeSharpe));
        if (riskFreeSortino != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sortino", riskFreeSortino));
        if (riskFreeTreynor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_treynor", riskFreeTreynor));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (varConfInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("var_conf_interval", varConfInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioPerformanceUsingGetValidateBeforeCall(UUID accountId, UUID clientId, UUID portfolioId, UUID portfolioid, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getPortfolioPerformanceUsingGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPortfolioPerformanceUsingGet(Async)");
        }
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getPortfolioPerformanceUsingGet(Async)");
        }
        
        // verify the required parameter 'portfolioid' is set
        if (portfolioid == null) {
            throw new ApiException("Missing the required parameter 'portfolioid' when calling getPortfolioPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioPerformanceUsingGetCall(accountId, clientId, portfolioId, portfolioid, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Portfolio Performance
     * Get information on the performance of a portfolio using IRR (Internal Rate of Return). You must provide the unique portfolio_id.
     * @param accountId Account Id -/account (required)
     * @param clientId Client Id -/client (required)
     * @param portfolioId portfolio_id (required)
     * @param portfolioid Portfolio Id -/portoflio (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type - /statistics endpoint to get types (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getPortfolioPerformanceUsingGet(UUID accountId, UUID clientId, UUID portfolioId, UUID portfolioid, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        ApiResponse<Object> resp = getPortfolioPerformanceUsingGetWithHttpInfo(accountId, clientId, portfolioId, portfolioid, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);
        return resp.getData();
    }

    /**
     * Portfolio Performance
     * Get information on the performance of a portfolio using IRR (Internal Rate of Return). You must provide the unique portfolio_id.
     * @param accountId Account Id -/account (required)
     * @param clientId Client Id -/client (required)
     * @param portfolioId portfolio_id (required)
     * @param portfolioid Portfolio Id -/portoflio (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type - /statistics endpoint to get types (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getPortfolioPerformanceUsingGetWithHttpInfo(UUID accountId, UUID clientId, UUID portfolioId, UUID portfolioid, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioPerformanceUsingGetValidateBeforeCall(accountId, clientId, portfolioId, portfolioid, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Portfolio Performance (asynchronously)
     * Get information on the performance of a portfolio using IRR (Internal Rate of Return). You must provide the unique portfolio_id.
     * @param accountId Account Id -/account (required)
     * @param clientId Client Id -/client (required)
     * @param portfolioId portfolio_id (required)
     * @param portfolioid Portfolio Id -/portoflio (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchmarkId Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark (optional)
     * @param endDate end date (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate start date (optional)
     * @param stat A stat type - /statistics endpoint to get types (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPerformanceUsingGetAsync(UUID accountId, UUID clientId, UUID portfolioId, UUID portfolioid, String activePremiumPeriod, String annualizedReturnPeriod, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, Double varConfInterval, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioPerformanceUsingGetValidateBeforeCall(accountId, clientId, portfolioId, portfolioid, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurityPerformanceUsingGet
     * @param securityId security_id (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchTicker Bench Ticker for security - (default: ^GSPC)  (optional)
     * @param benchmarkId benchmark_id (optional)
     * @param endDate Ending parameter for time window (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate Starting parameter for time window (optional)
     * @param stat A stat type - /statistics endpoint (optional)
     * @param ticker Ticker for security (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSecurityPerformanceUsingGetCall(UUID securityId, String activePremiumPeriod, String annualizedReturnPeriod, String benchTicker, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, String ticker, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/{security_id}/performance"
            .replaceAll("\\{" + "security_id" + "\\}", apiClient.escapeString(securityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activePremiumPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_premium_period", activePremiumPeriod));
        if (annualizedReturnPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("annualized_return_period", annualizedReturnPeriod));
        if (benchTicker != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("benchTicker", benchTicker));
        if (benchmarkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("benchmark_id", benchmarkId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (histFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hist_factor", histFactor));
        if (marDownSideDeviation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mar_down_side_deviation", marDownSideDeviation));
        if (maxPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_percentile_monte_carlo", maxPercentileMonteCarlo));
        if (meanPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mean_percentile_monte_carlo", meanPercentileMonteCarlo));
        if (minPercentileMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_percentile_monte_carlo", minPercentileMonteCarlo));
        if (movingAverageNDay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moving_average_n_day", movingAverageNDay));
        if (nDayReturns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_day_returns", nDayReturns));
        if (nPathMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_path_monte_carlo", nPathMonteCarlo));
        if (nRollingMaxDrawdown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_max_drawdown", nRollingMaxDrawdown));
        if (nRollingVolatility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n_rolling_volatility", nRollingVolatility));
        if (numSimMonteCarlo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num_sim_monte_carlo", numSimMonteCarlo));
        if (periodType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period_type", periodType));
        if (riskFreeAlpha != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_alpha", riskFreeAlpha));
        if (riskFreeSharpe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sharpe", riskFreeSharpe));
        if (riskFreeSortino != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_sortino", riskFreeSortino));
        if (riskFreeTreynor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("risk_free_treynor", riskFreeTreynor));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (ticker != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticker", ticker));
        if (varConfInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("var_conf_interval", varConfInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecurityPerformanceUsingGetValidateBeforeCall(UUID securityId, String activePremiumPeriod, String annualizedReturnPeriod, String benchTicker, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, String ticker, Double varConfInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityId' is set
        if (securityId == null) {
            throw new ApiException("Missing the required parameter 'securityId' when calling getSecurityPerformanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getSecurityPerformanceUsingGetCall(securityId, activePremiumPeriod, annualizedReturnPeriod, benchTicker, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, ticker, varConfInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Security Performance
     * Get performance statistics for a security using TWR (Time Weighted Return). You must provide the unique security_id
     * @param securityId security_id (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchTicker Bench Ticker for security - (default: ^GSPC)  (optional)
     * @param benchmarkId benchmark_id (optional)
     * @param endDate Ending parameter for time window (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate Starting parameter for time window (optional)
     * @param stat A stat type - /statistics endpoint (optional)
     * @param ticker Ticker for security (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getSecurityPerformanceUsingGet(UUID securityId, String activePremiumPeriod, String annualizedReturnPeriod, String benchTicker, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, String ticker, Double varConfInterval) throws ApiException {
        ApiResponse<Object> resp = getSecurityPerformanceUsingGetWithHttpInfo(securityId, activePremiumPeriod, annualizedReturnPeriod, benchTicker, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, ticker, varConfInterval);
        return resp.getData();
    }

    /**
     * Security Performance
     * Get performance statistics for a security using TWR (Time Weighted Return). You must provide the unique security_id
     * @param securityId security_id (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchTicker Bench Ticker for security - (default: ^GSPC)  (optional)
     * @param benchmarkId benchmark_id (optional)
     * @param endDate Ending parameter for time window (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate Starting parameter for time window (optional)
     * @param stat A stat type - /statistics endpoint (optional)
     * @param ticker Ticker for security (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getSecurityPerformanceUsingGetWithHttpInfo(UUID securityId, String activePremiumPeriod, String annualizedReturnPeriod, String benchTicker, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, String ticker, Double varConfInterval) throws ApiException {
        com.squareup.okhttp.Call call = getSecurityPerformanceUsingGetValidateBeforeCall(securityId, activePremiumPeriod, annualizedReturnPeriod, benchTicker, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, ticker, varConfInterval, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Security Performance (asynchronously)
     * Get performance statistics for a security using TWR (Time Weighted Return). You must provide the unique security_id
     * @param securityId security_id (required)
     * @param activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;) (optional)
     * @param benchTicker Bench Ticker for security - (default: ^GSPC)  (optional)
     * @param benchmarkId benchmark_id (optional)
     * @param endDate Ending parameter for time window (optional)
     * @param histFactor Histogram factor- (statId: 39, default: 5) (optional)
     * @param marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0)  (optional)
     * @param maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95) (optional)
     * @param meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50) (optional)
     * @param minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5) (optional)
     * @param movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7) (optional)
     * @param nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)   (optional)
     * @param nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100) (optional)
     * @param nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7) (optional)
     * @param nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7) (optional)
     * @param numSimMonteCarlo number of simulations - (statId: 62, default: 1000)  (optional)
     * @param periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;) (optional)
     * @param riskFreeAlpha risk free val alpha - (statId: 52, default: 0) (optional)
     * @param riskFreeSharpe risk free val sharpe- (statId: 49, default: 0)  (optional)
     * @param riskFreeSortino risk free val sortino - (statId: 56, default: 0) (optional)
     * @param riskFreeTreynor risk free val treynor- (statId: 51, default: 0)  (optional)
     * @param startDate Starting parameter for time window (optional)
     * @param stat A stat type - /statistics endpoint (optional)
     * @param ticker Ticker for security (optional)
     * @param varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSecurityPerformanceUsingGetAsync(UUID securityId, String activePremiumPeriod, String annualizedReturnPeriod, String benchTicker, UUID benchmarkId, LocalDate endDate, Double histFactor, Double marDownSideDeviation, Double maxPercentileMonteCarlo, Double meanPercentileMonteCarlo, Double minPercentileMonteCarlo, Integer movingAverageNDay, Integer nDayReturns, Integer nPathMonteCarlo, Integer nRollingMaxDrawdown, Integer nRollingVolatility, Integer numSimMonteCarlo, String periodType, Double riskFreeAlpha, Double riskFreeSharpe, Double riskFreeSortino, Double riskFreeTreynor, LocalDate startDate, String stat, String ticker, Double varConfInterval, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecurityPerformanceUsingGetValidateBeforeCall(securityId, activePremiumPeriod, annualizedReturnPeriod, benchTicker, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, ticker, varConfInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
