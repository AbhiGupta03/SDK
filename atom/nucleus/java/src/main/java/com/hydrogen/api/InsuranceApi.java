/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.api;

import com.hydrogen.ApiCallback;
import com.hydrogen.ApiClient;
import com.hydrogen.ApiException;
import com.hydrogen.ApiResponse;
import com.hydrogen.Configuration;
import com.hydrogen.Pair;
import com.hydrogen.ProgressRequestBody;
import com.hydrogen.ProgressResponseBody;
import com.hydrogen.model.InsuranceCoverage;
import com.hydrogen.model.InsuranceDiscount;
import com.hydrogen.model.PageInsuranceQuote;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.model.InsuranceQuote;
import com.hydrogen.model.PageInsuranceCoverage;
import com.hydrogen.model.PageInsuranceDiscount;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsuranceApi {
    private ApiClient apiClient;

    public InsuranceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsuranceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createInsuranceCoverageUsingPost
     * @param insuranceCoverage insuranceCoverage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createInsuranceCoverageUsingPostCall(InsuranceCoverage insuranceCoverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = insuranceCoverage;

        // create path and map variables
        String localVarPath = "/insurance_coverage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createInsuranceCoverageUsingPostValidateBeforeCall(InsuranceCoverage insuranceCoverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceCoverage' is set
        if (insuranceCoverage == null) {
            throw new ApiException("Missing the required parameter 'insuranceCoverage' when calling createInsuranceCoverageUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createInsuranceCoverageUsingPostCall(insuranceCoverage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a insurance coverage request
     * Create a new insurance coverage.
     * @param insuranceCoverage insuranceCoverage (required)
     * @return InsuranceCoverage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceCoverage createInsuranceCoverageUsingPost(InsuranceCoverage insuranceCoverage) throws ApiException {
        ApiResponse<InsuranceCoverage> resp = createInsuranceCoverageUsingPostWithHttpInfo(insuranceCoverage);
        return resp.getData();
    }

    /**
     * Create a insurance coverage request
     * Create a new insurance coverage.
     * @param insuranceCoverage insuranceCoverage (required)
     * @return ApiResponse&lt;InsuranceCoverage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceCoverage> createInsuranceCoverageUsingPostWithHttpInfo(InsuranceCoverage insuranceCoverage) throws ApiException {
        com.squareup.okhttp.Call call = createInsuranceCoverageUsingPostValidateBeforeCall(insuranceCoverage, null, null);
        Type localVarReturnType = new TypeToken<InsuranceCoverage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a insurance coverage request (asynchronously)
     * Create a new insurance coverage.
     * @param insuranceCoverage insuranceCoverage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createInsuranceCoverageUsingPostAsync(InsuranceCoverage insuranceCoverage, final ApiCallback<InsuranceCoverage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createInsuranceCoverageUsingPostValidateBeforeCall(insuranceCoverage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceCoverage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createInsuranceDiscountUsingPost
     * @param insuranceDiscount insuranceDiscount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createInsuranceDiscountUsingPostCall(InsuranceDiscount insuranceDiscount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = insuranceDiscount;

        // create path and map variables
        String localVarPath = "/insurance_discount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createInsuranceDiscountUsingPostValidateBeforeCall(InsuranceDiscount insuranceDiscount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceDiscount' is set
        if (insuranceDiscount == null) {
            throw new ApiException("Missing the required parameter 'insuranceDiscount' when calling createInsuranceDiscountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createInsuranceDiscountUsingPostCall(insuranceDiscount, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a insurance discount request
     * Create a new insurance discount.
     * @param insuranceDiscount insuranceDiscount (required)
     * @return InsuranceDiscount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceDiscount createInsuranceDiscountUsingPost(InsuranceDiscount insuranceDiscount) throws ApiException {
        ApiResponse<InsuranceDiscount> resp = createInsuranceDiscountUsingPostWithHttpInfo(insuranceDiscount);
        return resp.getData();
    }

    /**
     * Create a insurance discount request
     * Create a new insurance discount.
     * @param insuranceDiscount insuranceDiscount (required)
     * @return ApiResponse&lt;InsuranceDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceDiscount> createInsuranceDiscountUsingPostWithHttpInfo(InsuranceDiscount insuranceDiscount) throws ApiException {
        com.squareup.okhttp.Call call = createInsuranceDiscountUsingPostValidateBeforeCall(insuranceDiscount, null, null);
        Type localVarReturnType = new TypeToken<InsuranceDiscount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a insurance discount request (asynchronously)
     * Create a new insurance discount.
     * @param insuranceDiscount insuranceDiscount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createInsuranceDiscountUsingPostAsync(InsuranceDiscount insuranceDiscount, final ApiCallback<InsuranceDiscount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createInsuranceDiscountUsingPostValidateBeforeCall(insuranceDiscount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceDiscount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createInsuranceQuoteUsingPost
     * @param insuranceQuote insuranceQuote (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createInsuranceQuoteUsingPostCall(InsuranceQuote insuranceQuote, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = insuranceQuote;

        // create path and map variables
        String localVarPath = "/insurance_quote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createInsuranceQuoteUsingPostValidateBeforeCall(InsuranceQuote insuranceQuote, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceQuote' is set
        if (insuranceQuote == null) {
            throw new ApiException("Missing the required parameter 'insuranceQuote' when calling createInsuranceQuoteUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createInsuranceQuoteUsingPostCall(insuranceQuote, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a insuranceQuote request
     * Create a new insuranceQuote request.
     * @param insuranceQuote insuranceQuote (required)
     * @return InsuranceQuote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceQuote createInsuranceQuoteUsingPost(InsuranceQuote insuranceQuote) throws ApiException {
        ApiResponse<InsuranceQuote> resp = createInsuranceQuoteUsingPostWithHttpInfo(insuranceQuote);
        return resp.getData();
    }

    /**
     * Create a insuranceQuote request
     * Create a new insuranceQuote request.
     * @param insuranceQuote insuranceQuote (required)
     * @return ApiResponse&lt;InsuranceQuote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceQuote> createInsuranceQuoteUsingPostWithHttpInfo(InsuranceQuote insuranceQuote) throws ApiException {
        com.squareup.okhttp.Call call = createInsuranceQuoteUsingPostValidateBeforeCall(insuranceQuote, null, null);
        Type localVarReturnType = new TypeToken<InsuranceQuote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a insuranceQuote request (asynchronously)
     * Create a new insuranceQuote request.
     * @param insuranceQuote insuranceQuote (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createInsuranceQuoteUsingPostAsync(InsuranceQuote insuranceQuote, final ApiCallback<InsuranceQuote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createInsuranceQuoteUsingPostValidateBeforeCall(insuranceQuote, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceQuote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteInsuranceCoverageUsingDelete
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInsuranceCoverageUsingDeleteCall(UUID insuranceCoverageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_coverage/{insurance_coverage_id}"
            .replaceAll("\\{" + "insurance_coverage_id" + "\\}", apiClient.escapeString(insuranceCoverageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInsuranceCoverageUsingDeleteValidateBeforeCall(UUID insuranceCoverageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceCoverageId' is set
        if (insuranceCoverageId == null) {
            throw new ApiException("Missing the required parameter 'insuranceCoverageId' when calling deleteInsuranceCoverageUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInsuranceCoverageUsingDeleteCall(insuranceCoverageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an insurance coverage request
     * Delete an  insurance coverage.
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInsuranceCoverageUsingDelete(UUID insuranceCoverageId) throws ApiException {
        deleteInsuranceCoverageUsingDeleteWithHttpInfo(insuranceCoverageId);
    }

    /**
     * Delete an insurance coverage request
     * Delete an  insurance coverage.
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInsuranceCoverageUsingDeleteWithHttpInfo(UUID insuranceCoverageId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInsuranceCoverageUsingDeleteValidateBeforeCall(insuranceCoverageId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an insurance coverage request (asynchronously)
     * Delete an  insurance coverage.
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInsuranceCoverageUsingDeleteAsync(UUID insuranceCoverageId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInsuranceCoverageUsingDeleteValidateBeforeCall(insuranceCoverageId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInsuranceDiscountUsingDelete
     * @param insuranceDiscountId UUID insurance_discount_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInsuranceDiscountUsingDeleteCall(UUID insuranceDiscountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_discount/{insurance_discount_id}"
            .replaceAll("\\{" + "insurance_discount_id" + "\\}", apiClient.escapeString(insuranceDiscountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInsuranceDiscountUsingDeleteValidateBeforeCall(UUID insuranceDiscountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceDiscountId' is set
        if (insuranceDiscountId == null) {
            throw new ApiException("Missing the required parameter 'insuranceDiscountId' when calling deleteInsuranceDiscountUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInsuranceDiscountUsingDeleteCall(insuranceDiscountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an insurance discount request
     * Delete an  insurance discount.
     * @param insuranceDiscountId UUID insurance_discount_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInsuranceDiscountUsingDelete(UUID insuranceDiscountId) throws ApiException {
        deleteInsuranceDiscountUsingDeleteWithHttpInfo(insuranceDiscountId);
    }

    /**
     * Delete an insurance discount request
     * Delete an  insurance discount.
     * @param insuranceDiscountId UUID insurance_discount_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInsuranceDiscountUsingDeleteWithHttpInfo(UUID insuranceDiscountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInsuranceDiscountUsingDeleteValidateBeforeCall(insuranceDiscountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an insurance discount request (asynchronously)
     * Delete an  insurance discount.
     * @param insuranceDiscountId UUID insurance_discount_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInsuranceDiscountUsingDeleteAsync(UUID insuranceDiscountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInsuranceDiscountUsingDeleteValidateBeforeCall(insuranceDiscountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInsuranceQuoteUsingDelete
     * @param insuranceQuote UUID insurance_quote_id (required)
     * @param insuranceQuoteId insurance_quote_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInsuranceQuoteUsingDeleteCall(UUID insuranceQuote, UUID insuranceQuoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_quote/{insurance_quote_id}"
            .replaceAll("\\{" + "insurance_quote" + "\\}", apiClient.escapeString(insuranceQuote.toString()))
            .replaceAll("\\{" + "insurance_quote_id" + "\\}", apiClient.escapeString(insuranceQuoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInsuranceQuoteUsingDeleteValidateBeforeCall(UUID insuranceQuote, UUID insuranceQuoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceQuote' is set
        if (insuranceQuote == null) {
            throw new ApiException("Missing the required parameter 'insuranceQuote' when calling deleteInsuranceQuoteUsingDelete(Async)");
        }
        
        // verify the required parameter 'insuranceQuoteId' is set
        if (insuranceQuoteId == null) {
            throw new ApiException("Missing the required parameter 'insuranceQuoteId' when calling deleteInsuranceQuoteUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInsuranceQuoteUsingDeleteCall(insuranceQuote, insuranceQuoteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a insuranceQuote request
     * Permanently delete a insuranceQuote request.
     * @param insuranceQuote UUID insurance_quote_id (required)
     * @param insuranceQuoteId insurance_quote_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInsuranceQuoteUsingDelete(UUID insuranceQuote, UUID insuranceQuoteId) throws ApiException {
        deleteInsuranceQuoteUsingDeleteWithHttpInfo(insuranceQuote, insuranceQuoteId);
    }

    /**
     * Delete a insuranceQuote request
     * Permanently delete a insuranceQuote request.
     * @param insuranceQuote UUID insurance_quote_id (required)
     * @param insuranceQuoteId insurance_quote_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInsuranceQuoteUsingDeleteWithHttpInfo(UUID insuranceQuote, UUID insuranceQuoteId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInsuranceQuoteUsingDeleteValidateBeforeCall(insuranceQuote, insuranceQuoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a insuranceQuote request (asynchronously)
     * Permanently delete a insuranceQuote request.
     * @param insuranceQuote UUID insurance_quote_id (required)
     * @param insuranceQuoteId insurance_quote_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInsuranceQuoteUsingDeleteAsync(UUID insuranceQuote, UUID insuranceQuoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInsuranceQuoteUsingDeleteValidateBeforeCall(insuranceQuote, insuranceQuoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInsuranceCoverageAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInsuranceCoverageAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_coverage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInsuranceCoverageAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInsuranceCoverageAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all insurance coverage request
     * Get all new insurance coverage.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageInsuranceCoverage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInsuranceCoverage getInsuranceCoverageAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageInsuranceCoverage> resp = getInsuranceCoverageAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * Get all insurance coverage request
     * Get all new insurance coverage.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageInsuranceCoverage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInsuranceCoverage> getInsuranceCoverageAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getInsuranceCoverageAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageInsuranceCoverage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all insurance coverage request (asynchronously)
     * Get all new insurance coverage.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInsuranceCoverageAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageInsuranceCoverage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInsuranceCoverageAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInsuranceCoverage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInsuranceCoverageUsingGet
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInsuranceCoverageUsingGetCall(UUID insuranceCoverageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_coverage/{insurance_coverage_id}"
            .replaceAll("\\{" + "insurance_coverage_id" + "\\}", apiClient.escapeString(insuranceCoverageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInsuranceCoverageUsingGetValidateBeforeCall(UUID insuranceCoverageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceCoverageId' is set
        if (insuranceCoverageId == null) {
            throw new ApiException("Missing the required parameter 'insuranceCoverageId' when calling getInsuranceCoverageUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getInsuranceCoverageUsingGetCall(insuranceCoverageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a insurance coverage request
     * Get a new insurance coverage.
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @return InsuranceCoverage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceCoverage getInsuranceCoverageUsingGet(UUID insuranceCoverageId) throws ApiException {
        ApiResponse<InsuranceCoverage> resp = getInsuranceCoverageUsingGetWithHttpInfo(insuranceCoverageId);
        return resp.getData();
    }

    /**
     * Get a insurance coverage request
     * Get a new insurance coverage.
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @return ApiResponse&lt;InsuranceCoverage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceCoverage> getInsuranceCoverageUsingGetWithHttpInfo(UUID insuranceCoverageId) throws ApiException {
        com.squareup.okhttp.Call call = getInsuranceCoverageUsingGetValidateBeforeCall(insuranceCoverageId, null, null);
        Type localVarReturnType = new TypeToken<InsuranceCoverage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a insurance coverage request (asynchronously)
     * Get a new insurance coverage.
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInsuranceCoverageUsingGetAsync(UUID insuranceCoverageId, final ApiCallback<InsuranceCoverage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInsuranceCoverageUsingGetValidateBeforeCall(insuranceCoverageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceCoverage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInsuranceDiscountAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInsuranceDiscountAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_discount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInsuranceDiscountAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInsuranceDiscountAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all insurance discount request
     * Get all new insurance discount.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageInsuranceDiscount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInsuranceDiscount getInsuranceDiscountAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageInsuranceDiscount> resp = getInsuranceDiscountAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * Get all insurance discount request
     * Get all new insurance discount.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageInsuranceDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInsuranceDiscount> getInsuranceDiscountAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getInsuranceDiscountAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageInsuranceDiscount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all insurance discount request (asynchronously)
     * Get all new insurance discount.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInsuranceDiscountAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageInsuranceDiscount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInsuranceDiscountAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInsuranceDiscount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInsuranceDiscountUsingGet
     * @param insuranceDiscountId  UUID insurance_discount_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInsuranceDiscountUsingGetCall(UUID insuranceDiscountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_discount/{insurance_discount_id}"
            .replaceAll("\\{" + "insurance_discount_id" + "\\}", apiClient.escapeString(insuranceDiscountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInsuranceDiscountUsingGetValidateBeforeCall(UUID insuranceDiscountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceDiscountId' is set
        if (insuranceDiscountId == null) {
            throw new ApiException("Missing the required parameter 'insuranceDiscountId' when calling getInsuranceDiscountUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getInsuranceDiscountUsingGetCall(insuranceDiscountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a insurance discount request
     * Get a new insurance discount.
     * @param insuranceDiscountId  UUID insurance_discount_id (required)
     * @return InsuranceDiscount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceDiscount getInsuranceDiscountUsingGet(UUID insuranceDiscountId) throws ApiException {
        ApiResponse<InsuranceDiscount> resp = getInsuranceDiscountUsingGetWithHttpInfo(insuranceDiscountId);
        return resp.getData();
    }

    /**
     * Get a insurance discount request
     * Get a new insurance discount.
     * @param insuranceDiscountId  UUID insurance_discount_id (required)
     * @return ApiResponse&lt;InsuranceDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceDiscount> getInsuranceDiscountUsingGetWithHttpInfo(UUID insuranceDiscountId) throws ApiException {
        com.squareup.okhttp.Call call = getInsuranceDiscountUsingGetValidateBeforeCall(insuranceDiscountId, null, null);
        Type localVarReturnType = new TypeToken<InsuranceDiscount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a insurance discount request (asynchronously)
     * Get a new insurance discount.
     * @param insuranceDiscountId  UUID insurance_discount_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInsuranceDiscountUsingGetAsync(UUID insuranceDiscountId, final ApiCallback<InsuranceDiscount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInsuranceDiscountUsingGetValidateBeforeCall(insuranceDiscountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceDiscount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInsuranceQuoteAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInsuranceQuoteAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_quote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInsuranceQuoteAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInsuranceQuoteAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all insuranceQuote requests
     * Get the information for all insuranceQuote requests.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageInsuranceQuote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInsuranceQuote getInsuranceQuoteAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageInsuranceQuote> resp = getInsuranceQuoteAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all insuranceQuote requests
     * Get the information for all insuranceQuote requests.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageInsuranceQuote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInsuranceQuote> getInsuranceQuoteAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getInsuranceQuoteAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageInsuranceQuote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all insuranceQuote requests (asynchronously)
     * Get the information for all insuranceQuote requests.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInsuranceQuoteAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageInsuranceQuote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInsuranceQuoteAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInsuranceQuote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInsuranceQuoteUsingGet
     * @param insuranceQuote UUID insurance_quote_id (required)
     * @param insuranceQuoteId insurance_quote_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInsuranceQuoteUsingGetCall(UUID insuranceQuote, UUID insuranceQuoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insurance_quote/{insurance_quote_id}"
            .replaceAll("\\{" + "insurance_quote" + "\\}", apiClient.escapeString(insuranceQuote.toString()))
            .replaceAll("\\{" + "insurance_quote_id" + "\\}", apiClient.escapeString(insuranceQuoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInsuranceQuoteUsingGetValidateBeforeCall(UUID insuranceQuote, UUID insuranceQuoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceQuote' is set
        if (insuranceQuote == null) {
            throw new ApiException("Missing the required parameter 'insuranceQuote' when calling getInsuranceQuoteUsingGet(Async)");
        }
        
        // verify the required parameter 'insuranceQuoteId' is set
        if (insuranceQuoteId == null) {
            throw new ApiException("Missing the required parameter 'insuranceQuoteId' when calling getInsuranceQuoteUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getInsuranceQuoteUsingGetCall(insuranceQuote, insuranceQuoteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a insuranceQuote request
     * Retrieve the information for a insuranceQuote request.
     * @param insuranceQuote UUID insurance_quote_id (required)
     * @param insuranceQuoteId insurance_quote_id (required)
     * @return InsuranceQuote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceQuote getInsuranceQuoteUsingGet(UUID insuranceQuote, UUID insuranceQuoteId) throws ApiException {
        ApiResponse<InsuranceQuote> resp = getInsuranceQuoteUsingGetWithHttpInfo(insuranceQuote, insuranceQuoteId);
        return resp.getData();
    }

    /**
     * Retrieve a insuranceQuote request
     * Retrieve the information for a insuranceQuote request.
     * @param insuranceQuote UUID insurance_quote_id (required)
     * @param insuranceQuoteId insurance_quote_id (required)
     * @return ApiResponse&lt;InsuranceQuote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceQuote> getInsuranceQuoteUsingGetWithHttpInfo(UUID insuranceQuote, UUID insuranceQuoteId) throws ApiException {
        com.squareup.okhttp.Call call = getInsuranceQuoteUsingGetValidateBeforeCall(insuranceQuote, insuranceQuoteId, null, null);
        Type localVarReturnType = new TypeToken<InsuranceQuote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a insuranceQuote request (asynchronously)
     * Retrieve the information for a insuranceQuote request.
     * @param insuranceQuote UUID insurance_quote_id (required)
     * @param insuranceQuoteId insurance_quote_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInsuranceQuoteUsingGetAsync(UUID insuranceQuote, UUID insuranceQuoteId, final ApiCallback<InsuranceQuote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInsuranceQuoteUsingGetValidateBeforeCall(insuranceQuote, insuranceQuoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceQuote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInsuranceCoverageUsingPut
     * @param insuranceCoverage insurance_coverage (required)
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInsuranceCoverageUsingPutCall(InsuranceCoverage insuranceCoverage, UUID insuranceCoverageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = insuranceCoverage;

        // create path and map variables
        String localVarPath = "/insurance_coverage/{insurance_coverage_id}"
            .replaceAll("\\{" + "insurance_coverage_id" + "\\}", apiClient.escapeString(insuranceCoverageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInsuranceCoverageUsingPutValidateBeforeCall(InsuranceCoverage insuranceCoverage, UUID insuranceCoverageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceCoverage' is set
        if (insuranceCoverage == null) {
            throw new ApiException("Missing the required parameter 'insuranceCoverage' when calling updateInsuranceCoverageUsingPut(Async)");
        }
        
        // verify the required parameter 'insuranceCoverageId' is set
        if (insuranceCoverageId == null) {
            throw new ApiException("Missing the required parameter 'insuranceCoverageId' when calling updateInsuranceCoverageUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInsuranceCoverageUsingPutCall(insuranceCoverage, insuranceCoverageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a insurance coverage request
     * Update a new insurance coverage.
     * @param insuranceCoverage insurance_coverage (required)
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @return InsuranceCoverage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceCoverage updateInsuranceCoverageUsingPut(InsuranceCoverage insuranceCoverage, UUID insuranceCoverageId) throws ApiException {
        ApiResponse<InsuranceCoverage> resp = updateInsuranceCoverageUsingPutWithHttpInfo(insuranceCoverage, insuranceCoverageId);
        return resp.getData();
    }

    /**
     * Update a insurance coverage request
     * Update a new insurance coverage.
     * @param insuranceCoverage insurance_coverage (required)
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @return ApiResponse&lt;InsuranceCoverage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceCoverage> updateInsuranceCoverageUsingPutWithHttpInfo(InsuranceCoverage insuranceCoverage, UUID insuranceCoverageId) throws ApiException {
        com.squareup.okhttp.Call call = updateInsuranceCoverageUsingPutValidateBeforeCall(insuranceCoverage, insuranceCoverageId, null, null);
        Type localVarReturnType = new TypeToken<InsuranceCoverage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a insurance coverage request (asynchronously)
     * Update a new insurance coverage.
     * @param insuranceCoverage insurance_coverage (required)
     * @param insuranceCoverageId UUID insurance_coverage_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInsuranceCoverageUsingPutAsync(InsuranceCoverage insuranceCoverage, UUID insuranceCoverageId, final ApiCallback<InsuranceCoverage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInsuranceCoverageUsingPutValidateBeforeCall(insuranceCoverage, insuranceCoverageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceCoverage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInsuranceDiscountUsingPut
     * @param insuranceDiscount insurance_discount (required)
     * @param insuranceDiscountId UUID insurance_discount_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInsuranceDiscountUsingPutCall(InsuranceDiscount insuranceDiscount, UUID insuranceDiscountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = insuranceDiscount;

        // create path and map variables
        String localVarPath = "/insurance_discount/{insurance_discount_id}"
            .replaceAll("\\{" + "insurance_discount_id" + "\\}", apiClient.escapeString(insuranceDiscountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInsuranceDiscountUsingPutValidateBeforeCall(InsuranceDiscount insuranceDiscount, UUID insuranceDiscountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceDiscount' is set
        if (insuranceDiscount == null) {
            throw new ApiException("Missing the required parameter 'insuranceDiscount' when calling updateInsuranceDiscountUsingPut(Async)");
        }
        
        // verify the required parameter 'insuranceDiscountId' is set
        if (insuranceDiscountId == null) {
            throw new ApiException("Missing the required parameter 'insuranceDiscountId' when calling updateInsuranceDiscountUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInsuranceDiscountUsingPutCall(insuranceDiscount, insuranceDiscountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an insurance discount 
     * Update an new insurance .
     * @param insuranceDiscount insurance_discount (required)
     * @param insuranceDiscountId UUID insurance_discount_id (required)
     * @return InsuranceDiscount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceDiscount updateInsuranceDiscountUsingPut(InsuranceDiscount insuranceDiscount, UUID insuranceDiscountId) throws ApiException {
        ApiResponse<InsuranceDiscount> resp = updateInsuranceDiscountUsingPutWithHttpInfo(insuranceDiscount, insuranceDiscountId);
        return resp.getData();
    }

    /**
     * Update an insurance discount 
     * Update an new insurance .
     * @param insuranceDiscount insurance_discount (required)
     * @param insuranceDiscountId UUID insurance_discount_id (required)
     * @return ApiResponse&lt;InsuranceDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceDiscount> updateInsuranceDiscountUsingPutWithHttpInfo(InsuranceDiscount insuranceDiscount, UUID insuranceDiscountId) throws ApiException {
        com.squareup.okhttp.Call call = updateInsuranceDiscountUsingPutValidateBeforeCall(insuranceDiscount, insuranceDiscountId, null, null);
        Type localVarReturnType = new TypeToken<InsuranceDiscount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an insurance discount  (asynchronously)
     * Update an new insurance .
     * @param insuranceDiscount insurance_discount (required)
     * @param insuranceDiscountId UUID insurance_discount_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInsuranceDiscountUsingPutAsync(InsuranceDiscount insuranceDiscount, UUID insuranceDiscountId, final ApiCallback<InsuranceDiscount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInsuranceDiscountUsingPutValidateBeforeCall(insuranceDiscount, insuranceDiscountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceDiscount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInsuranceQuoteUsingPut
     * @param insuranceQuote insurance_quote (required)
     * @param insuranceQuoteId UUID insurance_quote_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInsuranceQuoteUsingPutCall(InsuranceQuote insuranceQuote, UUID insuranceQuoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = insuranceQuote;

        // create path and map variables
        String localVarPath = "/insurance_quote/{insurance_quote_id}"
            .replaceAll("\\{" + "insurance_quote_id" + "\\}", apiClient.escapeString(insuranceQuoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInsuranceQuoteUsingPutValidateBeforeCall(InsuranceQuote insuranceQuote, UUID insuranceQuoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insuranceQuote' is set
        if (insuranceQuote == null) {
            throw new ApiException("Missing the required parameter 'insuranceQuote' when calling updateInsuranceQuoteUsingPut(Async)");
        }
        
        // verify the required parameter 'insuranceQuoteId' is set
        if (insuranceQuoteId == null) {
            throw new ApiException("Missing the required parameter 'insuranceQuoteId' when calling updateInsuranceQuoteUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInsuranceQuoteUsingPutCall(insuranceQuote, insuranceQuoteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a insuranceQuote request
     * Update the information for a insuranceQuote request.
     * @param insuranceQuote insurance_quote (required)
     * @param insuranceQuoteId UUID insurance_quote_id (required)
     * @return InsuranceQuote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsuranceQuote updateInsuranceQuoteUsingPut(InsuranceQuote insuranceQuote, UUID insuranceQuoteId) throws ApiException {
        ApiResponse<InsuranceQuote> resp = updateInsuranceQuoteUsingPutWithHttpInfo(insuranceQuote, insuranceQuoteId);
        return resp.getData();
    }

    /**
     * Update a insuranceQuote request
     * Update the information for a insuranceQuote request.
     * @param insuranceQuote insurance_quote (required)
     * @param insuranceQuoteId UUID insurance_quote_id (required)
     * @return ApiResponse&lt;InsuranceQuote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsuranceQuote> updateInsuranceQuoteUsingPutWithHttpInfo(InsuranceQuote insuranceQuote, UUID insuranceQuoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateInsuranceQuoteUsingPutValidateBeforeCall(insuranceQuote, insuranceQuoteId, null, null);
        Type localVarReturnType = new TypeToken<InsuranceQuote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a insuranceQuote request (asynchronously)
     * Update the information for a insuranceQuote request.
     * @param insuranceQuote insurance_quote (required)
     * @param insuranceQuoteId UUID insurance_quote_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInsuranceQuoteUsingPutAsync(InsuranceQuote insuranceQuote, UUID insuranceQuoteId, final ApiCallback<InsuranceQuote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInsuranceQuoteUsingPutValidateBeforeCall(insuranceQuote, insuranceQuoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsuranceQuote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
