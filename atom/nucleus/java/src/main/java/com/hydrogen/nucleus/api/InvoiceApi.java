/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.Invoice;
import com.hydrogen.nucleus.model.InvoicePayment;
import com.hydrogen.nucleus.model.PageInvoice;
import com.hydrogen.nucleus.model.PageInvoicePayment;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoiceApi {
    private ApiClient apiClient;

    public InvoiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createInvoicePaymentUsingPost
     * @param invoicePayment invoicePayment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createInvoicePaymentUsingPostCall(InvoicePayment invoicePayment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = invoicePayment;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice_payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createInvoicePaymentUsingPostValidateBeforeCall(InvoicePayment invoicePayment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoicePayment' is set
        if (invoicePayment == null) {
            throw new ApiException("Missing the required parameter 'invoicePayment' when calling createInvoicePaymentUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createInvoicePaymentUsingPostCall(invoicePayment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a invoicePayment
     * Create a new invoicePayment, for tracking invoice status.
     * @param invoicePayment invoicePayment (required)
     * @return InvoicePayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoicePayment createInvoicePaymentUsingPost(InvoicePayment invoicePayment) throws ApiException {
        ApiResponse<InvoicePayment> resp = createInvoicePaymentUsingPostWithHttpInfo(invoicePayment);
        return resp.getData();
    }

    /**
     * Create a invoicePayment
     * Create a new invoicePayment, for tracking invoice status.
     * @param invoicePayment invoicePayment (required)
     * @return ApiResponse&lt;InvoicePayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoicePayment> createInvoicePaymentUsingPostWithHttpInfo(InvoicePayment invoicePayment) throws ApiException {
        com.squareup.okhttp.Call call = createInvoicePaymentUsingPostValidateBeforeCall(invoicePayment, null, null);
        Type localVarReturnType = new TypeToken<InvoicePayment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a invoicePayment (asynchronously)
     * Create a new invoicePayment, for tracking invoice status.
     * @param invoicePayment invoicePayment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createInvoicePaymentUsingPostAsync(InvoicePayment invoicePayment, final ApiCallback<InvoicePayment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createInvoicePaymentUsingPostValidateBeforeCall(invoicePayment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoicePayment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createInvoiceUsingPost
     * @param invoice invoice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createInvoiceUsingPostCall(Invoice invoice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = invoice;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createInvoiceUsingPostValidateBeforeCall(Invoice invoice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoice' is set
        if (invoice == null) {
            throw new ApiException("Missing the required parameter 'invoice' when calling createInvoiceUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createInvoiceUsingPostCall(invoice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a invoice
     * Create a new invoice, with your firm.
     * @param invoice invoice (required)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Invoice createInvoiceUsingPost(Invoice invoice) throws ApiException {
        ApiResponse<Invoice> resp = createInvoiceUsingPostWithHttpInfo(invoice);
        return resp.getData();
    }

    /**
     * Create a invoice
     * Create a new invoice, with your firm.
     * @param invoice invoice (required)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Invoice> createInvoiceUsingPostWithHttpInfo(Invoice invoice) throws ApiException {
        com.squareup.okhttp.Call call = createInvoiceUsingPostValidateBeforeCall(invoice, null, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a invoice (asynchronously)
     * Create a new invoice, with your firm.
     * @param invoice invoice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createInvoiceUsingPostAsync(Invoice invoice, final ApiCallback<Invoice> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createInvoiceUsingPostValidateBeforeCall(invoice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteInvoicePaymentUsingDelete
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvoicePaymentUsingDeleteCall(UUID invoicePaymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice_payment/{invoice_payment_id}"
            .replaceAll("\\{" + "invoice_payment_id" + "\\}", apiClient.escapeString(invoicePaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvoicePaymentUsingDeleteValidateBeforeCall(UUID invoicePaymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoicePaymentId' is set
        if (invoicePaymentId == null) {
            throw new ApiException("Missing the required parameter 'invoicePaymentId' when calling deleteInvoicePaymentUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvoicePaymentUsingDeleteCall(invoicePaymentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a invoicePayment
     * Delete a invoicePayment. 
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvoicePaymentUsingDelete(UUID invoicePaymentId) throws ApiException {
        deleteInvoicePaymentUsingDeleteWithHttpInfo(invoicePaymentId);
    }

    /**
     * Delete a invoicePayment
     * Delete a invoicePayment. 
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvoicePaymentUsingDeleteWithHttpInfo(UUID invoicePaymentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvoicePaymentUsingDeleteValidateBeforeCall(invoicePaymentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a invoicePayment (asynchronously)
     * Delete a invoicePayment. 
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvoicePaymentUsingDeleteAsync(UUID invoicePaymentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvoicePaymentUsingDeleteValidateBeforeCall(invoicePaymentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInvoiceUsingDelete
     * @param invoiceId UUID invoice_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceUsingDeleteCall(UUID invoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice/{invoice_id}"
            .replaceAll("\\{" + "invoice_id" + "\\}", apiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvoiceUsingDeleteValidateBeforeCall(UUID invoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling deleteInvoiceUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvoiceUsingDeleteCall(invoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a invoice
     * Delete a invoice. 
     * @param invoiceId UUID invoice_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvoiceUsingDelete(UUID invoiceId) throws ApiException {
        deleteInvoiceUsingDeleteWithHttpInfo(invoiceId);
    }

    /**
     * Delete a invoice
     * Delete a invoice. 
     * @param invoiceId UUID invoice_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvoiceUsingDeleteWithHttpInfo(UUID invoiceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvoiceUsingDeleteValidateBeforeCall(invoiceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a invoice (asynchronously)
     * Delete a invoice. 
     * @param invoiceId UUID invoice_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceUsingDeleteAsync(UUID invoiceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvoiceUsingDeleteValidateBeforeCall(invoiceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInvoiceAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInvoiceAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all invoices
     * List all invoice. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageInvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInvoice getInvoiceAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageInvoice> resp = getInvoiceAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all invoices
     * List all invoice. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInvoice> getInvoiceAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageInvoice>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all invoices (asynchronously)
     * List all invoice. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageInvoice> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInvoice>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoicePaymentAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoicePaymentAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice_payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoicePaymentAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInvoicePaymentAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all invoice payments
     * List all invoicePayment. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageInvoicePayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInvoicePayment getInvoicePaymentAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageInvoicePayment> resp = getInvoicePaymentAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all invoice payments
     * List all invoicePayment. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageInvoicePayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInvoicePayment> getInvoicePaymentAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getInvoicePaymentAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageInvoicePayment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all invoice payments (asynchronously)
     * List all invoicePayment. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoicePaymentAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageInvoicePayment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoicePaymentAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInvoicePayment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoicePaymentUsingGet
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoicePaymentUsingGetCall(UUID invoicePaymentId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice_payment/{invoice_payment_id}"
            .replaceAll("\\{" + "invoice_payment_id" + "\\}", apiClient.escapeString(invoicePaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoicePaymentUsingGetValidateBeforeCall(UUID invoicePaymentId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoicePaymentId' is set
        if (invoicePaymentId == null) {
            throw new ApiException("Missing the required parameter 'invoicePaymentId' when calling getInvoicePaymentUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvoicePaymentUsingGetCall(invoicePaymentId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a invoicePayment
     * Retrieve a invoicePayment. 
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @param currencyConversion USD (optional)
     * @return InvoicePayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoicePayment getInvoicePaymentUsingGet(UUID invoicePaymentId, String currencyConversion) throws ApiException {
        ApiResponse<InvoicePayment> resp = getInvoicePaymentUsingGetWithHttpInfo(invoicePaymentId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a invoicePayment
     * Retrieve a invoicePayment. 
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;InvoicePayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoicePayment> getInvoicePaymentUsingGetWithHttpInfo(UUID invoicePaymentId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getInvoicePaymentUsingGetValidateBeforeCall(invoicePaymentId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<InvoicePayment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a invoicePayment (asynchronously)
     * Retrieve a invoicePayment. 
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoicePaymentUsingGetAsync(UUID invoicePaymentId, String currencyConversion, final ApiCallback<InvoicePayment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoicePaymentUsingGetValidateBeforeCall(invoicePaymentId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoicePayment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoiceUsingGet
     * @param invoiceId UUID invoice_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceUsingGetCall(UUID invoiceId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice/{invoice_id}"
            .replaceAll("\\{" + "invoice_id" + "\\}", apiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceUsingGetValidateBeforeCall(UUID invoiceId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getInvoiceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvoiceUsingGetCall(invoiceId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a invoice
     * Retrieve a invoice. 
     * @param invoiceId UUID invoice_id (required)
     * @param currencyConversion USD (optional)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Invoice getInvoiceUsingGet(UUID invoiceId, String currencyConversion) throws ApiException {
        ApiResponse<Invoice> resp = getInvoiceUsingGetWithHttpInfo(invoiceId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a invoice
     * Retrieve a invoice. 
     * @param invoiceId UUID invoice_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Invoice> getInvoiceUsingGetWithHttpInfo(UUID invoiceId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceUsingGetValidateBeforeCall(invoiceId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a invoice (asynchronously)
     * Retrieve a invoice. 
     * @param invoiceId UUID invoice_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceUsingGetAsync(UUID invoiceId, String currencyConversion, final ApiCallback<Invoice> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceUsingGetValidateBeforeCall(invoiceId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInvoicePaymentUsingPut
     * @param invoicePayment invoice_payment (required)
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInvoicePaymentUsingPutCall(Object invoicePayment, UUID invoicePaymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = invoicePayment;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice_payment/{invoice_payment_id}"
            .replaceAll("\\{" + "invoice_payment_id" + "\\}", apiClient.escapeString(invoicePaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInvoicePaymentUsingPutValidateBeforeCall(Object invoicePayment, UUID invoicePaymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoicePayment' is set
        if (invoicePayment == null) {
            throw new ApiException("Missing the required parameter 'invoicePayment' when calling updateInvoicePaymentUsingPut(Async)");
        }
        
        // verify the required parameter 'invoicePaymentId' is set
        if (invoicePaymentId == null) {
            throw new ApiException("Missing the required parameter 'invoicePaymentId' when calling updateInvoicePaymentUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInvoicePaymentUsingPutCall(invoicePayment, invoicePaymentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a invoicePayment
     * Update a invoicePayment. 
     * @param invoicePayment invoice_payment (required)
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @return InvoicePayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoicePayment updateInvoicePaymentUsingPut(Object invoicePayment, UUID invoicePaymentId) throws ApiException {
        ApiResponse<InvoicePayment> resp = updateInvoicePaymentUsingPutWithHttpInfo(invoicePayment, invoicePaymentId);
        return resp.getData();
    }

    /**
     * Update a invoicePayment
     * Update a invoicePayment. 
     * @param invoicePayment invoice_payment (required)
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @return ApiResponse&lt;InvoicePayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoicePayment> updateInvoicePaymentUsingPutWithHttpInfo(Object invoicePayment, UUID invoicePaymentId) throws ApiException {
        com.squareup.okhttp.Call call = updateInvoicePaymentUsingPutValidateBeforeCall(invoicePayment, invoicePaymentId, null, null);
        Type localVarReturnType = new TypeToken<InvoicePayment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a invoicePayment (asynchronously)
     * Update a invoicePayment. 
     * @param invoicePayment invoice_payment (required)
     * @param invoicePaymentId UUID invoice_payment_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInvoicePaymentUsingPutAsync(Object invoicePayment, UUID invoicePaymentId, final ApiCallback<InvoicePayment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInvoicePaymentUsingPutValidateBeforeCall(invoicePayment, invoicePaymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoicePayment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInvoiceUsingPut
     * @param invoice invoice (required)
     * @param invoiceId UUID invoice_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInvoiceUsingPutCall(Object invoice, UUID invoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = invoice;

        // create path and map variables
        String localVarPath = "/nucleus/v1/invoice/{invoice_id}"
            .replaceAll("\\{" + "invoice_id" + "\\}", apiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInvoiceUsingPutValidateBeforeCall(Object invoice, UUID invoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoice' is set
        if (invoice == null) {
            throw new ApiException("Missing the required parameter 'invoice' when calling updateInvoiceUsingPut(Async)");
        }
        
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling updateInvoiceUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInvoiceUsingPutCall(invoice, invoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a invoice
     * Update a invoice. 
     * @param invoice invoice (required)
     * @param invoiceId UUID invoice_id (required)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Invoice updateInvoiceUsingPut(Object invoice, UUID invoiceId) throws ApiException {
        ApiResponse<Invoice> resp = updateInvoiceUsingPutWithHttpInfo(invoice, invoiceId);
        return resp.getData();
    }

    /**
     * Update a invoice
     * Update a invoice. 
     * @param invoice invoice (required)
     * @param invoiceId UUID invoice_id (required)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Invoice> updateInvoiceUsingPutWithHttpInfo(Object invoice, UUID invoiceId) throws ApiException {
        com.squareup.okhttp.Call call = updateInvoiceUsingPutValidateBeforeCall(invoice, invoiceId, null, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a invoice (asynchronously)
     * Update a invoice. 
     * @param invoice invoice (required)
     * @param invoiceId UUID invoice_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInvoiceUsingPutAsync(Object invoice, UUID invoiceId, final ApiCallback<Invoice> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInvoiceUsingPutValidateBeforeCall(invoice, invoiceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
