/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;
import com.hydrogen.nucleus.model.AvailableDateDoubleVO;
import com.hydrogen.nucleus.model.GoalTrack;
import com.hydrogen.nucleus.model.PageGoalTrack;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.Goal;
import org.threeten.bp.OffsetDateTime;
import com.hydrogen.nucleus.model.PageGoal;
import com.hydrogen.nucleus.model.PagePortfolioTransaction;
import com.hydrogen.nucleus.model.PortfolioHoldingAgg;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GoalApi {
    private ApiClient apiClient;

    public GoalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GoalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createGoalTrackUsingPost
     * @param goalTrack goalTrack (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGoalTrackUsingPostCall(GoalTrack goalTrack, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalTrack;

        // create path and map variables
        String localVarPath = "/goal_track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGoalTrackUsingPostValidateBeforeCall(GoalTrack goalTrack, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalTrack' is set
        if (goalTrack == null) {
            throw new ApiException("Missing the required parameter 'goalTrack' when calling createGoalTrackUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createGoalTrackUsingPostCall(goalTrack, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a goal track record
     * Create a goal track record for a goal under a client.
     * @param goalTrack goalTrack (required)
     * @return GoalTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoalTrack createGoalTrackUsingPost(GoalTrack goalTrack) throws ApiException {
        ApiResponse<GoalTrack> resp = createGoalTrackUsingPostWithHttpInfo(goalTrack);
        return resp.getData();
    }

    /**
     * Create a goal track record
     * Create a goal track record for a goal under a client.
     * @param goalTrack goalTrack (required)
     * @return ApiResponse&lt;GoalTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoalTrack> createGoalTrackUsingPostWithHttpInfo(GoalTrack goalTrack) throws ApiException {
        com.squareup.okhttp.Call call = createGoalTrackUsingPostValidateBeforeCall(goalTrack, null, null);
        Type localVarReturnType = new TypeToken<GoalTrack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a goal track record (asynchronously)
     * Create a goal track record for a goal under a client.
     * @param goalTrack goalTrack (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGoalTrackUsingPostAsync(GoalTrack goalTrack, final ApiCallback<GoalTrack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGoalTrackUsingPostValidateBeforeCall(goalTrack, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalTrack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGoalUsingPost
     * @param goalRequest goalRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGoalUsingPostCall(Goal goalRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalRequest;

        // create path and map variables
        String localVarPath = "/goal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGoalUsingPostValidateBeforeCall(Goal goalRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalRequest' is set
        if (goalRequest == null) {
            throw new ApiException("Missing the required parameter 'goalRequest' when calling createGoalUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createGoalUsingPostCall(goalRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a goal
     * Create a new goal for your firm that clients can customize for themselves.
     * @param goalRequest goalRequest (required)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Goal createGoalUsingPost(Goal goalRequest) throws ApiException {
        ApiResponse<Goal> resp = createGoalUsingPostWithHttpInfo(goalRequest);
        return resp.getData();
    }

    /**
     * Create a goal
     * Create a new goal for your firm that clients can customize for themselves.
     * @param goalRequest goalRequest (required)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Goal> createGoalUsingPostWithHttpInfo(Goal goalRequest) throws ApiException {
        com.squareup.okhttp.Call call = createGoalUsingPostValidateBeforeCall(goalRequest, null, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a goal (asynchronously)
     * Create a new goal for your firm that clients can customize for themselves.
     * @param goalRequest goalRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGoalUsingPostAsync(Goal goalRequest, final ApiCallback<Goal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGoalUsingPostValidateBeforeCall(goalRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteGoalTrackUsingDelete
     * @param goalTrackId UUID goal_track_id (required)
     * @param goalTrackId2 goal_track_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGoalTrackUsingDeleteCall(UUID goalTrackId, UUID goalTrackId2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal_track/{goal_track_id}"
            .replaceAll("\\{" + "goalTrackId" + "\\}", apiClient.escapeString(goalTrackId.toString()))
            .replaceAll("\\{" + "goal_track_id" + "\\}", apiClient.escapeString(goalTrackId2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGoalTrackUsingDeleteValidateBeforeCall(UUID goalTrackId, UUID goalTrackId2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalTrackId' is set
        if (goalTrackId == null) {
            throw new ApiException("Missing the required parameter 'goalTrackId' when calling deleteGoalTrackUsingDelete(Async)");
        }
        
        // verify the required parameter 'goalTrackId2' is set
        if (goalTrackId2 == null) {
            throw new ApiException("Missing the required parameter 'goalTrackId2' when calling deleteGoalTrackUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGoalTrackUsingDeleteCall(goalTrackId, goalTrackId2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a goal track record
     * Permanently delete an goal track record for a goal under a client.
     * @param goalTrackId UUID goal_track_id (required)
     * @param goalTrackId2 goal_track_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGoalTrackUsingDelete(UUID goalTrackId, UUID goalTrackId2) throws ApiException {
        deleteGoalTrackUsingDeleteWithHttpInfo(goalTrackId, goalTrackId2);
    }

    /**
     * Delete a goal track record
     * Permanently delete an goal track record for a goal under a client.
     * @param goalTrackId UUID goal_track_id (required)
     * @param goalTrackId2 goal_track_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGoalTrackUsingDeleteWithHttpInfo(UUID goalTrackId, UUID goalTrackId2) throws ApiException {
        com.squareup.okhttp.Call call = deleteGoalTrackUsingDeleteValidateBeforeCall(goalTrackId, goalTrackId2, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a goal track record (asynchronously)
     * Permanently delete an goal track record for a goal under a client.
     * @param goalTrackId UUID goal_track_id (required)
     * @param goalTrackId2 goal_track_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGoalTrackUsingDeleteAsync(UUID goalTrackId, UUID goalTrackId2, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGoalTrackUsingDeleteValidateBeforeCall(goalTrackId, goalTrackId2, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGoalUsingDelete
     * @param goalId UUID goal_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGoalUsingDeleteCall(UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGoalUsingDeleteValidateBeforeCall(UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling deleteGoalUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGoalUsingDeleteCall(goalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a goal
     * Permanently delete a goal for your firm.
     * @param goalId UUID goal_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGoalUsingDelete(UUID goalId) throws ApiException {
        deleteGoalUsingDeleteWithHttpInfo(goalId);
    }

    /**
     * Delete a goal
     * Permanently delete a goal for your firm.
     * @param goalId UUID goal_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGoalUsingDeleteWithHttpInfo(UUID goalId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGoalUsingDeleteValidateBeforeCall(goalId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a goal (asynchronously)
     * Permanently delete a goal for your firm.
     * @param goalId UUID goal_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGoalUsingDeleteAsync(UUID goalId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGoalUsingDeleteValidateBeforeCall(goalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getGoalAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGoalAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getGoalAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all goals
     * Get the details for all goals defined by your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageGoal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageGoal getGoalAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageGoal> resp = getGoalAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all goals
     * Get the details for all goals defined by your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageGoal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageGoal> getGoalAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getGoalAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageGoal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all goals (asynchronously)
     * Get the details for all goals defined by your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGoalAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageGoal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageGoal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalAssetSizeAllUsingGet
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param endDate end_date (optional)
     * @param getLatest get_latest (optional, default to false)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param sortType sort_type (optional)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGoalAssetSizeAllUsingGetCall(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean getLatest, Boolean portfolioGoal, String sortType, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}/asset_size"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (portfolioGoal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_goal", portfolioGoal));
        if (sortType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_type", sortType));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalAssetSizeAllUsingGetValidateBeforeCall(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean getLatest, Boolean portfolioGoal, String sortType, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getGoalAssetSizeAllUsingGet(Async)");
        }
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalAssetSizeAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalAssetSizeAllUsingGetCall(clientId, goalId, endDate, getLatest, portfolioGoal, sortType, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List goal asset sizes
     * Get a list of asset sizes per date for a goal for a specified client.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param endDate end_date (optional)
     * @param getLatest get_latest (optional, default to false)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param sortType sort_type (optional)
     * @param startDate start_date (optional)
     * @return List&lt;AvailableDateDoubleVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AvailableDateDoubleVO> getGoalAssetSizeAllUsingGet(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean getLatest, Boolean portfolioGoal, String sortType, OffsetDateTime startDate) throws ApiException {
        ApiResponse<List<AvailableDateDoubleVO>> resp = getGoalAssetSizeAllUsingGetWithHttpInfo(clientId, goalId, endDate, getLatest, portfolioGoal, sortType, startDate);
        return resp.getData();
    }

    /**
     * List goal asset sizes
     * Get a list of asset sizes per date for a goal for a specified client.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param endDate end_date (optional)
     * @param getLatest get_latest (optional, default to false)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param sortType sort_type (optional)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;List&lt;AvailableDateDoubleVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AvailableDateDoubleVO>> getGoalAssetSizeAllUsingGetWithHttpInfo(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean getLatest, Boolean portfolioGoal, String sortType, OffsetDateTime startDate) throws ApiException {
        com.squareup.okhttp.Call call = getGoalAssetSizeAllUsingGetValidateBeforeCall(clientId, goalId, endDate, getLatest, portfolioGoal, sortType, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List goal asset sizes (asynchronously)
     * Get a list of asset sizes per date for a goal for a specified client.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param endDate end_date (optional)
     * @param getLatest get_latest (optional, default to false)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param sortType sort_type (optional)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGoalAssetSizeAllUsingGetAsync(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean getLatest, Boolean portfolioGoal, String sortType, OffsetDateTime startDate, final ApiCallback<List<AvailableDateDoubleVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalAssetSizeAllUsingGetValidateBeforeCall(clientId, goalId, endDate, getLatest, portfolioGoal, sortType, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalHoldingAllUsingGet
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param endDate end_date (optional)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGoalHoldingAllUsingGetCall(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean portfolioGoal, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}/holding"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (portfolioGoal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_goal", portfolioGoal));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalHoldingAllUsingGetValidateBeforeCall(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean portfolioGoal, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getGoalHoldingAllUsingGet(Async)");
        }
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalHoldingAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalHoldingAllUsingGetCall(clientId, goalId, endDate, portfolioGoal, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List goal holdings
     * Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param endDate end_date (optional)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param startDate start_date (optional)
     * @return List&lt;PortfolioHoldingAgg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PortfolioHoldingAgg> getGoalHoldingAllUsingGet(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean portfolioGoal, OffsetDateTime startDate) throws ApiException {
        ApiResponse<List<PortfolioHoldingAgg>> resp = getGoalHoldingAllUsingGetWithHttpInfo(clientId, goalId, endDate, portfolioGoal, startDate);
        return resp.getData();
    }

    /**
     * List goal holdings
     * Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param endDate end_date (optional)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;List&lt;PortfolioHoldingAgg&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PortfolioHoldingAgg>> getGoalHoldingAllUsingGetWithHttpInfo(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean portfolioGoal, OffsetDateTime startDate) throws ApiException {
        com.squareup.okhttp.Call call = getGoalHoldingAllUsingGetValidateBeforeCall(clientId, goalId, endDate, portfolioGoal, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<PortfolioHoldingAgg>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List goal holdings (asynchronously)
     * Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param endDate end_date (optional)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGoalHoldingAllUsingGetAsync(UUID clientId, UUID goalId, OffsetDateTime endDate, Boolean portfolioGoal, OffsetDateTime startDate, final ApiCallback<List<PortfolioHoldingAgg>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalHoldingAllUsingGetValidateBeforeCall(clientId, goalId, endDate, portfolioGoal, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PortfolioHoldingAgg>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalTrackAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGoalTrackAllUsingGetCall(Boolean ascending, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal_track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalTrackAllUsingGetValidateBeforeCall(Boolean ascending, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getGoalTrackAllUsingGetCall(ascending, endDate, filter, getLatest, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all goal track records
     * Get information for all goal track records stored for your firm.
     * @param ascending ascending (optional, default to false)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @return PageGoalTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageGoalTrack getGoalTrackAllUsingGet(Boolean ascending, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate) throws ApiException {
        ApiResponse<PageGoalTrack> resp = getGoalTrackAllUsingGetWithHttpInfo(ascending, endDate, filter, getLatest, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all goal track records
     * Get information for all goal track records stored for your firm.
     * @param ascending ascending (optional, default to false)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @return ApiResponse&lt;PageGoalTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageGoalTrack> getGoalTrackAllUsingGetWithHttpInfo(Boolean ascending, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate) throws ApiException {
        com.squareup.okhttp.Call call = getGoalTrackAllUsingGetValidateBeforeCall(ascending, endDate, filter, getLatest, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PageGoalTrack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all goal track records (asynchronously)
     * Get information for all goal track records stored for your firm.
     * @param ascending ascending (optional, default to false)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGoalTrackAllUsingGetAsync(Boolean ascending, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate, final ApiCallback<PageGoalTrack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalTrackAllUsingGetValidateBeforeCall(ascending, endDate, filter, getLatest, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageGoalTrack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalTrackUsingGet
     * @param goalTrackId UUID goal_track_id (required)
     * @param goalTrackId2 goal_track_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGoalTrackUsingGetCall(UUID goalTrackId, UUID goalTrackId2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal_track/{goal_track_id}"
            .replaceAll("\\{" + "goalTrackId" + "\\}", apiClient.escapeString(goalTrackId.toString()))
            .replaceAll("\\{" + "goal_track_id" + "\\}", apiClient.escapeString(goalTrackId2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalTrackUsingGetValidateBeforeCall(UUID goalTrackId, UUID goalTrackId2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalTrackId' is set
        if (goalTrackId == null) {
            throw new ApiException("Missing the required parameter 'goalTrackId' when calling getGoalTrackUsingGet(Async)");
        }
        
        // verify the required parameter 'goalTrackId2' is set
        if (goalTrackId2 == null) {
            throw new ApiException("Missing the required parameter 'goalTrackId2' when calling getGoalTrackUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalTrackUsingGetCall(goalTrackId, goalTrackId2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a goal track record
     * Retrieve the information for a specific goal track record for a goal under a client.
     * @param goalTrackId UUID goal_track_id (required)
     * @param goalTrackId2 goal_track_id (required)
     * @return GoalTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoalTrack getGoalTrackUsingGet(UUID goalTrackId, UUID goalTrackId2) throws ApiException {
        ApiResponse<GoalTrack> resp = getGoalTrackUsingGetWithHttpInfo(goalTrackId, goalTrackId2);
        return resp.getData();
    }

    /**
     * Retrieve a goal track record
     * Retrieve the information for a specific goal track record for a goal under a client.
     * @param goalTrackId UUID goal_track_id (required)
     * @param goalTrackId2 goal_track_id (required)
     * @return ApiResponse&lt;GoalTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoalTrack> getGoalTrackUsingGetWithHttpInfo(UUID goalTrackId, UUID goalTrackId2) throws ApiException {
        com.squareup.okhttp.Call call = getGoalTrackUsingGetValidateBeforeCall(goalTrackId, goalTrackId2, null, null);
        Type localVarReturnType = new TypeToken<GoalTrack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a goal track record (asynchronously)
     * Retrieve the information for a specific goal track record for a goal under a client.
     * @param goalTrackId UUID goal_track_id (required)
     * @param goalTrackId2 goal_track_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGoalTrackUsingGetAsync(UUID goalTrackId, UUID goalTrackId2, final ApiCallback<GoalTrack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalTrackUsingGetValidateBeforeCall(goalTrackId, goalTrackId2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalTrack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalTransactionAllUsingGet
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end_date (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param size size (optional, default to 25)
     * @param startDate start_date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGoalTransactionAllUsingGetCall(UUID clientId, UUID goalId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Boolean portfolioGoal, Integer size, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}/transaction"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (portfolioGoal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_goal", portfolioGoal));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalTransactionAllUsingGetValidateBeforeCall(UUID clientId, UUID goalId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Boolean portfolioGoal, Integer size, OffsetDateTime startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getGoalTransactionAllUsingGet(Async)");
        }
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalTransactionAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalTransactionAllUsingGetCall(clientId, goalId, ascending, endDate, orderBy, page, portfolioGoal, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List goal transactions
     * Get the information for all transactions under portfolios associated with a particular goal.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end_date (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param size size (optional, default to 25)
     * @param startDate start_date (optional)
     * @return PagePortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioTransaction getGoalTransactionAllUsingGet(UUID clientId, UUID goalId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Boolean portfolioGoal, Integer size, OffsetDateTime startDate) throws ApiException {
        ApiResponse<PagePortfolioTransaction> resp = getGoalTransactionAllUsingGetWithHttpInfo(clientId, goalId, ascending, endDate, orderBy, page, portfolioGoal, size, startDate);
        return resp.getData();
    }

    /**
     * List goal transactions
     * Get the information for all transactions under portfolios associated with a particular goal.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end_date (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param size size (optional, default to 25)
     * @param startDate start_date (optional)
     * @return ApiResponse&lt;PagePortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioTransaction> getGoalTransactionAllUsingGetWithHttpInfo(UUID clientId, UUID goalId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Boolean portfolioGoal, Integer size, OffsetDateTime startDate) throws ApiException {
        com.squareup.okhttp.Call call = getGoalTransactionAllUsingGetValidateBeforeCall(clientId, goalId, ascending, endDate, orderBy, page, portfolioGoal, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List goal transactions (asynchronously)
     * Get the information for all transactions under portfolios associated with a particular goal.
     * @param clientId client_id (required)
     * @param goalId UUID goal_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end_date (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param portfolioGoal portfolio_goal (optional, default to false)
     * @param size size (optional, default to 25)
     * @param startDate start_date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGoalTransactionAllUsingGetAsync(UUID clientId, UUID goalId, Boolean ascending, OffsetDateTime endDate, String orderBy, Integer page, Boolean portfolioGoal, Integer size, OffsetDateTime startDate, final ApiCallback<PagePortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalTransactionAllUsingGetValidateBeforeCall(clientId, goalId, ascending, endDate, orderBy, page, portfolioGoal, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalUsingGet
     * @param goalId UUID goal_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGoalUsingGetCall(UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalUsingGetValidateBeforeCall(UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalUsingGetCall(goalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a goal
     * Retrieve the information for a goal defined for your firm.
     * @param goalId UUID goal_id (required)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Goal getGoalUsingGet(UUID goalId) throws ApiException {
        ApiResponse<Goal> resp = getGoalUsingGetWithHttpInfo(goalId);
        return resp.getData();
    }

    /**
     * Retrieve a goal
     * Retrieve the information for a goal defined for your firm.
     * @param goalId UUID goal_id (required)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Goal> getGoalUsingGetWithHttpInfo(UUID goalId) throws ApiException {
        com.squareup.okhttp.Call call = getGoalUsingGetValidateBeforeCall(goalId, null, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a goal (asynchronously)
     * Retrieve the information for a goal defined for your firm.
     * @param goalId UUID goal_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGoalUsingGetAsync(UUID goalId, final ApiCallback<Goal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalUsingGetValidateBeforeCall(goalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGoalTrackUsingPut
     * @param goalTrack goal_track (required)
     * @param goalTrackId UUID goal_track_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGoalTrackUsingPutCall(GoalTrack goalTrack, UUID goalTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalTrack;

        // create path and map variables
        String localVarPath = "/goal_track/{goal_track_id}"
            .replaceAll("\\{" + "goal_track_id" + "\\}", apiClient.escapeString(goalTrackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGoalTrackUsingPutValidateBeforeCall(GoalTrack goalTrack, UUID goalTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalTrack' is set
        if (goalTrack == null) {
            throw new ApiException("Missing the required parameter 'goalTrack' when calling updateGoalTrackUsingPut(Async)");
        }
        
        // verify the required parameter 'goalTrackId' is set
        if (goalTrackId == null) {
            throw new ApiException("Missing the required parameter 'goalTrackId' when calling updateGoalTrackUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGoalTrackUsingPutCall(goalTrack, goalTrackId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a goal track record
     * Update the information for a goal track record.
     * @param goalTrack goal_track (required)
     * @param goalTrackId UUID goal_track_id (required)
     * @return GoalTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoalTrack updateGoalTrackUsingPut(GoalTrack goalTrack, UUID goalTrackId) throws ApiException {
        ApiResponse<GoalTrack> resp = updateGoalTrackUsingPutWithHttpInfo(goalTrack, goalTrackId);
        return resp.getData();
    }

    /**
     * Update a goal track record
     * Update the information for a goal track record.
     * @param goalTrack goal_track (required)
     * @param goalTrackId UUID goal_track_id (required)
     * @return ApiResponse&lt;GoalTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoalTrack> updateGoalTrackUsingPutWithHttpInfo(GoalTrack goalTrack, UUID goalTrackId) throws ApiException {
        com.squareup.okhttp.Call call = updateGoalTrackUsingPutValidateBeforeCall(goalTrack, goalTrackId, null, null);
        Type localVarReturnType = new TypeToken<GoalTrack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a goal track record (asynchronously)
     * Update the information for a goal track record.
     * @param goalTrack goal_track (required)
     * @param goalTrackId UUID goal_track_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGoalTrackUsingPutAsync(GoalTrack goalTrack, UUID goalTrackId, final ApiCallback<GoalTrack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGoalTrackUsingPutValidateBeforeCall(goalTrack, goalTrackId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalTrack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGoalUsingPut
     * @param goal goal (required)
     * @param goalId UUID goal_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGoalUsingPutCall(Goal goal, UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goal;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGoalUsingPutValidateBeforeCall(Goal goal, UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goal' is set
        if (goal == null) {
            throw new ApiException("Missing the required parameter 'goal' when calling updateGoalUsingPut(Async)");
        }
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateGoalUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGoalUsingPutCall(goal, goalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a goal
     * Update a goal defined for your firm.
     * @param goal goal (required)
     * @param goalId UUID goal_id (required)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Goal updateGoalUsingPut(Goal goal, UUID goalId) throws ApiException {
        ApiResponse<Goal> resp = updateGoalUsingPutWithHttpInfo(goal, goalId);
        return resp.getData();
    }

    /**
     * Update a goal
     * Update a goal defined for your firm.
     * @param goal goal (required)
     * @param goalId UUID goal_id (required)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Goal> updateGoalUsingPutWithHttpInfo(Goal goal, UUID goalId) throws ApiException {
        com.squareup.okhttp.Call call = updateGoalUsingPutValidateBeforeCall(goal, goalId, null, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a goal (asynchronously)
     * Update a goal defined for your firm.
     * @param goal goal (required)
     * @param goalId UUID goal_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGoalUsingPutAsync(Goal goal, UUID goalId, final ApiCallback<Goal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGoalUsingPutValidateBeforeCall(goal, goalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
