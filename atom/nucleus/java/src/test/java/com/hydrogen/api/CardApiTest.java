/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.api;

import com.hydrogen.model.PageCardProgram;
import com.hydrogen.ApiException;
import com.hydrogen.model.Card;
import com.hydrogen.model.CardProgram;
import com.hydrogen.model.PageCard;

import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for CardApi
 */
@Ignore
public class CardApiTest {

    private final CardApi api = new CardApi();

    
    /**
     * Create a cardProgram request
     *
     * Create a new cardProgram request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardProgramUsingPostTest() throws ApiException {
        CardProgram cardProgramRequest = null;
        CardProgram response = api.createCardProgramUsingPost(cardProgramRequest);

        // TODO: test validations
    }
    
    /**
     * Create a card request
     *
     * Create a new card request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCardUsingPostTest() throws ApiException {
        Card cardRequest = null;
        String authorization = null;
        Card response = api.createCardUsingPost(cardRequest, authorization);

        // TODO: test validations
    }
    
    /**
     * Delete an cardProgram
     *
     * Permanently delete an cardProgram.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCardProgramUsingDeleteTest() throws ApiException {
        UUID cardProgramId = null;
        api.deleteCardProgramUsingDelete(cardProgramId);

        // TODO: test validations
    }
    
    /**
     * Delete a card request
     *
     * Permanently delete a card request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCardUsingDeleteTest() throws ApiException {
        UUID cardId = null;
        api.deleteCardUsingDelete(cardId);

        // TODO: test validations
    }
    
    /**
     * List all card requests
     *
     * Get the information for all card requests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageCard response = api.getCardAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * List all cardProgram
     *
     * Get information for all cardProgram.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardProgramAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageCardProgram response = api.getCardProgramAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve an cardProgram
     *
     * Retrieve the information for a specific cardProgram.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardProgramUsingGetTest() throws ApiException {
        UUID cardProgramId = null;
        CardProgram response = api.getCardProgramUsingGet(cardProgramId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a card request
     *
     * Retrieve the information for a card request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardUsingGetTest() throws ApiException {
        UUID cardId = null;
        Card response = api.getCardUsingGet(cardId);

        // TODO: test validations
    }
    
    /**
     * Update an cardProgram
     *
     * Update the information for an cardProgram.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCardProgramUsingPutTest() throws ApiException {
        CardProgram cardProgram = null;
        UUID cardProgramId = null;
        CardProgram response = api.updateCardProgramUsingPut(cardProgram, cardProgramId);

        // TODO: test validations
    }
    
    /**
     * Update a card request
     *
     * Update the information for a card request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCardUsingPutTest() throws ApiException {
        Card card = null;
        UUID cardId = null;
        Card response = api.updateCardUsingPut(card, cardId);

        // TODO: test validations
    }
    
}
