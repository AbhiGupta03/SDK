/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.model.Accounting;
import com.hydrogen.nucleus.model.PageAccounting;
import java.util.UUID;

import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for AccountingApi
 */
@Ignore
public class AccountingApiTest {

    private final AccountingApi api = new AccountingApi();

    
    /**
     * Create an accounting
     *
     * Store stats pulled from accounting vendors.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccountingUsingPostTest() throws ApiException {
        Accounting accounting = null;
        Accounting response = api.createAccountingUsingPost(accounting);

        // TODO: test validations
    }
    
    /**
     * Delete an accounting
     *
     * Permanently delete an accounting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountingUsingDeleteTest() throws ApiException {
        UUID accountingId = null;
        api.deleteAccountingUsingDelete(accountingId);

        // TODO: test validations
    }
    
    /**
     * List all accounting
     *
     * Get information for all accounting for all clients defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountingAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageAccounting response = api.getAccountingAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve an accounting
     *
     * Retrieve the information for a specific accounting associated with a client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountingUsingGetTest() throws ApiException {
        UUID accountingId = null;
        Accounting response = api.getAccountingUsingGet(accountingId);

        // TODO: test validations
    }
    
    /**
     * Update an accounting
     *
     * Update the information for an accounting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountingUsingPutTest() throws ApiException {
        Accounting accounting = null;
        UUID accountingId = null;
        Accounting response = api.updateAccountingUsingPut(accounting, accountingId);

        // TODO: test validations
    }
    
}
