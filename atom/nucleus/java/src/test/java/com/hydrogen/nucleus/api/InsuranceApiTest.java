/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.model.InsuranceDiscount;
import com.hydrogen.nucleus.model.PageInsuranceQuote;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.model.InsuranceCoverage;
import com.hydrogen.nucleus.model.InsuranceQuote;
import com.hydrogen.nucleus.model.PageInsuranceCoverage;
import com.hydrogen.nucleus.model.PageInsuranceDiscount;

import java.util.UUID;

import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for InsuranceApi
 */
@Ignore
public class InsuranceApiTest {

    private final InsuranceApi api = new InsuranceApi();

    
    /**
     * Create a insurance coverage request
     *
     * Create a new insurance coverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInsuranceCoverageUsingPostTest() throws ApiException {
        InsuranceCoverage insuranceCoverage = null;
        InsuranceCoverage response = api.createInsuranceCoverageUsingPost(insuranceCoverage);

        // TODO: test validations
    }
    
    /**
     * Create a insurance discount request
     *
     * Create a new insurance discount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInsuranceDiscountUsingPostTest() throws ApiException {
        InsuranceDiscount insuranceDiscount = null;
        InsuranceDiscount response = api.createInsuranceDiscountUsingPost(insuranceDiscount);

        // TODO: test validations
    }
    
    /**
     * Create a insuranceQuote request
     *
     * Create a new insuranceQuote request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInsuranceQuoteUsingPostTest() throws ApiException {
        InsuranceQuote insuranceQuote = null;
        InsuranceQuote response = api.createInsuranceQuoteUsingPost(insuranceQuote);

        // TODO: test validations
    }
    
    /**
     * Delete an insurance coverage request
     *
     * Delete an  insurance coverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInsuranceCoverageUsingDeleteTest() throws ApiException {
        UUID insuranceCoverageId = null;
        api.deleteInsuranceCoverageUsingDelete(insuranceCoverageId);

        // TODO: test validations
    }
    
    /**
     * Delete an insurance discount request
     *
     * Delete an  insurance discount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInsuranceDiscountUsingDeleteTest() throws ApiException {
        UUID insuranceDiscountId = null;
        api.deleteInsuranceDiscountUsingDelete(insuranceDiscountId);

        // TODO: test validations
    }
    
    /**
     * Delete a insuranceQuote request
     *
     * Permanently delete a insuranceQuote request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInsuranceQuoteUsingDeleteTest() throws ApiException {
        UUID insuranceQuote = null;
        UUID insuranceQuoteId = null;
        api.deleteInsuranceQuoteUsingDelete(insuranceQuote, insuranceQuoteId);

        // TODO: test validations
    }
    
    /**
     * Get all insurance coverage request
     *
     * Get all new insurance coverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInsuranceCoverageAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageInsuranceCoverage response = api.getInsuranceCoverageAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Get a insurance coverage request
     *
     * Get a new insurance coverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInsuranceCoverageUsingGetTest() throws ApiException {
        UUID insuranceCoverageId = null;
        InsuranceCoverage response = api.getInsuranceCoverageUsingGet(insuranceCoverageId);

        // TODO: test validations
    }
    
    /**
     * Get all insurance discount request
     *
     * Get all new insurance discount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInsuranceDiscountAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageInsuranceDiscount response = api.getInsuranceDiscountAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Get a insurance discount request
     *
     * Get a new insurance discount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInsuranceDiscountUsingGetTest() throws ApiException {
        UUID insuranceDiscountId = null;
        InsuranceDiscount response = api.getInsuranceDiscountUsingGet(insuranceDiscountId);

        // TODO: test validations
    }
    
    /**
     * List all insuranceQuote requests
     *
     * Get the information for all insuranceQuote requests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInsuranceQuoteAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageInsuranceQuote response = api.getInsuranceQuoteAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a insuranceQuote request
     *
     * Retrieve the information for a insuranceQuote request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInsuranceQuoteUsingGetTest() throws ApiException {
        UUID insuranceQuote = null;
        UUID insuranceQuoteId = null;
        InsuranceQuote response = api.getInsuranceQuoteUsingGet(insuranceQuote, insuranceQuoteId);

        // TODO: test validations
    }
    
    /**
     * Update a insurance coverage request
     *
     * Update a new insurance coverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInsuranceCoverageUsingPutTest() throws ApiException {
        InsuranceCoverage insuranceCoverage = null;
        UUID insuranceCoverageId = null;
        InsuranceCoverage response = api.updateInsuranceCoverageUsingPut(insuranceCoverage, insuranceCoverageId);

        // TODO: test validations
    }
    
    /**
     * Update an insurance discount 
     *
     * Update an new insurance .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInsuranceDiscountUsingPutTest() throws ApiException {
        InsuranceDiscount insuranceDiscount = null;
        UUID insuranceDiscountId = null;
        InsuranceDiscount response = api.updateInsuranceDiscountUsingPut(insuranceDiscount, insuranceDiscountId);

        // TODO: test validations
    }
    
    /**
     * Update a insuranceQuote request
     *
     * Update the information for a insuranceQuote request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInsuranceQuoteUsingPutTest() throws ApiException {
        InsuranceQuote insuranceQuote = null;
        UUID insuranceQuoteId = null;
        InsuranceQuote response = api.updateInsuranceQuoteUsingPut(insuranceQuote, insuranceQuoteId);

        // TODO: test validations
    }
    
}
