/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.model.Contact;
import com.hydrogen.nucleus.model.CustomerRevenue;
import com.hydrogen.nucleus.model.PageContact;
import com.hydrogen.nucleus.model.PageCustomerRevenue;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactApi
 */
@Ignore
public class ContactApiTest {

    private final ContactApi api = new ContactApi();

    
    /**
     * Create a contact
     *
     * Create a new contact, with your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactUsingPostTest() throws ApiException {
        Contact contact = null;
        Contact response = api.createContactUsingPost(contact);

        // TODO: test validations
    }
    
    /**
     * Create a customer revenue
     *
     * Create a new customer revenue, with your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomerRevenueUsingPostTest() throws ApiException {
        CustomerRevenue customerRevenue = null;
        CustomerRevenue response = api.createCustomerRevenueUsingPost(customerRevenue);

        // TODO: test validations
    }
    
    /**
     * Delete a contact
     *
     * Delete a contact. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactUsingDeleteTest() throws ApiException {
        UUID contactId = null;
        api.deleteContactUsingDelete(contactId);

        // TODO: test validations
    }
    
    /**
     * Delete a customer revenue
     *
     * Delete a customer revenue. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerRevenueUsingDeleteTest() throws ApiException {
        UUID customerRevenueId = null;
        api.deleteCustomerRevenueUsingDelete(customerRevenueId);

        // TODO: test validations
    }
    
    /**
     * List all contact
     *
     * List all contact. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageContact response = api.getContactAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a contact
     *
     * Retrieve a contact. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactUsingGetTest() throws ApiException {
        UUID contactId = null;
        Contact response = api.getContactUsingGet(contactId);

        // TODO: test validations
    }
    
    /**
     * List all customer revenue
     *
     * List all customer revenue. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerRevenueAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String currencyConversion = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageCustomerRevenue response = api.getCustomerRevenueAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a customer revenue
     *
     * Retrieve a customer revenue. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerRevenueUsingGetTest() throws ApiException {
        UUID customerRevenueId = null;
        String currencyConversion = null;
        CustomerRevenue response = api.getCustomerRevenueUsingGet(customerRevenueId, currencyConversion);

        // TODO: test validations
    }
    
    /**
     * Update a contact
     *
     * Update a contact. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactUsingPutTest() throws ApiException {
        Object contact = null;
        UUID contactId = null;
        Contact response = api.updateContactUsingPut(contact, contactId);

        // TODO: test validations
    }
    
    /**
     * Update a customer revenue
     *
     * Update a customer revenue. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerRevenueUsingPutTest() throws ApiException {
        Object customerRevenue = null;
        UUID customerRevenueId = null;
        CustomerRevenue response = api.updateCustomerRevenueUsingPut(customerRevenue, customerRevenueId);

        // TODO: test validations
    }
    
}
