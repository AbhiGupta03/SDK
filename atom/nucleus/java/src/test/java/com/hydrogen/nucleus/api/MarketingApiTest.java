/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.8.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.model.Campaign;
import com.hydrogen.nucleus.model.CampaignData;
import com.hydrogen.nucleus.model.CampaignPlan;
import com.hydrogen.nucleus.model.ClientCampaignMapping;
import com.hydrogen.nucleus.model.JsonNode;
import com.hydrogen.nucleus.model.PageCampaign;
import com.hydrogen.nucleus.model.PageCampaignData;
import com.hydrogen.nucleus.model.PageCampaignPlan;
import com.hydrogen.nucleus.model.PageClientCampaignMapping;
import com.hydrogen.nucleus.ApiException;

import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for MarketingApi
 */
@Ignore
public class MarketingApiTest {

    private final MarketingApi api = new MarketingApi();

    
    /**
     * Create a campaign data record
     *
     * Create a new  campaign data record for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignDataUsingPostTest() throws ApiException {
        CampaignData campaignDataRequest = null;
        CampaignData response = api.createCampaignDataUsingPost(campaignDataRequest);

        // TODO: test validations
    }
    
    /**
     * Create a campaign plan
     *
     * Create a new campaign plan for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignPlanUsingPostTest() throws ApiException {
        CampaignPlan campaignPlanRequest = null;
        CampaignPlan response = api.createCampaignPlanUsingPost(campaignPlanRequest);

        // TODO: test validations
    }
    
    /**
     * Create a campaign
     *
     * Create a new campaign for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignUsingPostTest() throws ApiException {
        Campaign campaignRequest = null;
        Campaign response = api.createCampaignUsingPost(campaignRequest);

        // TODO: test validations
    }
    
    /**
     * Mark a client signing up through a campaign
     *
     * We are adding a campaign association to a clientId or ip.  We create this association because we are trying to measure how affective a campaign is in directing traffic to our website.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClientCampaignUsingPostTest() throws ApiException {
        ClientCampaignMapping campaignMappingRequest = null;
        ClientCampaignMapping response = api.createClientCampaignUsingPost(campaignMappingRequest);

        // TODO: test validations
    }
    
    /**
     * Delete a campaign data record
     *
     * Permanently delete a campaign data record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignDataUsingDeleteTest() throws ApiException {
        UUID campaignDataId = null;
        api.deleteCampaignDataUsingDelete(campaignDataId);

        // TODO: test validations
    }
    
    /**
     * Delete a campaign plan
     *
     * Permanently delete a campaign plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignPlanUsingDeleteTest() throws ApiException {
        UUID campaignPlanId = null;
        api.deleteCampaignPlanUsingDelete(campaignPlanId);

        // TODO: test validations
    }
    
    /**
     * Delete a campaign
     *
     * Permanently delete a campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignUsingDeleteTest() throws ApiException {
        UUID campaignId = null;
        api.deleteCampaignUsingDelete(campaignId);

        // TODO: test validations
    }
    
    /**
     * Delete a clients/ips pair under a campaign
     *
     * Permanently delete a clients/ips pair under a campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientCampaignUsingDeleteTest() throws ApiException {
        UUID clientCampaignId = null;
        api.deleteClientCampaignUsingDelete(clientCampaignId);

        // TODO: test validations
    }
    
    /**
     * List all campaigns
     *
     * Get details for all campaigns defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageCampaign response = api.getCampaignAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * List all campaign data
     *
     * Get details for all campaign data defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignDataAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageCampaignData response = api.getCampaignDataAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a campaign data record
     *
     * Retrieve the information for a campaign data record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignDataUsingGetTest() throws ApiException {
        UUID campaignDataId = null;
        CampaignData response = api.getCampaignDataUsingGet(campaignDataId);

        // TODO: test validations
    }
    
    /**
     * List all campaign plans
     *
     * Get details for all campaign plans defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignPlanAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageCampaignPlan response = api.getCampaignPlanAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a campaign plan
     *
     * Retrieve the information for a campaign plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignPlanUsingGetTest() throws ApiException {
        UUID campaignPlanId = null;
        CampaignPlan response = api.getCampaignPlanUsingGet(campaignPlanId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a campaign
     *
     * Retrieve the information for a campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignUsingGetTest() throws ApiException {
        UUID campaignId = null;
        Campaign response = api.getCampaignUsingGet(campaignId);

        // TODO: test validations
    }
    
    /**
     * List all clients/ips under a campaign
     *
     * Get details for all clients/ips under a campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientCampaignAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageClientCampaignMapping response = api.getClientCampaignAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a clients/ips pair under a campaign
     *
     * Retrieve the information for a clients/ips pair under a campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientCampaignUsingGetTest() throws ApiException {
        UUID clientCampaignId = null;
        ClientCampaignMapping response = api.getClientCampaignUsingGet(clientCampaignId);

        // TODO: test validations
    }
    
    /**
     * Update a campaign data record
     *
     * Updated the information for a campaign data record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignDataUsingPutTest() throws ApiException {
        CampaignPlan campaignData = null;
        UUID campaignDataId = null;
        CampaignData response = api.updateCampaignDataUsingPut(campaignData, campaignDataId);

        // TODO: test validations
    }
    
    /**
     * Update a campaign plan
     *
     * Updated the information for a campaign plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignPlanUsingPutTest() throws ApiException {
        CampaignPlan campaignPlan = null;
        UUID campaignPlanId = null;
        CampaignPlan response = api.updateCampaignPlanUsingPut(campaignPlan, campaignPlanId);

        // TODO: test validations
    }
    
    /**
     * Update a campaign
     *
     * Updated the information for a campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignUsingPutTest() throws ApiException {
        Campaign campaign = null;
        UUID campaignId = null;
        Campaign response = api.updateCampaignUsingPut(campaign, campaignId);

        // TODO: test validations
    }
    
    /**
     * Update a clients/ips pair under a campaign
     *
     * Updated the information for clients/ips pair under a campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientCampaignUsingPutTest() throws ApiException {
        UUID clientCampaignId = null;
        JsonNode jsonNode = null;
        ClientCampaignMapping response = api.updateClientCampaignUsingPut(clientCampaignId, jsonNode);

        // TODO: test validations
    }
    
}
