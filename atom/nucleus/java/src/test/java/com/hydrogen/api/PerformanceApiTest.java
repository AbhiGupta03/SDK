/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.api;

import com.hydrogen.ApiException;
import org.threeten.bp.LocalDate;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.Map;

/**
 * API tests for PerformanceApi
 */
@Ignore
public class PerformanceApiTest {

    private final PerformanceApi api = new PerformanceApi();

    
    /**
     * Account Performance
     *
     * Get information on the performance of an account using IRR (Internal Rate of Return). You must provide the unique account_id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPerformanceUsingGetTest() throws ApiException {
        UUID accountId = null;
        String activePremiumPeriod = null;
        String annualizedReturnPeriod = null;
        UUID benchmarkId = null;
        LocalDate endDate = null;
        Double histFactor = null;
        Double marDownSideDeviation = null;
        Double maxPercentileMonteCarlo = null;
        Double meanPercentileMonteCarlo = null;
        Double minPercentileMonteCarlo = null;
        Integer movingAverageNDay = null;
        Integer nDayReturns = null;
        Integer nPathMonteCarlo = null;
        Integer nRollingMaxDrawdown = null;
        Integer nRollingVolatility = null;
        Integer numSimMonteCarlo = null;
        String periodType = null;
        Double riskFreeAlpha = null;
        Double riskFreeSharpe = null;
        Double riskFreeSortino = null;
        Double riskFreeTreynor = null;
        LocalDate startDate = null;
        String stat = null;
        Double varConfInterval = null;
        Object response = api.getAccountPerformanceUsingGet(accountId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);

        // TODO: test validations
    }
    
    /**
     * Allocation Performance
     *
     * Get information on the performance of an allocation using TWR (Time Weighted Return). You must provide the unique allocation_id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationPerformanceUsingGetTest() throws ApiException {
        UUID allocationId = null;
        String activePremiumPeriod = null;
        String annualizedReturnPeriod = null;
        UUID benchmarkId = null;
        LocalDate endDate = null;
        Double histFactor = null;
        Boolean isCurrentWeight = null;
        Double marDownSideDeviation = null;
        Double maxPercentileMonteCarlo = null;
        Double meanPercentileMonteCarlo = null;
        Double minPercentileMonteCarlo = null;
        Integer movingAverageNDay = null;
        Integer nDayReturns = null;
        Integer nPathMonteCarlo = null;
        Integer nRollingMaxDrawdown = null;
        Integer nRollingVolatility = null;
        Integer numSimMonteCarlo = null;
        String periodType = null;
        Double riskFreeAlpha = null;
        Double riskFreeSharpe = null;
        Double riskFreeSortino = null;
        Double riskFreeTreynor = null;
        LocalDate startDate = null;
        String stat = null;
        Double varConfInterval = null;
        Map<String, Object> response = api.getAllocationPerformanceUsingGet(allocationId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, isCurrentWeight, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);

        // TODO: test validations
    }
    
    /**
     * Benchmark Performance
     *
     * Get information on the performance of a benchmark using TWR (Time Weighted Return). You must provide the unique benchmark_id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBenchmarkPerformanceUsingGetTest() throws ApiException {
        UUID benchmarkId = null;
        String activePremiumPeriod = null;
        String annualizedReturnPeriod = null;
        UUID comparisonBenchmarkId = null;
        LocalDate endDate = null;
        Double histFactor = null;
        Double marDownSideDeviation = null;
        Double maxPercentileMonteCarlo = null;
        Double meanPercentileMonteCarlo = null;
        Double minPercentileMonteCarlo = null;
        Integer movingAverageNDay = null;
        Integer nDayReturns = null;
        Integer nPathMonteCarlo = null;
        Integer nRollingMaxDrawdown = null;
        Integer nRollingVolatility = null;
        Integer numSimMonteCarlo = null;
        String periodType = null;
        Double riskFreeAlpha = null;
        Double riskFreeSharpe = null;
        Double riskFreeSortino = null;
        Double riskFreeTreynor = null;
        LocalDate startDate = null;
        String stat = null;
        Double varConfInterval = null;
        Object response = api.getBenchmarkPerformanceUsingGet(benchmarkId, activePremiumPeriod, annualizedReturnPeriod, comparisonBenchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);

        // TODO: test validations
    }
    
    /**
     * Client Performance
     *
     * Get information on the performance of a client using IRR (Internal Rate of Return). You must provide the unique client_id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientPerformanceUsingGetTest() throws ApiException {
        UUID clientId = null;
        String activePremiumPeriod = null;
        String annualizedReturnPeriod = null;
        UUID benchmarkId = null;
        LocalDate endDate = null;
        Double histFactor = null;
        Double marDownSideDeviation = null;
        Double maxPercentileMonteCarlo = null;
        Double meanPercentileMonteCarlo = null;
        Double minPercentileMonteCarlo = null;
        Integer movingAverageNDay = null;
        Integer nDayReturns = null;
        Integer nPathMonteCarlo = null;
        Integer nRollingMaxDrawdown = null;
        Integer nRollingVolatility = null;
        Integer numSimMonteCarlo = null;
        String periodType = null;
        Double riskFreeAlpha = null;
        Double riskFreeSharpe = null;
        Double riskFreeSortino = null;
        Double riskFreeTreynor = null;
        LocalDate startDate = null;
        String stat = null;
        Double varConfInterval = null;
        Object response = api.getClientPerformanceUsingGet(clientId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);

        // TODO: test validations
    }
    
    /**
     * Goal Performance
     *
     * Get information on the performance of a goal using IRR (Internal Rate of Return). You must provide the unique goal_id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalPerformanceUsingGetTest() throws ApiException {
        UUID clientId = null;
        UUID goalId = null;
        String activePremiumPeriod = null;
        String annualizedReturnPeriod = null;
        UUID benchmarkId = null;
        LocalDate endDate = null;
        Double histFactor = null;
        Double marDownSideDeviation = null;
        Double maxPercentileMonteCarlo = null;
        Double meanPercentileMonteCarlo = null;
        Double minPercentileMonteCarlo = null;
        Integer movingAverageNDay = null;
        Integer nDayReturns = null;
        Integer nPathMonteCarlo = null;
        Integer nRollingMaxDrawdown = null;
        Integer nRollingVolatility = null;
        Integer numSimMonteCarlo = null;
        String periodType = null;
        Boolean portfolioGoal = null;
        Double riskFreeAlpha = null;
        Double riskFreeSharpe = null;
        Double riskFreeSortino = null;
        Double riskFreeTreynor = null;
        LocalDate startDate = null;
        String stat = null;
        Double varConfInterval = null;
        Object response = api.getGoalPerformanceUsingGet(clientId, goalId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, portfolioGoal, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);

        // TODO: test validations
    }
    
    /**
     * Model Performance
     *
     * Get information on the performance of a model using TWR (Time Weighted Return). You must provide the unique model_id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelPerformanceUsingGetTest() throws ApiException {
        UUID modelId = null;
        String activePremiumPeriod = null;
        String annualizedReturnPeriod = null;
        UUID benchmarkId = null;
        LocalDate endDate = null;
        Double histFactor = null;
        Double marDownSideDeviation = null;
        Double maxPercentileMonteCarlo = null;
        Double meanPercentileMonteCarlo = null;
        Double minPercentileMonteCarlo = null;
        Integer movingAverageNDay = null;
        Integer nDayReturns = null;
        Integer nPathMonteCarlo = null;
        Integer nRollingMaxDrawdown = null;
        Integer nRollingVolatility = null;
        Integer numSimMonteCarlo = null;
        String periodType = null;
        Double riskFreeAlpha = null;
        Double riskFreeSharpe = null;
        Double riskFreeSortino = null;
        Double riskFreeTreynor = null;
        LocalDate startDate = null;
        String stat = null;
        Double varConfInterval = null;
        Object response = api.getModelPerformanceUsingGet(modelId, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);

        // TODO: test validations
    }
    
    /**
     * Portfolio Performance
     *
     * Get information on the performance of a portfolio using IRR (Internal Rate of Return). You must provide the unique portfolio_id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioPerformanceUsingGetTest() throws ApiException {
        UUID accountId = null;
        UUID clientId = null;
        UUID portfolioId = null;
        UUID portfolioid = null;
        String activePremiumPeriod = null;
        String annualizedReturnPeriod = null;
        UUID benchmarkId = null;
        LocalDate endDate = null;
        Double histFactor = null;
        Double marDownSideDeviation = null;
        Double maxPercentileMonteCarlo = null;
        Double meanPercentileMonteCarlo = null;
        Double minPercentileMonteCarlo = null;
        Integer movingAverageNDay = null;
        Integer nDayReturns = null;
        Integer nPathMonteCarlo = null;
        Integer nRollingMaxDrawdown = null;
        Integer nRollingVolatility = null;
        Integer numSimMonteCarlo = null;
        String periodType = null;
        Double riskFreeAlpha = null;
        Double riskFreeSharpe = null;
        Double riskFreeSortino = null;
        Double riskFreeTreynor = null;
        LocalDate startDate = null;
        String stat = null;
        Double varConfInterval = null;
        Object response = api.getPortfolioPerformanceUsingGet(accountId, clientId, portfolioId, portfolioid, activePremiumPeriod, annualizedReturnPeriod, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, varConfInterval);

        // TODO: test validations
    }
    
    /**
     * Security Performance
     *
     * Get performance statistics for a security using TWR (Time Weighted Return). You must provide the unique security_id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityPerformanceUsingGetTest() throws ApiException {
        UUID securityId = null;
        String activePremiumPeriod = null;
        String annualizedReturnPeriod = null;
        String benchTicker = null;
        UUID benchmarkId = null;
        LocalDate endDate = null;
        Double histFactor = null;
        Double marDownSideDeviation = null;
        Double maxPercentileMonteCarlo = null;
        Double meanPercentileMonteCarlo = null;
        Double minPercentileMonteCarlo = null;
        Integer movingAverageNDay = null;
        Integer nDayReturns = null;
        Integer nPathMonteCarlo = null;
        Integer nRollingMaxDrawdown = null;
        Integer nRollingVolatility = null;
        Integer numSimMonteCarlo = null;
        String periodType = null;
        Double riskFreeAlpha = null;
        Double riskFreeSharpe = null;
        Double riskFreeSortino = null;
        Double riskFreeTreynor = null;
        LocalDate startDate = null;
        String stat = null;
        String ticker = null;
        Double varConfInterval = null;
        Object response = api.getSecurityPerformanceUsingGet(securityId, activePremiumPeriod, annualizedReturnPeriod, benchTicker, benchmarkId, endDate, histFactor, marDownSideDeviation, maxPercentileMonteCarlo, meanPercentileMonteCarlo, minPercentileMonteCarlo, movingAverageNDay, nDayReturns, nPathMonteCarlo, nRollingMaxDrawdown, nRollingVolatility, numSimMonteCarlo, periodType, riskFreeAlpha, riskFreeSharpe, riskFreeSortino, riskFreeTreynor, startDate, stat, ticker, varConfInterval);

        // TODO: test validations
    }
    
}
