/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.model.AccountStatus;
import com.hydrogen.nucleus.model.PageAccountStatus;
import com.hydrogen.nucleus.model.PageStage;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.model.PageTransactionCode;
import com.hydrogen.nucleus.model.Stage;
import com.hydrogen.nucleus.model.TransactionCode;
import java.util.UUID;

import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for UtilsApi
 */
@Ignore
public class UtilsApiTest {

    private final UtilsApi api = new UtilsApi();

    
    /**
     * Create an account status
     *
     * Create an account status record for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccountStatusUsingPostTest() throws ApiException {
        AccountStatus accountStatusRequest = null;
        AccountStatus response = api.createAccountStatusUsingPost(accountStatusRequest);

        // TODO: test validations
    }
    
    /**
     * Create an account stage
     *
     * Create a new account stage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStageUsingPostTest() throws ApiException {
        Stage stageRequest = null;
        Stage response = api.createStageUsingPost(stageRequest);

        // TODO: test validations
    }
    
    /**
     * Create a transaction code
     *
     * Create a new transaction code for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTransactionCodeUsingPostTest() throws ApiException {
        TransactionCode transactionRequest = null;
        TransactionCode response = api.createTransactionCodeUsingPost(transactionRequest);

        // TODO: test validations
    }
    
    /**
     * Delete an account status
     *
     * Permanently delete an account status record from an accountâ€™s history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountStatusUsingDeleteTest() throws ApiException {
        UUID accountStatusId = null;
        api.deleteAccountStatusUsingDelete(accountStatusId);

        // TODO: test validations
    }
    
    /**
     * Delete an account stage
     *
     * Permanently delete an account stage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStageUsingDeleteTest() throws ApiException {
        UUID stageId = null;
        api.deleteStageUsingDelete(stageId);

        // TODO: test validations
    }
    
    /**
     * Delete a transaction code
     *
     * Permanently delete a transaction code for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTransactionCodeUsingDeleteTest() throws ApiException {
        UUID transactionCodeId = null;
        api.deleteTransactionCodeUsingDelete(transactionCodeId);

        // TODO: test validations
    }
    
    /**
     * List all account statuses
     *
     * Get the account status history information for all accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStatusAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageAccountStatus response = api.getAccountStatusAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve an account status
     *
     * Retrieve the information for a specific account status record for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStatusUsingGetTest() throws ApiException {
        UUID accountStatusId = null;
        AccountStatus response = api.getAccountStatusUsingGet(accountStatusId);

        // TODO: test validations
    }
    
    /**
     * List all account stages
     *
     * Get the information for all possible account stages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageStage response = api.getStageAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve an account stage
     *
     * Retrieve the information for a specific account stage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageUsingGetTest() throws ApiException {
        UUID stageId = null;
        Stage response = api.getStageUsingGet(stageId);

        // TODO: test validations
    }
    
    /**
     * List all transaction codes
     *
     * Get the information for all transaction codes defined by your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionCodeAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageTransactionCode response = api.getTransactionCodeAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a transaction code
     *
     * Retrieve the information for a transaction code defined by your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionCodeUsingGetTest() throws ApiException {
        UUID transactionCodeId = null;
        TransactionCode response = api.getTransactionCodeUsingGet(transactionCodeId);

        // TODO: test validations
    }
    
    /**
     * Update an account status
     *
     * Update an account status record for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountStatusUsingPutTest() throws ApiException {
        AccountStatus accountStatus = null;
        UUID accountStatusId = null;
        AccountStatus response = api.updateAccountStatusUsingPut(accountStatus, accountStatusId);

        // TODO: test validations
    }
    
    /**
     * Update an account stage
     *
     * Update the information for an account stage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStageUsingPutTest() throws ApiException {
        Stage stage = null;
        UUID stageId = null;
        Stage response = api.updateStageUsingPut(stage, stageId);

        // TODO: test validations
    }
    
    /**
     * Update a transaction code
     *
     * Update a transaction code for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTransactionCodeUsingPutTest() throws ApiException {
        TransactionCode transactionCode = null;
        UUID transactionCodeId = null;
        TransactionCode response = api.updateTransactionCodeUsingPut(transactionCode, transactionCodeId);

        // TODO: test validations
    }
    
}
