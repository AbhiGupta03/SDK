/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.4
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminClientApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <returns>AdminClient</returns>
        AdminClient CreateAdminClientUsingPOST (AdminClient _client);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <returns>ApiResponse of AdminClient</returns>
        ApiResponse<AdminClient> CreateAdminClientUsingPOSTWithHttpInfo (AdminClient _client);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns></returns>
        void DeleteAdminClientUsingDELETE (long? clientId);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAdminClientUsingDELETEWithHttpInfo (long? clientId);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>AdminClient</returns>
        AdminClient GetAdminClientUsingGET (long? clientId);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>ApiResponse of AdminClient</returns>
        ApiResponse<AdminClient> GetAdminClientUsingGETWithHttpInfo (long? clientId);
        /// <summary>
        /// getAllAdminClient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to username)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAdminClient</returns>
        PageAdminClient GetAllAdminClientUsingGET (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// getAllAdminClient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to username)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAdminClient</returns>
        ApiResponse<PageAdminClient> GetAllAdminClientUsingGETWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">client_id</param>
        /// <returns>AdminClient</returns>
        AdminClient UpdateAdminClientUsingPUT (Object _client, long? clientId);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">client_id</param>
        /// <returns>ApiResponse of AdminClient</returns>
        ApiResponse<AdminClient> UpdateAdminClientUsingPUTWithHttpInfo (Object _client, long? clientId);
        /// <summary>
        /// updateClientCredentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCredentials">clientCredentials</param>
        /// <param name="tenantName">tenant-name (optional)</param>
        /// <returns>AdminClient</returns>
        AdminClient UpdateClientCredentialsUsingPOST (ClientCredentials clientCredentials, string tenantName = null);

        /// <summary>
        /// updateClientCredentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCredentials">clientCredentials</param>
        /// <param name="tenantName">tenant-name (optional)</param>
        /// <returns>ApiResponse of AdminClient</returns>
        ApiResponse<AdminClient> UpdateClientCredentialsUsingPOSTWithHttpInfo (ClientCredentials clientCredentials, string tenantName = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <returns>Task of AdminClient</returns>
        System.Threading.Tasks.Task<AdminClient> CreateAdminClientUsingPOSTAsync (AdminClient _client);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <returns>Task of ApiResponse (AdminClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminClient>> CreateAdminClientUsingPOSTAsyncWithHttpInfo (AdminClient _client);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAdminClientUsingDELETEAsync (long? clientId);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAdminClientUsingDELETEAsyncWithHttpInfo (long? clientId);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of AdminClient</returns>
        System.Threading.Tasks.Task<AdminClient> GetAdminClientUsingGETAsync (long? clientId);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of ApiResponse (AdminClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminClient>> GetAdminClientUsingGETAsyncWithHttpInfo (long? clientId);
        /// <summary>
        /// getAllAdminClient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to username)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAdminClient</returns>
        System.Threading.Tasks.Task<PageAdminClient> GetAllAdminClientUsingGETAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// getAllAdminClient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to username)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAdminClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAdminClient>> GetAllAdminClientUsingGETAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of AdminClient</returns>
        System.Threading.Tasks.Task<AdminClient> UpdateAdminClientUsingPUTAsync (Object _client, long? clientId);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of ApiResponse (AdminClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminClient>> UpdateAdminClientUsingPUTAsyncWithHttpInfo (Object _client, long? clientId);
        /// <summary>
        /// updateClientCredentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCredentials">clientCredentials</param>
        /// <param name="tenantName">tenant-name (optional)</param>
        /// <returns>Task of AdminClient</returns>
        System.Threading.Tasks.Task<AdminClient> UpdateClientCredentialsUsingPOSTAsync (ClientCredentials clientCredentials, string tenantName = null);

        /// <summary>
        /// updateClientCredentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCredentials">clientCredentials</param>
        /// <param name="tenantName">tenant-name (optional)</param>
        /// <returns>Task of ApiResponse (AdminClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminClient>> UpdateClientCredentialsUsingPOSTAsyncWithHttpInfo (ClientCredentials clientCredentials, string tenantName = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminClientApi : IAdminClientApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminClientApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminClientApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminClientApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <returns>AdminClient</returns>
        public AdminClient CreateAdminClientUsingPOST (AdminClient _client)
        {
             ApiResponse<AdminClient> localVarResponse = CreateAdminClientUsingPOSTWithHttpInfo(_client);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <returns>ApiResponse of AdminClient</returns>
        public ApiResponse< AdminClient > CreateAdminClientUsingPOSTWithHttpInfo (AdminClient _client)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling AdminClientApi->CreateAdminClientUsingPOST");

            var localVarPath = "/admin/v1/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_client != null && _client.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_client); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _client; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAdminClientUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminClient)));
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <returns>Task of AdminClient</returns>
        public async System.Threading.Tasks.Task<AdminClient> CreateAdminClientUsingPOSTAsync (AdminClient _client)
        {
             ApiResponse<AdminClient> localVarResponse = await CreateAdminClientUsingPOSTAsyncWithHttpInfo(_client);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <returns>Task of ApiResponse (AdminClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminClient>> CreateAdminClientUsingPOSTAsyncWithHttpInfo (AdminClient _client)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling AdminClientApi->CreateAdminClientUsingPOST");

            var localVarPath = "/admin/v1/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_client != null && _client.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_client); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _client; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAdminClientUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminClient)));
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns></returns>
        public void DeleteAdminClientUsingDELETE (long? clientId)
        {
             DeleteAdminClientUsingDELETEWithHttpInfo(clientId);
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAdminClientUsingDELETEWithHttpInfo (long? clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AdminClientApi->DeleteAdminClientUsingDELETE");

            var localVarPath = "/admin/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAdminClientUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAdminClientUsingDELETEAsync (long? clientId)
        {
             await DeleteAdminClientUsingDELETEAsyncWithHttpInfo(clientId);

        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAdminClientUsingDELETEAsyncWithHttpInfo (long? clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AdminClientApi->DeleteAdminClientUsingDELETE");

            var localVarPath = "/admin/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAdminClientUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>AdminClient</returns>
        public AdminClient GetAdminClientUsingGET (long? clientId)
        {
             ApiResponse<AdminClient> localVarResponse = GetAdminClientUsingGETWithHttpInfo(clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>ApiResponse of AdminClient</returns>
        public ApiResponse< AdminClient > GetAdminClientUsingGETWithHttpInfo (long? clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AdminClientApi->GetAdminClientUsingGET");

            var localVarPath = "/admin/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminClientUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminClient)));
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of AdminClient</returns>
        public async System.Threading.Tasks.Task<AdminClient> GetAdminClientUsingGETAsync (long? clientId)
        {
             ApiResponse<AdminClient> localVarResponse = await GetAdminClientUsingGETAsyncWithHttpInfo(clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of ApiResponse (AdminClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminClient>> GetAdminClientUsingGETAsyncWithHttpInfo (long? clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AdminClientApi->GetAdminClientUsingGET");

            var localVarPath = "/admin/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminClientUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminClient)));
        }

        /// <summary>
        /// getAllAdminClient 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to username)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAdminClient</returns>
        public PageAdminClient GetAllAdminClientUsingGET (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAdminClient> localVarResponse = GetAllAdminClientUsingGETWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllAdminClient 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to username)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAdminClient</returns>
        public ApiResponse< PageAdminClient > GetAllAdminClientUsingGETWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/admin/v1/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAdminClientUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAdminClient)));
        }

        /// <summary>
        /// getAllAdminClient 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to username)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAdminClient</returns>
        public async System.Threading.Tasks.Task<PageAdminClient> GetAllAdminClientUsingGETAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAdminClient> localVarResponse = await GetAllAdminClientUsingGETAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllAdminClient 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to username)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAdminClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAdminClient>> GetAllAdminClientUsingGETAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/admin/v1/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAdminClientUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAdminClient)));
        }

        /// <summary>
        /// update 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">client_id</param>
        /// <returns>AdminClient</returns>
        public AdminClient UpdateAdminClientUsingPUT (Object _client, long? clientId)
        {
             ApiResponse<AdminClient> localVarResponse = UpdateAdminClientUsingPUTWithHttpInfo(_client, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">client_id</param>
        /// <returns>ApiResponse of AdminClient</returns>
        public ApiResponse< AdminClient > UpdateAdminClientUsingPUTWithHttpInfo (Object _client, long? clientId)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling AdminClientApi->UpdateAdminClientUsingPUT");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AdminClientApi->UpdateAdminClientUsingPUT");

            var localVarPath = "/admin/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (_client != null && _client.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_client); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _client; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAdminClientUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminClient)));
        }

        /// <summary>
        /// update 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of AdminClient</returns>
        public async System.Threading.Tasks.Task<AdminClient> UpdateAdminClientUsingPUTAsync (Object _client, long? clientId)
        {
             ApiResponse<AdminClient> localVarResponse = await UpdateAdminClientUsingPUTAsyncWithHttpInfo(_client, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">client_id</param>
        /// <returns>Task of ApiResponse (AdminClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminClient>> UpdateAdminClientUsingPUTAsyncWithHttpInfo (Object _client, long? clientId)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling AdminClientApi->UpdateAdminClientUsingPUT");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AdminClientApi->UpdateAdminClientUsingPUT");

            var localVarPath = "/admin/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (_client != null && _client.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_client); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _client; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAdminClientUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminClient)));
        }

        /// <summary>
        /// updateClientCredentials 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCredentials">clientCredentials</param>
        /// <param name="tenantName">tenant-name (optional)</param>
        /// <returns>AdminClient</returns>
        public AdminClient UpdateClientCredentialsUsingPOST (ClientCredentials clientCredentials, string tenantName = null)
        {
             ApiResponse<AdminClient> localVarResponse = UpdateClientCredentialsUsingPOSTWithHttpInfo(clientCredentials, tenantName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateClientCredentials 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCredentials">clientCredentials</param>
        /// <param name="tenantName">tenant-name (optional)</param>
        /// <returns>ApiResponse of AdminClient</returns>
        public ApiResponse< AdminClient > UpdateClientCredentialsUsingPOSTWithHttpInfo (ClientCredentials clientCredentials, string tenantName = null)
        {
            // verify the required parameter 'clientCredentials' is set
            if (clientCredentials == null)
                throw new ApiException(400, "Missing required parameter 'clientCredentials' when calling AdminClientApi->UpdateClientCredentialsUsingPOST");

            var localVarPath = "/admin/v1/client_credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantName != null) localVarHeaderParams.Add("tenant-name", this.Configuration.ApiClient.ParameterToString(tenantName)); // header parameter
            if (clientCredentials != null && clientCredentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientCredentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientCredentials; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientCredentialsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminClient)));
        }

        /// <summary>
        /// updateClientCredentials 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCredentials">clientCredentials</param>
        /// <param name="tenantName">tenant-name (optional)</param>
        /// <returns>Task of AdminClient</returns>
        public async System.Threading.Tasks.Task<AdminClient> UpdateClientCredentialsUsingPOSTAsync (ClientCredentials clientCredentials, string tenantName = null)
        {
             ApiResponse<AdminClient> localVarResponse = await UpdateClientCredentialsUsingPOSTAsyncWithHttpInfo(clientCredentials, tenantName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateClientCredentials 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCredentials">clientCredentials</param>
        /// <param name="tenantName">tenant-name (optional)</param>
        /// <returns>Task of ApiResponse (AdminClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminClient>> UpdateClientCredentialsUsingPOSTAsyncWithHttpInfo (ClientCredentials clientCredentials, string tenantName = null)
        {
            // verify the required parameter 'clientCredentials' is set
            if (clientCredentials == null)
                throw new ApiException(400, "Missing required parameter 'clientCredentials' when calling AdminClientApi->UpdateClientCredentialsUsingPOST");

            var localVarPath = "/admin/v1/client_credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantName != null) localVarHeaderParams.Add("tenant-name", this.Configuration.ApiClient.ParameterToString(tenantName)); // header parameter
            if (clientCredentials != null && clientCredentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientCredentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientCredentials; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientCredentialsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminClient)));
        }

    }
}
