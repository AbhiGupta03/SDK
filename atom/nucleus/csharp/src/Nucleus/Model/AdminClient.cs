/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.4
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// AdminClient
    /// </summary>
    [DataContract]
    public partial class AdminClient :  IEquatable<AdminClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminClient" /> class.
        /// </summary>
        /// <param name="authorities">authorities.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="id">id.</param>
        /// <param name="is2fa">is2fa.</param>
        /// <param name="is2faVerified">is2faVerified.</param>
        /// <param name="isAccountNonExpired">isAccountNonExpired.</param>
        /// <param name="isAccountNonLocked">isAccountNonLocked.</param>
        /// <param name="isCredentialsNonExpired">isCredentialsNonExpired.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="password">password.</param>
        /// <param name="tenant">tenant.</param>
        /// <param name="updateDate">updateDate.</param>
        /// <param name="username">username.</param>
        public AdminClient(string authorities = default(string), DateTime? createDate = default(DateTime?), long? id = default(long?), bool? is2fa = default(bool?), bool? is2faVerified = default(bool?), bool? isAccountNonExpired = default(bool?), bool? isAccountNonLocked = default(bool?), bool? isCredentialsNonExpired = default(bool?), bool? isEnabled = default(bool?), string password = default(string), string tenant = default(string), DateTime? updateDate = default(DateTime?), string username = default(string))
        {
            this.Authorities = authorities;
            this.CreateDate = createDate;
            this.Id = id;
            this.Is2fa = is2fa;
            this.Is2faVerified = is2faVerified;
            this.IsAccountNonExpired = isAccountNonExpired;
            this.IsAccountNonLocked = isAccountNonLocked;
            this.IsCredentialsNonExpired = isCredentialsNonExpired;
            this.IsEnabled = isEnabled;
            this.Password = password;
            this.Tenant = tenant;
            this.UpdateDate = updateDate;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets Authorities
        /// </summary>
        [DataMember(Name="authorities", EmitDefaultValue=false)]
        public string Authorities { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Is2fa
        /// </summary>
        [DataMember(Name="is_2fa", EmitDefaultValue=false)]
        public bool? Is2fa { get; set; }

        /// <summary>
        /// Gets or Sets Is2faVerified
        /// </summary>
        [DataMember(Name="is_2fa_verified", EmitDefaultValue=false)]
        public bool? Is2faVerified { get; set; }

        /// <summary>
        /// Gets or Sets IsAccountNonExpired
        /// </summary>
        [DataMember(Name="is_account_non_expired", EmitDefaultValue=false)]
        public bool? IsAccountNonExpired { get; set; }

        /// <summary>
        /// Gets or Sets IsAccountNonLocked
        /// </summary>
        [DataMember(Name="is_account_non_locked", EmitDefaultValue=false)]
        public bool? IsAccountNonLocked { get; set; }

        /// <summary>
        /// Gets or Sets IsCredentialsNonExpired
        /// </summary>
        [DataMember(Name="is_credentials_non_expired", EmitDefaultValue=false)]
        public bool? IsCredentialsNonExpired { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="is_enabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public string Tenant { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminClient {\n");
            sb.Append("  Authorities: ").Append(Authorities).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Is2fa: ").Append(Is2fa).Append("\n");
            sb.Append("  Is2faVerified: ").Append(Is2faVerified).Append("\n");
            sb.Append("  IsAccountNonExpired: ").Append(IsAccountNonExpired).Append("\n");
            sb.Append("  IsAccountNonLocked: ").Append(IsAccountNonLocked).Append("\n");
            sb.Append("  IsCredentialsNonExpired: ").Append(IsCredentialsNonExpired).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdminClient);
        }

        /// <summary>
        /// Returns true if AdminClient instances are equal
        /// </summary>
        /// <param name="input">Instance of AdminClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminClient input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Authorities == input.Authorities ||
                    (this.Authorities != null &&
                    this.Authorities.Equals(input.Authorities))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Is2fa == input.Is2fa ||
                    (this.Is2fa != null &&
                    this.Is2fa.Equals(input.Is2fa))
                ) && 
                (
                    this.Is2faVerified == input.Is2faVerified ||
                    (this.Is2faVerified != null &&
                    this.Is2faVerified.Equals(input.Is2faVerified))
                ) && 
                (
                    this.IsAccountNonExpired == input.IsAccountNonExpired ||
                    (this.IsAccountNonExpired != null &&
                    this.IsAccountNonExpired.Equals(input.IsAccountNonExpired))
                ) && 
                (
                    this.IsAccountNonLocked == input.IsAccountNonLocked ||
                    (this.IsAccountNonLocked != null &&
                    this.IsAccountNonLocked.Equals(input.IsAccountNonLocked))
                ) && 
                (
                    this.IsCredentialsNonExpired == input.IsCredentialsNonExpired ||
                    (this.IsCredentialsNonExpired != null &&
                    this.IsCredentialsNonExpired.Equals(input.IsCredentialsNonExpired))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Tenant == input.Tenant ||
                    (this.Tenant != null &&
                    this.Tenant.Equals(input.Tenant))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Authorities != null)
                    hashCode = hashCode * 59 + this.Authorities.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Is2fa != null)
                    hashCode = hashCode * 59 + this.Is2fa.GetHashCode();
                if (this.Is2faVerified != null)
                    hashCode = hashCode * 59 + this.Is2faVerified.GetHashCode();
                if (this.IsAccountNonExpired != null)
                    hashCode = hashCode * 59 + this.IsAccountNonExpired.GetHashCode();
                if (this.IsAccountNonLocked != null)
                    hashCode = hashCode * 59 + this.IsAccountNonLocked.GetHashCode();
                if (this.IsCredentialsNonExpired != null)
                    hashCode = hashCode * 59 + this.IsCredentialsNonExpired.GetHashCode();
                if (this.IsEnabled != null)
                    hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Tenant != null)
                    hashCode = hashCode * 59 + this.Tenant.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
