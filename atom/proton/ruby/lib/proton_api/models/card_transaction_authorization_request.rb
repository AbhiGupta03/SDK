=begin
#Hydrogen Proton API

#Financial engineering module of Hydrogen Atom

OpenAPI spec version: 1.8.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module ProtonApi
  class CardTransactionAuthorizationRequest
    attr_accessor :merchant

    attr_accessor :partial_auth

    attr_accessor :date

    attr_accessor :merchant_category_code

    attr_accessor :cleanse_data

    attr_accessor :auth_type

    attr_accessor :amount

    attr_accessor :transaction_type

    attr_accessor :currency_code

    attr_accessor :description

    attr_accessor :card_id

    attr_accessor :merchant_category

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'merchant' => :'merchant',
        :'partial_auth' => :'partial_auth',
        :'date' => :'date',
        :'merchant_category_code' => :'merchant_category_code',
        :'cleanse_data' => :'cleanse_data',
        :'auth_type' => :'auth_type',
        :'amount' => :'amount',
        :'transaction_type' => :'transaction_type',
        :'currency_code' => :'currency_code',
        :'description' => :'description',
        :'card_id' => :'card_id',
        :'merchant_category' => :'merchant_category'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'merchant' => :'String',
        :'partial_auth' => :'BOOLEAN',
        :'date' => :'DateTime',
        :'merchant_category_code' => :'Integer',
        :'cleanse_data' => :'BOOLEAN',
        :'auth_type' => :'Array<String>',
        :'amount' => :'Float',
        :'transaction_type' => :'String',
        :'currency_code' => :'String',
        :'description' => :'String',
        :'card_id' => :'String',
        :'merchant_category' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'merchant')
        self.merchant = attributes[:'merchant']
      else
        self.merchant = 'null'
      end

      if attributes.has_key?(:'partial_auth')
        self.partial_auth = attributes[:'partial_auth']
      else
        self.partial_auth = false
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'merchant_category_code')
        self.merchant_category_code = attributes[:'merchant_category_code']
      end

      if attributes.has_key?(:'cleanse_data')
        self.cleanse_data = attributes[:'cleanse_data']
      else
        self.cleanse_data = false
      end

      if attributes.has_key?(:'auth_type')
        if (value = attributes[:'auth_type']).is_a?(Array)
          self.auth_type = value
        end
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = 'null'
      end

      if attributes.has_key?(:'card_id')
        self.card_id = attributes[:'card_id']
      end

      if attributes.has_key?(:'merchant_category')
        self.merchant_category = attributes[:'merchant_category']
      else
        self.merchant_category = 'null'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @auth_type.nil?
        invalid_properties.push('invalid value for "auth_type", auth_type cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @transaction_type.nil?
        invalid_properties.push('invalid value for "transaction_type", transaction_type cannot be nil.')
      end

      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      if @card_id.nil?
        invalid_properties.push('invalid value for "card_id", card_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @date.nil?
      return false if @auth_type.nil?
      return false if @amount.nil?
      return false if @transaction_type.nil?
      transaction_type_validator = EnumAttributeValidator.new('String', ['atm_withdrawal', 'purchase'])
      return false unless transaction_type_validator.valid?(@transaction_type)
      return false if @currency_code.nil?
      return false if @card_id.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_type Object to be assigned
    def transaction_type=(transaction_type)
      validator = EnumAttributeValidator.new('String', ['atm_withdrawal', 'purchase'])
      unless validator.valid?(transaction_type)
        fail ArgumentError, 'invalid value for "transaction_type", must be one of #{validator.allowable_values}.'
      end
      @transaction_type = transaction_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          merchant == o.merchant &&
          partial_auth == o.partial_auth &&
          date == o.date &&
          merchant_category_code == o.merchant_category_code &&
          cleanse_data == o.cleanse_data &&
          auth_type == o.auth_type &&
          amount == o.amount &&
          transaction_type == o.transaction_type &&
          currency_code == o.currency_code &&
          description == o.description &&
          card_id == o.card_id &&
          merchant_category == o.merchant_category
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [merchant, partial_auth, date, merchant_category_code, cleanse_data, auth_type, amount, transaction_type, currency_code, description, card_id, merchant_category].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ProtonApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
