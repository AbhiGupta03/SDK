=begin
#Hydrogen Proton API

#Financial engineering module of Hydrogen Atom

OpenAPI spec version: 1.8.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'date'

module ProtonApi
  class SavingsCalculatorRequest
    attr_accessor :inflation_rate

    attr_accessor :deposit_schedule

    attr_accessor :create_log

    attr_accessor :aggregation_account_ids

    attr_accessor :initial_balance

    attr_accessor :horizon

    attr_accessor :horizon_frequency_interval

    attr_accessor :tax_rate

    attr_accessor :account_ids

    attr_accessor :return_schedule

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'inflation_rate' => :'inflation_rate',
        :'deposit_schedule' => :'deposit_schedule',
        :'create_log' => :'create_log',
        :'aggregation_account_ids' => :'aggregation_account_ids',
        :'initial_balance' => :'initial_balance',
        :'horizon' => :'horizon',
        :'horizon_frequency_interval' => :'horizon_frequency_interval',
        :'tax_rate' => :'tax_rate',
        :'account_ids' => :'account_ids',
        :'return_schedule' => :'return_schedule'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'inflation_rate' => :'Float',
        :'deposit_schedule' => :'Array<SavingsDepositSchedule>',
        :'create_log' => :'BOOLEAN',
        :'aggregation_account_ids' => :'Array<String>',
        :'initial_balance' => :'Float',
        :'horizon' => :'Integer',
        :'horizon_frequency_interval' => :'String',
        :'tax_rate' => :'Float',
        :'account_ids' => :'Array<String>',
        :'return_schedule' => :'Array<Float>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'inflation_rate')
        self.inflation_rate = attributes[:'inflation_rate']
      else
        self.inflation_rate = 0.0
      end

      if attributes.has_key?(:'deposit_schedule')
        if (value = attributes[:'deposit_schedule']).is_a?(Array)
          self.deposit_schedule = value
        end
      end

      if attributes.has_key?(:'create_log')
        self.create_log = attributes[:'create_log']
      else
        self.create_log = false
      end

      if attributes.has_key?(:'aggregation_account_ids')
        if (value = attributes[:'aggregation_account_ids']).is_a?(Array)
          self.aggregation_account_ids = value
        end
      end

      if attributes.has_key?(:'initial_balance')
        self.initial_balance = attributes[:'initial_balance']
      end

      if attributes.has_key?(:'horizon')
        self.horizon = attributes[:'horizon']
      end

      if attributes.has_key?(:'horizon_frequency_interval')
        self.horizon_frequency_interval = attributes[:'horizon_frequency_interval']
      else
        self.horizon_frequency_interval = 'year'
      end

      if attributes.has_key?(:'tax_rate')
        self.tax_rate = attributes[:'tax_rate']
      else
        self.tax_rate = 0.0
      end

      if attributes.has_key?(:'account_ids')
        if (value = attributes[:'account_ids']).is_a?(Array)
          self.account_ids = value
        end
      end

      if attributes.has_key?(:'return_schedule')
        if (value = attributes[:'return_schedule']).is_a?(Array)
          self.return_schedule = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@inflation_rate.nil? && @inflation_rate < -1
        invalid_properties.push('invalid value for "inflation_rate", must be greater than or equal to -1.')
      end

      if !@initial_balance.nil? && @initial_balance < 0
        invalid_properties.push('invalid value for "initial_balance", must be greater than or equal to 0.')
      end

      if @horizon.nil?
        invalid_properties.push('invalid value for "horizon", horizon cannot be nil.')
      end

      if @horizon < 0
        invalid_properties.push('invalid value for "horizon", must be greater than or equal to 0.')
      end

      if !@tax_rate.nil? && @tax_rate > 1
        invalid_properties.push('invalid value for "tax_rate", must be smaller than or equal to 1.')
      end

      if !@tax_rate.nil? && @tax_rate < 0
        invalid_properties.push('invalid value for "tax_rate", must be greater than or equal to 0.')
      end

      if @return_schedule.nil?
        invalid_properties.push('invalid value for "return_schedule", return_schedule cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@inflation_rate.nil? && @inflation_rate < -1
      return false if !@initial_balance.nil? && @initial_balance < 0
      return false if @horizon.nil?
      return false if @horizon < 0
      horizon_frequency_interval_validator = EnumAttributeValidator.new('String', ['year', 'quarter', 'month', 'week', 'day'])
      return false unless horizon_frequency_interval_validator.valid?(@horizon_frequency_interval)
      return false if !@tax_rate.nil? && @tax_rate > 1
      return false if !@tax_rate.nil? && @tax_rate < 0
      return false if @return_schedule.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] inflation_rate Value to be assigned
    def inflation_rate=(inflation_rate)
      if !inflation_rate.nil? && inflation_rate < -1
        fail ArgumentError, 'invalid value for "inflation_rate", must be greater than or equal to -1.'
      end

      @inflation_rate = inflation_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] initial_balance Value to be assigned
    def initial_balance=(initial_balance)
      if !initial_balance.nil? && initial_balance < 0
        fail ArgumentError, 'invalid value for "initial_balance", must be greater than or equal to 0.'
      end

      @initial_balance = initial_balance
    end

    # Custom attribute writer method with validation
    # @param [Object] horizon Value to be assigned
    def horizon=(horizon)
      if horizon.nil?
        fail ArgumentError, 'horizon cannot be nil'
      end

      if horizon < 0
        fail ArgumentError, 'invalid value for "horizon", must be greater than or equal to 0.'
      end

      @horizon = horizon
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] horizon_frequency_interval Object to be assigned
    def horizon_frequency_interval=(horizon_frequency_interval)
      validator = EnumAttributeValidator.new('String', ['year', 'quarter', 'month', 'week', 'day'])
      unless validator.valid?(horizon_frequency_interval)
        fail ArgumentError, 'invalid value for "horizon_frequency_interval", must be one of #{validator.allowable_values}.'
      end
      @horizon_frequency_interval = horizon_frequency_interval
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_rate Value to be assigned
    def tax_rate=(tax_rate)
      if !tax_rate.nil? && tax_rate > 1
        fail ArgumentError, 'invalid value for "tax_rate", must be smaller than or equal to 1.'
      end

      if !tax_rate.nil? && tax_rate < 0
        fail ArgumentError, 'invalid value for "tax_rate", must be greater than or equal to 0.'
      end

      @tax_rate = tax_rate
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          inflation_rate == o.inflation_rate &&
          deposit_schedule == o.deposit_schedule &&
          create_log == o.create_log &&
          aggregation_account_ids == o.aggregation_account_ids &&
          initial_balance == o.initial_balance &&
          horizon == o.horizon &&
          horizon_frequency_interval == o.horizon_frequency_interval &&
          tax_rate == o.tax_rate &&
          account_ids == o.account_ids &&
          return_schedule == o.return_schedule
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [inflation_rate, deposit_schedule, create_log, aggregation_account_ids, initial_balance, horizon, horizon_frequency_interval, tax_rate, account_ids, return_schedule].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", attributes[self.class.attribute_map[key]])
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end
      self
    end
# Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        (value)
      when :Date
        (value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ProtonApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end


    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
