/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.7.18
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.UUID;
import org.threeten.bp.LocalDate;

/**
 * BudgetCalculatorRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-29T05:03:35.524Z")
public class BudgetCalculatorRequest {
  @SerializedName("relative_lookback")
  private Boolean relativeLookback = true;

  @SerializedName("lookback_periods")
  private Integer lookbackPeriods = 1;

  @SerializedName("as_of_date")
  private LocalDate asOfDate = null;

  @SerializedName("budget_id")
  private UUID budgetId = null;

  public BudgetCalculatorRequest relativeLookback(Boolean relativeLookback) {
    this.relativeLookback = relativeLookback;
    return this;
  }

   /**
   * Get relativeLookback
   * @return relativeLookback
  **/
  @ApiModelProperty(value = "")
  public Boolean isRelativeLookback() {
    return relativeLookback;
  }

  public void setRelativeLookback(Boolean relativeLookback) {
    this.relativeLookback = relativeLookback;
  }

  public BudgetCalculatorRequest lookbackPeriods(Integer lookbackPeriods) {
    this.lookbackPeriods = lookbackPeriods;
    return this;
  }

   /**
   * Get lookbackPeriods
   * minimum: 1
   * @return lookbackPeriods
  **/
  @ApiModelProperty(value = "")
  public Integer getLookbackPeriods() {
    return lookbackPeriods;
  }

  public void setLookbackPeriods(Integer lookbackPeriods) {
    this.lookbackPeriods = lookbackPeriods;
  }

  public BudgetCalculatorRequest asOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * Get asOfDate
   * @return asOfDate
  **/
  @ApiModelProperty(value = "")
  public LocalDate getAsOfDate() {
    return asOfDate;
  }

  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
  }

  public BudgetCalculatorRequest budgetId(UUID budgetId) {
    this.budgetId = budgetId;
    return this;
  }

   /**
   * Get budgetId
   * @return budgetId
  **/
  @ApiModelProperty(required = true, value = "")
  public UUID getBudgetId() {
    return budgetId;
  }

  public void setBudgetId(UUID budgetId) {
    this.budgetId = budgetId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetCalculatorRequest budgetCalculatorRequest = (BudgetCalculatorRequest) o;
    return Objects.equals(this.relativeLookback, budgetCalculatorRequest.relativeLookback) &&
        Objects.equals(this.lookbackPeriods, budgetCalculatorRequest.lookbackPeriods) &&
        Objects.equals(this.asOfDate, budgetCalculatorRequest.asOfDate) &&
        Objects.equals(this.budgetId, budgetCalculatorRequest.budgetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relativeLookback, lookbackPeriods, asOfDate, budgetId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetCalculatorRequest {\n");
    
    sb.append("    relativeLookback: ").append(toIndentedString(relativeLookback)).append("\n");
    sb.append("    lookbackPeriods: ").append(toIndentedString(lookbackPeriods)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    budgetId: ").append(toIndentedString(budgetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

