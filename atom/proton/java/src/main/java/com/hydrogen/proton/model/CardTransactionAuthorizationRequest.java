/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.8.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;

/**
 * CardTransactionAuthorizationRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-12-03T15:06:55.665Z")



public class CardTransactionAuthorizationRequest {
  @SerializedName("merchant")
  private String merchant = "null";

  @SerializedName("partial_auth")
  private Boolean partialAuth = false;

  @SerializedName("date")
  private OffsetDateTime date = null;

  @SerializedName("merchant_category_code")
  private Integer merchantCategoryCode = null;

  @SerializedName("cleanse_data")
  private Boolean cleanseData = false;

  /**
   * Gets or Sets authType
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    BALANCE("balance"),
    
    SPENDING_CONTROL("spending_control");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String text) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuthTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("auth_type")
  private List<AuthTypeEnum> authType = new ArrayList<AuthTypeEnum>();

  @SerializedName("amount")
  private Float amount = null;

  /**
   * Gets or Sets transactionType
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    ATM_WITHDRAWAL("atm_withdrawal"),
    
    PURCHASE("purchase");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String text) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransactionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("transaction_type")
  private TransactionTypeEnum transactionType = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("description")
  private String description = "null";

  @SerializedName("card_id")
  private UUID cardId = null;

  @SerializedName("merchant_category")
  private String merchantCategory = "null";

  public CardTransactionAuthorizationRequest merchant(String merchant) {
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @ApiModelProperty(value = "")
  public String getMerchant() {
    return merchant;
  }

  public void setMerchant(String merchant) {
    this.merchant = merchant;
  }

  public CardTransactionAuthorizationRequest partialAuth(Boolean partialAuth) {
    this.partialAuth = partialAuth;
    return this;
  }

   /**
   * Get partialAuth
   * @return partialAuth
  **/
  @ApiModelProperty(value = "")
  public Boolean isPartialAuth() {
    return partialAuth;
  }

  public void setPartialAuth(Boolean partialAuth) {
    this.partialAuth = partialAuth;
  }

  public CardTransactionAuthorizationRequest date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @ApiModelProperty(required = true, value = "")
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }

  public CardTransactionAuthorizationRequest merchantCategoryCode(Integer merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

   /**
   * Get merchantCategoryCode
   * @return merchantCategoryCode
  **/
  @ApiModelProperty(value = "")
  public Integer getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(Integer merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }

  public CardTransactionAuthorizationRequest cleanseData(Boolean cleanseData) {
    this.cleanseData = cleanseData;
    return this;
  }

   /**
   * Get cleanseData
   * @return cleanseData
  **/
  @ApiModelProperty(value = "")
  public Boolean isCleanseData() {
    return cleanseData;
  }

  public void setCleanseData(Boolean cleanseData) {
    this.cleanseData = cleanseData;
  }

  public CardTransactionAuthorizationRequest authType(List<AuthTypeEnum> authType) {
    this.authType = authType;
    return this;
  }

  public CardTransactionAuthorizationRequest addAuthTypeItem(AuthTypeEnum authTypeItem) {
    this.authType.add(authTypeItem);
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @ApiModelProperty(required = true, value = "")
  public List<AuthTypeEnum> getAuthType() {
    return authType;
  }

  public void setAuthType(List<AuthTypeEnum> authType) {
    this.authType = authType;
  }

  public CardTransactionAuthorizationRequest amount(Float amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "")
  public Float getAmount() {
    return amount;
  }

  public void setAmount(Float amount) {
    this.amount = amount;
  }

  public CardTransactionAuthorizationRequest transactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @ApiModelProperty(required = true, value = "")
  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }

  public CardTransactionAuthorizationRequest currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public CardTransactionAuthorizationRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CardTransactionAuthorizationRequest cardId(UUID cardId) {
    this.cardId = cardId;
    return this;
  }

   /**
   * Get cardId
   * @return cardId
  **/
  @ApiModelProperty(required = true, value = "")
  public UUID getCardId() {
    return cardId;
  }

  public void setCardId(UUID cardId) {
    this.cardId = cardId;
  }

  public CardTransactionAuthorizationRequest merchantCategory(String merchantCategory) {
    this.merchantCategory = merchantCategory;
    return this;
  }

   /**
   * Get merchantCategory
   * @return merchantCategory
  **/
  @ApiModelProperty(value = "")
  public String getMerchantCategory() {
    return merchantCategory;
  }

  public void setMerchantCategory(String merchantCategory) {
    this.merchantCategory = merchantCategory;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTransactionAuthorizationRequest cardTransactionAuthorizationRequest = (CardTransactionAuthorizationRequest) o;
    return Objects.equals(this.merchant, cardTransactionAuthorizationRequest.merchant) &&
        Objects.equals(this.partialAuth, cardTransactionAuthorizationRequest.partialAuth) &&
        Objects.equals(this.date, cardTransactionAuthorizationRequest.date) &&
        Objects.equals(this.merchantCategoryCode, cardTransactionAuthorizationRequest.merchantCategoryCode) &&
        Objects.equals(this.cleanseData, cardTransactionAuthorizationRequest.cleanseData) &&
        Objects.equals(this.authType, cardTransactionAuthorizationRequest.authType) &&
        Objects.equals(this.amount, cardTransactionAuthorizationRequest.amount) &&
        Objects.equals(this.transactionType, cardTransactionAuthorizationRequest.transactionType) &&
        Objects.equals(this.currencyCode, cardTransactionAuthorizationRequest.currencyCode) &&
        Objects.equals(this.description, cardTransactionAuthorizationRequest.description) &&
        Objects.equals(this.cardId, cardTransactionAuthorizationRequest.cardId) &&
        Objects.equals(this.merchantCategory, cardTransactionAuthorizationRequest.merchantCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchant, partialAuth, date, merchantCategoryCode, cleanseData, authType, amount, transactionType, currencyCode, description, cardId, merchantCategory);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTransactionAuthorizationRequest {\n");
    
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    partialAuth: ").append(toIndentedString(partialAuth)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    cleanseData: ").append(toIndentedString(cleanseData)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    merchantCategory: ").append(toIndentedString(merchantCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

