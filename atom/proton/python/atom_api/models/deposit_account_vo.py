# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DepositAccountVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deposit_account_id': 'str',
        'deposit_account_name': 'str',
        'deposit_amount': 'float',
        'deposit_direction': 'str',
        'deposit_id': 'str',
        'deposit_received_date': 'datetime'
    }

    attribute_map = {
        'deposit_account_id': 'deposit_account_id',
        'deposit_account_name': 'deposit_account_name',
        'deposit_amount': 'deposit_amount',
        'deposit_direction': 'deposit_direction',
        'deposit_id': 'deposit_id',
        'deposit_received_date': 'deposit_received_date'
    }

    def __init__(self, deposit_account_id=None, deposit_account_name=None, deposit_amount=None, deposit_direction=None, deposit_id=None, deposit_received_date=None):  # noqa: E501
        """DepositAccountVO - a model defined in Swagger"""  # noqa: E501

        self._deposit_account_id = None
        self._deposit_account_name = None
        self._deposit_amount = None
        self._deposit_direction = None
        self._deposit_id = None
        self._deposit_received_date = None
        self.discriminator = None

        if deposit_account_id is not None:
            self.deposit_account_id = deposit_account_id
        if deposit_account_name is not None:
            self.deposit_account_name = deposit_account_name
        if deposit_amount is not None:
            self.deposit_amount = deposit_amount
        if deposit_direction is not None:
            self.deposit_direction = deposit_direction
        if deposit_id is not None:
            self.deposit_id = deposit_id
        if deposit_received_date is not None:
            self.deposit_received_date = deposit_received_date

    @property
    def deposit_account_id(self):
        """Gets the deposit_account_id of this DepositAccountVO.  # noqa: E501


        :return: The deposit_account_id of this DepositAccountVO.  # noqa: E501
        :rtype: str
        """
        return self._deposit_account_id

    @deposit_account_id.setter
    def deposit_account_id(self, deposit_account_id):
        """Sets the deposit_account_id of this DepositAccountVO.


        :param deposit_account_id: The deposit_account_id of this DepositAccountVO.  # noqa: E501
        :type: str
        """

        self._deposit_account_id = deposit_account_id

    @property
    def deposit_account_name(self):
        """Gets the deposit_account_name of this DepositAccountVO.  # noqa: E501


        :return: The deposit_account_name of this DepositAccountVO.  # noqa: E501
        :rtype: str
        """
        return self._deposit_account_name

    @deposit_account_name.setter
    def deposit_account_name(self, deposit_account_name):
        """Sets the deposit_account_name of this DepositAccountVO.


        :param deposit_account_name: The deposit_account_name of this DepositAccountVO.  # noqa: E501
        :type: str
        """

        self._deposit_account_name = deposit_account_name

    @property
    def deposit_amount(self):
        """Gets the deposit_amount of this DepositAccountVO.  # noqa: E501


        :return: The deposit_amount of this DepositAccountVO.  # noqa: E501
        :rtype: float
        """
        return self._deposit_amount

    @deposit_amount.setter
    def deposit_amount(self, deposit_amount):
        """Sets the deposit_amount of this DepositAccountVO.


        :param deposit_amount: The deposit_amount of this DepositAccountVO.  # noqa: E501
        :type: float
        """

        self._deposit_amount = deposit_amount

    @property
    def deposit_direction(self):
        """Gets the deposit_direction of this DepositAccountVO.  # noqa: E501


        :return: The deposit_direction of this DepositAccountVO.  # noqa: E501
        :rtype: str
        """
        return self._deposit_direction

    @deposit_direction.setter
    def deposit_direction(self, deposit_direction):
        """Sets the deposit_direction of this DepositAccountVO.


        :param deposit_direction: The deposit_direction of this DepositAccountVO.  # noqa: E501
        :type: str
        """

        self._deposit_direction = deposit_direction

    @property
    def deposit_id(self):
        """Gets the deposit_id of this DepositAccountVO.  # noqa: E501


        :return: The deposit_id of this DepositAccountVO.  # noqa: E501
        :rtype: str
        """
        return self._deposit_id

    @deposit_id.setter
    def deposit_id(self, deposit_id):
        """Sets the deposit_id of this DepositAccountVO.


        :param deposit_id: The deposit_id of this DepositAccountVO.  # noqa: E501
        :type: str
        """

        self._deposit_id = deposit_id

    @property
    def deposit_received_date(self):
        """Gets the deposit_received_date of this DepositAccountVO.  # noqa: E501


        :return: The deposit_received_date of this DepositAccountVO.  # noqa: E501
        :rtype: datetime
        """
        return self._deposit_received_date

    @deposit_received_date.setter
    def deposit_received_date(self, deposit_received_date):
        """Sets the deposit_received_date of this DepositAccountVO.


        :param deposit_received_date: The deposit_received_date of this DepositAccountVO.  # noqa: E501
        :type: datetime
        """

        self._deposit_received_date = deposit_received_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DepositAccountVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepositAccountVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
