/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.8.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenProtonApi.AnnuitiesApi();
  });

  describe('(package)', function() {
    describe('AnnuitiesApi', function() {
      describe('annuityCalculatorAccumulationHorizon', function() {
        it('should call annuityCalculatorAccumulationHorizon successfully', function(done) {
          // TODO: uncomment, update parameter values for annuityCalculatorAccumulationHorizon call and complete the assertions
          /*
          var annuityCalculatorAccumulationHorizonRequest = new HydrogenProtonApi.AnnuityCalculatorAccumulationHorizonRequest();
          annuityCalculatorAccumulationHorizonRequest.inflationRate = 0.0;
          annuityCalculatorAccumulationHorizonRequest.annuityFrequencyInterval = "year";
          annuityCalculatorAccumulationHorizonRequest.depositSchedule = new HydrogenProtonApi.AnnuityDepositSchedule();
          annuityCalculatorAccumulationHorizonRequest.depositSchedule.depositAmount = 0.0;
          annuityCalculatorAccumulationHorizonRequest.depositSchedule.adjustDepositForInflation = false;
          annuityCalculatorAccumulationHorizonRequest.depositSchedule.depositFrequencyInterval = "year";
          annuityCalculatorAccumulationHorizonRequest.portfolioReturn = 0.0;
          annuityCalculatorAccumulationHorizonRequest.createLog = false;
          annuityCalculatorAccumulationHorizonRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorAccumulationHorizonRequest.initialBalance = 0.0;
          annuityCalculatorAccumulationHorizonRequest.decumulationHorizon = 0;
          annuityCalculatorAccumulationHorizonRequest.taxRate = 0.0;
          annuityCalculatorAccumulationHorizonRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorAccumulationHorizonRequest.annuityAmount = 0.0;
          annuityCalculatorAccumulationHorizonRequest.accumulationHorizon = 0;

          instance.annuityCalculatorAccumulationHorizon(annuityCalculatorAccumulationHorizonRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('annuityCalculatorAnnuityAmount', function() {
        it('should call annuityCalculatorAnnuityAmount successfully', function(done) {
          // TODO: uncomment, update parameter values for annuityCalculatorAnnuityAmount call and complete the assertions
          /*
          var annuityCalculatorAnnuityAmountRequest = new HydrogenProtonApi.AnnuityCalculatorAnnuityAmountRequest();
          annuityCalculatorAnnuityAmountRequest.inflationRate = 0.0;
          annuityCalculatorAnnuityAmountRequest.annuityFrequencyInterval = "year";
          annuityCalculatorAnnuityAmountRequest.depositSchedule = new HydrogenProtonApi.AnnuityDepositSchedule();
          annuityCalculatorAnnuityAmountRequest.depositSchedule.depositAmount = 0.0;
          annuityCalculatorAnnuityAmountRequest.depositSchedule.adjustDepositForInflation = false;
          annuityCalculatorAnnuityAmountRequest.depositSchedule.depositFrequencyInterval = "year";
          annuityCalculatorAnnuityAmountRequest.portfolioReturn = 0.0;
          annuityCalculatorAnnuityAmountRequest.createLog = false;
          annuityCalculatorAnnuityAmountRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorAnnuityAmountRequest.initialBalance = 0.0;
          annuityCalculatorAnnuityAmountRequest.decumulationHorizon = 0;
          annuityCalculatorAnnuityAmountRequest.taxRate = 0.0;
          annuityCalculatorAnnuityAmountRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorAnnuityAmountRequest.annuityAmount = 0.0;
          annuityCalculatorAnnuityAmountRequest.accumulationHorizon = 0;

          instance.annuityCalculatorAnnuityAmount(annuityCalculatorAnnuityAmountRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('annuityCalculatorDecumulationHorizon', function() {
        it('should call annuityCalculatorDecumulationHorizon successfully', function(done) {
          // TODO: uncomment, update parameter values for annuityCalculatorDecumulationHorizon call and complete the assertions
          /*
          var annuityCalculatorDecumulationHorizonRequest = new HydrogenProtonApi.AnnuityCalculatorDecumulationHorizonRequest();
          annuityCalculatorDecumulationHorizonRequest.inflationRate = 0.0;
          annuityCalculatorDecumulationHorizonRequest.annuityFrequencyInterval = "year";
          annuityCalculatorDecumulationHorizonRequest.depositSchedule = new HydrogenProtonApi.AnnuityDepositSchedule();
          annuityCalculatorDecumulationHorizonRequest.depositSchedule.depositAmount = 0.0;
          annuityCalculatorDecumulationHorizonRequest.depositSchedule.adjustDepositForInflation = false;
          annuityCalculatorDecumulationHorizonRequest.depositSchedule.depositFrequencyInterval = "year";
          annuityCalculatorDecumulationHorizonRequest.portfolioReturn = 0.0;
          annuityCalculatorDecumulationHorizonRequest.createLog = false;
          annuityCalculatorDecumulationHorizonRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorDecumulationHorizonRequest.initialBalance = 0.0;
          annuityCalculatorDecumulationHorizonRequest.decumulationHorizon = 0;
          annuityCalculatorDecumulationHorizonRequest.taxRate = 0.0;
          annuityCalculatorDecumulationHorizonRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorDecumulationHorizonRequest.annuityAmount = 0.0;
          annuityCalculatorDecumulationHorizonRequest.accumulationHorizon = 0;

          instance.annuityCalculatorDecumulationHorizon(annuityCalculatorDecumulationHorizonRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('annuityCalculatorDepositAmount', function() {
        it('should call annuityCalculatorDepositAmount successfully', function(done) {
          // TODO: uncomment, update parameter values for annuityCalculatorDepositAmount call and complete the assertions
          /*
          var annuityCalculatorDepositAmountRequest = new HydrogenProtonApi.AnnuityCalculatorDepositAmountRequest();
          annuityCalculatorDepositAmountRequest.inflationRate = 0.0;
          annuityCalculatorDepositAmountRequest.annuityFrequencyInterval = "year";
          annuityCalculatorDepositAmountRequest.depositSchedule = new HydrogenProtonApi.AnnuityDepositSchedule();
          annuityCalculatorDepositAmountRequest.depositSchedule.depositAmount = 0.0;
          annuityCalculatorDepositAmountRequest.depositSchedule.adjustDepositForInflation = false;
          annuityCalculatorDepositAmountRequest.depositSchedule.depositFrequencyInterval = "year";
          annuityCalculatorDepositAmountRequest.portfolioReturn = 0.0;
          annuityCalculatorDepositAmountRequest.createLog = false;
          annuityCalculatorDepositAmountRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorDepositAmountRequest.initialBalance = 0.0;
          annuityCalculatorDepositAmountRequest.decumulationHorizon = 0;
          annuityCalculatorDepositAmountRequest.taxRate = 0.0;
          annuityCalculatorDepositAmountRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorDepositAmountRequest.annuityAmount = 0.0;
          annuityCalculatorDepositAmountRequest.accumulationHorizon = 0;

          instance.annuityCalculatorDepositAmount(annuityCalculatorDepositAmountRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('annuityCalculatorInitialBalance', function() {
        it('should call annuityCalculatorInitialBalance successfully', function(done) {
          // TODO: uncomment, update parameter values for annuityCalculatorInitialBalance call and complete the assertions
          /*
          var annuityCalculatorInitialBalanceRequest = new HydrogenProtonApi.AnnuityCalculatorInitialBalanceRequest();
          annuityCalculatorInitialBalanceRequest.inflationRate = 0.0;
          annuityCalculatorInitialBalanceRequest.annuityFrequencyInterval = "year";
          annuityCalculatorInitialBalanceRequest.depositSchedule = new HydrogenProtonApi.AnnuityDepositSchedule();
          annuityCalculatorInitialBalanceRequest.depositSchedule.depositAmount = 0.0;
          annuityCalculatorInitialBalanceRequest.depositSchedule.adjustDepositForInflation = false;
          annuityCalculatorInitialBalanceRequest.depositSchedule.depositFrequencyInterval = "year";
          annuityCalculatorInitialBalanceRequest.portfolioReturn = 0.0;
          annuityCalculatorInitialBalanceRequest.createLog = false;
          annuityCalculatorInitialBalanceRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorInitialBalanceRequest.initialBalance = 0.0;
          annuityCalculatorInitialBalanceRequest.decumulationHorizon = 0;
          annuityCalculatorInitialBalanceRequest.taxRate = 0.0;
          annuityCalculatorInitialBalanceRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          annuityCalculatorInitialBalanceRequest.annuityAmount = 0.0;
          annuityCalculatorInitialBalanceRequest.accumulationHorizon = 0;

          instance.annuityCalculatorInitialBalance(annuityCalculatorInitialBalanceRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('variableAnnuity', function() {
        it('should call variableAnnuity successfully', function(done) {
          // TODO: uncomment, update parameter values for variableAnnuity call and complete the assertions
          /*
          var variableAnnuityRequest = new HydrogenProtonApi.VariableAnnuityRequest();
          variableAnnuityRequest.guaranteedAccumulationBenefit = 0.0;
          variableAnnuityRequest.p = ;
          variableAnnuityRequest.aggregationAccountId = """00000000-0000-0000-0000-000000000000";
          variableAnnuityRequest.allocationId = """00000000-0000-0000-0000-000000000000";
          variableAnnuityRequest.portfolioWeights = [0.0];
          variableAnnuityRequest.endDate = "";
          variableAnnuityRequest.n = 0;
          variableAnnuityRequest.accountId = """00000000-0000-0000-0000-000000000000";
          variableAnnuityRequest.portfolioTickers = [""];
          variableAnnuityRequest.initialBalance = 0.0;
          variableAnnuityRequest.removeOutliers = false;
          variableAnnuityRequest.modelId = """00000000-0000-0000-0000-000000000000";
          variableAnnuityRequest.guaranteedRateBenefit = [new HydrogenProtonApi.GuaranteedRateBenefit()];
          variableAnnuityRequest.guaranteedRateBenefit[0].maxRate = 0.0;
          variableAnnuityRequest.guaranteedRateBenefit[0].endPeriod = 0;
          variableAnnuityRequest.guaranteedRateBenefit[0].minRate = 0.0;
          variableAnnuityRequest.guaranteedRateBenefit[0].startPeriod = 0;
          variableAnnuityRequest.depositSchedule = new HydrogenProtonApi.AnnuityDepositSchedule();
          variableAnnuityRequest.depositSchedule.depositAmount = 0.0;
          variableAnnuityRequest.depositSchedule.adjustDepositForInflation = false;
          variableAnnuityRequest.depositSchedule.depositFrequencyInterval = "year";
          variableAnnuityRequest.useProxyData = false;
          variableAnnuityRequest.accumulationHorizon = 0;
          variableAnnuityRequest.inflationRate = 0.0;
          variableAnnuityRequest.annuitizationRate = 0.0;
          variableAnnuityRequest.resultType = "mean";
          variableAnnuityRequest.startDate = "";
          variableAnnuityRequest.portfolioId = """00000000-0000-0000-0000-000000000000";
          variableAnnuityRequest.marketDataSource = "nucleus";
          variableAnnuityRequest.tradingDaysPerYear = 0;
          variableAnnuityRequest.frequencyInterval = "year";
          variableAnnuityRequest.createLog = false;
          variableAnnuityRequest.decumulationHorizon = 0;
          variableAnnuityRequest.taxRate = 0.0;

          instance.variableAnnuity(variableAnnuityRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
