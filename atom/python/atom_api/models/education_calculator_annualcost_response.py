# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.education_calculator_return_detail import EducationCalculatorReturnDetail  # noqa: F401,E501


class EducationCalculatorAnnualcostResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_annual_cost': 'float',
        'total_cost': 'float',
        'return_details': 'dict(str, EducationCalculatorReturnDetail)'
    }

    attribute_map = {
        'total_annual_cost': 'total_annual_cost',
        'total_cost': 'total_cost',
        'return_details': 'return_details'
    }

    def __init__(self, total_annual_cost=None, total_cost=None, return_details=None):  # noqa: E501
        """EducationCalculatorAnnualcostResponse - a model defined in Swagger"""  # noqa: E501

        self._total_annual_cost = None
        self._total_cost = None
        self._return_details = None
        self.discriminator = None

        self.total_annual_cost = total_annual_cost
        self.total_cost = total_cost
        self.return_details = return_details

    @property
    def total_annual_cost(self):
        """Gets the total_annual_cost of this EducationCalculatorAnnualcostResponse.  # noqa: E501

        The total education cost per year that can be afforded, represented in today’s dollars.  # noqa: E501

        :return: The total_annual_cost of this EducationCalculatorAnnualcostResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_annual_cost

    @total_annual_cost.setter
    def total_annual_cost(self, total_annual_cost):
        """Sets the total_annual_cost of this EducationCalculatorAnnualcostResponse.

        The total education cost per year that can be afforded, represented in today’s dollars.  # noqa: E501

        :param total_annual_cost: The total_annual_cost of this EducationCalculatorAnnualcostResponse.  # noqa: E501
        :type: float
        """
        if total_annual_cost is None:
            raise ValueError("Invalid value for `total_annual_cost`, must not be `None`")  # noqa: E501
        if total_annual_cost is not None and total_annual_cost < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_annual_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_annual_cost = total_annual_cost

    @property
    def total_cost(self):
        """Gets the total_cost of this EducationCalculatorAnnualcostResponse.  # noqa: E501

        The total cost of education over the decumulation horizon, represented in future dollars.  # noqa: E501

        :return: The total_cost of this EducationCalculatorAnnualcostResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this EducationCalculatorAnnualcostResponse.

        The total cost of education over the decumulation horizon, represented in future dollars.  # noqa: E501

        :param total_cost: The total_cost of this EducationCalculatorAnnualcostResponse.  # noqa: E501
        :type: float
        """
        if total_cost is None:
            raise ValueError("Invalid value for `total_cost`, must not be `None`")  # noqa: E501
        if total_cost is not None and total_cost < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_cost = total_cost

    @property
    def return_details(self):
        """Gets the return_details of this EducationCalculatorAnnualcostResponse.  # noqa: E501


        :return: The return_details of this EducationCalculatorAnnualcostResponse.  # noqa: E501
        :rtype: dict(str, EducationCalculatorReturnDetail)
        """
        return self._return_details

    @return_details.setter
    def return_details(self, return_details):
        """Sets the return_details of this EducationCalculatorAnnualcostResponse.


        :param return_details: The return_details of this EducationCalculatorAnnualcostResponse.  # noqa: E501
        :type: dict(str, EducationCalculatorReturnDetail)
        """
        if return_details is None:
            raise ValueError("Invalid value for `return_details`, must not be `None`")  # noqa: E501

        self._return_details = return_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EducationCalculatorAnnualcostResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EducationCalculatorAnnualcostResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
